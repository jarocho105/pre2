/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.cartera.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.cartera.util.ServicioTransporteConstantesFunciones;
import com.bydan.erp.cartera.util.ServicioTransporteParameterReturnGeneral;
//import com.bydan.erp.cartera.util.ServicioTransporteParameterGeneral;
//import com.bydan.erp.cartera.presentation.report.source.ServicioTransporteBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.cartera.resources.reportes.AuxiliarReportes;


import com.bydan.erp.cartera.util.*;
import com.bydan.erp.cartera.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.activosfijos.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.cartera.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.activosfijos.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.activosfijos.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.activosfijos.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.activosfijos.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.activosfijos.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ServicioTransporteBeanSwingJInternalFrame extends ServicioTransporteJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ServicioTransporteBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ServicioTransporte> serviciotransporteValidator = new ClassValidator<ServicioTransporte>(ServicioTransporte.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ServicioTransporte serviciotransporte;	
	public ServicioTransporte serviciotransporteAux;
	public ServicioTransporte serviciotransporteAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ServicioTransporte serviciotransporteTotales;
	public Long idServicioTransporteActual;
	public Long iIdNuevoServicioTransporte=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboClienteProveedor="";

	public List<Cliente> clienteproveedorsForeignKey;

	public List<Cliente> getclienteproveedorsForeignKey() {
		return clienteproveedorsForeignKey;
	}

	public void setclienteproveedorsForeignKey(List<Cliente> clienteproveedorsForeignKey) {
		this.clienteproveedorsForeignKey = clienteproveedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteproveedorForeignKey;

	public Cliente getclienteproveedorForeignKey() {
		return clienteproveedorForeignKey;
	}

	public void setclienteproveedorForeignKey(Cliente clienteproveedorForeignKey) {
		this.clienteproveedorForeignKey = clienteproveedorForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

	public String sFinalQueryComboVehiculo="";

	public List<Vehiculo> vehiculosForeignKey;

	public List<Vehiculo> getvehiculosForeignKey() {
		return vehiculosForeignKey;
	}

	public void setvehiculosForeignKey(List<Vehiculo> vehiculosForeignKey) {
		this.vehiculosForeignKey = vehiculosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vehiculo vehiculoForeignKey;

	public Vehiculo getvehiculoForeignKey() {
		return vehiculoForeignKey;
	}

	public void setvehiculoForeignKey(Vehiculo vehiculoForeignKey) {
		this.vehiculoForeignKey = vehiculoForeignKey;
	}

	public String sFinalQueryComboRutaTransporte="";

	public List<RutaTransporte> rutatransportesForeignKey;

	public List<RutaTransporte> getrutatransportesForeignKey() {
		return rutatransportesForeignKey;
	}

	public void setrutatransportesForeignKey(List<RutaTransporte> rutatransportesForeignKey) {
		this.rutatransportesForeignKey = rutatransportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public RutaTransporte rutatransporteForeignKey;

	public RutaTransporte getrutatransporteForeignKey() {
		return rutatransporteForeignKey;
	}

	public void setrutatransporteForeignKey(RutaTransporte rutatransporteForeignKey) {
		this.rutatransporteForeignKey = rutatransporteForeignKey;
	}

	public String sFinalQueryComboDetalleActivoFijo="";

	public List<DetalleActivoFijo> detalleactivofijosForeignKey;

	public List<DetalleActivoFijo> getdetalleactivofijosForeignKey() {
		return detalleactivofijosForeignKey;
	}

	public void setdetalleactivofijosForeignKey(List<DetalleActivoFijo> detalleactivofijosForeignKey) {
		this.detalleactivofijosForeignKey = detalleactivofijosForeignKey;
	}

	//OBJETO FK ACTUAL
	public DetalleActivoFijo detalleactivofijoForeignKey;

	public DetalleActivoFijo getdetalleactivofijoForeignKey() {
		return detalleactivofijoForeignKey;
	}

	public void setdetalleactivofijoForeignKey(DetalleActivoFijo detalleactivofijoForeignKey) {
		this.detalleactivofijoForeignKey = detalleactivofijoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idClienteProveedorActual=0L;

	public Long getidClienteProveedorActual() {
		return idClienteProveedorActual;
	}

	public void setidClienteProveedorActual(Long idClienteProveedorActual) {
		this.idClienteProveedorActual= idClienteProveedorActual;
	}
	
	

	public Boolean isTienePermisosDetalleServicioTransporte=false;

	public Boolean getIsTienePermisosDetalleServicioTransporte() {
		return isTienePermisosDetalleServicioTransporte;
	}

	public void setIsTienePermisosDetalleServicioTransporte(Boolean isTienePermisosDetalleServicioTransporte) {
		this.isTienePermisosDetalleServicioTransporte= isTienePermisosDetalleServicioTransporte;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoServicioTransporte;
	public Boolean isPermisoNuevoServicioTransporte;
	public Boolean isPermisoActualizarServicioTransporte;
	public Boolean isPermisoActualizarOriginalServicioTransporte;
	public Boolean isPermisoEliminarServicioTransporte;
	public Boolean isPermisoGuardarCambiosServicioTransporte;
	public Boolean isPermisoConsultaServicioTransporte;
	public Boolean isPermisoBusquedaServicioTransporte;
	public Boolean isPermisoReporteServicioTransporte;
	public Boolean isPermisoPaginacionMedioServicioTransporte;
	public Boolean isPermisoPaginacionAltoServicioTransporte;
	public Boolean isPermisoPaginacionTodoServicioTransporte;
	public Boolean isPermisoCopiarServicioTransporte;
	public Boolean isPermisoVerFormServicioTransporte;
	public Boolean isPermisoDuplicarServicioTransporte;
	public Boolean isPermisoOrdenServicioTransporte;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ServicioTransporteParameterReturnGeneral serviciotransporteReturnGeneral;
	public ServicioTransporteParameterReturnGeneral serviciotransporteParameterGeneral;
	
	

	public DetalleServicioTransporteLogic detalleserviciotransporteLogic=null;

	public DetalleServicioTransporteLogic getDetalleServicioTransporteLogic() {
		return detalleserviciotransporteLogic;
	}

	public void setDetalleServicioTransporteLogic(DetalleServicioTransporteLogic detalleserviciotransporteLogic) {
		this.detalleserviciotransporteLogic = detalleserviciotransporteLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoServicioTransporte=false;
	public Boolean esParaAccionDesdeFormularioServicioTransporte=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ServicioTransporteSessionBeanAdditional serviciotransporteSessionBeanAdditional=null;
	
	public ServicioTransporteSessionBeanAdditional getServicioTransporteSessionBeanAdditional() {
		return this.serviciotransporteSessionBeanAdditional;
	}
	
	public void setServicioTransporteSessionBeanAdditional(ServicioTransporteSessionBeanAdditional serviciotransporteSessionBeanAdditional) {
		try {
			this.serviciotransporteSessionBeanAdditional=serviciotransporteSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ServicioTransporteBeanSwingJInternalFrameAdditional serviciotransporteBeanSwingJInternalFrameAdditional=null;
	//public class ServicioTransporteBeanSwingJInternalFrame
	
	public ServicioTransporteBeanSwingJInternalFrameAdditional getServicioTransporteBeanSwingJInternalFrameAdditional() {
		return this.serviciotransporteBeanSwingJInternalFrameAdditional;
	}
	
	public void setServicioTransporteBeanSwingJInternalFrameAdditional(ServicioTransporteBeanSwingJInternalFrameAdditional serviciotransporteBeanSwingJInternalFrameAdditional) {
		try {
			this.serviciotransporteBeanSwingJInternalFrameAdditional=serviciotransporteBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ServicioTransporteLogic serviciotransporteLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ServicioTransporte serviciotransporteBean;
	public ServicioTransporteConstantesFunciones serviciotransporteConstantesFunciones;
	//public ServicioTransporteParameterReturnGeneral serviciotransporteReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public ClienteLogic clienteLogic;
	public ClienteLogic clienteproveedorLogic;
	public TransportistaLogic transportistaLogic;
	public VehiculoLogic vehiculoLogic;
	public RutaTransporteLogic rutatransporteLogic;
	public DetalleActivoFijoLogic detalleactivofijoLogic;
	
	//PARAMETROS
	
	
	//public List<ServicioTransporte> serviciotransportes;	
	//public List<ServicioTransporte> serviciotransportesEliminados;
	//public List<ServicioTransporte> serviciotransportesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoServicioTransporte=false;
	public Boolean isVisibilidadCeldaDuplicarServicioTransporte=true;
	public Boolean isVisibilidadCeldaCopiarServicioTransporte=true;
	public Boolean isVisibilidadCeldaVerFormServicioTransporte=true;
	public Boolean isVisibilidadCeldaOrdenServicioTransporte=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
	public Boolean isVisibilidadCeldaModificarServicioTransporte=false;
	public Boolean isVisibilidadCeldaActualizarServicioTransporte=false;
	public Boolean isVisibilidadCeldaEliminarServicioTransporte=false;
	public Boolean isVisibilidadCeldaCancelarServicioTransporte=false;
	public Boolean isVisibilidadCeldaGuardarServicioTransporte=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosServicioTransporte=false;	
	
	
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdClienteProveedor=false;
	public Boolean isVisibilidadFK_IdDetalleActivoFijo=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdRutaTransporte=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdVehiculo=false;
	
	public Long getiIdNuevoServicioTransporte() {
		return this.iIdNuevoServicioTransporte;
	}

	public void setiIdNuevoServicioTransporte(Long iIdNuevoServicioTransporte) {
		this.iIdNuevoServicioTransporte = iIdNuevoServicioTransporte;
	}
	
	public Long getidServicioTransporteActual() {
		return this.idServicioTransporteActual;
	}

	public void setidServicioTransporteActual(Long idServicioTransporteActual) {
		this.idServicioTransporteActual = idServicioTransporteActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ServicioTransporte getserviciotransporte() {
		return this.serviciotransporte;
	}

	public void setserviciotransporte(ServicioTransporte serviciotransporte) {
		this.serviciotransporte = serviciotransporte;
	}
	
	public ServicioTransporte getserviciotransporteAux() {
		return this.serviciotransporteAux;
	}

	public void setserviciotransporteAux(ServicioTransporte serviciotransporteAux) {
		this.serviciotransporteAux = serviciotransporteAux;
	}				
	
	public ServicioTransporte getserviciotransporteAnterior() {
		return this.serviciotransporteAnterior;
	}

	public void setserviciotransporteAnterior(ServicioTransporte serviciotransporteAnterior) {
		this.serviciotransporteAnterior = serviciotransporteAnterior;
	}	
	
	public ServicioTransporte getserviciotransporteTotales() {
		return this.serviciotransporteTotales;
	}

	public void setserviciotransporteTotales(ServicioTransporte serviciotransporteTotales) {
		this.serviciotransporteTotales = serviciotransporteTotales;
	}	
	
	public ServicioTransporte getserviciotransporteBean() {
		return this.serviciotransporteBean;
	}

	public void setserviciotransporteBean(ServicioTransporte serviciotransporteBean) {
		this.serviciotransporteBean = serviciotransporteBean;
	}	
	
	public ServicioTransporteParameterReturnGeneral getserviciotransporteReturnGeneral() {
		return this.serviciotransporteReturnGeneral;
	}

	public void setserviciotransporteReturnGeneral(ServicioTransporteParameterReturnGeneral serviciotransporteReturnGeneral) {
		this.serviciotransporteReturnGeneral = serviciotransporteReturnGeneral;
	}	
	
	
	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_cliente_proveedorFK_IdClienteProveedor=-1L;

	public Long getid_cliente_proveedorFK_IdClienteProveedor() {
		return this.id_cliente_proveedorFK_IdClienteProveedor;
	}

	public void setid_cliente_proveedorFK_IdClienteProveedor(Long id_cliente_proveedorFK_IdClienteProveedor) {
		this.id_cliente_proveedorFK_IdClienteProveedor = id_cliente_proveedorFK_IdClienteProveedor;
	}

	public Long id_detalle_activo_fijoFK_IdDetalleActivoFijo=-1L;

	public Long getid_detalle_activo_fijoFK_IdDetalleActivoFijo() {
		return this.id_detalle_activo_fijoFK_IdDetalleActivoFijo;
	}

	public void setid_detalle_activo_fijoFK_IdDetalleActivoFijo(Long id_detalle_activo_fijoFK_IdDetalleActivoFijo) {
		this.id_detalle_activo_fijoFK_IdDetalleActivoFijo = id_detalle_activo_fijoFK_IdDetalleActivoFijo;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_ruta_transporteFK_IdRutaTransporte=-1L;

	public Long getid_ruta_transporteFK_IdRutaTransporte() {
		return this.id_ruta_transporteFK_IdRutaTransporte;
	}

	public void setid_ruta_transporteFK_IdRutaTransporte(Long id_ruta_transporteFK_IdRutaTransporte) {
		this.id_ruta_transporteFK_IdRutaTransporte = id_ruta_transporteFK_IdRutaTransporte;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_transportistaFK_IdTransportista=-1L;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_vehiculoFK_IdVehiculo=-1L;

	public Long getid_vehiculoFK_IdVehiculo() {
		return this.id_vehiculoFK_IdVehiculo;
	}

	public void setid_vehiculoFK_IdVehiculo(Long id_vehiculoFK_IdVehiculo) {
		this.id_vehiculoFK_IdVehiculo = id_vehiculoFK_IdVehiculo;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ServicioTransporteLogic getServicioTransporteLogic()	{		
		return serviciotransporteLogic;
	}

	public void setServicioTransporteLogic(ServicioTransporteLogic serviciotransporteLogic) {
		this.serviciotransporteLogic = serviciotransporteLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoServicioTransporte() {
		return isEsNuevoServicioTransporte;
	}

	public void setIsEsNuevoServicioTransporte(Boolean isEsNuevoServicioTransporte) {
		this.isEsNuevoServicioTransporte = isEsNuevoServicioTransporte;
	}

	public Boolean getEsParaAccionDesdeFormularioServicioTransporte() {
		return esParaAccionDesdeFormularioServicioTransporte;
	}
	
	public void setEsParaAccionDesdeFormularioServicioTransporte(Boolean esParaAccionDesdeFormularioServicioTransporte) {
		this.esParaAccionDesdeFormularioServicioTransporte = esParaAccionDesdeFormularioServicioTransporte;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClienteProveedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clienteproveedorsForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionClienteProveedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteproveedorLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clienteproveedorsForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaClienteProveedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidClienteProveedorActual());
					this.clienteproveedorsForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVehiculosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vehiculosForeignKey=new ArrayList<Vehiculo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			VehiculoLogic vehiculoLogic=new VehiculoLogic();

			//vehiculoLogic.getVehiculoDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionVehiculo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vehiculoLogic.getVehiculoDataAccess().setIsForForeingKeyData(true);

					vehiculoLogic.getTodosVehiculosWithConnection(sFinalQuery,new Pagination());

					this.vehiculosForeignKey=vehiculoLogic.getVehiculos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVehiculo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vehiculoLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidVehiculoActual());
					this.vehiculosForeignKey.add(vehiculoLogic.getVehiculo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosRutaTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.rutatransportesForeignKey=new ArrayList<RutaTransporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			RutaTransporteLogic rutatransporteLogic=new RutaTransporteLogic();

			//rutatransporteLogic.getRutaTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionRutaTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//rutatransporteLogic.getRutaTransporteDataAccess().setIsForForeingKeyData(true);

					rutatransporteLogic.getTodosRutaTransportesWithConnection(sFinalQuery,new Pagination());

					this.rutatransportesForeignKey=rutatransporteLogic.getRutaTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaRutaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					rutatransporteLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidRutaTransporteActual());
					this.rutatransportesForeignKey.add(rutatransporteLogic.getRutaTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosDetalleActivoFijosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.detalleactivofijosForeignKey=new ArrayList<DetalleActivoFijo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			DetalleActivoFijoLogic detalleactivofijoLogic=new DetalleActivoFijoLogic();

			//detalleactivofijoLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//detalleactivofijoLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

					detalleactivofijoLogic.getTodosDetalleActivoFijosWithConnection(sFinalQuery,new Pagination());

					this.detalleactivofijosForeignKey=detalleactivofijoLogic.getDetalleActivoFijos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaDetalleActivoFijo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleactivofijoLogic.getEntityWithConnection(serviciotransporteSessionBean.getlidDetalleActivoFijoActual());
					this.detalleactivofijosForeignKey.add(detalleactivofijoLogic.getDetalleActivoFijo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaServicioTransporte.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaServicioTransporteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaServicioTransporteGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaServicioTransporteGenerico!=null && jComboBoxid_empresaServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_empresaServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalServicioTransporte.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalServicioTransporteGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalServicioTransporteGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalServicioTransporteGenerico!=null && jComboBoxid_sucursalServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_sucursalServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioServicioTransporte.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioServicioTransporteGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioServicioTransporteGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioServicioTransporteGenerico!=null && jComboBoxid_ejercicioServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoServicioTransporte.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoServicioTransporteGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoServicioTransporteGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoServicioTransporteGenerico!=null && jComboBoxid_periodoServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_periodoServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteServicioTransporte.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteServicioTransporte!=null) {
						jComboBoxid_clienteFK_IdClienteServicioTransporte.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteServicioTransporte!=null) {
							//jComboBoxid_clienteFK_IdClienteServicioTransporte.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteServicioTransporte.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteServicioTransporteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteServicioTransporteGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteServicioTransporteGenerico!=null && jComboBoxid_clienteServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_clienteServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteProveedorForeignKey(Long idClienteProveedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteproveedorTemp=null;

			for(Cliente clienteproveedorAux:clienteproveedorsForeignKey) {
				if(clienteproveedorAux.getId()!=null && clienteproveedorAux.getId().equals(idClienteProveedorSeleccionado)) {
					clienteproveedorTemp=clienteproveedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteproveedorTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setClienteProveedor(clienteproveedorTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setSelectedItem(clienteproveedorTemp);
					}
				} else {
					//jComboBoxid_cliente_proveedorServicioTransporte.setSelectedItem(clienteproveedorTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdClienteProveedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteproveedorTemp!=null && jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte!=null) {
						jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.setSelectedItem(clienteproveedorTemp);
					} else {
						if(jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte!=null) {
							//jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.setSelectedItem(clienteproveedorTemp);
							if(jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.getItemCount()>0) {
								jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteProveedorForeignKeyDescripcion(Long idClienteProveedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteproveedorTemp=null;

			for(Cliente clienteproveedorAux:clienteproveedorsForeignKey) {
				if(clienteproveedorAux.getId()!=null && clienteproveedorAux.getId().equals(idClienteProveedorSeleccionado)) {
					clienteproveedorTemp=clienteproveedorAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteproveedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteProveedorForeignKeyGenerico(Long idClienteProveedorSeleccionado,JComboBox jComboBoxid_cliente_proveedorServicioTransporteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteproveedorTemp=null;

			for(Cliente clienteproveedorAux:clienteproveedorsForeignKey) {
				if(clienteproveedorAux.getId()!=null && clienteproveedorAux.getId().equals(idClienteProveedorSeleccionado)) {
					clienteproveedorTemp=clienteproveedorAux;
					break;
				}
			}

			if(clienteproveedorTemp!=null) {
				jComboBoxid_cliente_proveedorServicioTransporteGenerico.setSelectedItem(clienteproveedorTemp);
			} else {
				if(jComboBoxid_cliente_proveedorServicioTransporteGenerico!=null && jComboBoxid_cliente_proveedorServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_cliente_proveedorServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaServicioTransporte.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){
					if(transportistaTemp!=null && jComboBoxid_transportistaFK_IdTransportistaServicioTransporte!=null) {
						jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.setSelectedItem(transportistaTemp);
					} else {
						if(jComboBoxid_transportistaFK_IdTransportistaServicioTransporte!=null) {
							//jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.setSelectedItem(transportistaTemp);
							if(jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.getItemCount()>0) {
								jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaServicioTransporteGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaServicioTransporteGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaServicioTransporteGenerico!=null && jComboBoxid_transportistaServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_transportistaServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVehiculoForeignKey(Long idVehiculoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vehiculo  vehiculoTemp=null;

			for(Vehiculo vehiculoAux:vehiculosForeignKey) {
				if(vehiculoAux.getId()!=null && vehiculoAux.getId().equals(idVehiculoSeleccionado)) {
					vehiculoTemp=vehiculoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vehiculoTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setVehiculo(vehiculoTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setSelectedItem(vehiculoTemp);
					}
				} else {
					//jComboBoxid_vehiculoServicioTransporte.setSelectedItem(vehiculoTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVehiculo") || sFormularioTipoBusqueda.equals("Todos")){
					if(vehiculoTemp!=null && jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte!=null) {
						jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.setSelectedItem(vehiculoTemp);
					} else {
						if(jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte!=null) {
							//jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.setSelectedItem(vehiculoTemp);
							if(jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.getItemCount()>0) {
								jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVehiculoForeignKeyDescripcion(Long idVehiculoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vehiculo  vehiculoTemp=null;

			for(Vehiculo vehiculoAux:vehiculosForeignKey) {
				if(vehiculoAux.getId()!=null && vehiculoAux.getId().equals(idVehiculoSeleccionado)) {
					vehiculoTemp=vehiculoAux;
					break;
				}
			}


			sDescripcion=VehiculoConstantesFunciones.getVehiculoDescripcion(vehiculoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVehiculoForeignKeyGenerico(Long idVehiculoSeleccionado,JComboBox jComboBoxid_vehiculoServicioTransporteGenerico)throws Exception
	{
		try
		{
			Vehiculo  vehiculoTemp=null;

			for(Vehiculo vehiculoAux:vehiculosForeignKey) {
				if(vehiculoAux.getId()!=null && vehiculoAux.getId().equals(idVehiculoSeleccionado)) {
					vehiculoTemp=vehiculoAux;
					break;
				}
			}

			if(vehiculoTemp!=null) {
				jComboBoxid_vehiculoServicioTransporteGenerico.setSelectedItem(vehiculoTemp);
			} else {
				if(jComboBoxid_vehiculoServicioTransporteGenerico!=null && jComboBoxid_vehiculoServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_vehiculoServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualRutaTransporteForeignKey(Long idRutaTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			RutaTransporte  rutatransporteTemp=null;

			for(RutaTransporte rutatransporteAux:rutatransportesForeignKey) {
				if(rutatransporteAux.getId()!=null && rutatransporteAux.getId().equals(idRutaTransporteSeleccionado)) {
					rutatransporteTemp=rutatransporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(rutatransporteTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setRutaTransporte(rutatransporteTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setSelectedItem(rutatransporteTemp);
					}
				} else {
					//jComboBoxid_ruta_transporteServicioTransporte.setSelectedItem(rutatransporteTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdRutaTransporte") || sFormularioTipoBusqueda.equals("Todos")){
					if(rutatransporteTemp!=null && jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte!=null) {
						jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.setSelectedItem(rutatransporteTemp);
					} else {
						if(jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte!=null) {
							//jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.setSelectedItem(rutatransporteTemp);
							if(jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.getItemCount()>0) {
								jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualRutaTransporteForeignKeyDescripcion(Long idRutaTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			RutaTransporte  rutatransporteTemp=null;

			for(RutaTransporte rutatransporteAux:rutatransportesForeignKey) {
				if(rutatransporteAux.getId()!=null && rutatransporteAux.getId().equals(idRutaTransporteSeleccionado)) {
					rutatransporteTemp=rutatransporteAux;
					break;
				}
			}


			sDescripcion=RutaTransporteConstantesFunciones.getRutaTransporteDescripcion(rutatransporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualRutaTransporteForeignKeyGenerico(Long idRutaTransporteSeleccionado,JComboBox jComboBoxid_ruta_transporteServicioTransporteGenerico)throws Exception
	{
		try
		{
			RutaTransporte  rutatransporteTemp=null;

			for(RutaTransporte rutatransporteAux:rutatransportesForeignKey) {
				if(rutatransporteAux.getId()!=null && rutatransporteAux.getId().equals(idRutaTransporteSeleccionado)) {
					rutatransporteTemp=rutatransporteAux;
					break;
				}
			}

			if(rutatransporteTemp!=null) {
				jComboBoxid_ruta_transporteServicioTransporteGenerico.setSelectedItem(rutatransporteTemp);
			} else {
				if(jComboBoxid_ruta_transporteServicioTransporteGenerico!=null && jComboBoxid_ruta_transporteServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_ruta_transporteServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualDetalleActivoFijoForeignKey(Long idDetalleActivoFijoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoTemp=null;

			for(DetalleActivoFijo detalleactivofijoAux:detalleactivofijosForeignKey) {
				if(detalleactivofijoAux.getId()!=null && detalleactivofijoAux.getId().equals(idDetalleActivoFijoSeleccionado)) {
					detalleactivofijoTemp=detalleactivofijoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(detalleactivofijoTemp!=null) {

					if(this.serviciotransporte!=null) {
						this.serviciotransporte.setDetalleActivoFijo(detalleactivofijoTemp);
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedItem(detalleactivofijoTemp);
					}
				} else {
					//jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedItem(detalleactivofijoTemp);
					if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
						if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijo") || sFormularioTipoBusqueda.equals("Todos")){
					if(detalleactivofijoTemp!=null && jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte!=null) {
						jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.setSelectedItem(detalleactivofijoTemp);
					} else {
						if(jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte!=null) {
							//jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.setSelectedItem(detalleactivofijoTemp);
							if(jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.getItemCount()>0) {
								jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualDetalleActivoFijoForeignKeyDescripcion(Long idDetalleActivoFijoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			DetalleActivoFijo  detalleactivofijoTemp=null;

			for(DetalleActivoFijo detalleactivofijoAux:detalleactivofijosForeignKey) {
				if(detalleactivofijoAux.getId()!=null && detalleactivofijoAux.getId().equals(idDetalleActivoFijoSeleccionado)) {
					detalleactivofijoTemp=detalleactivofijoAux;
					break;
				}
			}


			sDescripcion=DetalleActivoFijoConstantesFunciones.getDetalleActivoFijoDescripcion(detalleactivofijoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualDetalleActivoFijoForeignKeyGenerico(Long idDetalleActivoFijoSeleccionado,JComboBox jComboBoxid_detalle_activo_fijoServicioTransporteGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoTemp=null;

			for(DetalleActivoFijo detalleactivofijoAux:detalleactivofijosForeignKey) {
				if(detalleactivofijoAux.getId()!=null && detalleactivofijoAux.getId().equals(idDetalleActivoFijoSeleccionado)) {
					detalleactivofijoTemp=detalleactivofijoAux;
					break;
				}
			}

			if(detalleactivofijoTemp!=null) {
				jComboBoxid_detalle_activo_fijoServicioTransporteGenerico.setSelectedItem(detalleactivofijoTemp);
			} else {
				if(jComboBoxid_detalle_activo_fijoServicioTransporteGenerico!=null && jComboBoxid_detalle_activo_fijoServicioTransporteGenerico.getItemCount()>0) {
					jComboBoxid_detalle_activo_fijoServicioTransporteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_empresaServicioTransporteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaServicioTransporteGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaServicioTransporteGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				serviciotransporte.setid_empresa(empresaAux.getId());
				serviciotransporte.setempresa_descripcion(ServicioTransporteConstantesFunciones.getEmpresaDescripcion(empresaAux));
				serviciotransporte.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_sucursalServicioTransporteGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalServicioTransporteGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalServicioTransporteGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				serviciotransporte.setid_sucursal(sucursalAux.getId());
				serviciotransporte.setsucursal_descripcion(ServicioTransporteConstantesFunciones.getSucursalDescripcion(sucursalAux));
				serviciotransporte.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_ejercicioServicioTransporteGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioServicioTransporteGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioServicioTransporteGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				serviciotransporte.setid_ejercicio(ejercicioAux.getId());
				serviciotransporte.setejercicio_descripcion(ServicioTransporteConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				serviciotransporte.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_periodoServicioTransporteGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoServicioTransporteGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoServicioTransporteGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				serviciotransporte.setid_periodo(periodoAux.getId());
				serviciotransporte.setperiodo_descripcion(ServicioTransporteConstantesFunciones.getPeriodoDescripcion(periodoAux));
				serviciotransporte.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_clienteServicioTransporteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteServicioTransporteGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteServicioTransporteGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				serviciotransporte.setid_cliente(clienteAux.getId());
				serviciotransporte.setcliente_descripcion(ServicioTransporteConstantesFunciones.getClienteDescripcion(clienteAux));
				serviciotransporte.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteProveedorForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_cliente_proveedorServicioTransporteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_cliente_proveedorServicioTransporteGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_cliente_proveedorServicioTransporteGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				serviciotransporte.setid_cliente_proveedor(clienteAux.getId());
				serviciotransporte.setclienteproveedor_descripcion(ServicioTransporteConstantesFunciones.getClienteProveedorDescripcion(clienteAux));
				serviciotransporte.setClienteProveedor(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_transportistaServicioTransporteGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaServicioTransporteGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaServicioTransporteGenerico.getSelectedItem();
			}

			if(transportistaAux!=null && transportistaAux.getId()!=null) {
				serviciotransporte.setid_transportista(transportistaAux.getId());
				serviciotransporte.settransportista_descripcion(ServicioTransporteConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				serviciotransporte.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVehiculoForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_vehiculoServicioTransporteGenerico)throws Exception
	{
		try
		{
			Vehiculo  vehiculoAux=new Vehiculo();

			if(jComboBoxid_vehiculoServicioTransporteGenerico==null) {
				vehiculoAux=(Vehiculo)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.getSelectedItem();
			} else {
				vehiculoAux=(Vehiculo)jComboBoxid_vehiculoServicioTransporteGenerico.getSelectedItem();
			}

			if(vehiculoAux!=null && vehiculoAux.getId()!=null) {
				serviciotransporte.setid_vehiculo(vehiculoAux.getId());
				serviciotransporte.setvehiculo_descripcion(ServicioTransporteConstantesFunciones.getVehiculoDescripcion(vehiculoAux));
				serviciotransporte.setVehiculo(vehiculoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarRutaTransporteForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_ruta_transporteServicioTransporteGenerico)throws Exception
	{
		try
		{
			RutaTransporte  rutatransporteAux=new RutaTransporte();

			if(jComboBoxid_ruta_transporteServicioTransporteGenerico==null) {
				rutatransporteAux=(RutaTransporte)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.getSelectedItem();
			} else {
				rutatransporteAux=(RutaTransporte)jComboBoxid_ruta_transporteServicioTransporteGenerico.getSelectedItem();
			}

			if(rutatransporteAux!=null && rutatransporteAux.getId()!=null) {
				serviciotransporte.setid_ruta_transporte(rutatransporteAux.getId());
				serviciotransporte.setrutatransporte_descripcion(ServicioTransporteConstantesFunciones.getRutaTransporteDescripcion(rutatransporteAux));
				serviciotransporte.setRutaTransporte(rutatransporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarDetalleActivoFijoForeignKey(ServicioTransporte serviciotransporte,JComboBox jComboBoxid_detalle_activo_fijoServicioTransporteGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoAux=new DetalleActivoFijo();

			if(jComboBoxid_detalle_activo_fijoServicioTransporteGenerico==null) {
				detalleactivofijoAux=(DetalleActivoFijo)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.getSelectedItem();
			} else {
				detalleactivofijoAux=(DetalleActivoFijo)jComboBoxid_detalle_activo_fijoServicioTransporteGenerico.getSelectedItem();
			}

			if(detalleactivofijoAux!=null && detalleactivofijoAux.getId()!=null) {
				serviciotransporte.setid_detalle_activo_fijo(detalleactivofijoAux.getId());
				serviciotransporte.setdetalleactivofijo_descripcion(ServicioTransporteConstantesFunciones.getDetalleActivoFijoDescripcion(detalleactivofijoAux));
				serviciotransporte.setDetalleActivoFijo(detalleactivofijoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteServicioTransporte.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteServicioTransporte.addItem(cliente);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClienteProveedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.removeAllItems();

							for(Cliente clienteproveedor:this.clienteproveedorsForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.addItem(clienteproveedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdClienteProveedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.removeAllItems();

							for(Cliente clienteproveedor:this.clienteproveedorsForeignKey) {
								this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.addItem(clienteproveedor);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.addItem(transportista);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVehiculosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVehiculo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.removeAllItems();

							for(Vehiculo vehiculo:this.vehiculosForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.addItem(vehiculo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVehiculo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.removeAllItems();

							for(Vehiculo vehiculo:this.vehiculosForeignKey) {
								this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.addItem(vehiculo);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameRutaTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingRutaTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.removeAllItems();

							for(RutaTransporte rutatransporte:this.rutatransportesForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.addItem(rutatransporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdRutaTransporte") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.removeAllItems();

							for(RutaTransporte rutatransporte:this.rutatransportesForeignKey) {
								this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.addItem(rutatransporte);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameDetalleActivoFijosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingDetalleActivoFijo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.removeAllItems();

							for(DetalleActivoFijo detalleactivofijo:this.detalleactivofijosForeignKey) {
								this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.addItem(detalleactivofijo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicioTransporte!=null) { 
					}

					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.removeAllItems();

							for(DetalleActivoFijo detalleactivofijo:this.detalleactivofijosForeignKey) {
								this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.addItem(detalleactivofijo);
							}
						}

						if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteServicioTransporte.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteProveedorForeignKey(Cliente clienteproveedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setSelectedItem(clienteproveedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.setSelectedItem(clienteproveedor);
						} else {
							this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.setSelectedItem(transportista);
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVehiculoForeignKey(Vehiculo vehiculo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setSelectedItem(vehiculo);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.setSelectedItem(vehiculo);
						} else {
							this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameRutaTransporteForeignKey(RutaTransporte rutatransporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setSelectedItem(rutatransporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.setSelectedItem(rutatransporte);
						} else {
							this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameDetalleActivoFijoForeignKey(DetalleActivoFijo detalleactivofijo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedItem(detalleactivofijo);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.setSelectedItem(detalleactivofijo);
						} else {
							this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesServicioTransporte() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ServicioTransporteConstantesFunciones.refrescarForeignKeysDescripcionesServicioTransporte(this.serviciotransporteLogic.getServicioTransportes());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ServicioTransporteConstantesFunciones.refrescarForeignKeysDescripcionesServicioTransporte(this.serviciotransportes);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Transportista.class));
		classes.add(new Classe(Vehiculo.class));
		classes.add(new Classe(RutaTransporte.class));
		classes.add(new Classe(DetalleActivoFijo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//serviciotransporteLogic.setServicioTransportes(this.serviciotransportes);
			serviciotransporteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ServicioTransporteParameterReturnGeneral getServicioTransporteParameterGeneral() {
		return this.serviciotransporteParameterGeneral;
	}
	
	public void setServicioTransporteParameterGeneral(ServicioTransporteParameterReturnGeneral serviciotransporteParameterGeneral) {
		this.serviciotransporteParameterGeneral = serviciotransporteParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoServicioTransporte() {
		return isPermisoTodoServicioTransporte;
	}

	public void setIsPermisoTodoServicioTransporte(Boolean isPermisoTodoServicioTransporte) {
		this.isPermisoTodoServicioTransporte = isPermisoTodoServicioTransporte;
	}

	public Boolean getIsPermisoNuevoServicioTransporte() {
		return isPermisoNuevoServicioTransporte;
	}

	public void setIsPermisoNuevoServicioTransporte(Boolean isPermisoNuevoServicioTransporte) {
		this.isPermisoNuevoServicioTransporte = isPermisoNuevoServicioTransporte;
	}

	public Boolean getIsPermisoActualizarServicioTransporte() {
		return isPermisoActualizarServicioTransporte;
	}

	public void setIsPermisoActualizarServicioTransporte(Boolean isPermisoActualizarServicioTransporte) {
		this.isPermisoActualizarServicioTransporte = isPermisoActualizarServicioTransporte;
	}

	public Boolean getIsPermisoEliminarServicioTransporte() {
		return isPermisoEliminarServicioTransporte;
	}

	public void setIsPermisoEliminarServicioTransporte(Boolean isPermisoEliminarServicioTransporte) {
		this.isPermisoEliminarServicioTransporte = isPermisoEliminarServicioTransporte;
	}

	public Boolean getIsPermisoGuardarCambiosServicioTransporte() {
		return isPermisoGuardarCambiosServicioTransporte;
	}

	public void setIsPermisoGuardarCambiosServicioTransporte(Boolean isPermisoGuardarCambiosServicioTransporte) {
		this.isPermisoGuardarCambiosServicioTransporte = isPermisoGuardarCambiosServicioTransporte;
	}
	
	public Boolean getIsPermisoConsultaServicioTransporte() {
		return isPermisoConsultaServicioTransporte;
	}

	public void setIsPermisoConsultaServicioTransporte(Boolean isPermisoConsultaServicioTransporte) {
		this.isPermisoConsultaServicioTransporte = isPermisoConsultaServicioTransporte;
	}

	public Boolean getIsPermisoBusquedaServicioTransporte() {
		return isPermisoBusquedaServicioTransporte;
	}

	public void setIsPermisoBusquedaServicioTransporte(Boolean isPermisoBusquedaServicioTransporte) {
		this.isPermisoBusquedaServicioTransporte = isPermisoBusquedaServicioTransporte;
	}

	public Boolean getIsPermisoReporteServicioTransporte() {
		return isPermisoReporteServicioTransporte;
	}

	public void setIsPermisoReporteServicioTransporte(Boolean isPermisoReporteServicioTransporte) {
		this.isPermisoReporteServicioTransporte = isPermisoReporteServicioTransporte;
	}
	
	public Boolean getIsPermisoPaginacionMedioServicioTransporte() {
		return isPermisoPaginacionMedioServicioTransporte;
	}

	public void setIsPermisoPaginacionMedioServicioTransporte(Boolean isPermisoPaginacionMedioServicioTransporte) {
		this.isPermisoPaginacionMedioServicioTransporte = isPermisoPaginacionMedioServicioTransporte;
	}
	
	public Boolean getIsPermisoPaginacionTodoServicioTransporte() {
		return isPermisoPaginacionTodoServicioTransporte;
	}

	public void setIsPermisoPaginacionTodoServicioTransporte(Boolean isPermisoPaginacionTodoServicioTransporte) {
		this.isPermisoPaginacionTodoServicioTransporte = isPermisoPaginacionTodoServicioTransporte;
	}
	
	public Boolean getIsPermisoPaginacionAltoServicioTransporte() {
		return isPermisoPaginacionAltoServicioTransporte;
	}

	public void setIsPermisoPaginacionAltoServicioTransporte(Boolean isPermisoPaginacionAltoServicioTransporte) {
		this.isPermisoPaginacionAltoServicioTransporte = isPermisoPaginacionAltoServicioTransporte;
	}
	
	public Boolean getIsPermisoCopiarServicioTransporte() {
		return isPermisoCopiarServicioTransporte;
	}

	public void setIsPermisoCopiarServicioTransporte(Boolean isPermisoCopiarServicioTransporte) {
		this.isPermisoCopiarServicioTransporte = isPermisoCopiarServicioTransporte;
	}
	
	public Boolean getIsPermisoVerFormServicioTransporte() {
		return isPermisoVerFormServicioTransporte;
	}

	public void setIsPermisoVerFormServicioTransporte(Boolean isPermisoVerFormServicioTransporte) {
		this.isPermisoVerFormServicioTransporte = isPermisoVerFormServicioTransporte;
	}
	
	public Boolean getIsPermisoDuplicarServicioTransporte() {
		return isPermisoDuplicarServicioTransporte;
	}

	public void setIsPermisoDuplicarServicioTransporte(Boolean isPermisoDuplicarServicioTransporte) {
		this.isPermisoDuplicarServicioTransporte = isPermisoDuplicarServicioTransporte;
	}
	
	public Boolean getIsPermisoOrdenServicioTransporte() {
		return isPermisoOrdenServicioTransporte;
	}

	public void setIsPermisoOrdenServicioTransporte(Boolean isPermisoOrdenServicioTransporte) {
		this.isPermisoOrdenServicioTransporte = isPermisoOrdenServicioTransporte;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoServicioTransporte() {
		return isVisibilidadCeldaNuevoServicioTransporte;
	}

	public void setIsVisibilidadCeldaNuevoServicioTransporte(Boolean isVisibilidadCeldaNuevoServicioTransporte) {
		this.isVisibilidadCeldaNuevoServicioTransporte = isVisibilidadCeldaNuevoServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarServicioTransporte() {
		return isVisibilidadCeldaDuplicarServicioTransporte;
	}

	public void setIsVisibilidadCeldaDuplicarServicioTransporte(Boolean isVisibilidadCeldaDuplicarServicioTransporte) {
		this.isVisibilidadCeldaDuplicarServicioTransporte = isVisibilidadCeldaDuplicarServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarServicioTransporte() {
		return isVisibilidadCeldaCopiarServicioTransporte;
	}

	public void setIsVisibilidadCeldaCopiarServicioTransporte(Boolean isVisibilidadCeldaCopiarServicioTransporte) {
		this.isVisibilidadCeldaCopiarServicioTransporte = isVisibilidadCeldaCopiarServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormServicioTransporte() {
		return isVisibilidadCeldaVerFormServicioTransporte;
	}

	public void setIsVisibilidadCeldaVerFormServicioTransporte(Boolean isVisibilidadCeldaVerFormServicioTransporte) {
		this.isVisibilidadCeldaVerFormServicioTransporte = isVisibilidadCeldaVerFormServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenServicioTransporte() {
		return isVisibilidadCeldaOrdenServicioTransporte;
	}

	public void setIsVisibilidadCeldaOrdenServicioTransporte(Boolean isVisibilidadCeldaOrdenServicioTransporte) {
		this.isVisibilidadCeldaOrdenServicioTransporte = isVisibilidadCeldaOrdenServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesServicioTransporte() {
		return isVisibilidadCeldaNuevoRelacionesServicioTransporte;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesServicioTransporte(Boolean isVisibilidadCeldaNuevoRelacionesServicioTransporte) {
		this.isVisibilidadCeldaNuevoRelacionesServicioTransporte = isVisibilidadCeldaNuevoRelacionesServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaModificarServicioTransporte() {
		return isVisibilidadCeldaModificarServicioTransporte;
	}

	public void setIsVisibilidadCeldaModificarServicioTransporte(Boolean isVisibilidadCeldaModificarServicioTransporte) {
		this.isVisibilidadCeldaModificarServicioTransporte = isVisibilidadCeldaModificarServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarServicioTransporte() {
		return isVisibilidadCeldaActualizarServicioTransporte;
	}

	public void setIsVisibilidadCeldaActualizarServicioTransporte(Boolean isVisibilidadCeldaActualizarServicioTransporte) {
		this.isVisibilidadCeldaActualizarServicioTransporte = isVisibilidadCeldaActualizarServicioTransporte;
	}

	public Boolean getIsVisibilidadCeldaEliminarServicioTransporte() {
		return isVisibilidadCeldaEliminarServicioTransporte;
	}

	public void setIsVisibilidadCeldaEliminarServicioTransporte(Boolean isVisibilidadCeldaEliminarServicioTransporte) {
		this.isVisibilidadCeldaEliminarServicioTransporte = isVisibilidadCeldaEliminarServicioTransporte;
	}

	public Boolean getIsVisibilidadCeldaCancelarServicioTransporte() {
		return isVisibilidadCeldaCancelarServicioTransporte;
	}

	public void setIsVisibilidadCeldaCancelarServicioTransporte(Boolean isVisibilidadCeldaCancelarServicioTransporte) {
		this.isVisibilidadCeldaCancelarServicioTransporte = isVisibilidadCeldaCancelarServicioTransporte;
	}

	public Boolean getIsVisibilidadCeldaGuardarServicioTransporte() {
		return isVisibilidadCeldaGuardarServicioTransporte;
	}

	public void setIsVisibilidadCeldaGuardarServicioTransporte(Boolean isVisibilidadCeldaGuardarServicioTransporte) {
		this.isVisibilidadCeldaGuardarServicioTransporte = isVisibilidadCeldaGuardarServicioTransporte;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosServicioTransporte() {
		return isVisibilidadCeldaGuardarCambiosServicioTransporte;
	}

	public void setIsVisibilidadCeldaGuardarCambiosServicioTransporte(Boolean isVisibilidadCeldaGuardarCambiosServicioTransporte) {
		this.isVisibilidadCeldaGuardarCambiosServicioTransporte = isVisibilidadCeldaGuardarCambiosServicioTransporte;
	}
		
	public ServicioTransporteSessionBean getserviciotransporteSessionBean() {
		return this.serviciotransporteSessionBean;
	}
	
	public void setserviciotransporteSessionBean(ServicioTransporteSessionBean serviciotransporteSessionBean) {
		this.serviciotransporteSessionBean=serviciotransporteSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdClienteProveedor() {
		return this.isVisibilidadFK_IdClienteProveedor;
	}

	public void setisVisibilidadFK_IdClienteProveedor(Boolean isVisibilidadFK_IdClienteProveedor) {
		this.isVisibilidadFK_IdClienteProveedor=isVisibilidadFK_IdClienteProveedor;
	}

	public Boolean getisVisibilidadFK_IdDetalleActivoFijo() {
		return this.isVisibilidadFK_IdDetalleActivoFijo;
	}

	public void setisVisibilidadFK_IdDetalleActivoFijo(Boolean isVisibilidadFK_IdDetalleActivoFijo) {
		this.isVisibilidadFK_IdDetalleActivoFijo=isVisibilidadFK_IdDetalleActivoFijo;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdRutaTransporte() {
		return this.isVisibilidadFK_IdRutaTransporte;
	}

	public void setisVisibilidadFK_IdRutaTransporte(Boolean isVisibilidadFK_IdRutaTransporte) {
		this.isVisibilidadFK_IdRutaTransporte=isVisibilidadFK_IdRutaTransporte;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdVehiculo() {
		return this.isVisibilidadFK_IdVehiculo;
	}

	public void setisVisibilidadFK_IdVehiculo(Boolean isVisibilidadFK_IdVehiculo) {
		this.isVisibilidadFK_IdVehiculo=isVisibilidadFK_IdVehiculo;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(ServicioTransporte serviciotransporte)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(serviciotransporte,null);
				this.setActualParaGuardarSucursalForeignKey(serviciotransporte,null);
				this.setActualParaGuardarEjercicioForeignKey(serviciotransporte,null);
				this.setActualParaGuardarPeriodoForeignKey(serviciotransporte,null);
				this.setActualParaGuardarClienteForeignKey(serviciotransporte,null);
				this.setActualParaGuardarClienteProveedorForeignKey(serviciotransporte,null);
				this.setActualParaGuardarTransportistaForeignKey(serviciotransporte,null);
				this.setActualParaGuardarVehiculoForeignKey(serviciotransporte,null);
				this.setActualParaGuardarRutaTransporteForeignKey(serviciotransporte,null);
				this.setActualParaGuardarDetalleActivoFijoForeignKey(serviciotransporte,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ServicioTransporte serviciotransporte,ServicioTransporte serviciotransporteAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalServicioTransporte(serviciotransporte);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		serviciotransporteAux.setId(serviciotransporte.getId());
		serviciotransporteAux.setVersionRow(serviciotransporte.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessServicioTransporte();
		
			int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = serviciotransporteValidator.getInvalidValues(this.serviciotransporte);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			serviciotransporteLogic.setDatosCliente(datosCliente);
			serviciotransporteLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				serviciotransporteAux=new  ServicioTransporte();
				
				serviciotransporteAux.setIsNew(true);
				serviciotransporteAux.setIsChanged(true);
				
				serviciotransporteAux.setServicioTransporteOriginal(this.serviciotransporte);
				
				serviciotransporteAux.setId(this.serviciotransporte.getId());	
				serviciotransporteAux.setVersionRow(this.serviciotransporte.getVersionRow());	
				serviciotransporteAux.setid_empresa(this.serviciotransporte.getid_empresa());	
				serviciotransporteAux.setid_sucursal(this.serviciotransporte.getid_sucursal());	
				serviciotransporteAux.setid_ejercicio(this.serviciotransporte.getid_ejercicio());	
				serviciotransporteAux.setid_periodo(this.serviciotransporte.getid_periodo());	
				serviciotransporteAux.setid_cliente(this.serviciotransporte.getid_cliente());	
				serviciotransporteAux.setid_cliente_proveedor(this.serviciotransporte.getid_cliente_proveedor());	
				serviciotransporteAux.setid_transportista(this.serviciotransporte.getid_transportista());	
				serviciotransporteAux.setid_vehiculo(this.serviciotransporte.getid_vehiculo());	
				serviciotransporteAux.setid_ruta_transporte(this.serviciotransporte.getid_ruta_transporte());	
				serviciotransporteAux.setid_detalle_activo_fijo(this.serviciotransporte.getid_detalle_activo_fijo());	
				serviciotransporteAux.setfecha_ingreso(this.serviciotransporte.getfecha_ingreso());	
				serviciotransporteAux.setfecha_entrega(this.serviciotransporte.getfecha_entrega());	
				serviciotransporteAux.setcodigo_guia1(this.serviciotransporte.getcodigo_guia1());	
				serviciotransporteAux.setcodigo_guia2(this.serviciotransporte.getcodigo_guia2());	
				serviciotransporteAux.setprecio(this.serviciotransporte.getprecio());	
				serviciotransporteAux.setvalor_iva(this.serviciotransporte.getvalor_iva());	
				serviciotransporteAux.setvalor_total(this.serviciotransporte.getvalor_total());	
				serviciotransporteAux.setdescripcion(this.serviciotransporte.getdescripcion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(serviciotransporteAux,serviciotransportes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.saveServicioTransportes();//WithConnection
						//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);
					
					this.refrescarForeignKeysDescripcionesServicioTransporte();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes().addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes.addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								serviciotransporteLogic.saveServicioTransporteRelaciones(serviciotransporteAux,this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());//WithConnection
								//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.setDetalleServicioTransportes(new ArrayList<DetalleServicioTransporte>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes= new ArrayList<DetalleServicioTransporte>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();}
							serviciotransporteAux.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
									|| this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(serviciotransporteAux,serviciotransportes);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				serviciotransporteAux=new  ServicioTransporte();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado() 
					|| (this.serviciotransporteSessionBean.getEsGuardarRelacionado() && this.serviciotransporte.getId()>=0)) {
						
					serviciotransporteAux.setIsNew(false);
				}
				
				serviciotransporteAux.setIsDeleted(false);
			
				serviciotransporteAux.setId(this.serviciotransporte.getId());	
				serviciotransporteAux.setVersionRow(this.serviciotransporte.getVersionRow());	
				serviciotransporteAux.setid_empresa(this.serviciotransporte.getid_empresa());	
				serviciotransporteAux.setid_sucursal(this.serviciotransporte.getid_sucursal());	
				serviciotransporteAux.setid_ejercicio(this.serviciotransporte.getid_ejercicio());	
				serviciotransporteAux.setid_periodo(this.serviciotransporte.getid_periodo());	
				serviciotransporteAux.setid_cliente(this.serviciotransporte.getid_cliente());	
				serviciotransporteAux.setid_cliente_proveedor(this.serviciotransporte.getid_cliente_proveedor());	
				serviciotransporteAux.setid_transportista(this.serviciotransporte.getid_transportista());	
				serviciotransporteAux.setid_vehiculo(this.serviciotransporte.getid_vehiculo());	
				serviciotransporteAux.setid_ruta_transporte(this.serviciotransporte.getid_ruta_transporte());	
				serviciotransporteAux.setid_detalle_activo_fijo(this.serviciotransporte.getid_detalle_activo_fijo());	
				serviciotransporteAux.setfecha_ingreso(this.serviciotransporte.getfecha_ingreso());	
				serviciotransporteAux.setfecha_entrega(this.serviciotransporte.getfecha_entrega());	
				serviciotransporteAux.setcodigo_guia1(this.serviciotransporte.getcodigo_guia1());	
				serviciotransporteAux.setcodigo_guia2(this.serviciotransporte.getcodigo_guia2());	
				serviciotransporteAux.setprecio(this.serviciotransporte.getprecio());	
				serviciotransporteAux.setvalor_iva(this.serviciotransporte.getvalor_iva());	
				serviciotransporteAux.setvalor_total(this.serviciotransporte.getvalor_total());	
				serviciotransporteAux.setdescripcion(this.serviciotransporte.getdescripcion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(serviciotransporteAux,serviciotransportes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.saveServicioTransportes();//WithConnection
						//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);
					
					this.refrescarForeignKeysDescripcionesServicioTransporte();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes().addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes.addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						}
						//ARCHITECTURE
						
						if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								serviciotransporteLogic.saveServicioTransporteRelaciones(serviciotransporteAux,this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());//WithConnection
								//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.setDetalleServicioTransportes(new ArrayList<DetalleServicioTransporte>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes= new ArrayList<DetalleServicioTransporte>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();}
							serviciotransporteAux.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
									|| this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(serviciotransporteAux,serviciotransportes);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.serviciotransporte,serviciotransporteAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				serviciotransporteAux=new  ServicioTransporte();
				
				serviciotransporteAux.setIsNew(false);
				serviciotransporteAux.setIsChanged(false);
				
				serviciotransporteAux.setIsDeleted(true);
				
				serviciotransporteAux.setId(this.serviciotransporte.getId());	
				serviciotransporteAux.setVersionRow(this.serviciotransporte.getVersionRow());	
				serviciotransporteAux.setid_empresa(this.serviciotransporte.getid_empresa());	
				serviciotransporteAux.setid_sucursal(this.serviciotransporte.getid_sucursal());	
				serviciotransporteAux.setid_ejercicio(this.serviciotransporte.getid_ejercicio());	
				serviciotransporteAux.setid_periodo(this.serviciotransporte.getid_periodo());	
				serviciotransporteAux.setid_cliente(this.serviciotransporte.getid_cliente());	
				serviciotransporteAux.setid_cliente_proveedor(this.serviciotransporte.getid_cliente_proveedor());	
				serviciotransporteAux.setid_transportista(this.serviciotransporte.getid_transportista());	
				serviciotransporteAux.setid_vehiculo(this.serviciotransporte.getid_vehiculo());	
				serviciotransporteAux.setid_ruta_transporte(this.serviciotransporte.getid_ruta_transporte());	
				serviciotransporteAux.setid_detalle_activo_fijo(this.serviciotransporte.getid_detalle_activo_fijo());	
				serviciotransporteAux.setfecha_ingreso(this.serviciotransporte.getfecha_ingreso());	
				serviciotransporteAux.setfecha_entrega(this.serviciotransporte.getfecha_entrega());	
				serviciotransporteAux.setcodigo_guia1(this.serviciotransporte.getcodigo_guia1());	
				serviciotransporteAux.setcodigo_guia2(this.serviciotransporte.getcodigo_guia2());	
				serviciotransporteAux.setprecio(this.serviciotransporte.getprecio());	
				serviciotransporteAux.setvalor_iva(this.serviciotransporte.getvalor_iva());	
				serviciotransporteAux.setvalor_total(this.serviciotransporte.getvalor_total());	
				serviciotransporteAux.setdescripcion(this.serviciotransporte.getdescripcion());	
				
				if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.serviciotransporteAux.getId()>=0) {	
						this.serviciotransportesEliminados.add(serviciotransporteAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(serviciotransporteAux,serviciotransportes);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.saveServicioTransportes();//WithConnection
						//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes().addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes.addAll(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportesEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								serviciotransporteLogic.saveServicioTransporteRelaciones(serviciotransporteAux,this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());//WithConnection
								//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.setDetalleServicioTransportes(new ArrayList<DetalleServicioTransporte>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes= new ArrayList<DetalleServicioTransporte>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.quitarFilaTotales();}
							serviciotransporteAux.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
								|| this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(serviciotransporteAux,serviciotransporteLogic.getServicioTransportes());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(serviciotransporteAux,serviciotransportes);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getServicioTransportes().addAll(this.serviciotransportesEliminados);
					
					serviciotransporteLogic.saveServicioTransportes();//WithConnection
					//serviciotransporteLogic.getSetVersionRowServicioTransportes();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesServicioTransporte();
				
				this.serviciotransportesEliminados= new ArrayList<ServicioTransporte>();		
			}
			
			if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Servicio Transporte GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.serviciotransporte=serviciotransporteAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessServicioTransporte();
      	}
		
	}	
	
	public void actualizarRelaciones(ServicioTransporte serviciotransporteLocal) throws Exception {
		
		if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				serviciotransporteLocal.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());
			
			} else {
			
				serviciotransporteLocal.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransportes);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ServicioTransporte serviciotransporteLocal) throws Exception {	
		if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				serviciotransporteLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				serviciotransporteLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				serviciotransporteLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				serviciotransporteLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				serviciotransporteLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteproveedorBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteproveedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteproveedorBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteproveedorBeanSwingJInternalFrameLocal.actualizarLista(clienteproveedorBeanSwingJInternalFrameLocal.cliente,this.clienteproveedorsForeignKey);

				clienteproveedorBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteproveedorBeanSwingJInternalFrameLocal.cliente);

				serviciotransporteLocal.setClienteProveedor(clienteproveedorBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyClienteProveedor();
				this.cargarCombosFrameClienteProveedorsForeignKey("Formulario");
				this.setActualClienteProveedorForeignKey(clienteproveedorBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				serviciotransporteLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VehiculoDetalleFormJInternalFrame.class)) {
				VehiculoBeanSwingJInternalFrame vehiculoBeanSwingJInternalFrameLocal=(VehiculoBeanSwingJInternalFrame) ((VehiculoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vehiculoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVehiculo(vehiculoBeanSwingJInternalFrameLocal.getvehiculo(),true);
				vehiculoBeanSwingJInternalFrameLocal.actualizarLista(vehiculoBeanSwingJInternalFrameLocal.vehiculo,this.vehiculosForeignKey);

				vehiculoBeanSwingJInternalFrameLocal.actualizarRelaciones(vehiculoBeanSwingJInternalFrameLocal.vehiculo);

				serviciotransporteLocal.setVehiculo(vehiculoBeanSwingJInternalFrameLocal.vehiculo);

				this.addItemDefectoCombosForeignKeyVehiculo();
				this.cargarCombosFrameVehiculosForeignKey("Formulario");
				this.setActualVehiculoForeignKey(vehiculoBeanSwingJInternalFrameLocal.vehiculo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(RutaTransporteDetalleFormJInternalFrame.class)) {
				RutaTransporteBeanSwingJInternalFrame rutatransporteBeanSwingJInternalFrameLocal=(RutaTransporteBeanSwingJInternalFrame) ((RutaTransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				rutatransporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoRutaTransporte(rutatransporteBeanSwingJInternalFrameLocal.getrutatransporte(),true);
				rutatransporteBeanSwingJInternalFrameLocal.actualizarLista(rutatransporteBeanSwingJInternalFrameLocal.rutatransporte,this.rutatransportesForeignKey);

				rutatransporteBeanSwingJInternalFrameLocal.actualizarRelaciones(rutatransporteBeanSwingJInternalFrameLocal.rutatransporte);

				serviciotransporteLocal.setRutaTransporte(rutatransporteBeanSwingJInternalFrameLocal.rutatransporte);

				this.addItemDefectoCombosForeignKeyRutaTransporte();
				this.cargarCombosFrameRutaTransportesForeignKey("Formulario");
				this.setActualRutaTransporteForeignKey(rutatransporteBeanSwingJInternalFrameLocal.rutatransporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(DetalleActivoFijoDetalleFormJInternalFrame.class)) {
				DetalleActivoFijoBeanSwingJInternalFrame detalleactivofijoBeanSwingJInternalFrameLocal=(DetalleActivoFijoBeanSwingJInternalFrame) ((DetalleActivoFijoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				detalleactivofijoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoDetalleActivoFijo(detalleactivofijoBeanSwingJInternalFrameLocal.getdetalleactivofijo(),true);
				detalleactivofijoBeanSwingJInternalFrameLocal.actualizarLista(detalleactivofijoBeanSwingJInternalFrameLocal.detalleactivofijo,this.detalleactivofijosForeignKey);

				detalleactivofijoBeanSwingJInternalFrameLocal.actualizarRelaciones(detalleactivofijoBeanSwingJInternalFrameLocal.detalleactivofijo);

				serviciotransporteLocal.setDetalleActivoFijo(detalleactivofijoBeanSwingJInternalFrameLocal.detalleactivofijo);

				this.addItemDefectoCombosForeignKeyDetalleActivoFijo();
				this.cargarCombosFrameDetalleActivoFijosForeignKey("Formulario");
				this.setActualDetalleActivoFijoForeignKey(detalleactivofijoBeanSwingJInternalFrameLocal.detalleactivofijo.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarServicioTransporteActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = serviciotransporteValidator.getInvalidValues(this.serviciotransporte);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ServicioTransporte serviciotransporte,List<ServicioTransporte> serviciotransportes) throws Exception {
		try	{		
			ServicioTransporteConstantesFunciones.actualizarLista(serviciotransporte,serviciotransportes,this.serviciotransporteSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ServicioTransporte serviciotransporte,List<ServicioTransporte> serviciotransportes) throws Exception {
		try	{			
			ServicioTransporteConstantesFunciones.actualizarSelectedLista(serviciotransporte,serviciotransportes);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ServicioTransporte> serviciotransportesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				serviciotransportesLocal=this.serviciotransporteLogic.getServicioTransportes();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				serviciotransportesLocal=this.serviciotransportes;
			}
			//ARCHITECTURE
		
			for(ServicioTransporte serviciotransporteLocal:serviciotransportesLocal) {
				if(this.permiteMantenimiento(serviciotransporteLocal) && serviciotransporteLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ServicioTransporteConstantesFunciones.getServicioTransporteLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_empresaServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_sucursalServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_ejercicioServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_periodoServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_clienteServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDCLIENTEPROVEEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_cliente_proveedorServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_transportistaServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDVEHICULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_vehiculoServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDRUTATRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_ruta_transporteServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.IDDETALLEACTIVOFIJO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_detalle_activo_fijoServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.FECHAINGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_ingresoServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.FECHAENTREGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_entregaServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.CODIGOGUIA1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia1ServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.CODIGOGUIA2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia2ServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.PRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelprecioServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.VALORIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_ivaServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.VALORTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_totalServicioTransporte,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioTransporteConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabeldescripcionServicioTransporte,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_empresaServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_sucursalServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_ejercicioServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_periodoServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_clienteServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_cliente_proveedorServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_transportistaServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_vehiculoServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_ruta_transporteServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelid_detalle_activo_fijoServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_ingresoServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_entregaServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia1ServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia2ServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelprecioServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_ivaServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_totalServicioTransporte,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicioTransporte.jLabeldescripcionServicioTransporte,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetalleServicioTransporte")) {
			if(this.serviciotransporte==null) {
				this.serviciotransporte= new ServicioTransporte();
			}

			if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoServicioTransporte
				this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.getdetalleserviciotransporte().setServicioTransporte(this.serviciotransporte);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoServicioTransporte--;	
		
		
		this.serviciotransporteAux=new ServicioTransporte();
		
		this.serviciotransporteAux.setId(this.iIdNuevoServicioTransporte);
		this.serviciotransporteAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.serviciotransporteLogic.getServicioTransportes().add(this.serviciotransporteAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.serviciotransportes.add(this.serviciotransporteAux);
		}
		//ARCHITECTURE
		
		this.serviciotransporte=this.serviciotransporteAux;
		
		if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioServicioTransporte(this.serviciotransporte);
			this.setVariablesObjetoActualToFormularioForeignKeyServicioTransporte(this.serviciotransporte);
		}
				
		//this.setDefaultControlesServicioTransporte();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyServicioTransporte();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyServicioTransporte();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyServicioTransporte();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualServicioTransporte(this.serviciotransporteBean,this.serviciotransporte,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ServicioTransporteConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
			classes=ServicioTransporteConstantesFunciones.getClassesRelationshipsOfServicioTransporte(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.serviciotransporteReturnGeneral=serviciotransporteLogic.procesarEventosServicioTransportesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.serviciotransporteLogic.getServicioTransportes(),this.serviciotransporte,this.serviciotransporteParameterGeneral,this.isEsNuevoServicioTransporte,classes);//this.serviciotransporteLogic.getServicioTransporte()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanServicioTransporte(this.serviciotransporteReturnGeneral,this.serviciotransporteBean,false);
		
		if(this.serviciotransporteReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte());
		}
		
		if(this.serviciotransporteReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte(),classes);//this.serviciotransporteBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyServicioTransporte();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyServicioTransporte();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.RecargarFormServicioTransporte(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingServicioTransporte(false);
						
			if(serviciotransporteSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.getEsGuardarRelacionado() && DetalleServicioTransporteJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleServicioTransporteActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicioTransporte();
			}
			
			this.actualizarVisualTableDatosServicioTransporte();
			
			this.jTableDatosServicioTransporte.setRowSelectionInterval(this.getIndiceNuevoServicioTransporte(), this.getIndiceNuevoServicioTransporte());
			
			this.seleccionarFilaTablaServicioTransporteActual();
						
			this.actualizarEstadoCeldasBotonesServicioTransporte("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesServicioTransporte(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarfecha_ingresoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarfecha_entregaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarcodigo_guia1ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarcodigo_guia2ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarprecioServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarvalor_ivaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarvalor_totalServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activardescripcionServicioTransporte);	
		//
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_empresaServicioTransporte);//
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_sucursalServicioTransporte);//
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_ejercicioServicioTransporte);//
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_periodoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_clienteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_cliente_proveedorServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_transportistaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_vehiculoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_ruta_transporteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setEnabled(isHabilitar && this.serviciotransporteConstantesFunciones.activarid_detalle_activo_fijoServicioTransporte);
	};
	
	public void setDefaultControlesServicioTransporte() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoServicioTransporte(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.serviciotransporteSessionBean.setConGuardarRelaciones(true);			
			this.serviciotransporteSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.serviciotransporteSessionBean.setConGuardarRelaciones(false);			
			this.serviciotransporteSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoServicioTransporte() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
				if(serviciotransporteAux.getId().equals(this.iIdNuevoServicioTransporte)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransportes) {
				if(serviciotransporteAux.getId().equals(this.iIdNuevoServicioTransporte)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualServicioTransporte(ServicioTransporte serviciotransporte,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
				if(serviciotransporteAux.getId().equals(serviciotransporte.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransportes) {
				if(serviciotransporteAux.getId().equals(serviciotransporte.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalServicioTransporte(ServicioTransporte serviciotransporteOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
				if(serviciotransporteAux.getServicioTransporteOriginal().getId().equals(serviciotransporteOriginal.getId())) {
					existe=true;
					serviciotransporteOriginal.setId(serviciotransporteAux.getId());
					serviciotransporteOriginal.setVersionRow(serviciotransporteAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ServicioTransporte serviciotransporteAux:this.serviciotransportes) {
				if(serviciotransporteAux.getServicioTransporteOriginal().getId().equals(serviciotransporteOriginal.getId())) {
					existe=true;
					serviciotransporteOriginal.setId(serviciotransporteAux.getId());
					serviciotransporteOriginal.setVersionRow(serviciotransporteAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosServicioTransporte(Boolean esParaCancelar) throws Exception {
		serviciotransportesAux=new ArrayList<ServicioTransporte>();
		serviciotransporteAux=new ServicioTransporte();
		
		if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
					if(serviciotransporteAux.getId()<0) {
						serviciotransportesAux.add(serviciotransporteAux);
					}		
				}
				this.iIdNuevoServicioTransporte=0L;
				this.serviciotransporteLogic.getServicioTransportes().removeAll(serviciotransportesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ServicioTransporte serviciotransporteAux:this.serviciotransportes) {
					if(serviciotransporteAux.getId()<0) {
						serviciotransportesAux.add(serviciotransporteAux);
					}		
				}
				this.iIdNuevoServicioTransporte=0L;
				this.serviciotransportes.removeAll(serviciotransportesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoServicioTransporte 
					&& this.serviciotransporteLogic.getServicioTransportes().size()>0
					) {
					serviciotransporteAux=this.serviciotransporteLogic.getServicioTransportes().get(this.serviciotransporteLogic.getServicioTransportes().size() - 1);
				
					if(serviciotransporteAux.getId()<0) {
						this.serviciotransporteLogic.getServicioTransportes().remove(serviciotransporteAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoServicioTransporte && this.serviciotransportes.size()>0) {
					serviciotransporteAux=this.serviciotransportes.get(this.serviciotransportes.size() - 1);
				
					if(serviciotransporteAux.getId()<0) {
						this.serviciotransportes.remove(serviciotransporteAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoServicioTransporte(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(serviciotransporte.getId()<0) {
				this.serviciotransporteLogic.getServicioTransportes().remove(this.serviciotransporte);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(serviciotransporte.getId()<0) {
				this.serviciotransportes.remove(this.serviciotransporte);
			}
		}			
	}
	
	public void setEstadosInicialesServicioTransporte(List<ServicioTransporte> serviciotransportesAux) throws Exception {
		ServicioTransporteConstantesFunciones.setEstadosInicialesServicioTransporte(serviciotransportesAux);
	}
	
	public void setEstadosInicialesServicioTransporte(ServicioTransporte serviciotransporteAux) throws Exception {
		ServicioTransporteConstantesFunciones.setEstadosInicialesServicioTransporte(serviciotransporteAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarServicioTransporteActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarServicioTransporteActual()) {
				if(!this.isEsNuevoServicioTransporte) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoServicioTransporte=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarServicioTransporteActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Servicio Transporte ?", "MANTENIMIENTO DE Servicio Transporte", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ServicioTransporte serviciotransporte) throws Exception {
		ServicioTransporteConstantesFunciones.seleccionarAsignar(this.serviciotransporte,serviciotransporte);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarServicioTransporte=this.isPermisoActualizarOriginalServicioTransporte;
			
			
			this.seleccionarAsignar(serviciotransporte);
			
			

			idClienteActual=serviciotransporte.getid_cliente();
			this.seleccionarClienteActual();

			idClienteProveedorActual=serviciotransporte.getid_cliente_proveedor();
			this.seleccionarClienteProveedorActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ServicioTransporteConstantesFunciones.quitarEspaciosServicioTransporte(this.serviciotransporte,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesServicioTransporte("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.serviciotransporteSessionBean.setsFuncionBusquedaRapida(this.serviciotransporteSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteProveedorActual() throws Exception {
		try	{
			Cliente clienteproveedorAux=new Cliente();

			if(this.idClienteProveedorActual != null && this.idClienteProveedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteproveedorLogic.getEntityWithConnection(this.idClienteProveedorActual);
					clienteproveedorAux= clienteproveedorLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clienteproveedorsForeignKey=new ArrayList<Cliente>();
				clienteproveedorsForeignKey.add(clienteproveedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoServicioTransporte) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosServicioTransporte(esParaCancelar);				
				this.cancelarNuevoServicioTransporte(esParaCancelar);								
			}
			
			this.serviciotransporte=new ServicioTransporte();
			
			this.inicializarServicioTransporte();
			
			this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarServicioTransporte() throws Exception {
		try {
			ServicioTransporteConstantesFunciones.inicializarServicioTransporte(this.serviciotransporte);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.serviciotransporteLogic.getServicioTransportes().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteServicioTransportes(String sAccionBusqueda,List<ServicioTransporte> serviciotransportesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ServicioTransporte"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ServicioTransporteMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ServicioTransporteMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ServicioTransporte"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Servicio Transportes");		
		parameters.put("busquedapor", ServicioTransporteConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetalleServicioTransporte.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					ServicioTransporteLogic serviciotransporteLogicAuxiliar=new ServicioTransporteLogic();
					serviciotransporteLogicAuxiliar.setDatosCliente(serviciotransporteLogic.getDatosCliente());				
					serviciotransporteLogicAuxiliar.setServicioTransportes(serviciotransportesParaReportes);
					
					serviciotransporteLogicAuxiliar.cargarRelacionesLoteForeignKeyServicioTransporteWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					serviciotransportesParaReportes=serviciotransporteLogicAuxiliar.getServicioTransportes();
					
					//serviciotransporteLogic.getNewConnexionToDeep();
					
					//for (ServicioTransporte serviciotransporte:serviciotransportesParaReportes) {
					//	serviciotransporteLogic.deepLoad(serviciotransporte, false, DeepLoadType.INCLUDE, classes);
					//}						
					//serviciotransporteLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//serviciotransporteLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetalleServicioTransporte = AuxiliarReportes.class.getResourceAsStream("DetalleServicioTransporteDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detalleserviciotransporte", reportFileDetalleServicioTransporte);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceServicioTransporte=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ServicioTransporteConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ServicioTransporteConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceServicioTransporte=new JRBeanArrayDataSource(ServicioTransporteJInternalFrame.TraerServicioTransporteBeans(serviciotransportesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceServicioTransporte);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ServicioTransporteConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ServicioTransporteConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ServicioTransporteBean.TraerServicioTransporteBeans(serviciotransportesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoServicioTransporteActionPerformed(null);
					//this.generarExcelReporteServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesServicioTransportes(sAccionBusqueda,sTipoArchivoReporte,serviciotransportesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteServicioTransportes(String sAccionBusqueda,String sTipoArchivoReporte,List<ServicioTransporte> serviciotransportesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ServicioTransportes");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderServicioTransporte("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ServicioTransporte serviciotransporte : serviciotransportesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ServicioTransporteConstantesFunciones.generarExcelReporteDataServicioTransporte("NORMAL",row,workbook,serviciotransporte,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderServicioTransporte(String sTipo,Row row,Workbook workbook) {
		
		ServicioTransporteConstantesFunciones.generarExcelReporteHeaderServicioTransporte(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalServicioTransportes(String sAccionBusqueda,String sTipoArchivoReporte,List<ServicioTransporte> serviciotransportesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ServicioTransportes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ServicioTransporte serviciotransporte : serviciotransportesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ServicioTransporteConstantesFunciones.getServicioTransporteDescripcion(serviciotransporte));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getclienteproveedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getvehiculo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getrutatransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getdetalleactivofijo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getfecha_ingreso());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getfecha_entrega());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getcodigo_guia1());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getcodigo_guia2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_PRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_PRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getprecio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_VALORIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getvalor_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getvalor_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(serviciotransporte.getdescripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesServicioTransportes(String sAccionBusqueda,String sTipoArchivoReporte,List<ServicioTransporte> serviciotransportesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ServicioTransporte> serviciotransportesRespaldo=null;
		
		classes=ServicioTransporteConstantesFunciones.getClassesRelationshipsOfServicioTransporte(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.serviciotransporteLogic.setDatosCliente(this.datosCliente);
		this.serviciotransporteLogic.setDatosDeep(this.datosDeep);
		this.serviciotransporteLogic.setIsConDeep(true);
		
		serviciotransportesRespaldo=this.serviciotransporteLogic.getServicioTransportes();
		
		this.serviciotransporteLogic.setServicioTransportes(serviciotransportesParaReportes);	
		this.serviciotransporteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		serviciotransportesParaReportes=this.serviciotransporteLogic.getServicioTransportes();
		this.serviciotransporteLogic.setServicioTransportes(serviciotransportesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ServicioTransportes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderServicioTransporte("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ServicioTransporte serviciotransporte : serviciotransportesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderServicioTransporte("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ServicioTransporteConstantesFunciones.generarExcelReporteDataServicioTransporte("NORMAL",row,workbook,serviciotransporte,cellStyleDataAux);
		
			
			


				//DetalleServicioTransporte
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleServicioTransporteConstantesFunciones.SCLASSWEBTITULO))) {

				if(serviciotransporte.getDetalleServicioTransportes()!=null && serviciotransporte.getDetalleServicioTransportes().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleServicioTransporteConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleServicioTransporteConstantesFunciones.generarExcelReporteHeaderDetalleServicioTransporte("RELACIONADO",row,workbook);
				}

				if(serviciotransporte.getDetalleServicioTransportes()!=null) {
					i2=0;
					for(DetalleServicioTransporte detalleserviciotransporte : serviciotransporte.getDetalleServicioTransportes()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleServicioTransporteConstantesFunciones.generarExcelReporteDataDetalleServicioTransporte("RELACIONADO",row,workbook,detalleserviciotransporte,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ServicioTransporteConstantesFunciones.getServicioTransporteDescripcion(serviciotransporte));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoServicioTransporte.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessServicioTransporte() throws Exception {		
		this.startProcessServicioTransporte(true);
	}
	
	public void startProcessServicioTransporte(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasServicioTransporte ,this.jPanelParametrosReportesServicioTransporte, this.jScrollPanelDatosServicioTransporte,this.jPanelPaginacionServicioTransporte, this.jScrollPanelDatosEdicionServicioTransporte, this.jPanelAccionesServicioTransporte,this.jPanelAccionesFormularioServicioTransporte,this.jmenuBarServicioTransporte,this.jmenuBarDetalleServicioTransporte,this.jTtoolBarServicioTransporte,this.jTtoolBarDetalleServicioTransporte);		
		
		final JTabbedPane jTabbedPaneBusquedasServicioTransporte=this.jTabbedPaneBusquedasServicioTransporte; 
		
		final JPanel jPanelParametrosReportesServicioTransporte=this.jPanelParametrosReportesServicioTransporte;
		//final JScrollPane jScrollPanelDatosServicioTransporte=this.jScrollPanelDatosServicioTransporte;
		final JTable jTableDatosServicioTransporte=this.jTableDatosServicioTransporte;		
		final JPanel jPanelPaginacionServicioTransporte=this.jPanelPaginacionServicioTransporte;
		//final JScrollPane jScrollPanelDatosEdicionServicioTransporte=this.jScrollPanelDatosEdicionServicioTransporte;
		final JPanel jPanelAccionesServicioTransporte=this.jPanelAccionesServicioTransporte;
		
		JPanel jPanelCamposAuxiliarServicioTransporte=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarServicioTransporte=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			jPanelCamposAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jPanelCamposServicioTransporte;
			jPanelAccionesFormularioAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jPanelAccionesFormularioServicioTransporte;
		}
		
		final JPanel jPanelCamposServicioTransporte=jPanelCamposAuxiliarServicioTransporte;
		final JPanel jPanelAccionesFormularioServicioTransporte=jPanelAccionesFormularioAuxiliarServicioTransporte;
		
		
		final JMenuBar jmenuBarServicioTransporte=this.jmenuBarServicioTransporte;
		final JToolBar jTtoolBarServicioTransporte=this.jTtoolBarServicioTransporte;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarServicioTransporte=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarServicioTransporte=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			jmenuBarDetalleAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jmenuBarDetalleServicioTransporte;
			jTtoolBarDetalleAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jTtoolBarDetalleServicioTransporte;
		}
		
		final JMenuBar jmenuBarDetalleServicioTransporte=jmenuBarDetalleAuxiliarServicioTransporte;
		final JToolBar jTtoolBarDetalleServicioTransporte=jTtoolBarDetalleAuxiliarServicioTransporte;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasServicioTransporte;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesServicioTransporte;
			processRunnable.jTableDatos=jTableDatosServicioTransporte;
			processRunnable.jPanelCampos=jPanelCamposServicioTransporte;
			processRunnable.jPanelPaginacion=jPanelPaginacionServicioTransporte;
			processRunnable.jPanelAcciones=jPanelAccionesServicioTransporte;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioServicioTransporte;
			
			
			processRunnable.jmenuBar=jmenuBarServicioTransporte;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleServicioTransporte;
			processRunnable.jTtoolBar=jTtoolBarServicioTransporte;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleServicioTransporte;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasServicioTransporte ,jPanelParametrosReportesServicioTransporte,jTableDatosServicioTransporte, /*jScrollPanelDatosServicioTransporte,*/jPanelCamposServicioTransporte,jPanelPaginacionServicioTransporte, /*jScrollPanelDatosEdicionServicioTransporte,*/ jPanelAccionesServicioTransporte,jPanelAccionesFormularioServicioTransporte,jmenuBarServicioTransporte,jmenuBarDetalleServicioTransporte,jTtoolBarServicioTransporte,jTtoolBarDetalleServicioTransporte);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasServicioTransporte ,jPanelParametrosReportesServicioTransporte, jScrollPanelDatosServicioTransporte,jPanelPaginacionServicioTransporte, jScrollPanelDatosEdicionServicioTransporte, jPanelAccionesServicioTransporte,jPanelAccionesFormularioServicioTransporte,jmenuBarServicioTransporte,jmenuBarDetalleServicioTransporte,jTtoolBarServicioTransporte,jTtoolBarDetalleServicioTransporte);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessServicioTransporte() {// throws Exception 
		this.finishProcessServicioTransporte(true);
	}
	
	public void finishProcessServicioTransporte(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasServicioTransporte ,this.jPanelParametrosReportesServicioTransporte, this.jScrollPanelDatosServicioTransporte,this.jPanelPaginacionServicioTransporte, this.jScrollPanelDatosEdicionServicioTransporte, this.jPanelAccionesServicioTransporte,this.jPanelAccionesFormularioServicioTransporte,this.jmenuBarServicioTransporte,this.jmenuBarDetalleServicioTransporte,this.jTtoolBarServicioTransporte,this.jTtoolBarDetalleServicioTransporte);		
		
		final JTabbedPane jTabbedPaneBusquedasServicioTransporte=this.jTabbedPaneBusquedasServicioTransporte; 
		
		final JPanel jPanelParametrosReportesServicioTransporte=this.jPanelParametrosReportesServicioTransporte;
		//final JScrollPane jScrollPanelDatosServicioTransporte=this.jScrollPanelDatosServicioTransporte;
		final JTable jTableDatosServicioTransporte=this.jTableDatosServicioTransporte;		
		final JPanel jPanelPaginacionServicioTransporte=this.jPanelPaginacionServicioTransporte;
		//final JScrollPane jScrollPanelDatosEdicionServicioTransporte=this.jScrollPanelDatosEdicionServicioTransporte;
		final JPanel jPanelAccionesServicioTransporte=this.jPanelAccionesServicioTransporte;
		
		JPanel jPanelCamposAuxiliarServicioTransporte=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarServicioTransporte=new JPanel();
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			jPanelCamposAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jPanelCamposServicioTransporte;
			jPanelAccionesFormularioAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jPanelAccionesFormularioServicioTransporte;
		}
		
		final JPanel jPanelCamposServicioTransporte=jPanelCamposAuxiliarServicioTransporte;
		final JPanel jPanelAccionesFormularioServicioTransporte=jPanelAccionesFormularioAuxiliarServicioTransporte;
		
		
		final JMenuBar jmenuBarServicioTransporte=this.jmenuBarServicioTransporte;		
		final JToolBar jTtoolBarServicioTransporte=this.jTtoolBarServicioTransporte;
				
		JMenuBar jmenuBarDetalleAuxiliarServicioTransporte=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarServicioTransporte=new JToolBar();
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			jmenuBarDetalleAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jmenuBarDetalleServicioTransporte;
			jTtoolBarDetalleAuxiliarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jTtoolBarDetalleServicioTransporte;		
		}
		
		final JMenuBar jmenuBarDetalleServicioTransporte=jmenuBarDetalleAuxiliarServicioTransporte;
		final JToolBar jTtoolBarDetalleServicioTransporte=jTtoolBarDetalleAuxiliarServicioTransporte;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasServicioTransporte;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesServicioTransporte;
			processRunnable.jTableDatos=jTableDatosServicioTransporte;
			processRunnable.jPanelCampos=jPanelCamposServicioTransporte;
			processRunnable.jPanelPaginacion=jPanelPaginacionServicioTransporte;
			processRunnable.jPanelAcciones=jPanelAccionesServicioTransporte;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioServicioTransporte;
			
			
			processRunnable.jmenuBar=jmenuBarServicioTransporte;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleServicioTransporte;
			processRunnable.jTtoolBar=jTtoolBarServicioTransporte;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleServicioTransporte;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasServicioTransporte ,jPanelParametrosReportesServicioTransporte, jTableDatosServicioTransporte,/*jScrollPanelDatosServicioTransporte,*/jPanelCamposServicioTransporte,jPanelPaginacionServicioTransporte, /*jScrollPanelDatosEdicionServicioTransporte,*/ jPanelAccionesServicioTransporte,jPanelAccionesFormularioServicioTransporte,jmenuBarServicioTransporte,jmenuBarDetalleServicioTransporte,jTtoolBarServicioTransporte,jTtoolBarDetalleServicioTransporte));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesServicioTransporte(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarServicioTransporte(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuServicioTransporte(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarServicioTransporte(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarServicioTransporte,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleServicioTransporte,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuServicioTransporte(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarServicioTransporte,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleServicioTransporte,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.serviciotransporteConstantesFunciones.getsFinalQueryServicioTransporte();
		String  finalQueryPaginacionTodos=this.serviciotransporteConstantesFunciones.getsFinalQueryServicioTransporte();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ServicioTransporteConstantesFunciones.getArrayColumnasGlobalesNoServicioTransporte(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ServicioTransporteConstantesFunciones.getArrayColumnasGlobalesServicioTransporte(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ServicioTransporteConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.serviciotransportesEliminados= new ArrayList<ServicioTransporte>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessServicioTransporte();
		
				///*ServicioTransporteSessionBean*/this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			
			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ServicioTransporteConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ServicioTransporteConstantesFunciones.getClassesForeignKeysOfServicioTransporte(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/serviciotransporte."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			serviciotransportesAux= new ArrayList<ServicioTransporte>();
			
				
			serviciotransporteLogic.setDatosCliente(this.datosCliente);
			serviciotransporteLogic.setDatosDeep(this.datosDeep);
			serviciotransporteLogic.setIsConDeep(true);
			
			
			serviciotransporteLogic.getServicioTransporteDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					serviciotransporteLogic.getTodosServicioTransportes(finalQueryGlobal,pagination);
					
					//serviciotransporteLogic.getTodosServicioTransportesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(serviciotransporteLogic.getServicioTransportes()==null|| serviciotransporteLogic.getServicioTransportes().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							serviciotransportesAux= new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux= new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							serviciotransporteLogic.getTodosServicioTransportes(finalQueryGlobal+"",this.pagination);												
							
							//serviciotransporteLogic.getTodosServicioTransportesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteServicioTransportes("Todos",serviciotransporteLogic.getServicioTransportes() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());					
							serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idServicioTransporte=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idServicioTransporte=this.idActual;
				
				} else if(this.idServicioTransporteActual!=null && this.idServicioTransporteActual!=0L) {
					idServicioTransporte=idServicioTransporteActual;
				}
				
					
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndicePorId(idServicioTransporte);
				
				this.serviciotransportes=new ArrayList<ServicioTransporte>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					serviciotransporteLogic.getEntity(idServicioTransporte);
					
					//serviciotransporteLogic.getEntityWithConnection(idServicioTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
					serviciotransporteLogic.getServicioTransportes().add(serviciotransporteLogic.getServicioTransporte());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransportes=new ArrayList<ServicioTransporte>();
					this.serviciotransportes.add(serviciotransporte);
				}
				
				if(serviciotransporteLogic.getServicioTransporte()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdCliente",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdCliente",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdClienteProveedor")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdClienteProveedor(id_cliente_proveedorFK_IdClienteProveedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdClienteProveedor(finalQueryGlobal,pagination,id_cliente_proveedorFK_IdClienteProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdClienteProveedor(id_cliente_proveedorFK_IdClienteProveedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdClienteProveedor(id_cliente_proveedorFK_IdClienteProveedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdClienteProveedor(finalQueryGlobal,pagination,id_cliente_proveedorFK_IdClienteProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdClienteProveedor(id_cliente_proveedorFK_IdClienteProveedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdClienteProveedor(id_cliente_proveedorFK_IdClienteProveedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdClienteProveedor",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdClienteProveedor",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdDetalleActivoFijo")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijo(id_detalle_activo_fijoFK_IdDetalleActivoFijo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdDetalleActivoFijo(finalQueryGlobal,pagination,id_detalle_activo_fijoFK_IdDetalleActivoFijo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijo(id_detalle_activo_fijoFK_IdDetalleActivoFijo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijo(id_detalle_activo_fijoFK_IdDetalleActivoFijo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdDetalleActivoFijo(finalQueryGlobal,pagination,id_detalle_activo_fijoFK_IdDetalleActivoFijo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijo(id_detalle_activo_fijoFK_IdDetalleActivoFijo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijo(id_detalle_activo_fijoFK_IdDetalleActivoFijo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdDetalleActivoFijo",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdDetalleActivoFijo",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdEjercicio",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdEjercicio",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdEmpresa",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdEmpresa",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdPeriodo",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdPeriodo",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdRutaTransporte")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdRutaTransporte(id_ruta_transporteFK_IdRutaTransporte);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdRutaTransporte(finalQueryGlobal,pagination,id_ruta_transporteFK_IdRutaTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdRutaTransporte(id_ruta_transporteFK_IdRutaTransporte);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdRutaTransporte(id_ruta_transporteFK_IdRutaTransporte);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdRutaTransporte(finalQueryGlobal,pagination,id_ruta_transporteFK_IdRutaTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdRutaTransporte(id_ruta_transporteFK_IdRutaTransporte);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdRutaTransporte(id_ruta_transporteFK_IdRutaTransporte);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdRutaTransporte",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdRutaTransporte",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdSucursal",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdSucursal",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransportista")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdTransportista",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdTransportista",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVehiculo")) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdVehiculo(id_vehiculoFK_IdVehiculo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					serviciotransporteLogic.getServicioTransportesFK_IdVehiculo(finalQueryGlobal,pagination,id_vehiculoFK_IdVehiculo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdVehiculo(id_vehiculoFK_IdVehiculo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdVehiculo(id_vehiculoFK_IdVehiculo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=serviciotransporteLogic.getServicioTransportes()==null||serviciotransporteLogic.getServicioTransportes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=serviciotransportes==null|| serviciotransportes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransportesAux=new ArrayList<ServicioTransporte>();
						serviciotransportesAux.addAll(serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportesAux=new ArrayList<ServicioTransporte>();
							serviciotransportesAux.addAll(serviciotransportes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							serviciotransporteLogic.getServicioTransportesFK_IdVehiculo(finalQueryGlobal,pagination,id_vehiculoFK_IdVehiculo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdVehiculo(id_vehiculoFK_IdVehiculo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioTransporteConstantesFunciones.getDetalleIndiceFK_IdVehiculo(id_vehiculoFK_IdVehiculo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicioTransportes("FK_IdVehiculo",serviciotransporteLogic.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicioTransportes("FK_IdVehiculo",serviciotransportes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteLogic.setServicioTransportes(new ArrayList<ServicioTransporte>());
						serviciotransporteLogic.getServicioTransportes().addAll(serviciotransportesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransportes=new ArrayList<ServicioTransporte>();
							serviciotransportes.addAll(serviciotransportesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesServicioTransporte();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessServicioTransporte();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=serviciotransporteLogic.getServicioTransportes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=serviciotransportes.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=serviciotransporteLogic.getServicioTransportes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=serviciotransportes.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ServicioTransporte serviciotransporte) {
		Boolean permite=true;
		
		if(this.serviciotransporte.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ServicioTransporteConstantesFunciones.getOrderByListaServicioTransporte();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ServicioTransporteConstantesFunciones.getOrderByListaServicioTransporte();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ServicioTransporte serviciotransporte:serviciotransporteLogic.getServicioTransportes()) {
				if(serviciotransporte.getsType().equals(Constantes2.S_TOTALES)) {
					serviciotransporteTotales=serviciotransporte;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ServicioTransporte serviciotransporte:this.serviciotransportes) {
				if(serviciotransporte.getsType().equals(Constantes2.S_TOTALES)) {
					serviciotransporteTotales=serviciotransporte;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.serviciotransporteAux=new ServicioTransporte();
			this.serviciotransporteAux.setsType(Constantes2.S_TOTALES);
			this.serviciotransporteAux.setIsNew(false);
			this.serviciotransporteAux.setIsChanged(false);
			this.serviciotransporteAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ServicioTransporteConstantesFunciones.TotalizarValoresFilaServicioTransporte(this.serviciotransporteLogic.getServicioTransportes(),this.serviciotransporteAux);
				
				this.serviciotransporteLogic.getServicioTransportes().add(this.serviciotransporteAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ServicioTransporteConstantesFunciones.TotalizarValoresFilaServicioTransporte(this.serviciotransportes,this.serviciotransporteAux);
				
				this.serviciotransportes.add(this.serviciotransporteAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		serviciotransporteTotales=new ServicioTransporte();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.serviciotransporteLogic.getServicioTransportes().remove(serviciotransporteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.serviciotransportes.remove(serviciotransporteTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		serviciotransporteTotales=new ServicioTransporte();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ServicioTransporte serviciotransporte:serviciotransporteLogic.getServicioTransportes()) {
				if(serviciotransporte.getsType().equals(Constantes2.S_TOTALES)) {
					serviciotransporteTotales=serviciotransporte;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ServicioTransporteConstantesFunciones.TotalizarValoresFilaServicioTransporte(this.serviciotransporteLogic.getServicioTransportes(),serviciotransporteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ServicioTransporte serviciotransporte:this.serviciotransportes) {
				if(serviciotransporte.getsType().equals(Constantes2.S_TOTALES)) {
					serviciotransporteTotales=serviciotransporte;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ServicioTransporteConstantesFunciones.TotalizarValoresFilaServicioTransporte(this.serviciotransportes,serviciotransporteTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getServicioTransportesFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdClienteProveedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdClienteProveedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdDetalleActivoFijo()throws Exception {
		try {
			sAccionBusqueda="FK_IdDetalleActivoFijo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdRutaTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdRutaTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServicioTransportesFK_IdVehiculo()throws Exception {
		try {
			sAccionBusqueda="FK_IdVehiculo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getServicioTransportesFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdClienteProveedor(String sFinalQuery,Long id_cliente_proveedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdClienteProveedor(sFinalQuery,this.pagination,id_cliente_proveedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdDetalleActivoFijo(String sFinalQuery,Long id_detalle_activo_fijo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdDetalleActivoFijo(sFinalQuery,this.pagination,id_detalle_activo_fijo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdRutaTransporte(String sFinalQuery,Long id_ruta_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdRutaTransporte(sFinalQuery,this.pagination,id_ruta_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServicioTransportesFK_IdVehiculo(String sFinalQuery,Long id_vehiculo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLogic.getServicioTransportesFK_IdVehiculo(sFinalQuery,this.pagination,id_vehiculo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosServicioTransporte() {
		this.isPermisoTodoServicioTransporte=false;
		this.isPermisoNuevoServicioTransporte=false;
		this.isPermisoActualizarServicioTransporte=false;
		this.isPermisoActualizarOriginalServicioTransporte=false;
		this.isPermisoEliminarServicioTransporte=false;
		this.isPermisoGuardarCambiosServicioTransporte=false;
		this.isPermisoConsultaServicioTransporte=false;
		this.isPermisoBusquedaServicioTransporte=false;
		this.isPermisoReporteServicioTransporte=false;		
		this.isPermisoOrdenServicioTransporte=false;		
		this.isPermisoPaginacionMedioServicioTransporte=false;		
		this.isPermisoPaginacionAltoServicioTransporte=false;
		this.isPermisoPaginacionTodoServicioTransporte=false;
		this.isPermisoCopiarServicioTransporte=false;		
		this.isPermisoVerFormServicioTransporte=false;		
		this.isPermisoDuplicarServicioTransporte=false;		
		this.isPermisoOrdenServicioTransporte=false;		
	}
	
	public void setPermisosUsuarioServicioTransporte(Boolean isPermiso) {
		this.isPermisoTodoServicioTransporte=isPermiso;
		this.isPermisoNuevoServicioTransporte=isPermiso;
		this.isPermisoActualizarServicioTransporte=isPermiso;
		this.isPermisoActualizarOriginalServicioTransporte=isPermiso;
		this.isPermisoEliminarServicioTransporte=isPermiso;
		this.isPermisoGuardarCambiosServicioTransporte=isPermiso;
		this.isPermisoConsultaServicioTransporte=isPermiso;
		this.isPermisoBusquedaServicioTransporte=isPermiso;
		this.isPermisoReporteServicioTransporte=isPermiso;
		this.isPermisoOrdenServicioTransporte=isPermiso;		
		this.isPermisoPaginacionMedioServicioTransporte=isPermiso;		
		this.isPermisoPaginacionAltoServicioTransporte=isPermiso;		
		this.isPermisoPaginacionTodoServicioTransporte=isPermiso;		
		this.isPermisoCopiarServicioTransporte=isPermiso;		
		this.isPermisoVerFormServicioTransporte=isPermiso;		
		this.isPermisoDuplicarServicioTransporte=isPermiso;
		this.isPermisoOrdenServicioTransporte=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioServicioTransporte(Boolean isPermiso) {
		//this.isPermisoTodoServicioTransporte=isPermiso;
		this.isPermisoNuevoServicioTransporte=isPermiso;
		this.isPermisoActualizarServicioTransporte=isPermiso;
		this.isPermisoActualizarOriginalServicioTransporte=isPermiso;
		this.isPermisoEliminarServicioTransporte=isPermiso;
		this.isPermisoGuardarCambiosServicioTransporte=isPermiso;
		//this.isPermisoConsultaServicioTransporte=isPermiso;
		//this.isPermisoBusquedaServicioTransporte=isPermiso;
		//this.isPermisoReporteServicioTransporte=isPermiso;
		//this.isPermisoOrdenServicioTransporte=isPermiso;		
		//this.isPermisoPaginacionMedioServicioTransporte=isPermiso;		
		//this.isPermisoPaginacionAltoServicioTransporte=isPermiso;		
		//this.isPermisoPaginacionTodoServicioTransporte=isPermiso;		
		//this.isPermisoCopiarServicioTransporte=isPermiso;		
		//this.isPermisoDuplicarServicioTransporte=isPermiso;
		//this.isPermisoOrdenServicioTransporte=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioServicioTransporteClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetalleServicioTransporteConstantesFunciones.SNOMBREOPCION);
		
		if(ServicioTransporteJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetalleServicioTransporte=false;
		this.isTienePermisosDetalleServicioTransporte=this.verificarGetPermisosUsuarioOpcionServicioTransporteClaseRelacionada(this.opcionsRelacionadas,DetalleServicioTransporteConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebServicioTransporte(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioServicioTransporteClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetalleServicioTransporte=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioServicioTransporteClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionServicioTransporteClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioServicioTransporteClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetalleServicioTransporte && this.jInternalFrameDetalleFormServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.remove(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioServicioTransporte() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ServicioTransporteJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ServicioTransporteConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoServicioTransporte=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarServicioTransporte=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalServicioTransporte=this.isPermisoActualizarServicioTransporte;
			this.isPermisoEliminarServicioTransporte=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosServicioTransporte=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaServicioTransporte=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaServicioTransporte=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoServicioTransporte=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteServicioTransporte=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenServicioTransporte=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioServicioTransporte=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoServicioTransporte=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoServicioTransporte=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarServicioTransporte=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormServicioTransporte=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarServicioTransporte=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenServicioTransporte=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosServicioTransporte.setToolTipText(this.jTableDatosServicioTransporte.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioServicioTransporte(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioServicioTransporte(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ServicioTransporteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ServicioTransporteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioServicioTransporte() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetalleServicioTransporte && this.serviciotransporteConstantesFunciones.mostrarDetalleServicioTransporteServicioTransporte && !ServicioTransporteConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Servicio Transporte");
			reporte.setsDescripcion("Detalle Servicio Transporte");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyServicioTransporteListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.clienteproveedorsForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
				this.vehiculosForeignKey=new ArrayList();
				this.rutatransportesForeignKey=new ArrayList();
				this.detalleactivofijosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyServicioTransporteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ServicioTransporteJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyServicioTransporteListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteProveedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVehiculoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyRutaTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyDetalleActivoFijoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteProveedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clienteproveedorsForeignKey==null||this.clienteproveedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClienteProveedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVehiculoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vehiculosForeignKey==null||this.vehiculosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VehiculoConstantesFunciones.getArrayColumnasGlobalesVehiculo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VehiculoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VehiculoConstantesFunciones.SFINALQUERY;

				this.cargarCombosVehiculosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyRutaTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.rutatransportesForeignKey==null||this.rutatransportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=RutaTransporteConstantesFunciones.getArrayColumnasGlobalesRutaTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,RutaTransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=RutaTransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosRutaTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.detalleactivofijosForeignKey==null||this.detalleactivofijosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

				this.cargarCombosDetalleActivoFijosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyServicioTransporteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ServicioTransporteParameterReturnGeneral serviciotransporteReturnGeneral=new ServicioTransporteParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_empresaServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_empresaServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_sucursalServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_sucursalServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_ejercicioServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_ejercicioServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_periodoServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_periodoServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_clienteServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_clienteServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalClienteProveedor="";

				if(((this.clienteproveedorsForeignKey==null||this.clienteproveedorsForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_cliente_proveedorServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_cliente_proveedorServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionClienteProveedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalClienteProveedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalClienteProveedor=Funciones.GetFinalQueryAppend(finalQueryGlobalClienteProveedor, "");
						finalQueryGlobalClienteProveedor+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClienteProveedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalClienteProveedor=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidClienteProveedorActual();
					}
				} else {
					finalQueryGlobalClienteProveedor="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_transportistaServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_transportistaServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}


				String finalQueryGlobalVehiculo="";

				if(((this.vehiculosForeignKey==null||this.vehiculosForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_vehiculoServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_vehiculoServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionVehiculo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VehiculoConstantesFunciones.getArrayColumnasGlobalesVehiculo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVehiculo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VehiculoConstantesFunciones.TABLENAME);

						finalQueryGlobalVehiculo=Funciones.GetFinalQueryAppend(finalQueryGlobalVehiculo, "");
						finalQueryGlobalVehiculo+=VehiculoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVehiculosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVehiculo=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidVehiculoActual();
					}
				} else {
					finalQueryGlobalVehiculo="NONE";
				}


				String finalQueryGlobalRutaTransporte="";

				if(((this.rutatransportesForeignKey==null||this.rutatransportesForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_ruta_transporteServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_ruta_transporteServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionRutaTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=RutaTransporteConstantesFunciones.getArrayColumnasGlobalesRutaTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalRutaTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,RutaTransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalRutaTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalRutaTransporte, "");
						finalQueryGlobalRutaTransporte+=RutaTransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosRutaTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalRutaTransporte=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidRutaTransporteActual();
					}
				} else {
					finalQueryGlobalRutaTransporte="NONE";
				}


				String finalQueryGlobalDetalleActivoFijo="";

				if(((this.detalleactivofijosForeignKey==null||this.detalleactivofijosForeignKey.size()<=0) && this.serviciotransporteConstantesFunciones.cargarid_detalle_activo_fijoServicioTransporte)
					 || (this.esRecargarFks && this.serviciotransporteConstantesFunciones.cargarid_detalle_activo_fijoServicioTransporte)) {

					if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalDetalleActivoFijo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

						finalQueryGlobalDetalleActivoFijo=Funciones.GetFinalQueryAppend(finalQueryGlobalDetalleActivoFijo, "");
						finalQueryGlobalDetalleActivoFijo+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosDetalleActivoFijosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalDetalleActivoFijo=" WHERE " + ConstantesSql.ID + "="+serviciotransporteSessionBean.getlidDetalleActivoFijoActual();
					}
				} else {
					finalQueryGlobalDetalleActivoFijo="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				serviciotransporteReturnGeneral=serviciotransporteLogic.cargarCombosLoteForeignKeyServicioTransporte(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalCliente,finalQueryGlobalClienteProveedor,finalQueryGlobalTransportista,finalQueryGlobalVehiculo,finalQueryGlobalRutaTransporte,finalQueryGlobalDetalleActivoFijo);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=serviciotransporteReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=serviciotransporteReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=serviciotransporteReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=serviciotransporteReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=serviciotransporteReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalClienteProveedor.equals("NONE")) {
				this.clienteproveedorsForeignKey=serviciotransporteReturnGeneral.getclienteproveedorsForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=serviciotransporteReturnGeneral.gettransportistasForeignKey();
			}

			if(!finalQueryGlobalVehiculo.equals("NONE")) {
				this.vehiculosForeignKey=serviciotransporteReturnGeneral.getvehiculosForeignKey();
			}

			if(!finalQueryGlobalRutaTransporte.equals("NONE")) {
				this.rutatransportesForeignKey=serviciotransporteReturnGeneral.getrutatransportesForeignKey();
			}

			if(!finalQueryGlobalDetalleActivoFijo.equals("NONE")) {
				this.detalleactivofijosForeignKey=serviciotransporteReturnGeneral.getdetalleactivofijosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyServicioTransporte()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyClienteProveedor();
			this.addItemDefectoCombosForeignKeyTransportista();
			this.addItemDefectoCombosForeignKeyVehiculo();
			this.addItemDefectoCombosForeignKeyRutaTransporte();
			this.addItemDefectoCombosForeignKeyDetalleActivoFijo();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyClienteProveedor()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionClienteProveedor()) {
				Cliente clienteproveedor=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(clienteproveedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				clienteproveedor.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clienteproveedorsForeignKey,clienteproveedor,true)) {

					this.clienteproveedorsForeignKey.add(0,clienteproveedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVehiculo()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionVehiculo()) {
				Vehiculo vehiculo=new Vehiculo();
				VehiculoConstantesFunciones.setVehiculoDescripcion(vehiculo,Constantes.SMENSAJE_ESCOJA_OPCION);
				vehiculo.setId(null);

				if(!VehiculoConstantesFunciones.ExisteEnLista(this.vehiculosForeignKey,vehiculo,true)) {

					this.vehiculosForeignKey.add(0,vehiculo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyRutaTransporte()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionRutaTransporte()) {
				RutaTransporte rutatransporte=new RutaTransporte();
				RutaTransporteConstantesFunciones.setRutaTransporteDescripcion(rutatransporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				rutatransporte.setId(null);

				if(!RutaTransporteConstantesFunciones.ExisteEnLista(this.rutatransportesForeignKey,rutatransporte,true)) {

					this.rutatransportesForeignKey.add(0,rutatransporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyDetalleActivoFijo()throws Exception {
		try {

			if(!this.serviciotransporteSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijo()) {
				DetalleActivoFijo detalleactivofijo=new DetalleActivoFijo();
				DetalleActivoFijoConstantesFunciones.setDetalleActivoFijoDescripcion(detalleactivofijo,Constantes.SMENSAJE_ESCOJA_OPCION);
				detalleactivofijo.setId(null);

				if(!DetalleActivoFijoConstantesFunciones.ExisteEnLista(this.detalleactivofijosForeignKey,detalleactivofijo,true)) {

					this.detalleactivofijosForeignKey.add(0,detalleactivofijo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyServicioTransporte()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyServicioTransporte(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyServicioTransporte()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.serviciotransporte.setfecha_ingreso(this.parametroGeneralUsuario.getfecha_sistema());
				this.serviciotransporte.setfecha_entrega(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyServicioTransporte();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyServicioTransporte(ServicioTransporte serviciotransporte)throws Exception {	
		try {
			
			this.setActualClienteForeignKey(serviciotransporte.getid_cliente(),false,"Formulario");
			this.setActualClienteProveedorForeignKey(serviciotransporte.getid_cliente_proveedor(),false,"Formulario");
			this.setActualTransportistaForeignKey(serviciotransporte.getid_transportista(),false,"Formulario");
			this.setActualVehiculoForeignKey(serviciotransporte.getid_vehiculo(),false,"Formulario");
			this.setActualRutaTransporteForeignKey(serviciotransporte.getid_ruta_transporte(),false,"Formulario");
			this.setActualDetalleActivoFijoForeignKey(serviciotransporte.getid_detalle_activo_fijo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyServicioTransporte(ServicioTransporte serviciotransporte,String sTipoEvento)throws Exception {	
		try {
			
			

				if(serviciotransporte.getCliente()!=null && !sTipoEvento.equals("id_clienteServicioTransporte")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(serviciotransporte.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(serviciotransporte.getClienteProveedor()!=null && !sTipoEvento.equals("id_cliente_proveedorServicioTransporte")) { //sTipoEvento Evita Bucle Infinito

					this.clienteproveedorsForeignKey=new ArrayList<Cliente>();
					this.clienteproveedorsForeignKey.add(serviciotransporte.getClienteProveedor());

					this.addItemDefectoCombosForeignKeyClienteProveedor();
					this.cargarCombosFrameClienteProveedorsForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyServicioTransporte()throws Exception {	
		try {
			
			this.setActualClienteForeignKey(this.serviciotransporteConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualClienteProveedorForeignKey(this.serviciotransporteConstantesFunciones.getid_cliente_proveedor(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.serviciotransporteConstantesFunciones.getid_transportista(),false,"Formulario");
			this.setActualVehiculoForeignKey(this.serviciotransporteConstantesFunciones.getid_vehiculo(),false,"Formulario");
			this.setActualRutaTransporteForeignKey(this.serviciotransporteConstantesFunciones.getid_ruta_transporte(),false,"Formulario");
			this.setActualDetalleActivoFijoForeignKey(this.serviciotransporteConstantesFunciones.getid_detalle_activo_fijo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyServicioTransporte()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.getSelectedItem();
				}

				if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.getSelectedItem();
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyServicioTransporte()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyServicioTransporte()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroServicioTransporte()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyServicioTransporte()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameClienteProveedorsForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");
			this.cargarCombosFrameVehiculosForeignKey("Todos");
			this.cargarCombosFrameRutaTransportesForeignKey("Todos");
			this.cargarCombosFrameDetalleActivoFijosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyServicioTransporte(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClienteProveedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVehiculosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameRutaTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameDetalleActivoFijosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyServicioTransporte()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




















	
	

	public ServicioTransporteBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ServicioTransporteBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ServicioTransporteBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.serviciotransporteSessionBean=new ServicioTransporteSessionBean(); 
		this.serviciotransporteConstantesFunciones=new ServicioTransporteConstantesFunciones(); 
		this.serviciotransporteBean=new ServicioTransporte();//(this.serviciotransporteConstantesFunciones); 		
		this.serviciotransporteReturnGeneral=new ServicioTransporteParameterReturnGeneral(); 
		
		this.serviciotransporteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.serviciotransporteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ServicioTransporteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ServicioTransporteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ServicioTransporteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessServicioTransporte(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.serviciotransporteConstantesFunciones=new ServicioTransporteConstantesFunciones(); 
			this.serviciotransporteBean=new ServicioTransporte();//this.serviciotransporteConstantesFunciones); 			
			this.serviciotransporteReturnGeneral=new ServicioTransporteParameterReturnGeneral(); 
		
			ServicioTransporteBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Servicio Transporte Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.serviciotransporte=new ServicioTransporte();
			this.serviciotransportes = new ArrayList<ServicioTransporte>();
			this.serviciotransportesAux = new ArrayList<ServicioTransporte>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic=new ServicioTransporteLogic();
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			//this.serviciotransporteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.serviciotransporteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormServicioTransporte);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoServicioTransporte);	
					}
					
					if(this.jInternalFrameImportacionServicioTransporte!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionServicioTransporte);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByServicioTransporte!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByServicioTransporte);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormServicioTransporte);
				this.jInternalFrameDetalleFormServicioTransporte.setVisible(false);
				this.jInternalFrameDetalleFormServicioTransporte.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoServicioTransporte);
					this.jInternalFrameReporteDinamicoServicioTransporte.setVisible(false);
					this.jInternalFrameReporteDinamicoServicioTransporte.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionServicioTransporte!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionServicioTransporte);
					this.jInternalFrameImportacionServicioTransporte.setVisible(false);
					this.jInternalFrameImportacionServicioTransporte.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByServicioTransporte!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByServicioTransporte);
					this.jInternalFrameOrderByServicioTransporte.setVisible(false);
					this.jInternalFrameOrderByServicioTransporte.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idServicioTransporteActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ServicioTransporteConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.serviciotransporteReturnGeneral=new ServicioTransporteParameterReturnGeneral();
			
			this.serviciotransporteParameterGeneral=new ServicioTransporteParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.serviciotransporteLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ServicioTransporteJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetalleServicioTransporteConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ServicioTransporteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),this.serviciotransporteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ServicioTransporteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),this.serviciotransporteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaDuplicarServicioTransporte=true;
			this.isVisibilidadCeldaCopiarServicioTransporte=true;
			this.isVisibilidadCeldaVerFormServicioTransporte=true;
			this.isVisibilidadCeldaOrdenServicioTransporte=true;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=false;
			this.isVisibilidadCeldaGuardarServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			
			
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdClienteProveedor=true;
			this.isVisibilidadFK_IdDetalleActivoFijo=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdRutaTransporte=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdVehiculo=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosServicioTransporte();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioServicioTransporte(false);
			
			this.setPermisosUsuarioServicioTransporte();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado() 
				|| (this.serviciotransporteSessionBean.getEsGuardarRelacionado() && this.serviciotransporteSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioServicioTransporteClasesRelacionadas();
			}
			
			if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioServicioTransporteClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosServicioTransporte();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualServicioTransporte();
			}
			
			if(!this.isPermisoBusquedaServicioTransporte) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioServicioTransporte,this.isPermisoPaginacionMedioServicioTransporte,this.isPermisoPaginacionTodoServicioTransporte);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ServicioTransporteConstantesFunciones.getTiposSeleccionarServicioTransporte());
				
				this.tiposColumnasSelect=ServicioTransporteConstantesFunciones.getTiposSeleccionarServicioTransporte(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectServicioTransporte();				
				//this.tiposRelacionesSelect=ServicioTransporteConstantesFunciones.getTiposRelacionesServicioTransporte(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioServicioTransporte();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioServicioTransporte(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioServicioTransporte(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesServicioTransporte() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detalleserviciotransporteLogic=new DetalleServicioTransporteLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.clienteLogic=new ClienteLogic();
			this.clienteproveedorLogic=new ClienteLogic();
			this.transportistaLogic=new TransportistaLogic();
			this.vehiculoLogic=new VehiculoLogic();
			this.rutatransporteLogic=new RutaTransporteLogic();
			this.detalleactivofijoLogic=new DetalleActivoFijoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				serviciotransporteImplementable= (ServicioTransporteImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ServicioTransporteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				serviciotransporteImplementableHome= (ServicioTransporteImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ServicioTransporteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.serviciotransportes= new ArrayList<ServicioTransporte>();
			this.serviciotransportesEliminados= new ArrayList<ServicioTransporte>();
						
			this.isEsNuevoServicioTransporte=false;
			this.esParaAccionDesdeFormularioServicioTransporte=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			this.idClienteProveedorActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.clienteproveedorsForeignKey=new ArrayList<Cliente>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			this.vehiculosForeignKey=new ArrayList<Vehiculo>() ;
			this.rutatransportesForeignKey=new ArrayList<RutaTransporte>() ;
			this.detalleactivofijosForeignKey=new ArrayList<DetalleActivoFijo>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyServicioTransporte(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroServicioTransporte();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ServicioTransporteBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ServicioTransporteConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesServicioTransporte("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingServicioTransporte(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioServicioTransporte();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioServicioTransporte();
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasServicioTransporte.getTabCount(); i++) {
					this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessServicioTransporte(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ServicioTransporte: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectServicioTransporte() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetalleServicioTransporteConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleServicioTransporteConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesServicioTransporte")) {
				iIndex=this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Servicio Transportes")) {
					if(!DetalleServicioTransporteJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessServicioTransporte();

						this.cargarParteTabPanelRelacionadaDetalleServicioTransporte(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessServicioTransporte();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleServicioTransporte(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormServicioTransporte.cargarSessionConBeanSwingJInternalFrameDetalleServicioTransporte(false,true,iIndex);
		this.jButtonDetalleServicioTransporteActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleServicioTransporte();

		//this.jTabbedPaneRelacionesServicioTransporte.updateUI();
		//this.jTabbedPaneRelacionesServicioTransporte.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesServicioTransporte.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetalleServicioTransporte")) {
				int row=this.jTableDatosServicioTransporte.getSelectedRow();
				jButtonDetalleServicioTransporteActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Servicio Transporte")) {

					if(this.isTienePermisosDetalleServicioTransporte && this.serviciotransporteConstantesFunciones.mostrarDetalleServicioTransporteServicioTransporte && !ServicioTransporteConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Servicio Transportes"+"("+DetalleServicioTransporteConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Servicio Transportes");

						if(serviciotransporteConstantesFunciones.resaltarDetalleServicioTransporteServicioTransporte!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(serviciotransporteConstantesFunciones.resaltarDetalleServicioTransporteServicioTransporte);
						}

						jmenuItem.setEnabled(this.serviciotransporteConstantesFunciones.activarDetalleServicioTransporteServicioTransporte);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleServicioTransporte"));

						

						this.jInternalFrameDetalleFormServicioTransporte.jmenuDetalleServicioTransporte.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyServicioTransporte(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyServicioTransporte(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyServicioTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyServicioTransporteListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyServicioTransporte();
		
		this.cargarCombosFrameForeignKeyServicioTransporte();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyServicioTransporte();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyServicioTransporte();
		}
	}
	
	

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteProveedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteProveedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyClienteProveedor();
				this.cargarCombosFrameClienteProveedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaClienteProveedor(this.clienteproveedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVehiculo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVehiculoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVehiculo();
				this.cargarCombosFrameVehiculosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVehiculo(this.vehiculosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyRutaTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyRutaTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyRutaTransporte();
				this.cargarCombosFrameRutaTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaRutaTransporte(this.rutatransportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyDetalleActivoFijoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyDetalleActivoFijo();
				this.cargarCombosFrameDetalleActivoFijosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaDetalleActivoFijo(this.detalleactivofijosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoServicioTransporteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			
			if(jTableDatosServicioTransporte.getRowCount()>=1) {
				jTableDatosServicioTransporte.removeRowSelectionInterval(0, jTableDatosServicioTransporte.getRowCount()-1);						
			}
			
			this.isEsNuevoServicioTransporte=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoServicioTransporte(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesServicioTransporte(true);			
			//this.serviciotransporte=new ServicioTransporte();
			//this.serviciotransporte.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicioTransporte(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicioTransporte() ;
			
			if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicioTransporte(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.serviciotransporte);	
			this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);				
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ServicioTransporte: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarServicioTransporteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosServicioTransporte.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosServicioTransporte.getSelectedRows().length;			
			}
			
			serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoServicioTransporte--;			
				//ServicioTransporte serviciotransporteAux= new ServicioTransporte();			
				//serviciotransporteAux.setId(this.iIdNuevoServicioTransporte);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ServicioTransporte serviciotransporteOrigen=new ServicioTransporte();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ServicioTransporte serviciotransporteOrigen : serviciotransportesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							serviciotransporteOrigen =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciotransporteOrigen =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaServicioTransporte();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.serviciotransporte.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosServicioTransporte(serviciotransporteOrigen,this.serviciotransporte,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.serviciotransporteLogic.getServicioTransportes().add(this.serviciotransporteAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.serviciotransportes.add(this.serviciotransporteAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaServicioTransporte(false);
				
				this.jTableDatosServicioTransporte.setRowSelectionInterval(this.getIndiceNuevoServicioTransporte(), this.getIndiceNuevoServicioTransporte());
				
				int iLastRow =  this.jTableDatosServicioTransporte.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosServicioTransporte.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosServicioTransporte.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaServicioTransporte(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();									
		
			ServicioTransporte serviciotransporteOrigen=new ServicioTransporte();
			ServicioTransporte serviciotransporteDestino=new ServicioTransporte();
				
			serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosServicioTransporte.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || serviciotransportesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosServicioTransporte.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteOrigen =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						serviciotransporteOrigen =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciotransporteDestino =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						serviciotransporteDestino =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				serviciotransporteOrigen =serviciotransportesSeleccionados.get(0);
				serviciotransporteDestino =serviciotransportesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosServicioTransporte(serviciotransporteOrigen,serviciotransporteDestino,true,false);
				
				serviciotransporteDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(serviciotransporteDestino,serviciotransporteLogic.getServicioTransportes());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(serviciotransporteDestino,serviciotransportes);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaServicioTransporte(false);
				
				//this.jTableDatosServicioTransporte.setRowSelectionInterval(this.getIndiceNuevoServicioTransporte(), this.getIndiceNuevoServicioTransporte());
				
				int iLastRow =  this.jTableDatosServicioTransporte.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosServicioTransporte.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosServicioTransporte.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaServicioTransporte(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormServicioTransporte.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesServicioTransporte.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasServicioTransporte.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesServicioTransporte.setVisible(!isVisible);
			this.jPanelPaginacionServicioTransporte.setVisible(!isVisible);
			this.jPanelAccionesServicioTransporte.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameServicioTransporte();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoServicioTransporte();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionServicioTransporte();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByServicioTransporte();
			
			this.abrirFrameOrderByServicioTransporte();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByServicioTransporte();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleServicioTransporte(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormServicioTransporte);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormServicioTransporte.isMaximum()) {
					this.jInternalFrameDetalleFormServicioTransporte.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormServicioTransporte.setSize(this.jInternalFrameDetalleFormServicioTransporte.iWidthFormulario,this.jInternalFrameDetalleFormServicioTransporte.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormServicioTransporte.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormServicioTransporte.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormServicioTransporte.isMaximum()) {
						this.jInternalFrameDetalleFormServicioTransporte.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormServicioTransporte.jContentPaneDetalleServicioTransporte.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormServicioTransporte.jContentPaneDetalleServicioTransporte.getWidth(),ServicioTransporteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormServicioTransporte.jContentPaneDetalleServicioTransporte.getWidth(),ServicioTransporteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormServicioTransporte.jContentPaneDetalleServicioTransporte.getWidth(),ServicioTransporteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleServicioTransporteJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleServicioTransporte();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormServicioTransporte.setVisible(true);
	        this.jInternalFrameDetalleFormServicioTransporte.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByServicioTransporte() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByServicioTransporte==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByServicioTransporte=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByServicioTransporte,false,this);
				} else {
					this.jInternalFrameOrderByServicioTransporte=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByServicioTransporte,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByServicioTransporte);
				this.jInternalFrameOrderByServicioTransporte.setVisible(false);
				this.jInternalFrameOrderByServicioTransporte.setSelected(false);
				
				this.jInternalFrameOrderByServicioTransporte.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByServicioTransporte"));
				
				this.inicializarActualizarBindingTablaOrderByServicioTransporte();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionServicioTransporte() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionServicioTransporte==null) {
				
				this.jInternalFrameImportacionServicioTransporte=new ImportacionJInternalFrame(ServicioTransporteConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionServicioTransporte);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionServicioTransporte);
				this.jInternalFrameImportacionServicioTransporte.setVisible(false);
				this.jInternalFrameImportacionServicioTransporte.setSelected(false);


				this.jInternalFrameImportacionServicioTransporte.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionServicioTransporte"));
				this.jInternalFrameImportacionServicioTransporte.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionServicioTransporte"));
				this.jInternalFrameImportacionServicioTransporte.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionServicioTransporte"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoServicioTransporte() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoServicioTransporte==null) {
				this.jInternalFrameReporteDinamicoServicioTransporte=new ReporteDinamicoJInternalFrame(ServicioTransporteConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoServicioTransporte);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoServicioTransporte);
				this.jInternalFrameReporteDinamicoServicioTransporte.setVisible(false);
				this.jInternalFrameReporteDinamicoServicioTransporte.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicioTransporte"));
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicioTransporte"));
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicioTransporte"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicioTransporte();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleServicioTransporte() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.jScrollPanelDatosDetalleServicioTransporte.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormServicioTransporte.jContentPaneDetalleServicioTransporte.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.jScrollPanelDatosDetalleServicioTransporte.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.jScrollPanelDatosDetalleServicioTransporte.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.jScrollPanelDatosDetalleServicioTransporte.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleServicioTransporte() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormServicioTransporte);
			
	       	this.jInternalFrameDetalleFormServicioTransporte.setVisible(false);
	        this.jInternalFrameDetalleFormServicioTransporte.setSelected(false);
			
			//this.jInternalFrameDetalleFormServicioTransporte.dispose();
			//this.jInternalFrameDetalleFormServicioTransporte=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoServicioTransporte() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoServicioTransporte.setVisible(true);
	        this.jInternalFrameReporteDinamicoServicioTransporte.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionServicioTransporte() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionServicioTransporte.setVisible(true);
	        this.jInternalFrameImportacionServicioTransporte.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByServicioTransporte() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByServicioTransporte.setVisible(true);
	        this.jInternalFrameOrderByServicioTransporte.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByServicioTransporte() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByServicioTransporte.setVisible(false);
	        this.jInternalFrameOrderByServicioTransporte.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoServicioTransporte() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoServicioTransporte.setVisible(false);
	        this.jInternalFrameReporteDinamicoServicioTransporte.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionServicioTransporte() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionServicioTransporte.setVisible(false);
	        this.jInternalFrameImportacionServicioTransporte.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarServicioTransporte(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarServicioTransporte(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesServicioTransporte(true);
			//this.isEsNuevoServicioTransporte=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesServicioTransporte("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicioTransporte(false) ;
			
			if(serviciotransporteSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.getEsGuardarRelacionado() && DetalleServicioTransporteJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleServicioTransporteActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicioTransporte(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicioTransporte(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaServicioTransporteActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarServicioTransporte(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesServicioTransporte(true);
			//this.isEsNuevoServicioTransporte=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.serviciotransporte.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesServicioTransporte("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesServicioTransporte(false) ;
			
			if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicioTransporte(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicioTransporte(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.serviciotransporteConstantesFunciones.cargarid_clienteServicioTransporte) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicioTransporte(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("ClienteProveedor")) {
				if(!this.serviciotransporteConstantesFunciones.cargarid_cliente_proveedorServicioTransporte) {
					this.cargarCombosClienteProveedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicioTransporte(false,false);
					this.cargarCombosFrameClienteProveedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente_proveedor (id);

				this.recargarComboTablaClienteProveedor(this.clienteproveedorsForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaClienteProveedor(List<Cliente> clienteproveedorsForeignKey)throws Exception{
		TableColumn tableColumnClienteProveedor=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR));
		TableCellEditor tableCellEditorClienteProveedor =tableColumnClienteProveedor.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorClienteProveedor;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clienteproveedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clienteproveedorsForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaVehiculo(List<Vehiculo> vehiculosForeignKey)throws Exception{
		TableColumn tableColumnVehiculo=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO));
		TableCellEditor tableCellEditorVehiculo =tableColumnVehiculo.getCellEditor();

		VehiculoTableCell vehiculoTableCellFk=(VehiculoTableCell)tableCellEditorVehiculo;

		if(vehiculoTableCellFk!=null) {
			vehiculoTableCellFk.setvehiculosForeignKey(vehiculosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vehiculoTableCellFk.setRowActual(intSelectedRow);
			//vehiculoTableCellFk.setvehiculosForeignKeyActual(vehiculosForeignKey);
		//}


		if(vehiculoTableCellFk!=null) {
			vehiculoTableCellFk.RecargarVehiculosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaRutaTransporte(List<RutaTransporte> rutatransportesForeignKey)throws Exception{
		TableColumn tableColumnRutaTransporte=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE));
		TableCellEditor tableCellEditorRutaTransporte =tableColumnRutaTransporte.getCellEditor();

		RutaTransporteTableCell rutatransporteTableCellFk=(RutaTransporteTableCell)tableCellEditorRutaTransporte;

		if(rutatransporteTableCellFk!=null) {
			rutatransporteTableCellFk.setrutatransportesForeignKey(rutatransportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//rutatransporteTableCellFk.setRowActual(intSelectedRow);
			//rutatransporteTableCellFk.setrutatransportesForeignKeyActual(rutatransportesForeignKey);
		//}


		if(rutatransporteTableCellFk!=null) {
			rutatransporteTableCellFk.RecargarRutaTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaDetalleActivoFijo(List<DetalleActivoFijo> detalleactivofijosForeignKey)throws Exception{
		TableColumn tableColumnDetalleActivoFijo=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO));
		TableCellEditor tableCellEditorDetalleActivoFijo =tableColumnDetalleActivoFijo.getCellEditor();

		DetalleActivoFijoTableCell detalleactivofijoTableCellFk=(DetalleActivoFijoTableCell)tableCellEditorDetalleActivoFijo;

		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.setdetalleactivofijosForeignKey(detalleactivofijosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();

		//if(intSelectedRow<=0) {
			//detalleactivofijoTableCellFk.setRowActual(intSelectedRow);
			//detalleactivofijoTableCellFk.setdetalleactivofijosForeignKeyActual(detalleactivofijosForeignKey);
		//}


		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.RecargarDetalleActivoFijosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente_proveedor (Long id) throws Exception {
		this.setActualClienteProveedorForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesServicioTransporte(false);
			
			//if(!this.isEsNuevoServicioTransporte) {								
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				
			}
			
			if(this.permiteMantenimiento(this.serviciotransporte)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoServicioTransporte=true;
					this.inicializarActualizarBindingTablaServicioTransporte(false);
					this.isEsNuevoServicioTransporte=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoServicioTransporte=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoServicioTransporte=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesServicioTransporte(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicioTransporte(false);
				
				this.habilitarDeshabilitarControlesServicioTransporte(false);
			
												
				
				if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleServicioTransporte();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoServicioTransporteActionPerformed(evt,serviciotransporteSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualServicioTransporte(this.serviciotransporte,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,serviciotransporteSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.serviciotransporte.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				this.serviciotransporte.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				this.serviciotransporte.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.serviciotransporte)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ServicioTransporteModel) this.jTableDatosServicioTransporte.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoServicioTransporte=true;
				this.inicializarActualizarBindingTablaServicioTransporte(false);
				this.isEsNuevoServicioTransporte=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesServicioTransporte(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicioTransporte(false);
				
				this.habilitarDeshabilitarControlesServicioTransporte(false);
				
				
				
				if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleServicioTransporte();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarServicioTransporteActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosServicioTransporte.getRowCount()>=1) {
				jTableDatosServicioTransporte.removeRowSelectionInterval(0, jTableDatosServicioTransporte.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesServicioTransporte(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaServicioTransporte(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicioTransporte(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicioTransporte(false) ;
			
			this.isEsNuevoServicioTransporte=false;
			
			if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleServicioTransporte();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingServicioTransporte(false);
				
				//SI ES MANUAL
				if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualServicioTransporte();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoServicioTransporte--;			
			//ServicioTransporte serviciotransporteAux= new ServicioTransporte();			
			//serviciotransporteAux.setId(this.iIdNuevoServicioTransporte);
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaServicioTransporte();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
			
			this.serviciotransporte.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.serviciotransporteLogic.getServicioTransportes().add(this.serviciotransporteAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.serviciotransportes.add(this.serviciotransporteAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaServicioTransporte(false);
			
			this.jTableDatosServicioTransporte.setRowSelectionInterval(this.getIndiceNuevoServicioTransporte(), this.getIndiceNuevoServicioTransporte());
			
			int iLastRow =  this.jTableDatosServicioTransporte.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosServicioTransporte.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosServicioTransporte.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaServicioTransporte(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicioTransporte(false);
			
			//SI ES MANUAL
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicioTransporte();
			}
			
			//this.abrirFrameTreeServicioTransporte();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Servicio TransporteS ?", "MANTENIMIENTO DE Servicio Transporte", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionServicioTransporte.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralServicioTransporte();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.serviciotransporteReturnGeneral=serviciotransporteLogic.procesarImportacionServicioTransportesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.serviciotransporteParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarServicioTransporteReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionServicioTransporte.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionServicioTransporte.setFileImportacion(this.jInternalFrameImportacionServicioTransporte.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionServicioTransporte.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionServicioTransporte.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionServicioTransporte.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionServicioTransporte.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		

		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ServicioTransporteBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ServicioTransporteBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ClienteProveedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ClienteProveedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ClienteProveedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ClienteProveedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vehiculo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vehiculo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vehiculo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vehiculo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_RutaTransporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_RutaTransporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_RutaTransporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_RutaTransporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_DetalleActivoFijo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_DetalleActivoFijo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_DetalleActivoFijo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_DetalleActivoFijo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaIngreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaIngreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaIngreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaIngreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEntrega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEntrega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEntrega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEntrega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoGuia1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoGuia1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoGuia1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoGuia1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoGuia2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoGuia2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoGuia2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoGuia2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_PRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoServicioTransporte.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR:
					sNombreCampoCategoria="id_cliente_proveedor";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO:
					sNombreCampoCategoria="id_vehiculo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE:
					sNombreCampoCategoria="id_ruta_transporte";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO:
					sNombreCampoCategoria="id_detalle_activo_fijo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO:
					sNombreCampoCategoria="fecha_ingreso";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoria="fecha_entrega";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1:
					sNombreCampoCategoria="codigo_guia1";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2:
					sNombreCampoCategoria="codigo_guia2";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoria="precio";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORIVA:
					sNombreCampoCategoria="valor_iva";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL:
					sNombreCampoCategoria="valor_total";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR:
					sNombreCampoCategoriaValor="id_cliente_proveedor";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO:
					sNombreCampoCategoriaValor="id_vehiculo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE:
					sNombreCampoCategoriaValor="id_ruta_transporte";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO:
					sNombreCampoCategoriaValor="id_detalle_activo_fijo";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO:
					sNombreCampoCategoriaValor="fecha_ingreso";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA:
					sNombreCampoCategoriaValor="fecha_entrega";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1:
					sNombreCampoCategoriaValor="codigo_guia1";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2:
					sNombreCampoCategoriaValor="codigo_guia2";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoriaValor="precio";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORIVA:
					sNombreCampoCategoriaValor="valor_iva";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL:
					sNombreCampoCategoriaValor="valor_total";
					break;

				case ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente_proveedor");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vehiculo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vehiculo");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruta Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ruta_transporte");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle Activo Fijo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_detalle_activo_fijo");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Ingreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_ingreso");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Entrega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_entrega");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Guia1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_guia1");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Guia2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_guia2");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_PRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"precio");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_iva");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_total");
					break;

				case ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ServicioTransportes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getclienteproveedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getvehiculo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getrutatransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getdetalleactivofijo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getfecha_ingreso());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getfecha_entrega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getcodigo_guia1());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getcodigo_guia2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_PRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_PRECIO);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getprecio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORIVA);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getvalor_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getvalor_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(ServicioTransporte serviciotransporte:serviciotransportesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(serviciotransporte.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelServicioTransporte(row);				
			//	iRow++;
			//}				
			
			//for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelServicioTransporte(serviciotransporteAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicioTransporte(false);
			
			//SI ES MANUAL
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicioTransporte();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicioTransporte(false);
			
			//SI ES MANUAL
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualServicioTransporte();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesServicioTransporteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicioTransporte(false);
			
			//SI ES MANUAL
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualServicioTransporte();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaServicioTransporte() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosServicioTransporte.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosServicioTransporte.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosServicioTransporte.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosServicioTransporte.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosServicioTransporte.setMinimumSize(dimensionMinimum);
		this.jTableDatosServicioTransporte.setMaximumSize(dimensionMaximum);
		this.jTableDatosServicioTransporte.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingServicioTransporte(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingServicioTransporte(esInicializar,true);
	}
	
	public void inicializarActualizarBindingServicioTransporte(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaServicioTransporte(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesServicioTransporte(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasServicioTransporte(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesServicioTransporte(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesServicioTransporte(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualServicioTransporte() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaServicioTransporte();
		
		this.inicializarActualizarBindingBotonesManualServicioTransporte(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualServicioTransporte();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesServicioTransporte() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualServicioTransporte(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualServicioTransporte(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosServicioTransporte.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosServicioTransporte.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteServicioTransporte.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionNuevoServicioTransporte.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionSinCerrarServicioTransporte.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionSinMensajeServicioTransporte.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosServicioTransporte.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosServicioTransporte.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteServicioTransporte.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
				this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionNuevoServicioTransporte.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionSinCerrarServicioTransporte.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormServicioTransporte.jCheckBoxPostAccionSinMensajeServicioTransporte.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionServicioTransporte.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionServicioTransporte.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesServicioTransporte.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesServicioTransporte.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesServicioTransporte.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarServicioTransporte.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesServicioTransporte.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesServicioTransporte.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralServicioTransporte.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesServicioTransporte(Boolean esInicializar) throws Exception {
		try	{	
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualServicioTransporte(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesServicioTransporte() throws Exception {
		try	{
			if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualServicioTransporte();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleServicioTransporte() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualServicioTransporte() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesServicioTransporte.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesServicioTransporte.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesServicioTransporte.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionServicioTransporte.addItem(reporte);
			}
			
			
			if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionServicioTransporte.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionServicioTransporte.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesServicioTransporte.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesServicioTransporte.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarServicioTransporte.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarServicioTransporte.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarServicioTransporte.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicioTransporte();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicioTransporte() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
				this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
				this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
				
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ServicioTransporteConstantesFunciones.getTiposSeleccionarServicioTransporte(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ServicioTransporteConstantesFunciones.getTiposSeleccionarServicioTransporte(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ServicioTransporteConstantesFunciones.getTiposSeleccionarServicioTransporte(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicioTransporte.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoServicioTransporte.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualServicioTransporte()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_clienteFK_IdClienteServicioTransporte.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteServicioTransporte.getSelectedItem()).getId();}
		if(this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.getSelectedItem()!=null){this.id_cliente_proveedorFK_IdClienteProveedor=((Cliente)this.jComboBoxid_cliente_proveedorFK_IdClienteProveedorServicioTransporte.getSelectedItem()).getId();}
		if(this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.getSelectedItem()!=null){this.id_detalle_activo_fijoFK_IdDetalleActivoFijo=((DetalleActivoFijo)this.jComboBoxid_detalle_activo_fijoFK_IdDetalleActivoFijoServicioTransporte.getSelectedItem()).getId();}
		if(this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.getSelectedItem()!=null){this.id_ruta_transporteFK_IdRutaTransporte=((RutaTransporte)this.jComboBoxid_ruta_transporteFK_IdRutaTransporteServicioTransporte.getSelectedItem()).getId();}
		if(this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.getSelectedItem()!=null){this.id_transportistaFK_IdTransportista=((Transportista)this.jComboBoxid_transportistaFK_IdTransportistaServicioTransporte.getSelectedItem()).getId();}
		if(this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.getSelectedItem()!=null){this.id_vehiculoFK_IdVehiculo=((Vehiculo)this.jComboBoxid_vehiculoFK_IdVehiculoServicioTransporte.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasServicioTransporte(Boolean esInicializar) throws Exception {				
		if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualServicioTransporte();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaServicioTransporte() throws Exception {
		this.inicializarActualizarBindingTablaServicioTransporte(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByServicioTransporte() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosServicioTransporteOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporteOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaServicioTransporte(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=serviciotransporteLogic.getServicioTransportes().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=serviciotransportes.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosServicioTransporte.setModel(new ServicioTransporteModel(this.serviciotransporteLogic.getServicioTransportes(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosServicioTransporte.setModel(new ServicioTransporteModel(this.serviciotransportes,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByServicioTransporte!=null && this.jInternalFrameOrderByServicioTransporte.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByServicioTransporte();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ServicioTransporteConstantesFunciones.SCLASSWEBTITULO,serviciotransporteConstantesFunciones.resaltarSeleccionarServicioTransporte,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ServicioTransporteConstantesFunciones.SCLASSWEBTITULO,serviciotransporteConstantesFunciones.resaltarSeleccionarServicioTransporte,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_ID));

		if(this.serviciotransporteConstantesFunciones.mostraridServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.serviciotransporteConstantesFunciones.resaltaridServicioTransporte,this.serviciotransporteConstantesFunciones.activaridServicioTransporte,iSizeTabla,this,true,"idServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltaridServicioTransporte,this.serviciotransporteConstantesFunciones.activaridServicioTransporte,this,true,"idServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA));

		if(this.serviciotransporteConstantesFunciones.mostrarid_empresaServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_empresaServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_empresaServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_empresaServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_empresaServicioTransporte,false,"id_empresaServicioTransporte","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.serviciotransporteConstantesFunciones.mostrarid_sucursalServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_sucursalServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_sucursalServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_sucursalServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_sucursalServicioTransporte,false,"id_sucursalServicioTransporte","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.serviciotransporteConstantesFunciones.mostrarid_ejercicioServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_ejercicioServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_ejercicioServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_ejercicioServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_ejercicioServicioTransporte,false,"id_ejercicioServicioTransporte","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDPERIODO));

		if(this.serviciotransporteConstantesFunciones.mostrarid_periodoServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_periodoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_periodoServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_periodoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_periodoServicioTransporte,false,"id_periodoServicioTransporte","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE));

		if(this.serviciotransporteConstantesFunciones.mostrarid_clienteServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_clienteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_clienteServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_clienteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_clienteServicioTransporte,true,"id_clienteServicioTransporte","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR));

		if(this.serviciotransporteConstantesFunciones.mostrarid_cliente_proveedorServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clienteproveedorsForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_cliente_proveedorServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_cliente_proveedorServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clienteproveedorsForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_cliente_proveedorServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_cliente_proveedorServicioTransporte,true,"id_cliente_proveedorServicioTransporte","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA));

		if(this.serviciotransporteConstantesFunciones.mostrarid_transportistaServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransportistaTableCell(this.transportistasForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_transportistaServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_transportistaServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new TransportistaTableCell(this.transportistasForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_transportistaServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_transportistaServicioTransporte,true,"id_transportistaServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO));

		if(this.serviciotransporteConstantesFunciones.mostrarid_vehiculoServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VehiculoTableCell(this.vehiculosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_vehiculoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_vehiculoServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new VehiculoTableCell(this.vehiculosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_vehiculoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_vehiculoServicioTransporte,true,"id_vehiculoServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE));

		if(this.serviciotransporteConstantesFunciones.mostrarid_ruta_transporteServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new RutaTransporteTableCell(this.rutatransportesForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_ruta_transporteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_ruta_transporteServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new RutaTransporteTableCell(this.rutatransportesForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_ruta_transporteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_ruta_transporteServicioTransporte,true,"id_ruta_transporteServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO));

		if(this.serviciotransporteConstantesFunciones.mostrarid_detalle_activo_fijoServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new DetalleActivoFijoTableCell(this.detalleactivofijosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_detalle_activo_fijoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_detalle_activo_fijoServicioTransporte,iSizeTabla));
			tableColumn.setCellEditor(new DetalleActivoFijoTableCell(this.detalleactivofijosForeignKey,this.serviciotransporteConstantesFunciones.resaltarid_detalle_activo_fijoServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarid_detalle_activo_fijoServicioTransporte,true,"id_detalle_activo_fijoServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO));

		if(this.serviciotransporteConstantesFunciones.mostrarfecha_ingresoServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.serviciotransporteConstantesFunciones.resaltarfecha_ingresoServicioTransporte,this.serviciotransporteConstantesFunciones.activarfecha_ingresoServicioTransporte,iSizeTabla,this,true,"fecha_ingresoServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarfecha_ingresoServicioTransporte,this.serviciotransporteConstantesFunciones.activarfecha_ingresoServicioTransporte,this,true,"fecha_ingresoServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA));

		if(this.serviciotransporteConstantesFunciones.mostrarfecha_entregaServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.serviciotransporteConstantesFunciones.resaltarfecha_entregaServicioTransporte,this.serviciotransporteConstantesFunciones.activarfecha_entregaServicioTransporte,iSizeTabla,this,true,"fecha_entregaServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarfecha_entregaServicioTransporte,this.serviciotransporteConstantesFunciones.activarfecha_entregaServicioTransporte,this,true,"fecha_entregaServicioTransporte","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1));

		if(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia1ServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia1ServicioTransporte,this.serviciotransporteConstantesFunciones.activarcodigo_guia1ServicioTransporte,iSizeTabla,this,true,"codigo_guia1ServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia1ServicioTransporte,this.serviciotransporteConstantesFunciones.activarcodigo_guia1ServicioTransporte,this,true,"codigo_guia1ServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2));

		if(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia2ServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia2ServicioTransporte,this.serviciotransporteConstantesFunciones.activarcodigo_guia2ServicioTransporte,iSizeTabla,this,true,"codigo_guia2ServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia2ServicioTransporte,this.serviciotransporteConstantesFunciones.activarcodigo_guia2ServicioTransporte,this,true,"codigo_guia2ServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_PRECIO));

		if(this.serviciotransporteConstantesFunciones.mostrarprecioServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_PRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.serviciotransporteConstantesFunciones.resaltarprecioServicioTransporte,this.serviciotransporteConstantesFunciones.activarprecioServicioTransporte,iSizeTabla,this,true,"precioServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarprecioServicioTransporte,this.serviciotransporteConstantesFunciones.activarprecioServicioTransporte,this,true,"precioServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_VALORIVA));

		if(this.serviciotransporteConstantesFunciones.mostrarvalor_ivaServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_VALORIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.serviciotransporteConstantesFunciones.resaltarvalor_ivaServicioTransporte,this.serviciotransporteConstantesFunciones.activarvalor_ivaServicioTransporte,iSizeTabla,this,true,"valor_ivaServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarvalor_ivaServicioTransporte,this.serviciotransporteConstantesFunciones.activarvalor_ivaServicioTransporte,this,true,"valor_ivaServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL));

		if(this.serviciotransporteConstantesFunciones.mostrarvalor_totalServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.serviciotransporteConstantesFunciones.resaltarvalor_totalServicioTransporte,this.serviciotransporteConstantesFunciones.activarvalor_totalServicioTransporte,iSizeTabla,this,true,"valor_totalServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltarvalor_totalServicioTransporte,this.serviciotransporteConstantesFunciones.activarvalor_totalServicioTransporte,this,true,"valor_totalServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION));

		if(this.serviciotransporteConstantesFunciones.mostrardescripcionServicioTransporte && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.serviciotransporteConstantesFunciones.resaltardescripcionServicioTransporte,this.serviciotransporteConstantesFunciones.activardescripcionServicioTransporte,iSizeTabla,this,true,"descripcionServicioTransporte","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.serviciotransporteConstantesFunciones.resaltardescripcionServicioTransporte,this.serviciotransporteConstantesFunciones.activardescripcionServicioTransporte,this,true,"descripcionServicioTransporte","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioTransportePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetalleServicioTransporte && this.serviciotransporteConstantesFunciones.mostrarDetalleServicioTransporteServicioTransporte && !ServicioTransporteConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Servicio Transportes");
				tableColumn.setHeaderValue("Detalle Servicio Transportes");
				tableColumn.setCellRenderer(new DetalleServicioTransporteTableCell(serviciotransporteConstantesFunciones.resaltarDetalleServicioTransporteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarDetalleServicioTransporteServicioTransporte));
				tableColumn.setCellEditor(new DetalleServicioTransporteTableCell(serviciotransporteConstantesFunciones.resaltarDetalleServicioTransporteServicioTransporte,this,this.serviciotransporteConstantesFunciones.activarDetalleServicioTransporteServicioTransporte));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosServicioTransporte.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosServicioTransporte.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosServicioTransporte.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.serviciotransporteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosServicioTransporte.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosServicioTransporte.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosServicioTransporte.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.serviciotransporteSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosServicioTransporte.moveColumn(this.jTableDatosServicioTransporte.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosServicioTransporte.moveColumn(this.jTableDatosServicioTransporte.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.serviciotransporteSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosServicioTransporte.moveColumn(this.jTableDatosServicioTransporte.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosServicioTransporte.moveColumn(this.jTableDatosServicioTransporte.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosServicioTransporte.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosServicioTransporte.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosServicioTransporte,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosServicioTransporte.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosServicioTransporte.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosServicioTransporte.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosServicioTransporte.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosServicioTransporte.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=serviciotransporteLogic.getServicioTransportes().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=serviciotransportes.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosServicioTransporte.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosServicioTransporte.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosServicioTransporte();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoServicioTransporte=false;
					
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
				if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormServicioTransporte==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosServicioTransporte.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.serviciotransporte.getsType().equals("DUPLICADO")
				   || this.serviciotransporte.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoServicioTransporte=true;
				
				} else {
					this.isEsNuevoServicioTransporte=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					if(this.serviciotransporte.getId()>=0 && !this.serviciotransporte.getIsNew()) {						
						this.isEsNuevoServicioTransporte=false;
						
					} else {
						this.isEsNuevoServicioTransporte=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoServicioTransporte(esRelaciones);						
				
				this.seleccionarServicioTransporte(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.serviciotransporte.getId()<0) {
					this.isEsNuevoServicioTransporte=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarServicioTransporte(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarServicioTransporte(evt,rowIndex);
				}	
				
				if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ServicioTransporte: " + this.dDif); 
					}
				}								
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarServicioTransporte(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.serviciotransporte)) {
					if(this.serviciotransporte.getId()>0) {
						this.serviciotransporte.setIsDeleted(true);
						
						this.serviciotransportesEliminados.add(this.serviciotransporte);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.serviciotransporteLogic.getServicioTransportes().remove(this.serviciotransporte);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.serviciotransportes.remove(this.serviciotransporte);				
					}
					
					
					((ServicioTransporteModel) this.jTableDatosServicioTransporte.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaServicioTransporte(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarServicioTransporte(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoServicioTransporte) {
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosServicioTransporte.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosServicioTransporte.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioServicioTransporte(this.serviciotransporte);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.serviciotransporteConstantesFunciones.cargarid_empresaServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_empresaServicioTransporte) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.serviciotransporte.getid_empresa());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(serviciotransporte.getEmpresa()!=null) {
							this.empresasForeignKey.add(serviciotransporte.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.serviciotransporte.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.serviciotransporteConstantesFunciones.cargarid_sucursalServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_sucursalServicioTransporte) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.serviciotransporte.getid_sucursal());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(serviciotransporte.getSucursal()!=null) {
							this.sucursalsForeignKey.add(serviciotransporte.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.serviciotransporte.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.serviciotransporteConstantesFunciones.cargarid_ejercicioServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_ejercicioServicioTransporte) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.serviciotransporte.getid_ejercicio());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(serviciotransporte.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(serviciotransporte.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.serviciotransporte.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.serviciotransporteConstantesFunciones.cargarid_periodoServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_periodoServicioTransporte) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.serviciotransporte.getid_periodo());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(serviciotransporte.getPeriodo()!=null) {
							this.periodosForeignKey.add(serviciotransporte.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.serviciotransporte.getid_periodo(),false,"Formulario");

					//Cliente
					if(!this.serviciotransporteConstantesFunciones.cargarid_clienteServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_clienteServicioTransporte) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.serviciotransporte.getid_cliente());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(serviciotransporte.getCliente()!=null) {
							this.clientesForeignKey.add(serviciotransporte.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.serviciotransporte.getid_cliente(),false,"Formulario");

					//ClienteProveedor
					if(!this.serviciotransporteConstantesFunciones.cargarid_cliente_proveedorServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_cliente_proveedorServicioTransporte) {
						//this.cargarCombosClienteProveedorsForeignKeyLista(" where id="+this.serviciotransporte.getid_cliente_proveedor());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.clienteproveedorsForeignKey=new ArrayList<Cliente>();

						if(serviciotransporte.getClienteProveedor()!=null) {
							this.clienteproveedorsForeignKey.add(serviciotransporte.getClienteProveedor());
						}

						this.addItemDefectoCombosForeignKeyClienteProveedor();
						this.cargarCombosFrameClienteProveedorsForeignKey("Todos");
					}
					this.setActualClienteProveedorForeignKey(this.serviciotransporte.getid_cliente_proveedor(),false,"Formulario");

					//Transportista
					if(!this.serviciotransporteConstantesFunciones.cargarid_transportistaServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_transportistaServicioTransporte) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.serviciotransporte.getid_transportista());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(serviciotransporte.getTransportista()!=null) {
							this.transportistasForeignKey.add(serviciotransporte.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.serviciotransporte.getid_transportista(),false,"Formulario");

					//Vehiculo
					if(!this.serviciotransporteConstantesFunciones.cargarid_vehiculoServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_vehiculoServicioTransporte) {
						//this.cargarCombosVehiculosForeignKeyLista(" where id="+this.serviciotransporte.getid_vehiculo());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.vehiculosForeignKey=new ArrayList<Vehiculo>();

						if(serviciotransporte.getVehiculo()!=null) {
							this.vehiculosForeignKey.add(serviciotransporte.getVehiculo());
						}

						this.addItemDefectoCombosForeignKeyVehiculo();
						this.cargarCombosFrameVehiculosForeignKey("Todos");
					}
					this.setActualVehiculoForeignKey(this.serviciotransporte.getid_vehiculo(),false,"Formulario");

					//RutaTransporte
					if(!this.serviciotransporteConstantesFunciones.cargarid_ruta_transporteServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_ruta_transporteServicioTransporte) {
						//this.cargarCombosRutaTransportesForeignKeyLista(" where id="+this.serviciotransporte.getid_ruta_transporte());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.rutatransportesForeignKey=new ArrayList<RutaTransporte>();

						if(serviciotransporte.getRutaTransporte()!=null) {
							this.rutatransportesForeignKey.add(serviciotransporte.getRutaTransporte());
						}

						this.addItemDefectoCombosForeignKeyRutaTransporte();
						this.cargarCombosFrameRutaTransportesForeignKey("Todos");
					}
					this.setActualRutaTransporteForeignKey(this.serviciotransporte.getid_ruta_transporte(),false,"Formulario");

					//DetalleActivoFijo
					if(!this.serviciotransporteConstantesFunciones.cargarid_detalle_activo_fijoServicioTransporte || this.serviciotransporteConstantesFunciones.event_dependid_detalle_activo_fijoServicioTransporte) {
						//this.cargarCombosDetalleActivoFijosForeignKeyLista(" where id="+this.serviciotransporte.getid_detalle_activo_fijo());
									//this.inicializarActualizarBindingServicioTransporte(false,false);
						this.detalleactivofijosForeignKey=new ArrayList<DetalleActivoFijo>();

						if(serviciotransporte.getDetalleActivoFijo()!=null) {
							this.detalleactivofijosForeignKey.add(serviciotransporte.getDetalleActivoFijo());
						}

						this.addItemDefectoCombosForeignKeyDetalleActivoFijo();
						this.cargarCombosFrameDetalleActivoFijosForeignKey("Todos");
					}
					this.setActualDetalleActivoFijoForeignKey(this.serviciotransporte.getid_detalle_activo_fijo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesServicioTransporte("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesServicioTransporte(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicioTransporte() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoServicioTransporte(ServicioTransporte serviciotransporte) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoServicioTransporte(serviciotransporte,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoServicioTransporte(ServicioTransporte serviciotransporte,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioServicioTransporte(serviciotransporte);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyServicioTransporte(serviciotransporte,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyServicioTransporte(serviciotransporte);
	}
	
	public void setVariablesObjetoActualToFormularioServicioTransporte(ServicioTransporte serviciotransporte) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setText(serviciotransporte.getId().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setDate(serviciotransporte.getfecha_ingreso());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setDate(serviciotransporte.getfecha_entrega());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setText(serviciotransporte.getcodigo_guia1());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setText(serviciotransporte.getcodigo_guia2());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setText(serviciotransporte.getprecio().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setText(serviciotransporte.getvalor_iva().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setText(serviciotransporte.getvalor_total().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setText(serviciotransporte.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ServicioTransporte serviciotransporteLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,serviciotransporteLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ServicioTransporte serviciotransporteLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				serviciotransporteLocal=this.serviciotransporte;
			} else {
				serviciotransporteLocal=this.serviciotransporteAnterior;
			}
		}
		
		if(this.permiteMantenimiento(serviciotransporteLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoServicioTransporte(serviciotransporteLocal,true);
					
					if(serviciotransporteSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(serviciotransporteLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(serviciotransporteLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoServicioTransporte(ServicioTransporte serviciotransporte,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualServicioTransporte(serviciotransporte,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(serviciotransporte);
	}
	
	public void setVariablesFormularioToObjetoActualServicioTransporte(ServicioTransporte serviciotransporte,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualServicioTransporte(serviciotransporte,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualServicioTransporte(ServicioTransporte serviciotransporte,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.getText()==null || this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.getText()=="" || this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.getText()=="Id") {
				this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setText("0");
			}

			if(conColumnasBase) {serviciotransporte.setId(Long.parseLong(this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelIdServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setfecha_ingreso(this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_ingresoServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setfecha_entrega(this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelfecha_entregaServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setcodigo_guia1(this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia1ServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setcodigo_guia2(this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelcodigo_guia2ServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setprecio(Double.parseDouble(this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_PRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelprecioServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setvalor_iva(Double.parseDouble(this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_VALORIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_ivaServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setvalor_total(Double.parseDouble(this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabelvalor_totalServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			serviciotransporte.setdescripcion(this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicioTransporte.jLabeldescripcionServicioTransporte,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualServicioTransporte(ServicioTransporte serviciotransporteBean,ServicioTransporte serviciotransporte,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && serviciotransporteBean.getid_cliente()!=null && !serviciotransporteBean.getid_cliente().equals(-1L))) {serviciotransporte.setid_cliente(serviciotransporteBean.getid_cliente());}
			if(conDefault || (!conDefault && serviciotransporteBean.getid_cliente_proveedor()!=null && !serviciotransporteBean.getid_cliente_proveedor().equals(-1L))) {serviciotransporte.setid_cliente_proveedor(serviciotransporteBean.getid_cliente_proveedor());}
			if(conDefault || (!conDefault && serviciotransporteBean.getid_transportista()!=null && !serviciotransporteBean.getid_transportista().equals(-1L))) {serviciotransporte.setid_transportista(serviciotransporteBean.getid_transportista());}
			if(conDefault || (!conDefault && serviciotransporteBean.getid_vehiculo()!=null && !serviciotransporteBean.getid_vehiculo().equals(-1L))) {serviciotransporte.setid_vehiculo(serviciotransporteBean.getid_vehiculo());}
			if(conDefault || (!conDefault && serviciotransporteBean.getid_ruta_transporte()!=null && !serviciotransporteBean.getid_ruta_transporte().equals(-1L))) {serviciotransporte.setid_ruta_transporte(serviciotransporteBean.getid_ruta_transporte());}
			if(conDefault || (!conDefault && serviciotransporteBean.getid_detalle_activo_fijo()!=null && !serviciotransporteBean.getid_detalle_activo_fijo().equals(-1L))) {serviciotransporte.setid_detalle_activo_fijo(serviciotransporteBean.getid_detalle_activo_fijo());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosServicioTransporte(ServicioTransporte serviciotransporteOrigen,ServicioTransporte serviciotransporte,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && serviciotransporteOrigen.getId()!=null && !serviciotransporteOrigen.getId().equals(0L))) {serviciotransporte.setId(serviciotransporteOrigen.getId());}}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_cliente()!=null && !serviciotransporteOrigen.getid_cliente().equals(-1L))) {serviciotransporte.setid_cliente(serviciotransporteOrigen.getid_cliente());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_cliente_proveedor()!=null && !serviciotransporteOrigen.getid_cliente_proveedor().equals(-1L))) {serviciotransporte.setid_cliente_proveedor(serviciotransporteOrigen.getid_cliente_proveedor());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_transportista()!=null && !serviciotransporteOrigen.getid_transportista().equals(-1L))) {serviciotransporte.setid_transportista(serviciotransporteOrigen.getid_transportista());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_vehiculo()!=null && !serviciotransporteOrigen.getid_vehiculo().equals(-1L))) {serviciotransporte.setid_vehiculo(serviciotransporteOrigen.getid_vehiculo());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_ruta_transporte()!=null && !serviciotransporteOrigen.getid_ruta_transporte().equals(-1L))) {serviciotransporte.setid_ruta_transporte(serviciotransporteOrigen.getid_ruta_transporte());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getid_detalle_activo_fijo()!=null && !serviciotransporteOrigen.getid_detalle_activo_fijo().equals(-1L))) {serviciotransporte.setid_detalle_activo_fijo(serviciotransporteOrigen.getid_detalle_activo_fijo());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getfecha_ingreso()!=null && !serviciotransporteOrigen.getfecha_ingreso().equals(new Date()))) {serviciotransporte.setfecha_ingreso(serviciotransporteOrigen.getfecha_ingreso());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getfecha_entrega()!=null && !serviciotransporteOrigen.getfecha_entrega().equals(new Date()))) {serviciotransporte.setfecha_entrega(serviciotransporteOrigen.getfecha_entrega());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getcodigo_guia1()!=null && !serviciotransporteOrigen.getcodigo_guia1().equals(""))) {serviciotransporte.setcodigo_guia1(serviciotransporteOrigen.getcodigo_guia1());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getcodigo_guia2()!=null && !serviciotransporteOrigen.getcodigo_guia2().equals(""))) {serviciotransporte.setcodigo_guia2(serviciotransporteOrigen.getcodigo_guia2());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getprecio()!=null && !serviciotransporteOrigen.getprecio().equals(0.0))) {serviciotransporte.setprecio(serviciotransporteOrigen.getprecio());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getvalor_iva()!=null && !serviciotransporteOrigen.getvalor_iva().equals(0.0))) {serviciotransporte.setvalor_iva(serviciotransporteOrigen.getvalor_iva());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getvalor_total()!=null && !serviciotransporteOrigen.getvalor_total().equals(0.0))) {serviciotransporte.setvalor_total(serviciotransporteOrigen.getvalor_total());}
			if(conDefault || (!conDefault && serviciotransporteOrigen.getdescripcion()!=null && !serviciotransporteOrigen.getdescripcion().equals(""))) {serviciotransporte.setdescripcion(serviciotransporteOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioServicioTransporte(ServicioTransporte serviciotransporte) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setText(serviciotransporte.getId().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setDate(serviciotransporte.getfecha_ingreso());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setDate(serviciotransporte.getfecha_entrega());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setText(serviciotransporte.getcodigo_guia1());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setText(serviciotransporte.getcodigo_guia2());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setText(serviciotransporte.getprecio().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setText(serviciotransporte.getvalor_iva().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setText(serviciotransporte.getvalor_total().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setText(serviciotransporte.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioServicioTransporte(ServicioTransporteBean serviciotransporteBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setText(serviciotransporteBean.getId().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setDate(serviciotransporteBean.getfecha_ingreso());
			this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setDate(serviciotransporteBean.getfecha_entrega());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setText(serviciotransporteBean.getcodigo_guia1());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setText(serviciotransporteBean.getcodigo_guia2());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setText(serviciotransporteBean.getprecio().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setText(serviciotransporteBean.getvalor_iva().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setText(serviciotransporteBean.getvalor_total().toString());
			this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setText(serviciotransporteBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanServicioTransporte(ServicioTransporteParameterReturnGeneral serviciotransporteReturnGeneral,ServicioTransporteBean serviciotransporteBean,Boolean conDefault) throws Exception { 
		try {
			ServicioTransporte serviciotransporteLocal=new ServicioTransporte();
			
			serviciotransporteLocal=serviciotransporteReturnGeneral.getServicioTransporte();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && serviciotransporteLocal.getId()!=null && !serviciotransporteLocal.getId().equals(0L))) {serviciotransporteBean.setId(serviciotransporteLocal.getId());}}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_cliente()!=null && !serviciotransporteLocal.getid_cliente().equals(-1L))) {serviciotransporteBean.setid_cliente(serviciotransporteLocal.getid_cliente());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_cliente_proveedor()!=null && !serviciotransporteLocal.getid_cliente_proveedor().equals(-1L))) {serviciotransporteBean.setid_cliente_proveedor(serviciotransporteLocal.getid_cliente_proveedor());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_transportista()!=null && !serviciotransporteLocal.getid_transportista().equals(-1L))) {serviciotransporteBean.setid_transportista(serviciotransporteLocal.getid_transportista());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_vehiculo()!=null && !serviciotransporteLocal.getid_vehiculo().equals(-1L))) {serviciotransporteBean.setid_vehiculo(serviciotransporteLocal.getid_vehiculo());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_ruta_transporte()!=null && !serviciotransporteLocal.getid_ruta_transporte().equals(-1L))) {serviciotransporteBean.setid_ruta_transporte(serviciotransporteLocal.getid_ruta_transporte());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getid_detalle_activo_fijo()!=null && !serviciotransporteLocal.getid_detalle_activo_fijo().equals(-1L))) {serviciotransporteBean.setid_detalle_activo_fijo(serviciotransporteLocal.getid_detalle_activo_fijo());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getfecha_ingreso()!=null && !serviciotransporteLocal.getfecha_ingreso().equals(new Date()))) {serviciotransporteBean.setfecha_ingreso(serviciotransporteLocal.getfecha_ingreso());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getfecha_entrega()!=null && !serviciotransporteLocal.getfecha_entrega().equals(new Date()))) {serviciotransporteBean.setfecha_entrega(serviciotransporteLocal.getfecha_entrega());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getcodigo_guia1()!=null && !serviciotransporteLocal.getcodigo_guia1().equals(""))) {serviciotransporteBean.setcodigo_guia1(serviciotransporteLocal.getcodigo_guia1());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getcodigo_guia2()!=null && !serviciotransporteLocal.getcodigo_guia2().equals(""))) {serviciotransporteBean.setcodigo_guia2(serviciotransporteLocal.getcodigo_guia2());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getprecio()!=null && !serviciotransporteLocal.getprecio().equals(0.0))) {serviciotransporteBean.setprecio(serviciotransporteLocal.getprecio());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getvalor_iva()!=null && !serviciotransporteLocal.getvalor_iva().equals(0.0))) {serviciotransporteBean.setvalor_iva(serviciotransporteLocal.getvalor_iva());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getvalor_total()!=null && !serviciotransporteLocal.getvalor_total().equals(0.0))) {serviciotransporteBean.setvalor_total(serviciotransporteLocal.getvalor_total());}
			if(conDefault || (!conDefault && serviciotransporteLocal.getdescripcion()!=null && !serviciotransporteLocal.getdescripcion().equals(""))) {serviciotransporteBean.setdescripcion(serviciotransporteLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxServicioTransporteGenerico(Long idServicioTransporteSeleccionado,JComboBox jComboBoxServicioTransporte,List<ServicioTransporte> serviciotransportesLocal)throws Exception {
		try {
			ServicioTransporte  serviciotransporteTemp=null;

			for(ServicioTransporte serviciotransporteAux:serviciotransportesLocal) {
				if(serviciotransporteAux.getId()!=null && serviciotransporteAux.getId().equals(idServicioTransporteSeleccionado)) {
					serviciotransporteTemp=serviciotransporteAux;
					break;
				}
			}

			jComboBoxServicioTransporte.setSelectedItem(serviciotransporteTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxServicioTransporteGenerico(JComboBox jComboBoxServicioTransporte,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxServicioTransporte.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxServicioTransporte.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxServicioTransporte.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxServicioTransporte.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxServicioTransporte.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxServicioTransporte.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxServicioTransporte.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxServicioTransporte.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxServicioTransporte.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxServicioTransporte.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetalleServicioTransporte")) {
			jButtonDetalleServicioTransporteActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			serviciotransporte=(ServicioTransporte) serviciotransporteLogic.getServicioTransportes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			serviciotransporte =(ServicioTransporte) serviciotransportes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getcliente_descripcion();
			}
		}

		if(sTipo.equals("ClienteProveedor")) {
			//sDescripcion=this.getActualClienteProveedorForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getclienteproveedor_descripcion();
			} else {
				//sDescripcion=this.getActualClienteProveedorForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getclienteproveedor_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.gettransportista_descripcion();
			}
		}

		if(sTipo.equals("Vehiculo")) {
			//sDescripcion=this.getActualVehiculoForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getvehiculo_descripcion();
			} else {
				//sDescripcion=this.getActualVehiculoForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getvehiculo_descripcion();
			}
		}

		if(sTipo.equals("RutaTransporte")) {
			//sDescripcion=this.getActualRutaTransporteForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getrutatransporte_descripcion();
			} else {
				//sDescripcion=this.getActualRutaTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getrutatransporte_descripcion();
			}
		}

		if(sTipo.equals("DetalleActivoFijo")) {
			//sDescripcion=this.getActualDetalleActivoFijoForeignKeyDescripcion((Long)value);
			if(!serviciotransporte.getIsNew() && !serviciotransporte.getIsChanged() && !serviciotransporte.getIsDeleted()) {
				sDescripcion=serviciotransporte.getdetalleactivofijo_descripcion();
			} else {
				//sDescripcion=this.getActualDetalleActivoFijoForeignKeyDescripcion((Long)value);
				sDescripcion=serviciotransporte.getdetalleactivofijo_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ServicioTransporte serviciotransporteRow=new ServicioTransporte();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			serviciotransporteRow=(ServicioTransporte) serviciotransporteLogic.getServicioTransportes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			serviciotransporteRow=(ServicioTransporte) serviciotransportes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetalleServicioTransporteActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,ServicioTransporte serviciotransporte) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormServicioTransporte==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte = (ServicioTransporte)this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.serviciotransporte = (ServicioTransporte)this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(serviciotransporte!=null) {
						this.serviciotransporte = serviciotransporte;
					} else {
						this.serviciotransporte = new ServicioTransporte();
					}
				}

				if(this.isTienePermisosDetalleServicioTransporte && this.permiteMantenimiento(this.serviciotransporte)) {
					DetalleServicioTransporteBeanSwingJInternalFrame detalleserviciotransporteBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup=new DetalleServicioTransporteBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detalleserviciotransporteBeanSwingJInternalFrame=this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup;
					} else {
						detalleserviciotransporteBeanSwingJInternalFrame=this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame;
					}

					List<ServicioTransporte> serviciotransportes=new ArrayList<ServicioTransporte>();
					serviciotransportes.add(this.serviciotransporte);
					if(!esRelacionado) {
						//detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.setConGuardarRelaciones(false);
						//detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detalleserviciotransporteBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormServicioTransporte.cargarDetalleServicioTransporteBeanSwingJInternalFrame(serviciotransportes,this.serviciotransporte,detalleserviciotransporteBeanSwingJInternalFrame,/*conInicializar,*/detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.getConGuardarRelaciones(),detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteSessionBean.getEsGuardarRelacionado());
					detalleserviciotransporteBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detalleserviciotransporteBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleServicioTransporte("no_relacionado");

						detalleserviciotransporteBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleServicioTransporteConstantesFunciones.ITAMANIOFILATABLA + (DetalleServicioTransporteConstantesFunciones.ITAMANIOFILATABLA/2));

						detalleserviciotransporteBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
						TitledBorder titledBorderDetalleServicioTransporte=(TitledBorder)detalleserviciotransporteBeanSwingJInternalFrame.jScrollPanelDatosDetalleServicioTransporte.getBorder();

						titledBorderDetalleServicioTransporte.setTitle(titledBorderServicioTransporte.getTitle() + " -> Detalle Servicio Transporte");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detalleserviciotransporteBeanSwingJInternalFrame);
						}

						detalleserviciotransporteBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detalleserviciotransporteBeanSwingJInternalFrame);

						detalleserviciotransporteBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Servicio Transporte",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualServicioTransporte(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte));			
			this.jButtonDuplicarServicioTransporte.setVisible((this.isVisibilidadCeldaDuplicarServicioTransporte && this.isPermisoDuplicarServicioTransporte));			
			this.jButtonCopiarServicioTransporte.setVisible((this.isVisibilidadCeldaCopiarServicioTransporte && this.isPermisoCopiarServicioTransporte));
			this.jButtonVerFormServicioTransporte.setVisible((this.isVisibilidadCeldaVerFormServicioTransporte && this.isPermisoVerFormServicioTransporte));
			
			this.jButtonAbrirOrderByServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));			
			
			this.jButtonNuevoRelacionesServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicioTransporte && this.isPermisoNuevoServicioTransporte));			
			this.jButtonNuevoGuardarCambiosServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarServicioTransporte.setVisible((this.isVisibilidadCeldaModificarServicioTransporte && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.setVisible((this.isVisibilidadCeldaActualizarServicioTransporte && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.setVisible((this.isVisibilidadCeldaEliminarServicioTransporte && this.isPermisoEliminarServicioTransporte));
			this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.setVisible(this.isVisibilidadCeldaCancelarServicioTransporte);							
			this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));			
			
			}
						
			this.jButtonGuardarCambiosTablaServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarCambiosServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte));						
			this.jButtonDuplicarToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaDuplicarServicioTransporte && this.isPermisoDuplicarServicioTransporte));						
			this.jButtonCopiarToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaCopiarServicioTransporte && this.isPermisoCopiarServicioTransporte));			
			this.jButtonVerFormToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaVerFormServicioTransporte && this.isPermisoVerFormServicioTransporte));			
			this.jButtonAbrirOrderByToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));
			this.jButtonNuevoRelacionesToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicioTransporte && this.isPermisoNuevoServicioTransporte));			
			this.jButtonNuevoGuardarCambiosToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));			
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaModificarServicioTransporte && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaActualizarServicioTransporte  && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaEliminarServicioTransporte && this.isPermisoEliminarServicioTransporte));
			this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarToolBarServicioTransporte.setVisible(this.isVisibilidadCeldaCancelarServicioTransporte);				
			this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarCambiosServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte));			
			this.jMenuItemDuplicarServicioTransporte.setVisible((this.isVisibilidadCeldaDuplicarServicioTransporte && this.isPermisoDuplicarServicioTransporte));			
			this.jMenuItemCopiarServicioTransporte.setVisible((this.isVisibilidadCeldaCopiarServicioTransporte && this.isPermisoCopiarServicioTransporte));			
			this.jMenuItemVerFormServicioTransporte.setVisible((this.isVisibilidadCeldaVerFormServicioTransporte && this.isPermisoVerFormServicioTransporte));			
			this.jMenuItemAbrirOrderByServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));			
			//this.jMenuItemMostrarOcultarServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));
			this.jMenuItemDetalleAbrirOrderByServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));			
			//this.jMenuItemDetalleMostrarOcultarServicioTransporte.setVisible((this.isVisibilidadCeldaOrdenServicioTransporte && this.isPermisoOrdenServicioTransporte));			
			this.jMenuItemNuevoRelacionesServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicioTransporte && this.isPermisoNuevoServicioTransporte));			
			this.jMenuItemNuevoGuardarCambiosServicioTransporte.setVisible((this.isVisibilidadCeldaNuevoServicioTransporte && this.isPermisoNuevoServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));									
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemModificarServicioTransporte.setVisible((this.isVisibilidadCeldaModificarServicioTransporte && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemActualizarServicioTransporte.setVisible((this.isVisibilidadCeldaActualizarServicioTransporte && this.isPermisoActualizarServicioTransporte));	
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemEliminarServicioTransporte.setVisible((this.isVisibilidadCeldaEliminarServicioTransporte && this.isPermisoEliminarServicioTransporte));
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemCancelarServicioTransporte.setVisible(this.isVisibilidadCeldaCancelarServicioTransporte);				
			}
			
			this.jMenuItemGuardarCambiosServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));						
			this.jMenuItemGuardarCambiosTablaServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarCambiosServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoServicioTransporte=this.jButtonNuevoServicioTransporte.isVisible();
			this.isVisibilidadCeldaDuplicarServicioTransporte=this.jButtonDuplicarServicioTransporte.isVisible();
			this.isVisibilidadCeldaCopiarServicioTransporte=this.jButtonCopiarServicioTransporte.isVisible();
			this.isVisibilidadCeldaVerFormServicioTransporte=this.jButtonVerFormServicioTransporte.isVisible();
			
			this.isVisibilidadCeldaOrdenServicioTransporte=this.jButtonAbrirOrderByServicioTransporte.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=this.jButtonNuevoRelacionesServicioTransporte.isVisible();
			this.isVisibilidadCeldaModificarServicioTransporte=this.jButtonModificarServicioTransporte.isVisible();
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.isVisibilidadCeldaActualizarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.isVisible();
			this.isVisibilidadCeldaEliminarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.isVisible();
			this.isVisibilidadCeldaCancelarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.isVisible();
			this.isVisibilidadCeldaGuardarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=this.jButtonGuardarCambiosTablaServicioTransporte.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoServicioTransporte=this.jButtonNuevoToolBarServicioTransporte.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=this.jButtonNuevoRelacionesToolBarServicioTransporte.isVisible();
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.isVisibilidadCeldaModificarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarToolBarServicioTransporte.isVisible();
			this.isVisibilidadCeldaActualizarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarToolBarServicioTransporte.isVisible();
			this.isVisibilidadCeldaEliminarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarToolBarServicioTransporte.isVisible();
			this.isVisibilidadCeldaCancelarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarToolBarServicioTransporte.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarServicioTransporte=this.jButtonGuardarCambiosToolBarServicioTransporte.isVisible();
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=this.jButtonGuardarCambiosTablaToolBarServicioTransporte.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoServicioTransporte=this.jMenuItemNuevoServicioTransporte.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=this.jMenuItemNuevoRelacionesServicioTransporte.isVisible();
			
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.isVisibilidadCeldaModificarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jMenuItemModificarServicioTransporte.isVisible();
			this.isVisibilidadCeldaActualizarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jMenuItemActualizarServicioTransporte.isVisible();
			this.isVisibilidadCeldaEliminarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jMenuItemEliminarServicioTransporte.isVisible();
			this.isVisibilidadCeldaCancelarServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.jMenuItemCancelarServicioTransporte.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarServicioTransporte=this.jMenuItemGuardarCambiosServicioTransporte.isVisible();
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=this.jMenuItemGuardarCambiosTablaServicioTransporte.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesServicioTransporte(Boolean esInicializar) {
		if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {			
			if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
				//if(this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesServicioTransporte();
			}
			
			this.inicializarActualizarBindingBotonesManualServicioTransporte(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualServicioTransporte() {
		this.jButtonNuevoServicioTransporte.setVisible(this.isPermisoNuevoServicioTransporte);			
		this.jButtonDuplicarServicioTransporte.setVisible(this.isPermisoDuplicarServicioTransporte);			
		this.jButtonCopiarServicioTransporte.setVisible(this.isPermisoCopiarServicioTransporte);			
		this.jButtonVerFormServicioTransporte.setVisible(this.isPermisoVerFormServicioTransporte);			
		
		this.jButtonAbrirOrderByServicioTransporte.setVisible(this.isPermisoOrdenServicioTransporte);					
		
		this.jButtonNuevoRelacionesServicioTransporte.setVisible(this.isPermisoNuevoServicioTransporte);			
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarServicioTransporte.setVisible(this.isPermisoActualizarServicioTransporte);	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.setVisible(this.isPermisoActualizarServicioTransporte);	
			this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.setVisible(this.isPermisoEliminarServicioTransporte);
			this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.setVisible(this.isVisibilidadCeldaCancelarServicioTransporte);						
			this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.setVisible(this.isPermisoGuardarCambiosServicioTransporte);							
		}
		
		this.jButtonGuardarCambiosTablaServicioTransporte.setVisible(this.isPermisoActualizarServicioTransporte);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleServicioTransporte() {
		this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarServicioTransporte.setVisible(this.isPermisoActualizarServicioTransporte);	
		this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.setVisible(this.isPermisoActualizarServicioTransporte);	
		this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.setVisible(this.isPermisoEliminarServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.setVisible(this.isVisibilidadCeldaCancelarServicioTransporte);							
		this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.setVisible((this.isVisibilidadCeldaGuardarServicioTransporte && this.isPermisoGuardarCambiosServicioTransporte));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosServicioTransporte() {
		if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualServicioTransporte();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesServicioTransporte() {
	}
	
	public void jTableDatosServicioTransporteListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarServicioTransporte(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.serviciotransporte.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderServicioTransporte.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.serviciotransporte.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderServicioTransporte.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.serviciotransporte.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderServicioTransporte.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.serviciotransporte.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderServicioTransporte.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.serviciotransporte.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteServicioTransporteActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicioTransporte=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosServicioTransporte.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderServicioTransporte.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderServicioTransporte.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.serviciotransporte.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cliente_proveedorServicioTransporteActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteproveedorBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteproveedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteproveedorBeanSwingJInternalFrame.sTipoBusqueda="ClienteProveedor";

			if(!this.sFinalQueryGeneral_clienteproveedor.equals("")) {
				this.clienteproveedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_clienteproveedor);
				this.clienteproveedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteproveedorBeanSwingJInternalFrame.procesarBusqueda(this.clienteproveedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteproveedorBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboClienteProveedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteproveedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicioTransporte=null;
			TitledBorder titledBorderclienteproveedor=null;

			if(!this.jScrollPanelDatosServicioTransporte.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				titledBorderclienteproveedor=(TitledBorder)this.clienteproveedorBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBorderclienteproveedor.setTitle(titledBorderServicioTransporte.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cliente_proveedorServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoclienteproveedor=true;

			idTienePermisoclienteproveedor=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisoclienteproveedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.clienteproveedorBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteproveedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteproveedorBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_cliente_proveedor()!=null) {
					this.clienteproveedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteproveedorBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_cliente_proveedor());
					this.clienteproveedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteproveedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteproveedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteproveedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderclienteproveedor=(TitledBorder)this.clienteproveedorBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBorderclienteproveedor.setTitle(titledBorderServicioTransporte.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cliente_proveedorServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_cliente_proveedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente_proveedor = "+this.serviciotransporte.getid_cliente_proveedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderServicioTransporte.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.serviciotransporte.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vehiculoServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovehiculo=true;

			idTienePermisovehiculo=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(VehiculoConstantesFunciones.CLASSNAME);

			if(idTienePermisovehiculo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.vehiculoBeanSwingJInternalFrame=new VehiculoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vehiculoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vehiculoBeanSwingJInternalFrame.getVehiculoLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_vehiculo()!=null) {
					this.vehiculoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vehiculoBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_vehiculo());
					this.vehiculoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vehiculoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vehiculoBeanSwingJInternalFrame.inicializarActualizarBindingTablaVehiculo();
				}

				JInternalFrameBase jinternalFrame =this.vehiculoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBordervehiculo=(TitledBorder)this.vehiculoBeanSwingJInternalFrame.jScrollPanelDatosVehiculo.getBorder();

				titledBordervehiculo.setTitle(titledBorderServicioTransporte.getTitle() + " -> Vehiculo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vehiculoServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_vehiculo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vehiculo = "+this.serviciotransporte.getid_vehiculo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ruta_transporteServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisorutatransporte=true;

			idTienePermisorutatransporte=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(RutaTransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisorutatransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.rutatransporteBeanSwingJInternalFrame=new RutaTransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.rutatransporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.rutatransporteBeanSwingJInternalFrame.getRutaTransporteLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_ruta_transporte()!=null) {
					this.rutatransporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.rutatransporteBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_ruta_transporte());
					this.rutatransporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.rutatransporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.rutatransporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaRutaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.rutatransporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderrutatransporte=(TitledBorder)this.rutatransporteBeanSwingJInternalFrame.jScrollPanelDatosRutaTransporte.getBorder();

				titledBorderrutatransporte.setTitle(titledBorderServicioTransporte.getTitle() + " -> Ruta Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ruta_transporteServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_ruta_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ruta_transporte = "+this.serviciotransporte.getid_ruta_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_detalle_activo_fijoServicioTransporteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisodetalleactivofijo=true;

			idTienePermisodetalleactivofijo=this.tienePermisosUsuarioEnPaginaWebServicioTransporte(DetalleActivoFijoConstantesFunciones.CLASSNAME);

			if(idTienePermisodetalleactivofijo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicioTransporte.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicioTransporte.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);

				this.detalleactivofijoBeanSwingJInternalFrame=new DetalleActivoFijoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.detalleactivofijoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.detalleactivofijoBeanSwingJInternalFrame.getDetalleActivoFijoLogic().setConnexion(this.serviciotransporteLogic.getConnexion());

				if(this.serviciotransporte.getid_detalle_activo_fijo()!=null) {
					this.detalleactivofijoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.detalleactivofijoBeanSwingJInternalFrame.setIdActual(this.serviciotransporte.getid_detalle_activo_fijo());
					this.detalleactivofijoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.detalleactivofijoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.detalleactivofijoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleActivoFijo();
				}

				JInternalFrameBase jinternalFrame =this.detalleactivofijoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicioTransporte=(TitledBorder)this.jScrollPanelDatosServicioTransporte.getBorder();
				TitledBorder titledBorderdetalleactivofijo=(TitledBorder)this.detalleactivofijoBeanSwingJInternalFrame.jScrollPanelDatosDetalleActivoFijo.getBorder();

				titledBorderdetalleactivofijo.setTitle(titledBorderServicioTransporte.getTitle() + " -> Detalle Activo Fijo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_detalle_activo_fijoServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getid_detalle_activo_fijo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_detalle_activo_fijo = "+this.serviciotransporte.getid_detalle_activo_fijo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_ingresoServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getfecha_ingreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_ingreso = '"+Funciones2.getStringPostgresDate(this.serviciotransporte.getfecha_ingreso())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_entregaServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getfecha_entrega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_entrega = '"+Funciones2.getStringPostgresDate(this.serviciotransporte.getfecha_entrega())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_guia1ServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getcodigo_guia1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_guia1 like '%"+this.serviciotransporte.getcodigo_guia1()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_guia2ServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getcodigo_guia2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_guia2 like '%"+this.serviciotransporte.getcodigo_guia2()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprecioServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getprecio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where precio = "+this.serviciotransporte.getprecio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_ivaServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getvalor_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_iva = "+this.serviciotransporte.getvalor_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_totalServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getvalor_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_total = "+this.serviciotransporte.getvalor_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionServicioTransporteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.getserviciotransporte(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.serviciotransporte==null) {
						this.serviciotransporte = new ServicioTransporte();
					}

					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);
				}

				if(this.serviciotransporte.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.serviciotransporte.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicioTransporte(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdClienteServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdCliente();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteProveedorServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdClienteProveedor();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdDetalleActivoFijoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdDetalleActivoFijo();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdEjercicio();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdEmpresa();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdPeriodo();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdRutaTransporteServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdRutaTransporte();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdSucursal();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdTransportista();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVehiculoServicioTransporteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicioTransporte(false,false);

			this.getServicioTransportesFK_IdVehiculo();

			this.inicializarActualizarBindingServicioTransporte(false);

			//if(ServicioTransporteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicioTransporte(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.serviciotransporteLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameServicioTransporte() {
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
		

		if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
			this.jInternalFrameDetalleFormServicioTransporte.setVisible(false);	    			
			this.jInternalFrameDetalleFormServicioTransporte.dispose();
			this.jInternalFrameDetalleFormServicioTransporte=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
			this.jInternalFrameReporteDinamicoServicioTransporte.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoServicioTransporte.dispose();
			this.jInternalFrameReporteDinamicoServicioTransporte=null;
		}
		
		if(this.jInternalFrameImportacionServicioTransporte!=null) {
			this.jInternalFrameImportacionServicioTransporte.setVisible(false);	    			
			this.jInternalFrameImportacionServicioTransporte.dispose();
			this.jInternalFrameImportacionServicioTransporte=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessServicioTransporte();
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			
			if(sTipo.equals("NuevoServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarServicioTransporte")) {
				jButtonDuplicarServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarServicioTransporte")) {
				jButtonCopiarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("VerFormServicioTransporte")) {
				jButtonVerFormServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarServicioTransporte")) {
				jButtonDuplicarServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarServicioTransporte")) {
				jButtonDuplicarServicioTransporteActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarServicioTransporte")) {
				jButtonModificarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarServicioTransporte")) {
				jButtonModificarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarServicioTransporte")) {
				jButtonModificarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarServicioTransporte")) {
				jButtonActualizarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarServicioTransporte")) {
				jButtonActualizarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarServicioTransporte")) {
				jButtonActualizarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("EliminarServicioTransporte")) {
				jButtonEliminarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarServicioTransporte")) {
				jButtonEliminarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarServicioTransporte")) {
				jButtonEliminarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("CancelarServicioTransporte")) {
				jButtonCancelarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarServicioTransporte")) {
				jButtonCancelarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarServicioTransporte")) {
				jButtonCancelarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("CerrarServicioTransporte")) {
				jButtonCerrarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarServicioTransporte")) {
				jButtonCerrarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarServicioTransporte")) {
				jButtonCerrarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarServicioTransporte")) {
				jButtonMostrarOcultarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarServicioTransporte")) {
				jButtonCancelarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarServicioTransporte")) {
				jButtonCopiarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarServicioTransporte")) {
				jButtonVerFormServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarServicioTransporte")) {
				jButtonCopiarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormServicioTransporte")) {
				jButtonVerFormServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionServicioTransporte")) {
				jButtonRecargarInformacionServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarServicioTransporte")) {
				jButtonRecargarInformacionServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionServicioTransporte")) {
				jButtonRecargarInformacionServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresServicioTransporte")) {
				jButtonAnterioresServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarServicioTransporte")) {
				jButtonAnterioresServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreServicioTransporte")) {
				jButtonAnterioresServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesServicioTransporte")) {
				jButtonSiguientesServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarServicioTransporte")) {
				jButtonSiguientesServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesServicioTransporte")) {
				jButtonSiguientesServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByServicioTransporte") || sTipo.equals("MenuItemDetalleAbrirOrderByServicioTransporte")) {
				jButtonAbrirOrderByServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarServicioTransporte") || sTipo.equals("MenuItemDetalleMostrarOcultarServicioTransporte")) {
				jButtonMostrarOcultarServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosServicioTransporte")) {
				jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarServicioTransporte")) {
				jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosServicioTransporte")) {
				jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoServicioTransporte")) {
				jButtonCerrarReporteDinamicoServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoServicioTransporte")) {
				jButtonGenerarReporteDinamicoServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoServicioTransporte")) {
				
				jButtonGenerarExcelReporteDinamicoServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionServicioTransporte")) {
				jButtonCerrarImportacionServicioTransporteActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionServicioTransporte")) {
				
				jButtonGenerarImportacionServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionServicioTransporte")) {
				
				jButtonAbrirImportacionServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesServicioTransporte")) {
				jComboBoxTiposAccionesServicioTransporteActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesServicioTransporte")) {
				jComboBoxTiposRelacionesServicioTransporteActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioServicioTransporte")) {
				jComboBoxTiposAccionesServicioTransporteActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarServicioTransporte")) {
				
				jComboBoxTiposSeleccionarServicioTransporteActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralServicioTransporte")) {
				jTextFieldValorCampoGeneralServicioTransporteActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByServicioTransporte")) {
				jButtonAbrirOrderByServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarServicioTransporte")) {
				jButtonAbrirOrderByServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByServicioTransporte")) {
				jButtonCerrarOrderByServicioTransporteActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idServicioTransporteBusqueda")) {
				this.jButtonidServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaServicioTransporteUpdate")) {
				this.jButtonid_empresaServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaServicioTransporteBusqueda")) {
				this.jButtonid_empresaServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalServicioTransporteUpdate")) {
				this.jButtonid_sucursalServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalServicioTransporteBusqueda")) {
				this.jButtonid_sucursalServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioServicioTransporteUpdate")) {
				this.jButtonid_ejercicioServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioServicioTransporteBusqueda")) {
				this.jButtonid_ejercicioServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoServicioTransporteUpdate")) {
				this.jButtonid_periodoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoServicioTransporteBusqueda")) {
				this.jButtonid_periodoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteServicioTransporte")) {
				this.jButtonid_clienteServicioTransporteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteServicioTransporteUpdate")) {
				this.jButtonid_clienteServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteServicioTransporteBusqueda")) {
				this.jButtonid_clienteServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporte")) {
				this.jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporteUpdate")) {
				this.jButtonid_cliente_proveedorServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporteBusqueda")) {
				this.jButtonid_cliente_proveedorServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaServicioTransporteUpdate")) {
				this.jButtonid_transportistaServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaServicioTransporteBusqueda")) {
				this.jButtonid_transportistaServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vehiculoServicioTransporteUpdate")) {
				this.jButtonid_vehiculoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vehiculoServicioTransporteBusqueda")) {
				this.jButtonid_vehiculoServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ruta_transporteServicioTransporteUpdate")) {
				this.jButtonid_ruta_transporteServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ruta_transporteServicioTransporteBusqueda")) {
				this.jButtonid_ruta_transporteServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijoServicioTransporteUpdate")) {
				this.jButtonid_detalle_activo_fijoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijoServicioTransporteBusqueda")) {
				this.jButtonid_detalle_activo_fijoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ingresoServicioTransporteBusqueda")) {
				this.jButtonfecha_ingresoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaServicioTransporteBusqueda")) {
				this.jButtonfecha_entregaServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_guia1ServicioTransporteBusqueda")) {
				this.jButtoncodigo_guia1ServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_guia2ServicioTransporteBusqueda")) {
				this.jButtoncodigo_guia2ServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioServicioTransporteBusqueda")) {
				this.jButtonprecioServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_ivaServicioTransporteBusqueda")) {
				this.jButtonvalor_ivaServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_totalServicioTransporteBusqueda")) {
				this.jButtonvalor_totalServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionServicioTransporteBusqueda")) {
				this.jButtondescripcionServicioTransporteBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteServicioTransporte")) {
				this.jButtonid_clienteServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("id_cliente_proveedorServicioTransporte")) {
				this.jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdClienteServicioTransporte")) {
				this.jButtonFK_IdClienteServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteProveedorServicioTransporte")) {
				this.jButtonFK_IdClienteProveedorServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdDetalleActivoFijoServicioTransporte")) {
				this.jButtonFK_IdDetalleActivoFijoServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdRutaTransporteServicioTransporte")) {
				this.jButtonFK_IdRutaTransporteServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransportistaServicioTransporte")) {
				this.jButtonFK_IdTransportistaServicioTransporteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVehiculoServicioTransporte")) {
				this.jButtonFK_IdVehiculoServicioTransporteActionPerformed(evt);
			}
			
			;
			
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessServicioTransporte();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ServicioTransporte serviciotransporteLocal=null;
			
			if(!this.getEsControlTabla()) {
				serviciotransporteLocal=this.serviciotransporte;
			} else {
				serviciotransporteLocal=this.serviciotransporteAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
							
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
								
						
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
								
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
			
			this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
							
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
			
			this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
								
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
			
			this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosServicioTransporte")) {
					jCheckBoxSeleccionarTodosServicioTransporteItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosServicioTransporte")) {
					jCheckBoxSeleccionadosServicioTransporteItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarServicioTransporte")) {
					
				}
				
				


				
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
												
				
				


				
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioTransporteActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.serviciotransporte);
				
				this.actualizarInformacion("INFO_PADRE",false,this.serviciotransporte);
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ServicioTransporte.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ServicioTransporte.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioTransporteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.serviciotransporteAnterior =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarServicioTransporte")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosServicioTransporteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosServicioTransporte.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.serviciotransporte =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.serviciotransporte =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.serviciotransporte);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarServicioTransporte")) {
				
				}
				
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarServicioTransporte")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosServicioTransporte.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarServicioTransporte")) {
			
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessServicioTransporte();
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			if(sTipo.equals("NuevoServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarServicioTransporte")) {
				jButtonDuplicarServicioTransporteActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarServicioTransporte")) {
				jButtonCopiarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormServicioTransporte")) {
				jButtonVerFormServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesServicioTransporte")) {
				jButtonNuevoServicioTransporteActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarServicioTransporte")) {
				jButtonModificarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarServicioTransporte")) {
				jButtonActualizarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarServicioTransporte")) {
				jButtonEliminarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarServicioTransporte")) {
				jButtonCancelarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarServicioTransporte")) {
				jButtonCerrarServicioTransporteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosServicioTransporte")) {
				jButtonGuardarCambiosServicioTransporteActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosServicioTransporte")) {
				jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByServicioTransporte")) {
				jButtonAbrirOrderByServicioTransporteActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionServicioTransporte")) {
				jButtonRecargarInformacionServicioTransporteActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresServicioTransporte")) {
				jButtonAnterioresServicioTransporteActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesServicioTransporte")) {
				jButtonSiguientesServicioTransporteActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idServicioTransporteBusqueda")) {
				this.jButtonidServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaServicioTransporteUpdate")) {
				this.jButtonid_empresaServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaServicioTransporteBusqueda")) {
				this.jButtonid_empresaServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalServicioTransporteUpdate")) {
				this.jButtonid_sucursalServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalServicioTransporteBusqueda")) {
				this.jButtonid_sucursalServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioServicioTransporteUpdate")) {
				this.jButtonid_ejercicioServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioServicioTransporteBusqueda")) {
				this.jButtonid_ejercicioServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoServicioTransporteUpdate")) {
				this.jButtonid_periodoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoServicioTransporteBusqueda")) {
				this.jButtonid_periodoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteServicioTransporte")) {
				this.jButtonid_clienteServicioTransporteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteServicioTransporteUpdate")) {
				this.jButtonid_clienteServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteServicioTransporteBusqueda")) {
				this.jButtonid_clienteServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporte")) {
				this.jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporteUpdate")) {
				this.jButtonid_cliente_proveedorServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cliente_proveedorServicioTransporteBusqueda")) {
				this.jButtonid_cliente_proveedorServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaServicioTransporteUpdate")) {
				this.jButtonid_transportistaServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaServicioTransporteBusqueda")) {
				this.jButtonid_transportistaServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vehiculoServicioTransporteUpdate")) {
				this.jButtonid_vehiculoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vehiculoServicioTransporteBusqueda")) {
				this.jButtonid_vehiculoServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ruta_transporteServicioTransporteUpdate")) {
				this.jButtonid_ruta_transporteServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ruta_transporteServicioTransporteBusqueda")) {
				this.jButtonid_ruta_transporteServicioTransporteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijoServicioTransporteUpdate")) {
				this.jButtonid_detalle_activo_fijoServicioTransporteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijoServicioTransporteBusqueda")) {
				this.jButtonid_detalle_activo_fijoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ingresoServicioTransporteBusqueda")) {
				this.jButtonfecha_ingresoServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_entregaServicioTransporteBusqueda")) {
				this.jButtonfecha_entregaServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_guia1ServicioTransporteBusqueda")) {
				this.jButtoncodigo_guia1ServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_guia2ServicioTransporteBusqueda")) {
				this.jButtoncodigo_guia2ServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioServicioTransporteBusqueda")) {
				this.jButtonprecioServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_ivaServicioTransporteBusqueda")) {
				this.jButtonvalor_ivaServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_totalServicioTransporteBusqueda")) {
				this.jButtonvalor_totalServicioTransporteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionServicioTransporteBusqueda")) {
				this.jButtondescripcionServicioTransporteBusquedaActionPerformed(evt);
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessServicioTransporte();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameServicioTransporte")) {
				closingInternalFrameServicioTransporte();
				
			} else if(sTipo.equals("jButtonCancelarServicioTransporte")) {
				JInternalFrameBase jInternalFrameDetalleFormServicioTransporte = (JInternalFrameBase)evt.getSource();
	            	
	            ServicioTransporteBeanSwingJInternalFrame jInternalFrameParent=(ServicioTransporteBeanSwingJInternalFrame)jInternalFrameDetalleFormServicioTransporte.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarServicioTransporteActionPerformed(null);
			}
			
			ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.serviciotransporte,new Object(),this.serviciotransporteParameterGeneral,this.serviciotransporteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormServicioTransporte(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormServicioTransporte(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormServicioTransporte(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.serviciotransporte)) {
			if(!esControlTabla) {
				if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);			
				}
				
				if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualServicioTransporte(this.serviciotransporte,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.serviciotransporteReturnGeneral=serviciotransporteLogic.procesarEventosServicioTransportesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.serviciotransporteLogic.getServicioTransportes(),this.serviciotransporte,this.serviciotransporteParameterGeneral,this.isEsNuevoServicioTransporte,classes);//this.serviciotransporteLogic.getServicioTransporte()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanServicioTransporte(this.serviciotransporteReturnGeneral,this.serviciotransporteBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanServicioTransporte(classes,this.serviciotransporteReturnGeneral,this.serviciotransporteBean,false);
					}
						
					if(this.serviciotransporteReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte());	
					}
						
					if(this.serviciotransporteReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte(),classes);//this.serviciotransporteBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioServicioTransporte(this.serviciotransporte,classes);//this.serviciotransporteBean);									
				}
			
				if(ServicioTransporteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualServicioTransporte(this.serviciotransporte,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysServicioTransporte(this.serviciotransporte);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.serviciotransporteAnterior!=null) {
						this.serviciotransporte=this.serviciotransporteAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.serviciotransporteReturnGeneral=serviciotransporteLogic.procesarEventosServicioTransportesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.serviciotransporteLogic.getServicioTransportes(),this.serviciotransporte,this.serviciotransporteParameterGeneral,this.isEsNuevoServicioTransporte,classes);//this.serviciotransporteLogic.getServicioTransporte()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.serviciotransporteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.serviciotransporteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.serviciotransporteReturnGeneral.getServicioTransporte(),serviciotransporteLogic.getServicioTransportes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.serviciotransporteReturnGeneral.getServicioTransporte(),this.serviciotransportes);
				}
				//ARCHITECTURE
				
				//this.jTableDatosServicioTransporte.repaint();
				
				//((AbstractTableModel) this.jTableDatosServicioTransporte.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosServicioTransporte();
			}
		}
	}
	
	public void actualizarVisualTableDatosServicioTransporte() throws Exception {
		
		ServicioTransporteModel serviciotransporteModel=(ServicioTransporteModel)this.jTableDatosServicioTransporte.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			serviciotransporteModel.serviciotransportes=this.serviciotransporteLogic.getServicioTransportes();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			serviciotransporteModel.serviciotransportes=this.serviciotransportes;
		}
		
		
		((ServicioTransporteModel) this.jTableDatosServicioTransporte.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaServicioTransporte() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getserviciotransporteAnterior(),this.serviciotransporteLogic.getServicioTransportes());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getserviciotransporteAnterior(),this.serviciotransportes);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosServicioTransporte();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioServicioTransporte(ServicioTransporte serviciotransporte,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleServicioTransporte.class)) {
					this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.setDetalleServicioTransportes(serviciotransporte.getDetalleServicioTransportes());
					this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleServicioTransporte(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.serviciotransporte,new Object(),generalEntityParameterGeneral,this.serviciotransporteReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.serviciotransporteSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ServicioTransporteConstantesFunciones.getClassesRelationshipsOfServicioTransporte(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ServicioTransporteConstantesFunciones.getClassesRelationshipsFromStringsOfServicioTransporte(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormServicioTransporte(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ServicioTransporteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.serviciotransporte,new Object(),generalEntityParameterGeneral,this.serviciotransporteReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioServicioTransporte(ServicioTransporteBean serviciotransporteBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleServicioTransporte.class)) {
					this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.setDetalleServicioTransportes(serviciotransporte.getDetalleServicioTransportes());
					this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleServicioTransporte(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanServicioTransporte(ArrayList<Classe> classes,ServicioTransporteReturnGeneral serviciotransporteReturnGeneral,ServicioTransporteBean serviciotransporteBean,Boolean conDefault) throws Exception {
		
			this.serviciotransporteBean.setDetalleServicioTransportes(serviciotransporteReturnGeneral.getServicioTransporte().getDetalleServicioTransportes());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualServicioTransporte(ServicioTransporte serviciotransporte,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleServicioTransporte.class)) {
					serviciotransporte.setDetalleServicioTransportes(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteBeanSwingJInternalFrame.detalleserviciotransporteLogic.getDetalleServicioTransportes());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.serviciotransporte)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormServicioTransporte = new ServicioTransporteDetalleFormJInternalFrame(jDesktopPane,this.serviciotransporteSessionBean.getConGuardarRelaciones(),this.serviciotransporteSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.setVisible(false);
		this.jInternalFrameDetalleFormServicioTransporte.setSelected(false);						
		
		this.jInternalFrameDetalleFormServicioTransporte.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormServicioTransporte.serviciotransporteLogic=this.serviciotransporteLogic;
		
		this.cargarCombosFrameForeignKeyServicioTransporte("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleServicioTransporte();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleServicioTransporte();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyServicioTransporte("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyServicioTransporte();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormServicioTransporte.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarServicioTransporte"));
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarServicioTransporte.addActionListener(new ButtonActionListener(this,"ModificarServicioTransporte"));

		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"ModificarToolBarServicioTransporte"));
					
		this.jInternalFrameDetalleFormServicioTransporte.jMenuItemModificarServicioTransporte.addActionListener(new ButtonActionListener(this,"MenuItemModificarServicioTransporte"));		
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.addActionListener (new ButtonActionListener(this,"ActualizarServicioTransporte"));
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"ActualizarToolBarServicioTransporte"));
						
		this.jInternalFrameDetalleFormServicioTransporte.jMenuItemActualizarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemActualizarServicioTransporte"));		
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.addActionListener (new ButtonActionListener(this,"EliminarServicioTransporte"));
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"EliminarToolBarServicioTransporte"));
								
		this.jInternalFrameDetalleFormServicioTransporte.jMenuItemEliminarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemEliminarServicioTransporte"));		
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.addActionListener (new ButtonActionListener(this,"CancelarServicioTransporte"));
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"CancelarToolBarServicioTransporte"));
					
		this.jInternalFrameDetalleFormServicioTransporte.jMenuItemCancelarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemCancelarServicioTransporte"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jMenuItemDetalleCerrarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarServicioTransporte"));		
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicioTransporte"));
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicioTransporte"));
		
		
		
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioServicioTransporte"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonidServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"idServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteBusqueda"));
		//jButtonid_clienteServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporte.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteBusqueda"));
		//jButtonid_cliente_proveedorServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_ingresoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ingresoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_entregaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia1ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia1ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia2ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia2ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonprecioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"precioServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_ivaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_ivaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_totalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_totalServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtondescripcionServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioTransporteBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesServicioTransporte"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameServicioTransporte"));
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarServicioTransporte"));
		}
		
		this.jTableDatosServicioTransporte.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarServicioTransporte"));
		
		this.jTableDatosServicioTransporte.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarServicioTransporte"));
		
		this.jButtonNuevoServicioTransporte.addActionListener(new ButtonActionListener(this,"NuevoServicioTransporte"));
		
		this.jButtonDuplicarServicioTransporte.addActionListener(new ButtonActionListener(this,"DuplicarServicioTransporte"));
		
		this.jButtonCopiarServicioTransporte.addActionListener(new ButtonActionListener(this,"CopiarServicioTransporte"));
		
		this.jButtonVerFormServicioTransporte.addActionListener(new ButtonActionListener(this,"VerFormServicioTransporte"));
		
		
		this.jButtonNuevoToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"NuevoToolBarServicioTransporte"));
			
		this.jButtonDuplicarToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"DuplicarToolBarServicioTransporte"));
			
		this.jMenuItemNuevoServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemNuevoServicioTransporte"));
			
		this.jMenuItemDuplicarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarServicioTransporte"));		
		
		
		this.jButtonNuevoRelacionesServicioTransporte.addActionListener (new ButtonActionListener(this,"NuevoRelacionesServicioTransporte"));
		
		
		this.jButtonNuevoRelacionesToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarServicioTransporte"));
			
		this.jMenuItemNuevoRelacionesServicioTransporte.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesServicioTransporte"));		
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarServicioTransporte.addActionListener(new ButtonActionListener(this,"ModificarServicioTransporte"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonModificarToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"ModificarToolBarServicioTransporte"));
			
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemModificarServicioTransporte.addActionListener(new ButtonActionListener(this,"MenuItemModificarServicioTransporte"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarServicioTransporte.addActionListener (new ButtonActionListener(this,"ActualizarServicioTransporte"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonActualizarToolBarServicioTransporte.addActionListener(new ButtonActionListener(this,"ActualizarToolBarServicioTransporte"));
				
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemActualizarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemActualizarServicioTransporte"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarServicioTransporte.addActionListener (new ButtonActionListener(this,"EliminarServicioTransporte"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonEliminarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"EliminarToolBarServicioTransporte"));
						
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemEliminarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemEliminarServicioTransporte"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarServicioTransporte.addActionListener (new ButtonActionListener(this,"CancelarServicioTransporte"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonCancelarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"CancelarToolBarServicioTransporte"));
			
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemCancelarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemCancelarServicioTransporte"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarServicioTransporte"));		
		
		
		this.jButtonCerrarServicioTransporte.addActionListener (new ButtonActionListener(this,"CerrarServicioTransporte"));
		
		
		this.jButtonCerrarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"CerrarToolBarServicioTransporte"));
			
		this.jMenuItemCerrarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemCerrarServicioTransporte"));
			
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jMenuItemDetalleCerrarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarServicioTransporte"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosServicioTransporte"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicioTransporte"));
		}
		
		this.jButtonCopiarToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"CopiarToolBarServicioTransporte"));
			
		this.jButtonVerFormToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"VerFormToolBarServicioTransporte"));
		
		this.jMenuItemGuardarCambiosServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosServicioTransporte"));
			
		this.jMenuItemCopiarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemCopiarServicioTransporte"));		
		
		this.jMenuItemVerFormServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemVerFormServicioTransporte"));		
		
		
		this.jButtonGuardarCambiosTablaServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaServicioTransporte"));
		
		
		this.jButtonGuardarCambiosTablaToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarServicioTransporte"));
			
		this.jMenuItemGuardarCambiosTablaServicioTransporte.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaServicioTransporte"));		
		
		
		
		this.jButtonRecargarInformacionServicioTransporte.addActionListener (new ButtonActionListener(this,"RecargarInformacionServicioTransporte"));
					
		this.jButtonRecargarInformacionToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarServicioTransporte"));
		
		this.jMenuItemRecargarInformacionServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionServicioTransporte"));		
		
		
		
		this.jButtonAnterioresServicioTransporte.addActionListener (new ButtonActionListener(this,"AnterioresServicioTransporte"));
		
		
		this.jButtonAnterioresToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"AnterioresToolBarServicioTransporte"));
		
		this.jMenuItemAnterioresServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresServicioTransporte"));		
		
		
		this.jButtonSiguientesServicioTransporte.addActionListener (new ButtonActionListener(this,"SiguientesServicioTransporte"));
		
		
		this.jButtonSiguientesToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"SiguientesToolBarServicioTransporte"));
			
		this.jMenuItemSiguientesServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesServicioTransporte"));
			
		this.jMenuItemAbrirOrderByServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByServicioTransporte"));
			
		this.jMenuItemMostrarOcultarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarServicioTransporte"));
			
		this.jMenuItemDetalleAbrirOrderByServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByServicioTransporte"));
			
		this.jMenuItemDetalleMostarOcultarServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarServicioTransporte"));		
		
		
		this.jButtonNuevoGuardarCambiosServicioTransporte.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosServicioTransporte"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarServicioTransporte"));
			
		this.jMenuItemNuevoGuardarCambiosServicioTransporte.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosServicioTransporte"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosServicioTransporte.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosServicioTransporte"));

		this.jCheckBoxSeleccionadosServicioTransporte.addItemListener(new CheckBoxItemListener(this,"SeleccionadosServicioTransporte"));
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioServicioTransporte"));
		}
		
		
		this.jComboBoxTiposRelacionesServicioTransporte.addActionListener (new ButtonActionListener(this,"TiposRelacionesServicioTransporte"));
			
		this.jComboBoxTiposAccionesServicioTransporte.addActionListener (new ButtonActionListener(this,"TiposAccionesServicioTransporte"));
					
		this.jComboBoxTiposSeleccionarServicioTransporte.addActionListener (new ButtonActionListener(this,"TiposSeleccionarServicioTransporte"));
			
		this.jTextFieldValorCampoGeneralServicioTransporte.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralServicioTransporte"));		
		
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonidServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"idServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteBusqueda"));
		//jButtonid_clienteServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporte.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteBusqueda"));
		//jButtonid_cliente_proveedorServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_ingresoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ingresoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_entregaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia1ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia1ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia2ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia2ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonprecioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"precioServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_ivaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_ivaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_totalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_totalServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtondescripcionServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioTransporteBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdClienteServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdClienteServicioTransporte"));

			this.jButtonBuscarFK_IdClienteid_clienteServicioTransporte.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporte"));

			this.jButtonFK_IdClienteProveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdClienteProveedorServicioTransporte"));

			this.jButtonBuscarFK_IdClienteProveedorid_cliente_proveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporte"));

			this.jButtonFK_IdDetalleActivoFijoServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoServicioTransporte"));

			this.jButtonFK_IdRutaTransporteServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdRutaTransporteServicioTransporte"));

			this.jButtonFK_IdTransportistaServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaServicioTransporte"));

			this.jButtonFK_IdVehiculoServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdVehiculoServicioTransporte"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoServicioTransporte!=null) {
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicioTransporte"));
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicioTransporte"));
				this.jInternalFrameReporteDinamicoServicioTransporte.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicioTransporte"));
			}
			
			//this.jButtonCerrarReporteDinamicoServicioTransporte.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicioTransporte"));				
			//this.jButtonGenerarReporteDinamicoServicioTransporte.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicioTransporte"));
			//this.jButtonGenerarExcelReporteDinamicoServicioTransporte.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicioTransporte"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionServicioTransporte!=null) {
				this.jInternalFrameImportacionServicioTransporte.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionServicioTransporte"));
				this.jInternalFrameImportacionServicioTransporte.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionServicioTransporte"));
				this.jInternalFrameImportacionServicioTransporte.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionServicioTransporte"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByServicioTransporte.addActionListener (new ButtonActionListener(this,"AbrirOrderByServicioTransporte"));
			
			this.jButtonAbrirOrderByToolBarServicioTransporte.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarServicioTransporte"));			
			
			if(this.jInternalFrameOrderByServicioTransporte!=null) {
				this.jInternalFrameOrderByServicioTransporte.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByServicioTransporte"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicioTransporte.jTabbedPaneRelacionesServicioTransporte.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesServicioTransporte"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameServicioTransporte();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormServicioTransporte.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormServicioTransporte = (JInternalFrameBase)event.getSource();
	            	
	            ServicioTransporteBeanSwingJInternalFrame jInternalFrameParent=(ServicioTransporteBeanSwingJInternalFrame)jInternalFrameDetalleFormServicioTransporte.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarServicioTransporteActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosServicioTransporte.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosServicioTransporteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosServicioTransporte.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosServicioTransporte.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoServicioTransporte";
		inputMap = this.jButtonNuevoServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoServicioTransporteActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioTransporteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesServicioTransporte";
		inputMap = this.jButtonNuevoRelacionesServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoServicioTransporteActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarServicioTransporte";
		inputMap = this.jButtonModificarServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarServicioTransporte";
		inputMap = this.jButtonActualizarServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarServicioTransporte";
		inputMap = this.jButtonEliminarServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarServicioTransporte";
		inputMap = this.jButtonCancelarServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarServicioTransporte";
		inputMap = this.jButtonCerrarServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosServicioTransporte";
		inputMap = this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormServicioTransporte.jButtonGuardarCambiosServicioTransporte.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosServicioTransporteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosServicioTransporte.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosServicioTransporteItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesServicioTransporte.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesServicioTransporteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarServicioTransporte.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarServicioTransporteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralServicioTransporte.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralServicioTransporteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonidServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"idServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_empresaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_sucursalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ejercicioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_periodoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoServicioTransporteBusqueda"));
		//jButtonid_clienteServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporte.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporteBusqueda"));
		//jButtonid_cliente_proveedorServicioTransporte.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cliente_proveedorServicioTransporteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporte"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_transportistaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_vehiculoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_vehiculoServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_ruta_transporteServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_ruta_transporteServicioTransporteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonid_detalle_activo_fijoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_ingresoServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ingresoServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonfecha_entregaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_entregaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia1ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia1ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtoncodigo_guia2ServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"codigo_guia2ServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonprecioServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"precioServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_ivaServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_ivaServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtonvalor_totalServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"valor_totalServicioTransporteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicioTransporte.jButtondescripcionServicioTransporteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioTransporteBusqueda"));
		
		
		this.jButtonFK_IdClienteServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdClienteServicioTransporte"));

		this.jButtonBuscarFK_IdClienteid_clienteServicioTransporte.addActionListener(new ButtonActionListener(this,"id_clienteServicioTransporte"));

		this.jButtonFK_IdClienteProveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdClienteProveedorServicioTransporte"));

		this.jButtonBuscarFK_IdClienteProveedorid_cliente_proveedorServicioTransporte.addActionListener(new ButtonActionListener(this,"id_cliente_proveedorServicioTransporte"));

		this.jButtonFK_IdDetalleActivoFijoServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoServicioTransporte"));

		this.jButtonFK_IdRutaTransporteServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdRutaTransporteServicioTransporte"));

		this.jButtonFK_IdTransportistaServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaServicioTransporte"));

		this.jButtonFK_IdVehiculoServicioTransporte.addActionListener(new ButtonActionListener(this,"FK_IdVehiculoServicioTransporte"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionServicioTransporte.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionServicioTransporteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarServicioTransporteActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarServicioTransporte.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosServicioTransporte(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
					serviciotransporteAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ServicioTransporte serviciotransporteAux:serviciotransportes) {
					serviciotransporteAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosServicioTransporteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
						serviciotransporteAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ServicioTransporte serviciotransporteAux:serviciotransportes) {
						serviciotransporteAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ServicioTransporte serviciotransporteAux:serviciotransportes) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaServicioTransporte(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosServicioTransporte.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosServicioTransporte.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosServicioTransporteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosServicioTransporte.getSelectedRows();
			
			ServicioTransporte serviciotransporteLocal=new ServicioTransporte();
			
			//this.seleccionarTodosServicioTransporte(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					serviciotransporteLocal =(ServicioTransporte) this.serviciotransporteLogic.getServicioTransportes().toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					serviciotransporteLocal =(ServicioTransporte) this.serviciotransportes.toArray()[this.jTableDatosServicioTransporte.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				serviciotransporteLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
						serviciotransporteAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ServicioTransporte serviciotransporteAux:serviciotransportes) {
						serviciotransporteAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaServicioTransporte(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosServicioTransporte.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosServicioTransporte.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosServicioTransporte,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualServicioTransporteItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarServicioTransporteParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralServicioTransporteActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralServicioTransporte.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ServicioTransporte serviciotransporteAux:this.serviciotransporteLogic.getServicioTransportes()) {
				
						if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO)) {
							existe=true;
							serviciotransporteAux.setfecha_ingreso(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							serviciotransporteAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1)) {
							existe=true;
							serviciotransporteAux.setcodigo_guia1(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2)) {
							existe=true;
							serviciotransporteAux.setcodigo_guia2(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							serviciotransporteAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_VALORIVA)) {
							existe=true;
							serviciotransporteAux.setvalor_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL)) {
							existe=true;
							serviciotransporteAux.setvalor_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							serviciotransporteAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ServicioTransporte serviciotransporteAux:serviciotransportes) {
					
						if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO)) {
							existe=true;
							serviciotransporteAux.setfecha_ingreso(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA)) {
							existe=true;
							serviciotransporteAux.setfecha_entrega(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1)) {
							existe=true;
							serviciotransporteAux.setcodigo_guia1(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2)) {
							existe=true;
							serviciotransporteAux.setcodigo_guia2(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							serviciotransporteAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_VALORIVA)) {
							existe=true;
							serviciotransporteAux.setvalor_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL)) {
							existe=true;
							serviciotransporteAux.setvalor_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							serviciotransporteAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaServicioTransporte(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesServicioTransporteActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioServicioTransporte=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesServicioTransporte.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteServicioTransporte) {				
					conSplash=true;//false;										
					
					//this.startProcessServicioTransporte(conSplash);
				
					this.generarReporteServicioTransportesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoServicioTransportesSeleccionados();
				//this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoServicioTransportesSeleccionados(false);
				//this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoServicioTransportesSeleccionados(true);
				//this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessServicioTransporte();
				
				this.exportarServicioTransportesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionServicioTransportes();
				//this.importarServicioTransportes();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessServicioTransporte();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelServicioTransportesSeleccionados();
				//this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Servicio Transporte", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessServicioTransporte();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoServicioTransporte)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyServicioTransporte(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
				}	
			} 			
			else if(ServicioTransporteBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteServicioTransporte) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessServicioTransporte(conSplash);
					
						//this.actualizarParametrosGeneralServicioTransporte();
						
						this.generarReporteProcesoAccionServicioTransportesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ServicioTransporteBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Servicio TransporteS SELECCIONADOS?", "MANTENIMIENTO DE Servicio Transporte", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessServicioTransporte();
				
						this.actualizarParametrosGeneralServicioTransporte();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.serviciotransporteReturnGeneral=serviciotransporteLogic.procesarAccionServicioTransportesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.serviciotransporteLogic.getServicioTransportes(),this.serviciotransporteParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarServicioTransporteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralServicioTransporte();
					
					ServicioTransporteBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarServicioTransporteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesServicioTransporte.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormServicioTransporte.jComboBoxTiposAccionesFormularioServicioTransporte.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessServicioTransporte(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesServicioTransporteActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessServicioTransporte();
			
			if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
			ServicioTransporte serviciotransporte=new ServicioTransporte();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingServicioTransporte(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesServicioTransporte.getSelectedItem();
			
			
			
			
			serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
			//this.sTipoAccion;
			
			if(serviciotransportesSeleccionados.size()==1) {
				for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
					serviciotransporte=serviciotransporteAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Servicio Transporte")) {
					jButtonDetalleServicioTransporteActionPerformed(null,rowIndex,true,false,serviciotransporte);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessServicioTransporte();
			
      		//this.finishProcessServicioTransporte(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarServicioTransporteReturnGeneral() throws Exception {
		if(this.serviciotransporteReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.serviciotransporteReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.serviciotransporteReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.serviciotransporteReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.serviciotransporteReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.serviciotransporteReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingServicioTransporte(false);
		}
		
		if(this.serviciotransporteReturnGeneral.getConRetornoLista() || this.serviciotransporteReturnGeneral.getConRetornoObjeto()) {
			if(this.serviciotransporteReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.serviciotransporteLogic.setServicioTransportes(this.serviciotransporteReturnGeneral.getServicioTransportes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.serviciotransporteReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.serviciotransporteLogic.setServicioTransporte(this.serviciotransporteReturnGeneral.getServicioTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingServicioTransporte(false);
		}
	}
	
	public void actualizarParametrosGeneralServicioTransporte() throws Exception {
		
		
	}
	
	public ArrayList<ServicioTransporte> getServicioTransportesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioServicioTransporte) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ServicioTransporte serviciotransporteAux:serviciotransporteLogic.getServicioTransportes()) {
					if(serviciotransporteAux.getIsSelected()) {
						serviciotransportesSeleccionados.add(serviciotransporteAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ServicioTransporte serviciotransporteAux:this.serviciotransportes) {
					if(serviciotransporteAux.getIsSelected()) {
						serviciotransportesSeleccionados.add(serviciotransporteAux);				
					}
				}
			}
			
			if(serviciotransportesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						serviciotransportesSeleccionados.addAll(this.serviciotransporteLogic.getServicioTransportes());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						serviciotransportesSeleccionados.addAll(this.serviciotransportes);				
					}
				}
			}
		} else {
			serviciotransportesSeleccionados.add(this.serviciotransporte);
		}
		
		return serviciotransportesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteServicioTransportesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalServicioTransportesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoServicioTransportesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoServicioTransportesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoServicioTransportesSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesServicioTransportesSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Servicio Transporte",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados);
		
	}	
	
	public void generarReporteNormalServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionServicioTransportesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		
		this.abrirInicializarFrameReporteDinamicoServicioTransporte();
		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoServicioTransporte();
		
		
		//this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados ,serviciotransporteImplementable,serviciotransporteImplementableHome);
	}
	
	public void mostrarImportacionServicioTransportes() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionServicioTransporte();
		
		this.abrirFrameImportacionServicioTransporte();		
		
			
		//this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados ,serviciotransporteImplementable,serviciotransporteImplementableHome);
	}
	
	public void importarServicioTransportes() throws Exception {		
	
	}
	
	public void exportarServicioTransportesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelServicioTransportesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoServicioTransportesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlServicioTransportesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Servicio Transporte",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarServicioTransporte(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarServicioTransporte(serviciotransporteAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//serviciotransporteAux.setsDetalleGeneralEntityReporte(serviciotransporteAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarServicioTransporte(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_PRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_VALORIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarServicioTransporte(ServicioTransporte serviciotransporte,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=serviciotransporte.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getclienteproveedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getvehiculo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getrutatransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getdetalleactivofijo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getfecha_ingreso().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getfecha_entrega().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getcodigo_guia1();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getcodigo_guia2();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getprecio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getvalor_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getvalor_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=serviciotransporte.getdescripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ServicioTransportes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelServicioTransporte(row);				
				iRow++;
			}				
			
			for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelServicioTransporte(serviciotransporteAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlServicioTransportesSeleccionados() throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();		
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"serviciotransporte.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("serviciotransportes");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("serviciotransporte");
			//elementRoot.appendChild(element);
		
			for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
				element = document.createElement("serviciotransporte");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlServicioTransporte(serviciotransporteAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio Transporte",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelServicioTransporte(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_PRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_VALORTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelServicioTransporte(ServicioTransporte serviciotransporte,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getclienteproveedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getvehiculo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getrutatransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getdetalleactivofijo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getfecha_ingreso());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getfecha_entrega());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getcodigo_guia1());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getcodigo_guia2());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getprecio());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getvalor_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getvalor_total());
		cell = row.createCell(iColumn++);cell.setCellValue(serviciotransporte.getdescripcion());				
	}
	
	public void setFilaDatosExportarXmlServicioTransporte(ServicioTransporte serviciotransporte,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ServicioTransporteConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(serviciotransporte.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ServicioTransporteConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(serviciotransporte.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(serviciotransporte.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(serviciotransporte.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(serviciotransporte.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(serviciotransporte.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementcliente_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(serviciotransporte.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementclienteproveedor_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDCLIENTEPROVEEDOR);
		elementclienteproveedor_descripcion.appendChild(document.createTextNode(serviciotransporte.getclienteproveedor_descripcion()));
		element.appendChild(elementclienteproveedor_descripcion);

		Element elementtransportista_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(serviciotransporte.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementvehiculo_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDVEHICULO);
		elementvehiculo_descripcion.appendChild(document.createTextNode(serviciotransporte.getvehiculo_descripcion()));
		element.appendChild(elementvehiculo_descripcion);

		Element elementrutatransporte_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDRUTATRANSPORTE);
		elementrutatransporte_descripcion.appendChild(document.createTextNode(serviciotransporte.getrutatransporte_descripcion()));
		element.appendChild(elementrutatransporte_descripcion);

		Element elementdetalleactivofijo_descripcion = document.createElement(ServicioTransporteConstantesFunciones.IDDETALLEACTIVOFIJO);
		elementdetalleactivofijo_descripcion.appendChild(document.createTextNode(serviciotransporte.getdetalleactivofijo_descripcion()));
		element.appendChild(elementdetalleactivofijo_descripcion);

		Element elementfecha_ingreso = document.createElement(ServicioTransporteConstantesFunciones.FECHAINGRESO);
		elementfecha_ingreso.appendChild(document.createTextNode(serviciotransporte.getfecha_ingreso().toString().trim()));
		element.appendChild(elementfecha_ingreso);

		Element elementfecha_entrega = document.createElement(ServicioTransporteConstantesFunciones.FECHAENTREGA);
		elementfecha_entrega.appendChild(document.createTextNode(serviciotransporte.getfecha_entrega().toString().trim()));
		element.appendChild(elementfecha_entrega);

		Element elementcodigo_guia1 = document.createElement(ServicioTransporteConstantesFunciones.CODIGOGUIA1);
		elementcodigo_guia1.appendChild(document.createTextNode(serviciotransporte.getcodigo_guia1().trim()));
		element.appendChild(elementcodigo_guia1);

		Element elementcodigo_guia2 = document.createElement(ServicioTransporteConstantesFunciones.CODIGOGUIA2);
		elementcodigo_guia2.appendChild(document.createTextNode(serviciotransporte.getcodigo_guia2().trim()));
		element.appendChild(elementcodigo_guia2);

		Element elementprecio = document.createElement(ServicioTransporteConstantesFunciones.PRECIO);
		elementprecio.appendChild(document.createTextNode(serviciotransporte.getprecio().toString().trim()));
		element.appendChild(elementprecio);

		Element elementvalor_iva = document.createElement(ServicioTransporteConstantesFunciones.VALORIVA);
		elementvalor_iva.appendChild(document.createTextNode(serviciotransporte.getvalor_iva().toString().trim()));
		element.appendChild(elementvalor_iva);

		Element elementvalor_total = document.createElement(ServicioTransporteConstantesFunciones.VALORTOTAL);
		elementvalor_total.appendChild(document.createTextNode(serviciotransporte.getvalor_total().toString().trim()));
		element.appendChild(elementvalor_total);

		Element elementdescripcion = document.createElement(ServicioTransporteConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(serviciotransporte.getdescripcion().trim()));
		element.appendChild(elementdescripcion);
	}
	
	public void generarReporteGroupGenericoServicioTransportesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ServicioTransporte> serviciotransportesSeleccionados=new ArrayList<ServicioTransporte>();
		
		serviciotransportesSeleccionados=this.getServicioTransportesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoServicioTransporte(serviciotransportesSeleccionados);
		
		this.generarReporteServicioTransportes("Todos",serviciotransportesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoServicioTransporte(ArrayList<ServicioTransporte> serviciotransportesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ServicioTransporte serviciotransporteAux:serviciotransportesSeleccionados) {
				serviciotransporteAux.setsDetalleGeneralEntityReporte(serviciotransporteAux.toString());
			
				if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDCLIENTEPROVEEDOR)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getclienteproveedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDVEHICULO)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getvehiculo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDRUTATRANSPORTE)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getrutatransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_IDDETALLEACTIVOFIJO)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getdetalleactivofijo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAINGRESO)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(serviciotransporteAux.getfecha_ingreso()));
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_FECHAENTREGA)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(serviciotransporteAux.getfecha_entrega()));
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA1)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getcodigo_guia1());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_CODIGOGUIA2)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getcodigo_guia2());
				}
				 else if(sTipoSeleccionar.equals(ServicioTransporteConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					serviciotransporteAux.setsDescripcionGeneralEntityReporte1(serviciotransporteAux.getdescripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioTransporteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesServicioTransporte(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoServicioTransporte=true;
				this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=true;
				this.isVisibilidadCeldaGuardarCambiosServicioTransporte=true;
			}
			
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=true;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=true;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=true;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=true;
			this.isVisibilidadCeldaEliminarServicioTransporte=true;
			this.isVisibilidadCeldaCancelarServicioTransporte=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=true;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=true;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoServicioTransporte=true;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=true;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=true;
			this.isVisibilidadCeldaModificarServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=true;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
			this.isVisibilidadCeldaModificarServicioTransporte=true;
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
			this.isVisibilidadCeldaCancelarServicioTransporte=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				} else {
					this.isVisibilidadCeldaGuardarServicioTransporte=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ServicioTransporteJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoServicioTransporte=true;
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=true;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=true;
		} else {
			this.actualizarEstadoPanelsServicioTransporte(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarServicioTransporte=false;
			//this.isVisibilidadCeldaVerFormServicioTransporte=false;
			this.isVisibilidadCeldaDuplicarServicioTransporte=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!serviciotransporteSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
		} else {
			this.isVisibilidadCeldaNuevoServicioTransporte=false;
			this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			if(!serviciotransporteSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;												
			}
			
			this.jButtonCerrarServicioTransporte.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesServicioTransporte=false;
		}
		
		if(!this.permiteMantenimiento(this.serviciotransporte)) {
			this.isVisibilidadCeldaActualizarServicioTransporte=false;
			this.isVisibilidadCeldaEliminarServicioTransporte=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesServicioTransporte() {
		this.isVisibilidadCeldaNuevoServicioTransporte=false;
		this.isVisibilidadCeldaGuardarCambiosServicioTransporte=false;
	}
	
	public void actualizarEstadoPanelsServicioTransporte(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionServicioTransporte!=null) {
				this.jScrollPanelDatosEdicionServicioTransporte.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicioTransporte!=null) {
				this.jScrollPanelDatosServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicioTransporte!=null) {
				this.jPanelPaginacionServicioTransporte.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
					this.jTabbedPaneBusquedasServicioTransporte.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.serviciotransporteSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicioTransporte!=null) {
				this.jTabbedPaneBusquedasServicioTransporte.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesServicioTransporte!=null) {
				this.jPanelParametrosReportesServicioTransporte.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaClienteProveedor(Boolean isParaClienteProveedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteProveedorNegation=!isParaClienteProveedor;

			this.isVisibilidadFK_IdCliente=isParaClienteProveedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaClienteProveedor;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaClienteProveedorNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaClienteProveedorNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaClienteProveedorNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaClienteProveedorNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadFK_IdCliente=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaTransportista;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaVehiculo(Boolean isParaVehiculo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVehiculoNegation=!isParaVehiculo;

			this.isVisibilidadFK_IdCliente=isParaVehiculoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaVehiculoNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaVehiculoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaVehiculoNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaVehiculoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaVehiculo;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaRutaTransporte(Boolean isParaRutaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaRutaTransporteNegation=!isParaRutaTransporte;

			this.isVisibilidadFK_IdCliente=isParaRutaTransporteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaRutaTransporteNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaRutaTransporteNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaRutaTransporte;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaRutaTransporteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaRutaTransporteNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}

	public void setVisibilidadBusquedasParaDetalleActivoFijo(Boolean isParaDetalleActivoFijo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaDetalleActivoFijoNegation=!isParaDetalleActivoFijo;

			this.isVisibilidadFK_IdCliente=isParaDetalleActivoFijoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteServicioTransporte);}

			this.isVisibilidadFK_IdClienteProveedor=isParaDetalleActivoFijoNegation;
			if(!this.isVisibilidadFK_IdClienteProveedor) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdClienteProveedorServicioTransporte);}

			this.isVisibilidadFK_IdDetalleActivoFijo=isParaDetalleActivoFijo;
			if(!this.isVisibilidadFK_IdDetalleActivoFijo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdDetalleActivoFijoServicioTransporte);}

			this.isVisibilidadFK_IdRutaTransporte=isParaDetalleActivoFijoNegation;
			if(!this.isVisibilidadFK_IdRutaTransporte) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdRutaTransporteServicioTransporte);}

			this.isVisibilidadFK_IdTransportista=isParaDetalleActivoFijoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdTransportistaServicioTransporte);}

			this.isVisibilidadFK_IdVehiculo=isParaDetalleActivoFijoNegation;
			if(!this.isVisibilidadFK_IdVehiculo) {this.jTabbedPaneBusquedasServicioTransporte.remove(jPanelFK_IdVehiculoServicioTransporte);}
		}
		
	}
	
	

	public String registrarSesionServicioTransporteParaDetalleServicioTransportes() throws Exception {
		Boolean isPaginaPopupDetalleServicioTransporte=false;

		try {

			if(this.serviciotransporteSessionBean==null) {
				this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean==null) {
				this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean=new DetalleServicioTransporteSessionBean();
			}

			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setsPathNavegacionActual(serviciotransporteSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleServicioTransporteConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleServicioTransporte=this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleServicioTransporte(true);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleServicioTransporte(ServicioTransporteConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setisBusquedaDesdeForeignKeySesionServicioTransporte(true);
			this.jInternalFrameDetalleFormServicioTransporte.detalleserviciotransporteSessionBean.setlidServicioTransporteActual(this.idServicioTransporteActual);

			serviciotransporteSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicioTransporte(true);
			serviciotransporteSessionBean.setlIdServicioTransporteActualForeignKey(this.idServicioTransporteActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionServicioTransporteParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(serviciotransporteSessionBean==null) {
				serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(serviciotransporteSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.serviciotransporteFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(ServicioTransporteConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionServicioTransporte(true);
			//clienteSessionBean.setlidServicioTransporteActual(this.idServicioTransporteActual);

			serviciotransporteSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicioTransporte(true);
			serviciotransporteSessionBean.setlIdServicioTransporteActualForeignKey(this.idServicioTransporteActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioTransporteParaBusquedaClienteProveedors() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(serviciotransporteSessionBean==null) {
				serviciotransporteSessionBean=new ServicioTransporteSessionBean();
			}

			if(clienteproveedorSessionBean==null) {
				clienteproveedorSessionBean=new ClienteSessionBean();
			}

			clienteproveedorSessionBean.setsPathNavegacionActual(serviciotransporteSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteproveedorSessionBean.setisPermiteRecargarInformacion(false);
			clienteproveedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteproveedorSessionBean.getisPaginaPopup();
			clienteproveedorSessionBean.setisPaginaPopup(false);
			clienteproveedorSessionBean.setEstaModoBusqueda(true);
			clienteproveedorSessionBean.setsFuncionBusquedaRapida("window.opener.serviciotransporteFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente_proveedor(TO_REPLACE);");
			clienteproveedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteproveedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(ServicioTransporteConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionServicioTransporte(true);
			//clienteSessionBean.setlidServicioTransporteActual(this.idServicioTransporteActual);

			serviciotransporteSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicioTransporte(true);
			serviciotransporteSessionBean.setlIdServicioTransporteActualForeignKey(this.idServicioTransporteActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ServicioTransporteSessionBean serviciotransporteSessionBean=new ServicioTransporteSessionBean();
		
		if(this.serviciotransporteSessionBean==null) {
			this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
		}
		
		this.serviciotransporteSessionBean.setsUltimaBusquedaServicioTransporte(this.getsAccionBusqueda());
		this.serviciotransporteSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.serviciotransporteSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			serviciotransporteSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdClienteProveedor")) {
			serviciotransporteSessionBean.setid_cliente_proveedor(this.getid_cliente_proveedorFK_IdClienteProveedor());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijo")) {
			serviciotransporteSessionBean.setid_detalle_activo_fijo(this.getid_detalle_activo_fijoFK_IdDetalleActivoFijo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			serviciotransporteSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			serviciotransporteSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			serviciotransporteSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdRutaTransporte")) {
			serviciotransporteSessionBean.setid_ruta_transporte(this.getid_ruta_transporteFK_IdRutaTransporte());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			serviciotransporteSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
			serviciotransporteSessionBean.setid_transportista(this.getid_transportistaFK_IdTransportista());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVehiculo")) {
			serviciotransporteSessionBean.setid_vehiculo(this.getid_vehiculoFK_IdVehiculo());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ServicioTransporteSessionBean serviciotransporteSessionBean=new ServicioTransporteSessionBean();
		
		if(this.serviciotransporteSessionBean==null) {
			this.serviciotransporteSessionBean=new ServicioTransporteSessionBean();
		}
		
		if(this.serviciotransporteSessionBean.getsUltimaBusquedaServicioTransporte()!=null&&!this.serviciotransporteSessionBean.getsUltimaBusquedaServicioTransporte().equals("")) {
			this.setsAccionBusqueda(serviciotransporteSessionBean.getsUltimaBusquedaServicioTransporte());
			this.setiNumeroPaginacion(serviciotransporteSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(serviciotransporteSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(serviciotransporteSessionBean.getid_cliente());
				serviciotransporteSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdClienteProveedor")) {
				this.setid_cliente_proveedorFK_IdClienteProveedor(serviciotransporteSessionBean.getid_cliente_proveedor());
				serviciotransporteSessionBean.setid_cliente_proveedor(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijo")) {
				this.setid_detalle_activo_fijoFK_IdDetalleActivoFijo(serviciotransporteSessionBean.getid_detalle_activo_fijo());
				serviciotransporteSessionBean.setid_detalle_activo_fijo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(serviciotransporteSessionBean.getid_ejercicio());
				serviciotransporteSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(serviciotransporteSessionBean.getid_empresa());
				serviciotransporteSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(serviciotransporteSessionBean.getid_periodo());
				serviciotransporteSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdRutaTransporte")) {
				this.setid_ruta_transporteFK_IdRutaTransporte(serviciotransporteSessionBean.getid_ruta_transporte());
				serviciotransporteSessionBean.setid_ruta_transporte(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(serviciotransporteSessionBean.getid_sucursal());
				serviciotransporteSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
				this.setid_transportistaFK_IdTransportista(serviciotransporteSessionBean.getid_transportista());
				serviciotransporteSessionBean.setid_transportista(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVehiculo")) {
				this.setid_vehiculoFK_IdVehiculo(serviciotransporteSessionBean.getid_vehiculo());
				serviciotransporteSessionBean.setid_vehiculo(-1L);
			}
		}
		
		this.serviciotransporteSessionBean.setsUltimaBusquedaServicioTransporte("");
		this.serviciotransporteSessionBean.setiNumeroPaginacion(ServicioTransporteConstantesFunciones.INUMEROPAGINACION);
		this.serviciotransporteSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaServicioTransporte(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioServicioTransporte() {
		this.updateBorderResaltarBusquedasFormularioServicioTransporte();
		this.updateVisibilidadBusquedasFormularioServicioTransporte();
		this.updateHabilitarBusquedasFormularioServicioTransporte();
	}
	
	public void updateBorderResaltarBusquedasFormularioServicioTransporte() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasServicioTransporte.getComponents().length>0) {
	

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteServicioTransporte);
			}
		}

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteProveedorServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteProveedorServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteProveedorServicioTransporte);
			}
		}

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdDetalleActivoFijoServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdDetalleActivoFijoServicioTransporte);
			}
		}

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdRutaTransporteServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdRutaTransporteServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdRutaTransporteServicioTransporte);
			}
		}

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdTransportistaServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdTransportistaServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdTransportistaServicioTransporte);
			}
		}

		if(this.serviciotransporteConstantesFunciones.resaltarFK_IdVehiculoServicioTransporte!=null) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdVehiculoServicioTransporte);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdVehiculoServicioTransporte);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioServicioTransporte() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasServicioTransporte.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdClienteServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdClienteServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteProveedorServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdClienteProveedorServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdClienteProveedorServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdDetalleActivoFijoServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdDetalleActivoFijoServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdRutaTransporteServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdRutaTransporteServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdRutaTransporteServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdTransportistaServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdTransportistaServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdTransportistaServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdVehiculoServicioTransporte);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.serviciotransporteConstantesFunciones.mostrarFK_IdVehiculoServicioTransporte);
			if(!this.serviciotransporteConstantesFunciones.mostrarFK_IdVehiculoServicioTransporte && index>-1) {
				this.jTabbedPaneBusquedasServicioTransporte.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioServicioTransporte() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasServicioTransporte.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdClienteServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdClienteServicioTransporte);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteProveedorServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdClienteProveedorServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdClienteProveedorServicioTransporte);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdDetalleActivoFijoServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdDetalleActivoFijoServicioTransporte);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdRutaTransporteServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdRutaTransporteServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdRutaTransporteServicioTransporte);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdTransportistaServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdTransportistaServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdTransportistaServicioTransporte);
			}

			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdVehiculoServicioTransporte);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.serviciotransporteConstantesFunciones.activarFK_IdVehiculoServicioTransporte);
				this.jTabbedPaneBusquedasServicioTransporte.setEnabledAt(index,this.serviciotransporteConstantesFunciones.activarFK_IdVehiculoServicioTransporte);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaServicioTransporte(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdClienteServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteServicioTransporte);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdClienteProveedor")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdClienteProveedorServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdClienteProveedorServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdClienteProveedorServicioTransporte);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdDetalleActivoFijo")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdDetalleActivoFijoServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdDetalleActivoFijoServicioTransporte);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdRutaTransporte")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdRutaTransporteServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdRutaTransporteServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdRutaTransporteServicioTransporte);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransportista")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdTransportistaServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdTransportistaServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdTransportistaServicioTransporte);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVehiculo")) {
			index= this.jTabbedPaneBusquedasServicioTransporte.indexOfComponent(this.jPanelFK_IdVehiculoServicioTransporte);

			this.jTabbedPaneBusquedasServicioTransporte.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicioTransporte.getComponent(index);

			this.serviciotransporteConstantesFunciones.setResaltarFK_IdVehiculoServicioTransporte(resaltar);

			jPanel.setBorder(this.serviciotransporteConstantesFunciones.resaltarFK_IdVehiculoServicioTransporte);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarServicioTransporte.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioServicioTransporte() throws Exception {

		if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioServicioTransporte();
		this.updateVisibilidadResaltarControlesFormularioServicioTransporte();
		this.updateHabilitarResaltarControlesFormularioServicioTransporte();
		
	}
	
	public void updateBorderResaltarControlesFormularioServicioTransporte() throws Exception {
		if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.serviciotransporteConstantesFunciones.resaltaridServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltaridServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_empresaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_empresaServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_sucursalServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_sucursalServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_ejercicioServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_ejercicioServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_periodoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_periodoServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_clienteServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_clienteServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_cliente_proveedorServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_cliente_proveedorServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_transportistaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_transportistaServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_vehiculoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_vehiculoServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_ruta_transporteServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_ruta_transporteServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarid_detalle_activo_fijoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarid_detalle_activo_fijoServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarfecha_ingresoServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarfecha_ingresoServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarfecha_entregaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarfecha_entregaServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia1ServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia1ServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia2ServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarcodigo_guia2ServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarprecioServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarprecioServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarvalor_ivaServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarvalor_ivaServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltarvalor_totalServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltarvalor_totalServicioTransporte);}
		if(this.serviciotransporteConstantesFunciones.resaltardescripcionServicioTransporte!=null && this.jInternalFrameDetalleFormServicioTransporte!=null) {this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setBorder(this.serviciotransporteConstantesFunciones.resaltardescripcionServicioTransporte);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioServicioTransporte() throws Exception {		
		if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
	
		//this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostraridServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelidServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostraridServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_empresaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_empresaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_empresaServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_sucursalServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_sucursalServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_sucursalServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_ejercicioServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_ejercicioServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_ejercicioServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_periodoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_periodoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_periodoServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_clienteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_clienteServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_clienteServicioTransporte);
			this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_clienteServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_cliente_proveedorServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_cliente_proveedorServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_cliente_proveedorServicioTransporte);
			this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_cliente_proveedorServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_transportistaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_transportistaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_transportistaServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_vehiculoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_vehiculoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_vehiculoServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_ruta_transporteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_ruta_transporteServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_ruta_transporteServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_detalle_activo_fijoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelid_detalle_activo_fijoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarid_detalle_activo_fijoServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarfecha_ingresoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelfecha_ingresoServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarfecha_ingresoServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarfecha_entregaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelfecha_entregaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarfecha_entregaServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia1ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelcodigo_guia1ServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia1ServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia2ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelcodigo_guia2ServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarcodigo_guia2ServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarprecioServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelprecioServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarprecioServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarvalor_ivaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelvalor_ivaServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarvalor_ivaServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarvalor_totalServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPanelvalor_totalServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrarvalor_totalServicioTransporte);
		//this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrardescripcionServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jPaneldescripcionServicioTransporte.setVisible(this.serviciotransporteConstantesFunciones.mostrardescripcionServicioTransporte);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioServicioTransporte() throws Exception {
		if(this.jInternalFrameDetalleFormServicioTransporte==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormServicioTransporte!=null) {
	
		this.jInternalFrameDetalleFormServicioTransporte.jLabelidServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activaridServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_empresaServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_empresaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_sucursalServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_sucursalServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ejercicioServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_ejercicioServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_periodoServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_periodoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_clienteServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_clienteServicioTransporte);
			this.jInternalFrameDetalleFormServicioTransporte.jButtonid_clienteServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_clienteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_cliente_proveedorServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_cliente_proveedorServicioTransporte);
			this.jInternalFrameDetalleFormServicioTransporte.jButtonid_cliente_proveedorServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_cliente_proveedorServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_transportistaServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_transportistaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_vehiculoServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_vehiculoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_ruta_transporteServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_ruta_transporteServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jComboBoxid_detalle_activo_fijoServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarid_detalle_activo_fijoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_ingresoServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarfecha_ingresoServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jDateChooserfecha_entregaServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarfecha_entregaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia1ServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarcodigo_guia1ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreacodigo_guia2ServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarcodigo_guia2ServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldprecioServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarprecioServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_ivaServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarvalor_ivaServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextFieldvalor_totalServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activarvalor_totalServicioTransporte);
		this.jInternalFrameDetalleFormServicioTransporte.jTextAreadescripcionServicioTransporte.setEnabled(this.serviciotransporteConstantesFunciones.activardescripcionServicioTransporte);
		}
	}
	
		
}