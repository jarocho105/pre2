/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.cartera.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.cartera.util.PoliticasClienteConstantesFunciones;
import com.bydan.erp.cartera.util.PoliticasClienteParameterReturnGeneral;
//import com.bydan.erp.cartera.util.PoliticasClienteParameterGeneral;
//import com.bydan.erp.cartera.presentation.report.source.PoliticasClienteBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.cartera.resources.reportes.AuxiliarReportes;


import com.bydan.erp.cartera.util.*;
import com.bydan.erp.cartera.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.cartera.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class PoliticasClienteBeanSwingJInternalFrame extends PoliticasClienteJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(PoliticasClienteBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<PoliticasCliente> politicasclienteValidator = new ClassValidator<PoliticasCliente>(PoliticasCliente.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public PoliticasCliente politicascliente;	
	public PoliticasCliente politicasclienteAux;
	public PoliticasCliente politicasclienteAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public PoliticasCliente politicasclienteTotales;
	public Long idPoliticasClienteActual;
	public Long iIdNuevoPoliticasCliente=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboTransporte="";

	public List<Transporte> transportesForeignKey;

	public List<Transporte> gettransportesForeignKey() {
		return transportesForeignKey;
	}

	public void settransportesForeignKey(List<Transporte> transportesForeignKey) {
		this.transportesForeignKey = transportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transporte transporteForeignKey;

	public Transporte gettransporteForeignKey() {
		return transporteForeignKey;
	}

	public void settransporteForeignKey(Transporte transporteForeignKey) {
		this.transporteForeignKey = transporteForeignKey;
	}

	public String sFinalQueryComboLineaNegocio="";

	public List<LineaNegocio> lineanegociosForeignKey;

	public List<LineaNegocio> getlineanegociosForeignKey() {
		return lineanegociosForeignKey;
	}

	public void setlineanegociosForeignKey(List<LineaNegocio> lineanegociosForeignKey) {
		this.lineanegociosForeignKey = lineanegociosForeignKey;
	}

	//OBJETO FK ACTUAL
	public LineaNegocio lineanegocioForeignKey;

	public LineaNegocio getlineanegocioForeignKey() {
		return lineanegocioForeignKey;
	}

	public void setlineanegocioForeignKey(LineaNegocio lineanegocioForeignKey) {
		this.lineanegocioForeignKey = lineanegocioForeignKey;
	}

	public String sFinalQueryComboBanco="";

	public List<Banco> bancosForeignKey;

	public List<Banco> getbancosForeignKey() {
		return bancosForeignKey;
	}

	public void setbancosForeignKey(List<Banco> bancosForeignKey) {
		this.bancosForeignKey = bancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Banco bancoForeignKey;

	public Banco getbancoForeignKey() {
		return bancoForeignKey;
	}

	public void setbancoForeignKey(Banco bancoForeignKey) {
		this.bancoForeignKey = bancoForeignKey;
	}

	public String sFinalQueryComboTipoCuentaBancoGlobal="";

	public List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey;

	public List<TipoCuentaBancoGlobal> gettipocuentabancoglobalsForeignKey() {
		return tipocuentabancoglobalsForeignKey;
	}

	public void settipocuentabancoglobalsForeignKey(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey) {
		this.tipocuentabancoglobalsForeignKey = tipocuentabancoglobalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey;

	public TipoCuentaBancoGlobal gettipocuentabancoglobalForeignKey() {
		return tipocuentabancoglobalForeignKey;
	}

	public void settipocuentabancoglobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey) {
		this.tipocuentabancoglobalForeignKey = tipocuentabancoglobalForeignKey;
	}

	public String sFinalQueryComboEstadoPoliticasCliente="";

	public List<EstadoPoliticasCliente> estadopoliticasclientesForeignKey;

	public List<EstadoPoliticasCliente> getestadopoliticasclientesForeignKey() {
		return estadopoliticasclientesForeignKey;
	}

	public void setestadopoliticasclientesForeignKey(List<EstadoPoliticasCliente> estadopoliticasclientesForeignKey) {
		this.estadopoliticasclientesForeignKey = estadopoliticasclientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoPoliticasCliente estadopoliticasclienteForeignKey;

	public EstadoPoliticasCliente getestadopoliticasclienteForeignKey() {
		return estadopoliticasclienteForeignKey;
	}

	public void setestadopoliticasclienteForeignKey(EstadoPoliticasCliente estadopoliticasclienteForeignKey) {
		this.estadopoliticasclienteForeignKey = estadopoliticasclienteForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoPoliticasCliente;
	public Boolean isPermisoNuevoPoliticasCliente;
	public Boolean isPermisoActualizarPoliticasCliente;
	public Boolean isPermisoActualizarOriginalPoliticasCliente;
	public Boolean isPermisoEliminarPoliticasCliente;
	public Boolean isPermisoGuardarCambiosPoliticasCliente;
	public Boolean isPermisoConsultaPoliticasCliente;
	public Boolean isPermisoBusquedaPoliticasCliente;
	public Boolean isPermisoReportePoliticasCliente;
	public Boolean isPermisoPaginacionMedioPoliticasCliente;
	public Boolean isPermisoPaginacionAltoPoliticasCliente;
	public Boolean isPermisoPaginacionTodoPoliticasCliente;
	public Boolean isPermisoCopiarPoliticasCliente;
	public Boolean isPermisoVerFormPoliticasCliente;
	public Boolean isPermisoDuplicarPoliticasCliente;
	public Boolean isPermisoOrdenPoliticasCliente;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public PoliticasClienteParameterReturnGeneral politicasclienteReturnGeneral;
	public PoliticasClienteParameterReturnGeneral politicasclienteParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoPoliticasCliente=false;
	public Boolean esParaAccionDesdeFormularioPoliticasCliente=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected PoliticasClienteSessionBeanAdditional politicasclienteSessionBeanAdditional=null;
	
	public PoliticasClienteSessionBeanAdditional getPoliticasClienteSessionBeanAdditional() {
		return this.politicasclienteSessionBeanAdditional;
	}
	
	public void setPoliticasClienteSessionBeanAdditional(PoliticasClienteSessionBeanAdditional politicasclienteSessionBeanAdditional) {
		try {
			this.politicasclienteSessionBeanAdditional=politicasclienteSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected PoliticasClienteBeanSwingJInternalFrameAdditional politicasclienteBeanSwingJInternalFrameAdditional=null;
	//public class PoliticasClienteBeanSwingJInternalFrame
	
	public PoliticasClienteBeanSwingJInternalFrameAdditional getPoliticasClienteBeanSwingJInternalFrameAdditional() {
		return this.politicasclienteBeanSwingJInternalFrameAdditional;
	}
	
	public void setPoliticasClienteBeanSwingJInternalFrameAdditional(PoliticasClienteBeanSwingJInternalFrameAdditional politicasclienteBeanSwingJInternalFrameAdditional) {
		try {
			this.politicasclienteBeanSwingJInternalFrameAdditional=politicasclienteBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public PoliticasClienteLogic politicasclienteLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public PoliticasCliente politicasclienteBean;
	public PoliticasClienteConstantesFunciones politicasclienteConstantesFunciones;
	//public PoliticasClienteParameterReturnGeneral politicasclienteReturnGeneral;
	
	//FK
	
	public ClienteLogic clienteLogic;
	public EmpresaLogic empresaLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public TransporteLogic transporteLogic;
	public LineaNegocioLogic lineanegocioLogic;
	public BancoLogic bancoLogic;
	public TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic;
	public EstadoPoliticasClienteLogic estadopoliticasclienteLogic;
	
	//PARAMETROS
	
	
	//public List<PoliticasCliente> politicasclientes;	
	//public List<PoliticasCliente> politicasclientesEliminados;
	//public List<PoliticasCliente> politicasclientesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoPoliticasCliente=false;
	public Boolean isVisibilidadCeldaDuplicarPoliticasCliente=true;
	public Boolean isVisibilidadCeldaCopiarPoliticasCliente=true;
	public Boolean isVisibilidadCeldaVerFormPoliticasCliente=true;
	public Boolean isVisibilidadCeldaOrdenPoliticasCliente=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
	public Boolean isVisibilidadCeldaModificarPoliticasCliente=false;
	public Boolean isVisibilidadCeldaActualizarPoliticasCliente=false;
	public Boolean isVisibilidadCeldaEliminarPoliticasCliente=false;
	public Boolean isVisibilidadCeldaCancelarPoliticasCliente=false;
	public Boolean isVisibilidadCeldaGuardarPoliticasCliente=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;	
	
	
	public Boolean isVisibilidadFK_IdBanco=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoPoliticasCliente=false;
	public Boolean isVisibilidadFK_IdLineaNegocio=false;
	public Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdTransporte=false;
	
	public Long getiIdNuevoPoliticasCliente() {
		return this.iIdNuevoPoliticasCliente;
	}

	public void setiIdNuevoPoliticasCliente(Long iIdNuevoPoliticasCliente) {
		this.iIdNuevoPoliticasCliente = iIdNuevoPoliticasCliente;
	}
	
	public Long getidPoliticasClienteActual() {
		return this.idPoliticasClienteActual;
	}

	public void setidPoliticasClienteActual(Long idPoliticasClienteActual) {
		this.idPoliticasClienteActual = idPoliticasClienteActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public PoliticasCliente getpoliticascliente() {
		return this.politicascliente;
	}

	public void setpoliticascliente(PoliticasCliente politicascliente) {
		this.politicascliente = politicascliente;
	}
	
	public PoliticasCliente getpoliticasclienteAux() {
		return this.politicasclienteAux;
	}

	public void setpoliticasclienteAux(PoliticasCliente politicasclienteAux) {
		this.politicasclienteAux = politicasclienteAux;
	}				
	
	public PoliticasCliente getpoliticasclienteAnterior() {
		return this.politicasclienteAnterior;
	}

	public void setpoliticasclienteAnterior(PoliticasCliente politicasclienteAnterior) {
		this.politicasclienteAnterior = politicasclienteAnterior;
	}	
	
	public PoliticasCliente getpoliticasclienteTotales() {
		return this.politicasclienteTotales;
	}

	public void setpoliticasclienteTotales(PoliticasCliente politicasclienteTotales) {
		this.politicasclienteTotales = politicasclienteTotales;
	}	
	
	public PoliticasCliente getpoliticasclienteBean() {
		return this.politicasclienteBean;
	}

	public void setpoliticasclienteBean(PoliticasCliente politicasclienteBean) {
		this.politicasclienteBean = politicasclienteBean;
	}	
	
	public PoliticasClienteParameterReturnGeneral getpoliticasclienteReturnGeneral() {
		return this.politicasclienteReturnGeneral;
	}

	public void setpoliticasclienteReturnGeneral(PoliticasClienteParameterReturnGeneral politicasclienteReturnGeneral) {
		this.politicasclienteReturnGeneral = politicasclienteReturnGeneral;
	}	
	
	
	public Long id_bancoFK_IdBanco=-1L;

	public Long getid_bancoFK_IdBanco() {
		return this.id_bancoFK_IdBanco;
	}

	public void setid_bancoFK_IdBanco(Long id_bancoFK_IdBanco) {
		this.id_bancoFK_IdBanco = id_bancoFK_IdBanco;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_politicas_clienteFK_IdEstadoPoliticasCliente=-1L;

	public Long getid_estado_politicas_clienteFK_IdEstadoPoliticasCliente() {
		return this.id_estado_politicas_clienteFK_IdEstadoPoliticasCliente;
	}

	public void setid_estado_politicas_clienteFK_IdEstadoPoliticasCliente(Long id_estado_politicas_clienteFK_IdEstadoPoliticasCliente) {
		this.id_estado_politicas_clienteFK_IdEstadoPoliticasCliente = id_estado_politicas_clienteFK_IdEstadoPoliticasCliente;
	}

	public Long id_linea_negocioFK_IdLineaNegocio=-1L;

	public Long getid_linea_negocioFK_IdLineaNegocio() {
		return this.id_linea_negocioFK_IdLineaNegocio;
	}

	public void setid_linea_negocioFK_IdLineaNegocio(Long id_linea_negocioFK_IdLineaNegocio) {
		this.id_linea_negocioFK_IdLineaNegocio = id_linea_negocioFK_IdLineaNegocio;
	}

	public Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=-1L;

	public Long getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal() {
		return this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

	public void setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal) {
		this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal = id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_transporteFK_IdTransporte=-1L;

	public Long getid_transporteFK_IdTransporte() {
		return this.id_transporteFK_IdTransporte;
	}

	public void setid_transporteFK_IdTransporte(Long id_transporteFK_IdTransporte) {
		this.id_transporteFK_IdTransporte = id_transporteFK_IdTransporte;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public PoliticasClienteLogic getPoliticasClienteLogic()	{		
		return politicasclienteLogic;
	}

	public void setPoliticasClienteLogic(PoliticasClienteLogic politicasclienteLogic) {
		this.politicasclienteLogic = politicasclienteLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoPoliticasCliente() {
		return isEsNuevoPoliticasCliente;
	}

	public void setIsEsNuevoPoliticasCliente(Boolean isEsNuevoPoliticasCliente) {
		this.isEsNuevoPoliticasCliente = isEsNuevoPoliticasCliente;
	}

	public Boolean getEsParaAccionDesdeFormularioPoliticasCliente() {
		return esParaAccionDesdeFormularioPoliticasCliente;
	}
	
	public void setEsParaAccionDesdeFormularioPoliticasCliente(Boolean esParaAccionDesdeFormularioPoliticasCliente) {
		this.esParaAccionDesdeFormularioPoliticasCliente = esParaAccionDesdeFormularioPoliticasCliente;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(politicasclienteSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(politicasclienteSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(politicasclienteSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportesForeignKey=new ArrayList<Transporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransporteLogic transporteLogic=new TransporteLogic();

			//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

					transporteLogic.getTodosTransportesWithConnection(sFinalQuery,new Pagination());

					this.transportesForeignKey=transporteLogic.getTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transporteLogic.getEntityWithConnection(politicasclienteSessionBean.getlidTransporteActual());
					this.transportesForeignKey.add(transporteLogic.getTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaNegociosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineanegociosForeignKey=new ArrayList<LineaNegocio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaNegocioLogic lineanegocioLogic=new LineaNegocioLogic();

			//lineanegocioLogic.getLineaNegocioDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionLineaNegocio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineanegocioLogic.getLineaNegocioDataAccess().setIsForForeingKeyData(true);

					lineanegocioLogic.getTodosLineaNegociosWithConnection(sFinalQuery,new Pagination());

					this.lineanegociosForeignKey=lineanegocioLogic.getLineaNegocios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaNegocio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineanegocioLogic.getEntityWithConnection(politicasclienteSessionBean.getlidLineaNegocioActual());
					this.lineanegociosForeignKey.add(lineanegocioLogic.getLineaNegocio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bancosForeignKey=new ArrayList<Banco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BancoLogic bancoLogic=new BancoLogic();

			//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

					bancoLogic.getTodosBancosWithConnection(sFinalQuery,new Pagination());

					this.bancosForeignKey=bancoLogic.getBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bancoLogic.getEntityWithConnection(politicasclienteSessionBean.getlidBancoActual());
					this.bancosForeignKey.add(bancoLogic.getBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();

			//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

					tipocuentabancoglobalLogic.getTodosTipoCuentaBancoGlobalsWithConnection(sFinalQuery,new Pagination());

					this.tipocuentabancoglobalsForeignKey=tipocuentabancoglobalLogic.getTipoCuentaBancoGlobals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCuentaBancoGlobal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocuentabancoglobalLogic.getEntityWithConnection(politicasclienteSessionBean.getlidTipoCuentaBancoGlobalActual());
					this.tipocuentabancoglobalsForeignKey.add(tipocuentabancoglobalLogic.getTipoCuentaBancoGlobal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoPoliticasClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadopoliticasclientesForeignKey=new ArrayList<EstadoPoliticasCliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoPoliticasClienteLogic estadopoliticasclienteLogic=new EstadoPoliticasClienteLogic();

			//estadopoliticasclienteLogic.getEstadoPoliticasClienteDataAccess().setIsForForeingKeyData(true);

			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPoliticasCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadopoliticasclienteLogic.getEstadoPoliticasClienteDataAccess().setIsForForeingKeyData(true);

					estadopoliticasclienteLogic.getTodosEstadoPoliticasClientesWithConnection(sFinalQuery,new Pagination());

					this.estadopoliticasclientesForeignKey=estadopoliticasclienteLogic.getEstadoPoliticasClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoPoliticasCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadopoliticasclienteLogic.getEntityWithConnection(politicasclienteSessionBean.getlidEstadoPoliticasClienteActual());
					this.estadopoliticasclientesForeignKey.add(estadopoliticasclienteLogic.getEstadoPoliticasCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clientePoliticasCliente.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClientePoliticasCliente!=null) {
						jComboBoxid_clienteFK_IdClientePoliticasCliente.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClientePoliticasCliente!=null) {
							//jComboBoxid_clienteFK_IdClientePoliticasCliente.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClientePoliticasCliente.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClientePoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clientePoliticasClienteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clientePoliticasClienteGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clientePoliticasClienteGenerico!=null && jComboBoxid_clientePoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_clientePoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaPoliticasCliente.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaPoliticasClienteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaPoliticasClienteGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaPoliticasClienteGenerico!=null && jComboBoxid_empresaPoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_empresaPoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioPoliticasCliente.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoprecioTemp!=null && jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente!=null) {
						jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.setSelectedItem(tipoprecioTemp);
					} else {
						if(jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente!=null) {
							//jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.setSelectedItem(tipoprecioTemp);
							if(jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.getItemCount()>0) {
								jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioPoliticasClienteGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioPoliticasClienteGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioPoliticasClienteGenerico!=null && jComboBoxid_tipo_precioPoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioPoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransporteForeignKey(Long idTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transporteTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setTransporte(transporteTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setSelectedItem(transporteTemp);
					}
				} else {
					//jComboBoxid_transportePoliticasCliente.setSelectedItem(transporteTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransporte") || sFormularioTipoBusqueda.equals("Todos")){
					if(transporteTemp!=null && jComboBoxid_transporteFK_IdTransportePoliticasCliente!=null) {
						jComboBoxid_transporteFK_IdTransportePoliticasCliente.setSelectedItem(transporteTemp);
					} else {
						if(jComboBoxid_transporteFK_IdTransportePoliticasCliente!=null) {
							//jComboBoxid_transporteFK_IdTransportePoliticasCliente.setSelectedItem(transporteTemp);
							if(jComboBoxid_transporteFK_IdTransportePoliticasCliente.getItemCount()>0) {
								jComboBoxid_transporteFK_IdTransportePoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransporteForeignKeyDescripcion(Long idTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}


			sDescripcion=TransporteConstantesFunciones.getTransporteDescripcion(transporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransporteForeignKeyGenerico(Long idTransporteSeleccionado,JComboBox jComboBoxid_transportePoliticasClienteGenerico)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(transporteTemp!=null) {
				jComboBoxid_transportePoliticasClienteGenerico.setSelectedItem(transporteTemp);
			} else {
				if(jComboBoxid_transportePoliticasClienteGenerico!=null && jComboBoxid_transportePoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_transportePoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaNegocioForeignKey(Long idLineaNegocioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			LineaNegocio  lineanegocioTemp=null;

			for(LineaNegocio lineanegocioAux:lineanegociosForeignKey) {
				if(lineanegocioAux.getId()!=null && lineanegocioAux.getId().equals(idLineaNegocioSeleccionado)) {
					lineanegocioTemp=lineanegocioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineanegocioTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setLineaNegocio(lineanegocioTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setSelectedItem(lineanegocioTemp);
					}
				} else {
					//jComboBoxid_linea_negocioPoliticasCliente.setSelectedItem(lineanegocioTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdLineaNegocio") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineanegocioTemp!=null && jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente!=null) {
						jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.setSelectedItem(lineanegocioTemp);
					} else {
						if(jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente!=null) {
							//jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.setSelectedItem(lineanegocioTemp);
							if(jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.getItemCount()>0) {
								jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaNegocioForeignKeyDescripcion(Long idLineaNegocioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			LineaNegocio  lineanegocioTemp=null;

			for(LineaNegocio lineanegocioAux:lineanegociosForeignKey) {
				if(lineanegocioAux.getId()!=null && lineanegocioAux.getId().equals(idLineaNegocioSeleccionado)) {
					lineanegocioTemp=lineanegocioAux;
					break;
				}
			}


			sDescripcion=LineaNegocioConstantesFunciones.getLineaNegocioDescripcion(lineanegocioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaNegocioForeignKeyGenerico(Long idLineaNegocioSeleccionado,JComboBox jComboBoxid_linea_negocioPoliticasClienteGenerico)throws Exception
	{
		try
		{
			LineaNegocio  lineanegocioTemp=null;

			for(LineaNegocio lineanegocioAux:lineanegociosForeignKey) {
				if(lineanegocioAux.getId()!=null && lineanegocioAux.getId().equals(idLineaNegocioSeleccionado)) {
					lineanegocioTemp=lineanegocioAux;
					break;
				}
			}

			if(lineanegocioTemp!=null) {
				jComboBoxid_linea_negocioPoliticasClienteGenerico.setSelectedItem(lineanegocioTemp);
			} else {
				if(jComboBoxid_linea_negocioPoliticasClienteGenerico!=null && jComboBoxid_linea_negocioPoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_linea_negocioPoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBancoForeignKey(Long idBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bancoTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setBanco(bancoTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setSelectedItem(bancoTemp);
					}
				} else {
					//jComboBoxid_bancoPoliticasCliente.setSelectedItem(bancoTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(bancoTemp!=null && jComboBoxid_bancoFK_IdBancoPoliticasCliente!=null) {
						jComboBoxid_bancoFK_IdBancoPoliticasCliente.setSelectedItem(bancoTemp);
					} else {
						if(jComboBoxid_bancoFK_IdBancoPoliticasCliente!=null) {
							//jComboBoxid_bancoFK_IdBancoPoliticasCliente.setSelectedItem(bancoTemp);
							if(jComboBoxid_bancoFK_IdBancoPoliticasCliente.getItemCount()>0) {
								jComboBoxid_bancoFK_IdBancoPoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBancoForeignKeyDescripcion(Long idBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}


			sDescripcion=BancoConstantesFunciones.getBancoDescripcion(bancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBancoForeignKeyGenerico(Long idBancoSeleccionado,JComboBox jComboBoxid_bancoPoliticasClienteGenerico)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(bancoTemp!=null) {
				jComboBoxid_bancoPoliticasClienteGenerico.setSelectedItem(bancoTemp);
			} else {
				if(jComboBoxid_bancoPoliticasClienteGenerico!=null && jComboBoxid_bancoPoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_bancoPoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCuentaBancoGlobalForeignKey(Long idTipoCuentaBancoGlobalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocuentabancoglobalTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setTipoCuentaBancoGlobal(tipocuentabancoglobalTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedItem(tipocuentabancoglobalTemp);
					}
				} else {
					//jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedItem(tipocuentabancoglobalTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocuentabancoglobalTemp!=null && jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente!=null) {
						jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.setSelectedItem(tipocuentabancoglobalTemp);
					} else {
						if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente!=null) {
							//jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.setSelectedItem(tipocuentabancoglobalTemp);
							if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.getItemCount()>0) {
								jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCuentaBancoGlobalForeignKeyDescripcion(Long idTipoCuentaBancoGlobalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}


			sDescripcion=TipoCuentaBancoGlobalConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCuentaBancoGlobalForeignKeyGenerico(Long idTipoCuentaBancoGlobalSeleccionado,JComboBox jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(tipocuentabancoglobalTemp!=null) {
				jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico.setSelectedItem(tipocuentabancoglobalTemp);
			} else {
				if(jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico!=null && jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoPoliticasClienteForeignKey(Long idEstadoPoliticasClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoPoliticasCliente  estadopoliticasclienteTemp=null;

			for(EstadoPoliticasCliente estadopoliticasclienteAux:estadopoliticasclientesForeignKey) {
				if(estadopoliticasclienteAux.getId()!=null && estadopoliticasclienteAux.getId().equals(idEstadoPoliticasClienteSeleccionado)) {
					estadopoliticasclienteTemp=estadopoliticasclienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadopoliticasclienteTemp!=null) {

					if(this.politicascliente!=null) {
						this.politicascliente.setEstadoPoliticasCliente(estadopoliticasclienteTemp);
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedItem(estadopoliticasclienteTemp);
					}
				} else {
					//jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedItem(estadopoliticasclienteTemp);
					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
						if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoPoliticasCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadopoliticasclienteTemp!=null && jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente!=null) {
						jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.setSelectedItem(estadopoliticasclienteTemp);
					} else {
						if(jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente!=null) {
							//jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.setSelectedItem(estadopoliticasclienteTemp);
							if(jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.getItemCount()>0) {
								jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoPoliticasClienteForeignKeyDescripcion(Long idEstadoPoliticasClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoPoliticasCliente  estadopoliticasclienteTemp=null;

			for(EstadoPoliticasCliente estadopoliticasclienteAux:estadopoliticasclientesForeignKey) {
				if(estadopoliticasclienteAux.getId()!=null && estadopoliticasclienteAux.getId().equals(idEstadoPoliticasClienteSeleccionado)) {
					estadopoliticasclienteTemp=estadopoliticasclienteAux;
					break;
				}
			}


			sDescripcion=EstadoPoliticasClienteConstantesFunciones.getEstadoPoliticasClienteDescripcion(estadopoliticasclienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoPoliticasClienteForeignKeyGenerico(Long idEstadoPoliticasClienteSeleccionado,JComboBox jComboBoxid_estado_politicas_clientePoliticasClienteGenerico)throws Exception
	{
		try
		{
			EstadoPoliticasCliente  estadopoliticasclienteTemp=null;

			for(EstadoPoliticasCliente estadopoliticasclienteAux:estadopoliticasclientesForeignKey) {
				if(estadopoliticasclienteAux.getId()!=null && estadopoliticasclienteAux.getId().equals(idEstadoPoliticasClienteSeleccionado)) {
					estadopoliticasclienteTemp=estadopoliticasclienteAux;
					break;
				}
			}

			if(estadopoliticasclienteTemp!=null) {
				jComboBoxid_estado_politicas_clientePoliticasClienteGenerico.setSelectedItem(estadopoliticasclienteTemp);
			} else {
				if(jComboBoxid_estado_politicas_clientePoliticasClienteGenerico!=null && jComboBoxid_estado_politicas_clientePoliticasClienteGenerico.getItemCount()>0) {
					jComboBoxid_estado_politicas_clientePoliticasClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_clientePoliticasClienteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clientePoliticasClienteGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clientePoliticasClienteGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				politicascliente.setid_cliente(clienteAux.getId());
				politicascliente.setcliente_descripcion(PoliticasClienteConstantesFunciones.getClienteDescripcion(clienteAux));
				politicascliente.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_empresaPoliticasClienteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaPoliticasClienteGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaPoliticasClienteGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				politicascliente.setid_empresa(empresaAux.getId());
				politicascliente.setempresa_descripcion(PoliticasClienteConstantesFunciones.getEmpresaDescripcion(empresaAux));
				politicascliente.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_tipo_precioPoliticasClienteGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioPoliticasClienteGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioPoliticasClienteGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				politicascliente.setid_tipo_precio(tipoprecioAux.getId());
				politicascliente.settipoprecio_descripcion(PoliticasClienteConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				politicascliente.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransporteForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_transportePoliticasClienteGenerico)throws Exception
	{
		try
		{
			Transporte  transporteAux=new Transporte();

			if(jComboBoxid_transportePoliticasClienteGenerico==null) {
				transporteAux=(Transporte)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.getSelectedItem();
			} else {
				transporteAux=(Transporte)jComboBoxid_transportePoliticasClienteGenerico.getSelectedItem();
			}

			if(transporteAux!=null && transporteAux.getId()!=null) {
				politicascliente.setid_transporte(transporteAux.getId());
				politicascliente.settransporte_descripcion(PoliticasClienteConstantesFunciones.getTransporteDescripcion(transporteAux));
				politicascliente.setTransporte(transporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaNegocioForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_linea_negocioPoliticasClienteGenerico)throws Exception
	{
		try
		{
			LineaNegocio  lineanegocioAux=new LineaNegocio();

			if(jComboBoxid_linea_negocioPoliticasClienteGenerico==null) {
				lineanegocioAux=(LineaNegocio)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.getSelectedItem();
			} else {
				lineanegocioAux=(LineaNegocio)jComboBoxid_linea_negocioPoliticasClienteGenerico.getSelectedItem();
			}

			if(lineanegocioAux!=null && lineanegocioAux.getId()!=null) {
				politicascliente.setid_linea_negocio(lineanegocioAux.getId());
				politicascliente.setlineanegocio_descripcion(PoliticasClienteConstantesFunciones.getLineaNegocioDescripcion(lineanegocioAux));
				politicascliente.setLineaNegocio(lineanegocioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBancoForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_bancoPoliticasClienteGenerico)throws Exception
	{
		try
		{
			Banco  bancoAux=new Banco();

			if(jComboBoxid_bancoPoliticasClienteGenerico==null) {
				bancoAux=(Banco)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.getSelectedItem();
			} else {
				bancoAux=(Banco)jComboBoxid_bancoPoliticasClienteGenerico.getSelectedItem();
			}

			if(bancoAux!=null && bancoAux.getId()!=null) {
				politicascliente.setid_banco(bancoAux.getId());
				politicascliente.setbanco_descripcion(PoliticasClienteConstantesFunciones.getBancoDescripcion(bancoAux));
				politicascliente.setBanco(bancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCuentaBancoGlobalForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalAux=new TipoCuentaBancoGlobal();

			if(jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico==null) {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.getSelectedItem();
			} else {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)jComboBoxid_tipo_cuenta_banco_globalPoliticasClienteGenerico.getSelectedItem();
			}

			if(tipocuentabancoglobalAux!=null && tipocuentabancoglobalAux.getId()!=null) {
				politicascliente.setid_tipo_cuenta_banco_global(tipocuentabancoglobalAux.getId());
				politicascliente.settipocuentabancoglobal_descripcion(PoliticasClienteConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalAux));
				politicascliente.setTipoCuentaBancoGlobal(tipocuentabancoglobalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoPoliticasClienteForeignKey(PoliticasCliente politicascliente,JComboBox jComboBoxid_estado_politicas_clientePoliticasClienteGenerico)throws Exception
	{
		try
		{
			EstadoPoliticasCliente  estadopoliticasclienteAux=new EstadoPoliticasCliente();

			if(jComboBoxid_estado_politicas_clientePoliticasClienteGenerico==null) {
				estadopoliticasclienteAux=(EstadoPoliticasCliente)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.getSelectedItem();
			} else {
				estadopoliticasclienteAux=(EstadoPoliticasCliente)jComboBoxid_estado_politicas_clientePoliticasClienteGenerico.getSelectedItem();
			}

			if(estadopoliticasclienteAux!=null && estadopoliticasclienteAux.getId()!=null) {
				politicascliente.setid_estado_politicas_cliente(estadopoliticasclienteAux.getId());
				politicascliente.setestadopoliticascliente_descripcion(PoliticasClienteConstantesFunciones.getEstadoPoliticasClienteDescripcion(estadopoliticasclienteAux));
				politicascliente.setEstadoPoliticasCliente(estadopoliticasclienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClientePoliticasCliente.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClientePoliticasCliente.addItem(cliente);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.addItem(tipoprecio);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.removeAllItems();

							for(Transporte transporte:this.transportesForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.addItem(transporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransporte") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.removeAllItems();

							for(Transporte transporte:this.transportesForeignKey) {
								this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.addItem(transporte);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaNegociosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLineaNegocio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.removeAllItems();

							for(LineaNegocio lineanegocio:this.lineanegociosForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.addItem(lineanegocio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdLineaNegocio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.removeAllItems();

							for(LineaNegocio lineanegocio:this.lineanegociosForeignKey) {
								this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.addItem(lineanegocio);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.addItem(banco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.addItem(banco);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCuentaBancoGlobal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.addItem(tipocuentabancoglobal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.addItem(tipocuentabancoglobal);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoPoliticasClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoPoliticasCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.removeAllItems();

							for(EstadoPoliticasCliente estadopoliticascliente:this.estadopoliticasclientesForeignKey) {
								this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.addItem(estadopoliticascliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { 
					}

					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoPoliticasCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.removeAllItems();

							for(EstadoPoliticasCliente estadopoliticascliente:this.estadopoliticasclientesForeignKey) {
								this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.addItem(estadopoliticascliente);
							}
						}

						if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClientePoliticasCliente.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClientePoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.setSelectedItem(tipoprecio);
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransporteForeignKey(Transporte transporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setSelectedItem(transporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.setSelectedItem(transporte);
						} else {
							this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaNegocioForeignKey(LineaNegocio lineanegocio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setSelectedItem(lineanegocio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.setSelectedItem(lineanegocio);
						} else {
							this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBancoForeignKey(Banco banco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setSelectedItem(banco);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.setSelectedItem(banco);
						} else {
							this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCuentaBancoGlobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedItem(tipocuentabancoglobal);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.setSelectedItem(tipocuentabancoglobal);
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoPoliticasClienteForeignKey(EstadoPoliticasCliente estadopoliticascliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedItem(estadopoliticascliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.setSelectedItem(estadopoliticascliente);
						} else {
							this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesPoliticasCliente() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			PoliticasClienteConstantesFunciones.refrescarForeignKeysDescripcionesPoliticasCliente(this.politicasclienteLogic.getPoliticasClientes());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			PoliticasClienteConstantesFunciones.refrescarForeignKeysDescripcionesPoliticasCliente(this.politicasclientes);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Transporte.class));
		classes.add(new Classe(LineaNegocio.class));
		classes.add(new Classe(Banco.class));
		classes.add(new Classe(TipoCuentaBancoGlobal.class));
		classes.add(new Classe(EstadoPoliticasCliente.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//politicasclienteLogic.setPoliticasClientes(this.politicasclientes);
			politicasclienteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public PoliticasClienteParameterReturnGeneral getPoliticasClienteParameterGeneral() {
		return this.politicasclienteParameterGeneral;
	}
	
	public void setPoliticasClienteParameterGeneral(PoliticasClienteParameterReturnGeneral politicasclienteParameterGeneral) {
		this.politicasclienteParameterGeneral = politicasclienteParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoPoliticasCliente() {
		return isPermisoTodoPoliticasCliente;
	}

	public void setIsPermisoTodoPoliticasCliente(Boolean isPermisoTodoPoliticasCliente) {
		this.isPermisoTodoPoliticasCliente = isPermisoTodoPoliticasCliente;
	}

	public Boolean getIsPermisoNuevoPoliticasCliente() {
		return isPermisoNuevoPoliticasCliente;
	}

	public void setIsPermisoNuevoPoliticasCliente(Boolean isPermisoNuevoPoliticasCliente) {
		this.isPermisoNuevoPoliticasCliente = isPermisoNuevoPoliticasCliente;
	}

	public Boolean getIsPermisoActualizarPoliticasCliente() {
		return isPermisoActualizarPoliticasCliente;
	}

	public void setIsPermisoActualizarPoliticasCliente(Boolean isPermisoActualizarPoliticasCliente) {
		this.isPermisoActualizarPoliticasCliente = isPermisoActualizarPoliticasCliente;
	}

	public Boolean getIsPermisoEliminarPoliticasCliente() {
		return isPermisoEliminarPoliticasCliente;
	}

	public void setIsPermisoEliminarPoliticasCliente(Boolean isPermisoEliminarPoliticasCliente) {
		this.isPermisoEliminarPoliticasCliente = isPermisoEliminarPoliticasCliente;
	}

	public Boolean getIsPermisoGuardarCambiosPoliticasCliente() {
		return isPermisoGuardarCambiosPoliticasCliente;
	}

	public void setIsPermisoGuardarCambiosPoliticasCliente(Boolean isPermisoGuardarCambiosPoliticasCliente) {
		this.isPermisoGuardarCambiosPoliticasCliente = isPermisoGuardarCambiosPoliticasCliente;
	}
	
	public Boolean getIsPermisoConsultaPoliticasCliente() {
		return isPermisoConsultaPoliticasCliente;
	}

	public void setIsPermisoConsultaPoliticasCliente(Boolean isPermisoConsultaPoliticasCliente) {
		this.isPermisoConsultaPoliticasCliente = isPermisoConsultaPoliticasCliente;
	}

	public Boolean getIsPermisoBusquedaPoliticasCliente() {
		return isPermisoBusquedaPoliticasCliente;
	}

	public void setIsPermisoBusquedaPoliticasCliente(Boolean isPermisoBusquedaPoliticasCliente) {
		this.isPermisoBusquedaPoliticasCliente = isPermisoBusquedaPoliticasCliente;
	}

	public Boolean getIsPermisoReportePoliticasCliente() {
		return isPermisoReportePoliticasCliente;
	}

	public void setIsPermisoReportePoliticasCliente(Boolean isPermisoReportePoliticasCliente) {
		this.isPermisoReportePoliticasCliente = isPermisoReportePoliticasCliente;
	}
	
	public Boolean getIsPermisoPaginacionMedioPoliticasCliente() {
		return isPermisoPaginacionMedioPoliticasCliente;
	}

	public void setIsPermisoPaginacionMedioPoliticasCliente(Boolean isPermisoPaginacionMedioPoliticasCliente) {
		this.isPermisoPaginacionMedioPoliticasCliente = isPermisoPaginacionMedioPoliticasCliente;
	}
	
	public Boolean getIsPermisoPaginacionTodoPoliticasCliente() {
		return isPermisoPaginacionTodoPoliticasCliente;
	}

	public void setIsPermisoPaginacionTodoPoliticasCliente(Boolean isPermisoPaginacionTodoPoliticasCliente) {
		this.isPermisoPaginacionTodoPoliticasCliente = isPermisoPaginacionTodoPoliticasCliente;
	}
	
	public Boolean getIsPermisoPaginacionAltoPoliticasCliente() {
		return isPermisoPaginacionAltoPoliticasCliente;
	}

	public void setIsPermisoPaginacionAltoPoliticasCliente(Boolean isPermisoPaginacionAltoPoliticasCliente) {
		this.isPermisoPaginacionAltoPoliticasCliente = isPermisoPaginacionAltoPoliticasCliente;
	}
	
	public Boolean getIsPermisoCopiarPoliticasCliente() {
		return isPermisoCopiarPoliticasCliente;
	}

	public void setIsPermisoCopiarPoliticasCliente(Boolean isPermisoCopiarPoliticasCliente) {
		this.isPermisoCopiarPoliticasCliente = isPermisoCopiarPoliticasCliente;
	}
	
	public Boolean getIsPermisoVerFormPoliticasCliente() {
		return isPermisoVerFormPoliticasCliente;
	}

	public void setIsPermisoVerFormPoliticasCliente(Boolean isPermisoVerFormPoliticasCliente) {
		this.isPermisoVerFormPoliticasCliente = isPermisoVerFormPoliticasCliente;
	}
	
	public Boolean getIsPermisoDuplicarPoliticasCliente() {
		return isPermisoDuplicarPoliticasCliente;
	}

	public void setIsPermisoDuplicarPoliticasCliente(Boolean isPermisoDuplicarPoliticasCliente) {
		this.isPermisoDuplicarPoliticasCliente = isPermisoDuplicarPoliticasCliente;
	}
	
	public Boolean getIsPermisoOrdenPoliticasCliente() {
		return isPermisoOrdenPoliticasCliente;
	}

	public void setIsPermisoOrdenPoliticasCliente(Boolean isPermisoOrdenPoliticasCliente) {
		this.isPermisoOrdenPoliticasCliente = isPermisoOrdenPoliticasCliente;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoPoliticasCliente() {
		return isVisibilidadCeldaNuevoPoliticasCliente;
	}

	public void setIsVisibilidadCeldaNuevoPoliticasCliente(Boolean isVisibilidadCeldaNuevoPoliticasCliente) {
		this.isVisibilidadCeldaNuevoPoliticasCliente = isVisibilidadCeldaNuevoPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarPoliticasCliente() {
		return isVisibilidadCeldaDuplicarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaDuplicarPoliticasCliente(Boolean isVisibilidadCeldaDuplicarPoliticasCliente) {
		this.isVisibilidadCeldaDuplicarPoliticasCliente = isVisibilidadCeldaDuplicarPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarPoliticasCliente() {
		return isVisibilidadCeldaCopiarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaCopiarPoliticasCliente(Boolean isVisibilidadCeldaCopiarPoliticasCliente) {
		this.isVisibilidadCeldaCopiarPoliticasCliente = isVisibilidadCeldaCopiarPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormPoliticasCliente() {
		return isVisibilidadCeldaVerFormPoliticasCliente;
	}

	public void setIsVisibilidadCeldaVerFormPoliticasCliente(Boolean isVisibilidadCeldaVerFormPoliticasCliente) {
		this.isVisibilidadCeldaVerFormPoliticasCliente = isVisibilidadCeldaVerFormPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenPoliticasCliente() {
		return isVisibilidadCeldaOrdenPoliticasCliente;
	}

	public void setIsVisibilidadCeldaOrdenPoliticasCliente(Boolean isVisibilidadCeldaOrdenPoliticasCliente) {
		this.isVisibilidadCeldaOrdenPoliticasCliente = isVisibilidadCeldaOrdenPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesPoliticasCliente() {
		return isVisibilidadCeldaNuevoRelacionesPoliticasCliente;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesPoliticasCliente(Boolean isVisibilidadCeldaNuevoRelacionesPoliticasCliente) {
		this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente = isVisibilidadCeldaNuevoRelacionesPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaModificarPoliticasCliente() {
		return isVisibilidadCeldaModificarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaModificarPoliticasCliente(Boolean isVisibilidadCeldaModificarPoliticasCliente) {
		this.isVisibilidadCeldaModificarPoliticasCliente = isVisibilidadCeldaModificarPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarPoliticasCliente() {
		return isVisibilidadCeldaActualizarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaActualizarPoliticasCliente(Boolean isVisibilidadCeldaActualizarPoliticasCliente) {
		this.isVisibilidadCeldaActualizarPoliticasCliente = isVisibilidadCeldaActualizarPoliticasCliente;
	}

	public Boolean getIsVisibilidadCeldaEliminarPoliticasCliente() {
		return isVisibilidadCeldaEliminarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaEliminarPoliticasCliente(Boolean isVisibilidadCeldaEliminarPoliticasCliente) {
		this.isVisibilidadCeldaEliminarPoliticasCliente = isVisibilidadCeldaEliminarPoliticasCliente;
	}

	public Boolean getIsVisibilidadCeldaCancelarPoliticasCliente() {
		return isVisibilidadCeldaCancelarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaCancelarPoliticasCliente(Boolean isVisibilidadCeldaCancelarPoliticasCliente) {
		this.isVisibilidadCeldaCancelarPoliticasCliente = isVisibilidadCeldaCancelarPoliticasCliente;
	}

	public Boolean getIsVisibilidadCeldaGuardarPoliticasCliente() {
		return isVisibilidadCeldaGuardarPoliticasCliente;
	}

	public void setIsVisibilidadCeldaGuardarPoliticasCliente(Boolean isVisibilidadCeldaGuardarPoliticasCliente) {
		this.isVisibilidadCeldaGuardarPoliticasCliente = isVisibilidadCeldaGuardarPoliticasCliente;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosPoliticasCliente() {
		return isVisibilidadCeldaGuardarCambiosPoliticasCliente;
	}

	public void setIsVisibilidadCeldaGuardarCambiosPoliticasCliente(Boolean isVisibilidadCeldaGuardarCambiosPoliticasCliente) {
		this.isVisibilidadCeldaGuardarCambiosPoliticasCliente = isVisibilidadCeldaGuardarCambiosPoliticasCliente;
	}
		
	public PoliticasClienteSessionBean getpoliticasclienteSessionBean() {
		return this.politicasclienteSessionBean;
	}
	
	public void setpoliticasclienteSessionBean(PoliticasClienteSessionBean politicasclienteSessionBean) {
		this.politicasclienteSessionBean=politicasclienteSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBanco() {
		return this.isVisibilidadFK_IdBanco;
	}

	public void setisVisibilidadFK_IdBanco(Boolean isVisibilidadFK_IdBanco) {
		this.isVisibilidadFK_IdBanco=isVisibilidadFK_IdBanco;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoPoliticasCliente() {
		return this.isVisibilidadFK_IdEstadoPoliticasCliente;
	}

	public void setisVisibilidadFK_IdEstadoPoliticasCliente(Boolean isVisibilidadFK_IdEstadoPoliticasCliente) {
		this.isVisibilidadFK_IdEstadoPoliticasCliente=isVisibilidadFK_IdEstadoPoliticasCliente;
	}

	public Boolean getisVisibilidadFK_IdLineaNegocio() {
		return this.isVisibilidadFK_IdLineaNegocio;
	}

	public void setisVisibilidadFK_IdLineaNegocio(Boolean isVisibilidadFK_IdLineaNegocio) {
		this.isVisibilidadFK_IdLineaNegocio=isVisibilidadFK_IdLineaNegocio;
	}

	public Boolean getisVisibilidadFK_IdTipoCuentaBancoGlobal() {
		return this.isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	public void setisVisibilidadFK_IdTipoCuentaBancoGlobal(Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal) {
		this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdTransporte() {
		return this.isVisibilidadFK_IdTransporte;
	}

	public void setisVisibilidadFK_IdTransporte(Boolean isVisibilidadFK_IdTransporte) {
		this.isVisibilidadFK_IdTransporte=isVisibilidadFK_IdTransporte;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(PoliticasCliente politicascliente)throws Exception {
		try {
			
				this.setActualParaGuardarClienteForeignKey(politicascliente,null);
				this.setActualParaGuardarEmpresaForeignKey(politicascliente,null);
				this.setActualParaGuardarTipoPrecioForeignKey(politicascliente,null);
				this.setActualParaGuardarTransporteForeignKey(politicascliente,null);
				this.setActualParaGuardarLineaNegocioForeignKey(politicascliente,null);
				this.setActualParaGuardarBancoForeignKey(politicascliente,null);
				this.setActualParaGuardarTipoCuentaBancoGlobalForeignKey(politicascliente,null);
				this.setActualParaGuardarEstadoPoliticasClienteForeignKey(politicascliente,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(PoliticasCliente politicascliente,PoliticasCliente politicasclienteAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalPoliticasCliente(politicascliente);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		politicasclienteAux.setId(politicascliente.getId());
		politicasclienteAux.setVersionRow(politicascliente.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessPoliticasCliente();
		
			int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = politicasclienteValidator.getInvalidValues(this.politicascliente);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			politicasclienteLogic.setDatosCliente(datosCliente);
			politicasclienteLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				politicasclienteAux=new  PoliticasCliente();
				
				politicasclienteAux.setIsNew(true);
				politicasclienteAux.setIsChanged(true);
				
				politicasclienteAux.setPoliticasClienteOriginal(this.politicascliente);
				
				politicasclienteAux.setId(this.politicascliente.getId());	
				politicasclienteAux.setVersionRow(this.politicascliente.getVersionRow());	
				politicasclienteAux.setid_empresa(this.politicascliente.getid_empresa());	
				politicasclienteAux.setlimite_credito(this.politicascliente.getlimite_credito());	
				politicasclienteAux.setfecha_inicio(this.politicascliente.getfecha_inicio());	
				politicasclienteAux.setfecha_renovacion(this.politicascliente.getfecha_renovacion());	
				politicasclienteAux.setfecha_fin(this.politicascliente.getfecha_fin());	
				politicasclienteAux.setdias_neto_pago(this.politicascliente.getdias_neto_pago());	
				politicasclienteAux.setdias_gracia(this.politicascliente.getdias_gracia());	
				politicasclienteAux.setcupo(this.politicascliente.getcupo());	
				politicasclienteAux.setdescuento_general(this.politicascliente.getdescuento_general());	
				politicasclienteAux.setdescuento_pronto_pago(this.politicascliente.getdescuento_pronto_pago());	
				politicasclienteAux.setid_tipo_precio(this.politicascliente.getid_tipo_precio());	
				politicasclienteAux.setcon_lista_precio(this.politicascliente.getcon_lista_precio());	
				politicasclienteAux.setcon_impuestos(this.politicascliente.getcon_impuestos());	
				politicasclienteAux.setactivar_monto_facturacion(this.politicascliente.getactivar_monto_facturacion());	
				politicasclienteAux.setvalor_sobregiro(this.politicascliente.getvalor_sobregiro());	
				politicasclienteAux.setfecha_venci_sobregiro(this.politicascliente.getfecha_venci_sobregiro());	
				politicasclienteAux.setid_transporte(this.politicascliente.getid_transporte());	
				politicasclienteAux.setvalor_solicitado(this.politicascliente.getvalor_solicitado());	
				politicasclienteAux.setvalor_aprobado(this.politicascliente.getvalor_aprobado());	
				politicasclienteAux.setid_linea_negocio(this.politicascliente.getid_linea_negocio());	
				politicasclienteAux.setfecha_solicitud(this.politicascliente.getfecha_solicitud());	
				politicasclienteAux.setobsevacion(this.politicascliente.getobsevacion());	
				politicasclienteAux.setweb(this.politicascliente.getweb());	
				politicasclienteAux.setcasilla_postal(this.politicascliente.getcasilla_postal());	
				politicasclienteAux.setforma_envio(this.politicascliente.getforma_envio());	
				politicasclienteAux.setid_banco(this.politicascliente.getid_banco());	
				politicasclienteAux.setid_tipo_cuenta_banco_global(this.politicascliente.getid_tipo_cuenta_banco_global());	
				politicasclienteAux.setnumero_cuenta(this.politicascliente.getnumero_cuenta());	
				politicasclienteAux.setid_estado_politicas_cliente(this.politicascliente.getid_estado_politicas_cliente());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(politicasclienteAux,politicasclienteLogic.getPoliticasClientes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(politicasclienteAux,politicasclientes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.savePoliticasClientes();//WithConnection
						//politicasclienteLogic.getSetVersionRowPoliticasClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.politicascliente,politicasclienteAux);
					
					this.refrescarForeignKeysDescripcionesPoliticasCliente();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				politicasclienteAux=new  PoliticasCliente();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.politicasclienteSessionBean.getEsGuardarRelacionado() 
					|| (this.politicasclienteSessionBean.getEsGuardarRelacionado() && this.politicascliente.getId()>=0)) {
						
					politicasclienteAux.setIsNew(false);
				}
				
				politicasclienteAux.setIsDeleted(false);
			
				politicasclienteAux.setId(this.politicascliente.getId());	
				politicasclienteAux.setVersionRow(this.politicascliente.getVersionRow());	
				politicasclienteAux.setid_empresa(this.politicascliente.getid_empresa());	
				politicasclienteAux.setlimite_credito(this.politicascliente.getlimite_credito());	
				politicasclienteAux.setfecha_inicio(this.politicascliente.getfecha_inicio());	
				politicasclienteAux.setfecha_renovacion(this.politicascliente.getfecha_renovacion());	
				politicasclienteAux.setfecha_fin(this.politicascliente.getfecha_fin());	
				politicasclienteAux.setdias_neto_pago(this.politicascliente.getdias_neto_pago());	
				politicasclienteAux.setdias_gracia(this.politicascliente.getdias_gracia());	
				politicasclienteAux.setcupo(this.politicascliente.getcupo());	
				politicasclienteAux.setdescuento_general(this.politicascliente.getdescuento_general());	
				politicasclienteAux.setdescuento_pronto_pago(this.politicascliente.getdescuento_pronto_pago());	
				politicasclienteAux.setid_tipo_precio(this.politicascliente.getid_tipo_precio());	
				politicasclienteAux.setcon_lista_precio(this.politicascliente.getcon_lista_precio());	
				politicasclienteAux.setcon_impuestos(this.politicascliente.getcon_impuestos());	
				politicasclienteAux.setactivar_monto_facturacion(this.politicascliente.getactivar_monto_facturacion());	
				politicasclienteAux.setvalor_sobregiro(this.politicascliente.getvalor_sobregiro());	
				politicasclienteAux.setfecha_venci_sobregiro(this.politicascliente.getfecha_venci_sobregiro());	
				politicasclienteAux.setid_transporte(this.politicascliente.getid_transporte());	
				politicasclienteAux.setvalor_solicitado(this.politicascliente.getvalor_solicitado());	
				politicasclienteAux.setvalor_aprobado(this.politicascliente.getvalor_aprobado());	
				politicasclienteAux.setid_linea_negocio(this.politicascliente.getid_linea_negocio());	
				politicasclienteAux.setfecha_solicitud(this.politicascliente.getfecha_solicitud());	
				politicasclienteAux.setobsevacion(this.politicascliente.getobsevacion());	
				politicasclienteAux.setweb(this.politicascliente.getweb());	
				politicasclienteAux.setcasilla_postal(this.politicascliente.getcasilla_postal());	
				politicasclienteAux.setforma_envio(this.politicascliente.getforma_envio());	
				politicasclienteAux.setid_banco(this.politicascliente.getid_banco());	
				politicasclienteAux.setid_tipo_cuenta_banco_global(this.politicascliente.getid_tipo_cuenta_banco_global());	
				politicasclienteAux.setnumero_cuenta(this.politicascliente.getnumero_cuenta());	
				politicasclienteAux.setid_estado_politicas_cliente(this.politicascliente.getid_estado_politicas_cliente());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(politicasclienteAux,politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(politicasclienteAux,politicasclientes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.savePoliticasClientes();//WithConnection
						//politicasclienteLogic.getSetVersionRowPoliticasClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.politicascliente,politicasclienteAux);
					
					this.refrescarForeignKeysDescripcionesPoliticasCliente();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				politicasclienteAux=new  PoliticasCliente();
				
				politicasclienteAux.setIsNew(false);
				politicasclienteAux.setIsChanged(false);
				
				politicasclienteAux.setIsDeleted(true);
				
				politicasclienteAux.setId(this.politicascliente.getId());	
				politicasclienteAux.setVersionRow(this.politicascliente.getVersionRow());	
				politicasclienteAux.setid_empresa(this.politicascliente.getid_empresa());	
				politicasclienteAux.setlimite_credito(this.politicascliente.getlimite_credito());	
				politicasclienteAux.setfecha_inicio(this.politicascliente.getfecha_inicio());	
				politicasclienteAux.setfecha_renovacion(this.politicascliente.getfecha_renovacion());	
				politicasclienteAux.setfecha_fin(this.politicascliente.getfecha_fin());	
				politicasclienteAux.setdias_neto_pago(this.politicascliente.getdias_neto_pago());	
				politicasclienteAux.setdias_gracia(this.politicascliente.getdias_gracia());	
				politicasclienteAux.setcupo(this.politicascliente.getcupo());	
				politicasclienteAux.setdescuento_general(this.politicascliente.getdescuento_general());	
				politicasclienteAux.setdescuento_pronto_pago(this.politicascliente.getdescuento_pronto_pago());	
				politicasclienteAux.setid_tipo_precio(this.politicascliente.getid_tipo_precio());	
				politicasclienteAux.setcon_lista_precio(this.politicascliente.getcon_lista_precio());	
				politicasclienteAux.setcon_impuestos(this.politicascliente.getcon_impuestos());	
				politicasclienteAux.setactivar_monto_facturacion(this.politicascliente.getactivar_monto_facturacion());	
				politicasclienteAux.setvalor_sobregiro(this.politicascliente.getvalor_sobregiro());	
				politicasclienteAux.setfecha_venci_sobregiro(this.politicascliente.getfecha_venci_sobregiro());	
				politicasclienteAux.setid_transporte(this.politicascliente.getid_transporte());	
				politicasclienteAux.setvalor_solicitado(this.politicascliente.getvalor_solicitado());	
				politicasclienteAux.setvalor_aprobado(this.politicascliente.getvalor_aprobado());	
				politicasclienteAux.setid_linea_negocio(this.politicascliente.getid_linea_negocio());	
				politicasclienteAux.setfecha_solicitud(this.politicascliente.getfecha_solicitud());	
				politicasclienteAux.setobsevacion(this.politicascliente.getobsevacion());	
				politicasclienteAux.setweb(this.politicascliente.getweb());	
				politicasclienteAux.setcasilla_postal(this.politicascliente.getcasilla_postal());	
				politicasclienteAux.setforma_envio(this.politicascliente.getforma_envio());	
				politicasclienteAux.setid_banco(this.politicascliente.getid_banco());	
				politicasclienteAux.setid_tipo_cuenta_banco_global(this.politicascliente.getid_tipo_cuenta_banco_global());	
				politicasclienteAux.setnumero_cuenta(this.politicascliente.getnumero_cuenta());	
				politicasclienteAux.setid_estado_politicas_cliente(this.politicascliente.getid_estado_politicas_cliente());	
				
				if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.politicasclienteAux.getId()>=0) {	
						this.politicasclientesEliminados.add(politicasclienteAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(politicasclienteAux,politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(politicasclienteAux,politicasclientes);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.savePoliticasClientes();//WithConnection
						//politicasclienteLogic.getSetVersionRowPoliticasClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
								|| this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(politicasclienteAux,politicasclienteLogic.getPoliticasClientes());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(politicasclienteAux,politicasclientes);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getPoliticasClientes().addAll(this.politicasclientesEliminados);
					
					politicasclienteLogic.savePoliticasClientes();//WithConnection
					//politicasclienteLogic.getSetVersionRowPoliticasClientes();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesPoliticasCliente();
				
				this.politicasclientesEliminados= new ArrayList<PoliticasCliente>();		
			}
			
			if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Politicas Cliente GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.politicascliente=politicasclienteAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessPoliticasCliente();
      	}
		
	}	
	
	public void actualizarRelaciones(PoliticasCliente politicasclienteLocal) throws Exception {
		
		if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(PoliticasCliente politicasclienteLocal) throws Exception {	
		if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				politicasclienteLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				politicasclienteLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				politicasclienteLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransporteDetalleFormJInternalFrame.class)) {
				TransporteBeanSwingJInternalFrame transporteBeanSwingJInternalFrameLocal=(TransporteBeanSwingJInternalFrame) ((TransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransporte(transporteBeanSwingJInternalFrameLocal.gettransporte(),true);
				transporteBeanSwingJInternalFrameLocal.actualizarLista(transporteBeanSwingJInternalFrameLocal.transporte,this.transportesForeignKey);

				transporteBeanSwingJInternalFrameLocal.actualizarRelaciones(transporteBeanSwingJInternalFrameLocal.transporte);

				politicasclienteLocal.setTransporte(transporteBeanSwingJInternalFrameLocal.transporte);

				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey("Formulario");
				this.setActualTransporteForeignKey(transporteBeanSwingJInternalFrameLocal.transporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaNegocioDetalleFormJInternalFrame.class)) {
				LineaNegocioBeanSwingJInternalFrame lineanegocioBeanSwingJInternalFrameLocal=(LineaNegocioBeanSwingJInternalFrame) ((LineaNegocioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineanegocioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLineaNegocio(lineanegocioBeanSwingJInternalFrameLocal.getlineanegocio(),true);
				lineanegocioBeanSwingJInternalFrameLocal.actualizarLista(lineanegocioBeanSwingJInternalFrameLocal.lineanegocio,this.lineanegociosForeignKey);

				lineanegocioBeanSwingJInternalFrameLocal.actualizarRelaciones(lineanegocioBeanSwingJInternalFrameLocal.lineanegocio);

				politicasclienteLocal.setLineaNegocio(lineanegocioBeanSwingJInternalFrameLocal.lineanegocio);

				this.addItemDefectoCombosForeignKeyLineaNegocio();
				this.cargarCombosFrameLineaNegociosForeignKey("Formulario");
				this.setActualLineaNegocioForeignKey(lineanegocioBeanSwingJInternalFrameLocal.lineanegocio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BancoDetalleFormJInternalFrame.class)) {
				BancoBeanSwingJInternalFrame bancoBeanSwingJInternalFrameLocal=(BancoBeanSwingJInternalFrame) ((BancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBanco(bancoBeanSwingJInternalFrameLocal.getbanco(),true);
				bancoBeanSwingJInternalFrameLocal.actualizarLista(bancoBeanSwingJInternalFrameLocal.banco,this.bancosForeignKey);

				bancoBeanSwingJInternalFrameLocal.actualizarRelaciones(bancoBeanSwingJInternalFrameLocal.banco);

				politicasclienteLocal.setBanco(bancoBeanSwingJInternalFrameLocal.banco);

				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey("Formulario");
				this.setActualBancoForeignKey(bancoBeanSwingJInternalFrameLocal.banco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCuentaBancoGlobalDetalleFormJInternalFrame.class)) {
				TipoCuentaBancoGlobalBeanSwingJInternalFrame tipocuentabancoglobalBeanSwingJInternalFrameLocal=(TipoCuentaBancoGlobalBeanSwingJInternalFrame) ((TipoCuentaBancoGlobalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.gettipocuentabancoglobal(),true);
				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarLista(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal,this.tipocuentabancoglobalsForeignKey);

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				politicasclienteLocal.setTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Formulario");
				this.setActualTipoCuentaBancoGlobalForeignKey(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoPoliticasClienteDetalleFormJInternalFrame.class)) {
				EstadoPoliticasClienteBeanSwingJInternalFrame estadopoliticasclienteBeanSwingJInternalFrameLocal=(EstadoPoliticasClienteBeanSwingJInternalFrame) ((EstadoPoliticasClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadopoliticasclienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoPoliticasCliente(estadopoliticasclienteBeanSwingJInternalFrameLocal.getestadopoliticascliente(),true);
				estadopoliticasclienteBeanSwingJInternalFrameLocal.actualizarLista(estadopoliticasclienteBeanSwingJInternalFrameLocal.estadopoliticascliente,this.estadopoliticasclientesForeignKey);

				estadopoliticasclienteBeanSwingJInternalFrameLocal.actualizarRelaciones(estadopoliticasclienteBeanSwingJInternalFrameLocal.estadopoliticascliente);

				politicasclienteLocal.setEstadoPoliticasCliente(estadopoliticasclienteBeanSwingJInternalFrameLocal.estadopoliticascliente);

				this.addItemDefectoCombosForeignKeyEstadoPoliticasCliente();
				this.cargarCombosFrameEstadoPoliticasClientesForeignKey("Formulario");
				this.setActualEstadoPoliticasClienteForeignKey(estadopoliticasclienteBeanSwingJInternalFrameLocal.estadopoliticascliente.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarPoliticasClienteActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = politicasclienteValidator.getInvalidValues(this.politicascliente);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(PoliticasCliente politicascliente,List<PoliticasCliente> politicasclientes) throws Exception {
		try	{		
			PoliticasClienteConstantesFunciones.actualizarLista(politicascliente,politicasclientes,this.politicasclienteSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(PoliticasCliente politicascliente,List<PoliticasCliente> politicasclientes) throws Exception {
		try	{			
			PoliticasClienteConstantesFunciones.actualizarSelectedLista(politicascliente,politicasclientes);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<PoliticasCliente> politicasclientesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				politicasclientesLocal=this.politicasclienteLogic.getPoliticasClientes();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				politicasclientesLocal=this.politicasclientes;
			}
			//ARCHITECTURE
		
			for(PoliticasCliente politicasclienteLocal:politicasclientesLocal) {
				if(this.permiteMantenimiento(politicasclienteLocal) && politicasclienteLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+PoliticasClienteConstantesFunciones.getPoliticasClienteLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_empresaPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.LIMITECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabellimite_creditoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FECHAINICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_inicioPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FECHARENOVACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_renovacionPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FECHAFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_finPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.DIASNETOPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_neto_pagoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.DIASGRACIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_graciaPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.CUPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcupoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.DESCUENTOGENERAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_generalPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.DESCUENTOPRONTOPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_pronto_pagoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_tipo_precioPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.CONLISTAPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_lista_precioPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.CONIMPUESTOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_impuestosPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.ACTIVARMONTOFACTURACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelactivar_monto_facturacionPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.VALORSOBREGIRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_sobregiroPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FECHAVENCISOBREGIRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_venci_sobregiroPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDTRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_transportePoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.VALORSOLICITADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_solicitadoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.VALORAPROBADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_aprobadoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDLINEANEGOCIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_linea_negocioPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FECHASOLICITUD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_solicitudPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.OBSEVACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelobsevacionPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.WEB)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelwebPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.CASILLAPOSTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcasilla_postalPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.FORMAENVIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelforma_envioPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_bancoPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDTIPOCUENTABANCOGLOBAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_tipo_cuenta_banco_globalPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.NUMEROCUENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelnumero_cuentaPoliticasCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PoliticasClienteConstantesFunciones.IDESTADOPOLITICASCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_estado_politicas_clientePoliticasCliente,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_empresaPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabellimite_creditoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_inicioPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_renovacionPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_finPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_neto_pagoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_graciaPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcupoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_generalPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_pronto_pagoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_tipo_precioPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_lista_precioPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_impuestosPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelactivar_monto_facturacionPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_sobregiroPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_venci_sobregiroPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_transportePoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_solicitadoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_aprobadoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_linea_negocioPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_solicitudPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelobsevacionPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelwebPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcasilla_postalPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelforma_envioPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_bancoPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_tipo_cuenta_banco_globalPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelnumero_cuentaPoliticasCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_estado_politicas_clientePoliticasCliente,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoPoliticasCliente--;	
		
		
		this.politicasclienteAux=new PoliticasCliente();
		
		this.politicasclienteAux.setId(this.iIdNuevoPoliticasCliente);
		this.politicasclienteAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.politicasclienteLogic.getPoliticasClientes().add(this.politicasclienteAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.politicasclientes.add(this.politicasclienteAux);
		}
		//ARCHITECTURE
		
		this.politicascliente=this.politicasclienteAux;
		
		if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioPoliticasCliente(this.politicascliente);
			this.setVariablesObjetoActualToFormularioForeignKeyPoliticasCliente(this.politicascliente);
		}
				
		//this.setDefaultControlesPoliticasCliente();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyPoliticasCliente();
		
		//PARA RELACION DE UNO A UNO
		this.politicascliente.setId(this.id_clienteFK_IdCliente);
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyPoliticasCliente();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyPoliticasCliente();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPoliticasCliente(this.politicasclienteBean,this.politicascliente,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(PoliticasClienteConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
			classes=PoliticasClienteConstantesFunciones.getClassesRelationshipsOfPoliticasCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.politicasclienteReturnGeneral=politicasclienteLogic.procesarEventosPoliticasClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.politicasclienteLogic.getPoliticasClientes(),this.politicascliente,this.politicasclienteParameterGeneral,this.isEsNuevoPoliticasCliente,classes);//this.politicasclienteLogic.getPoliticasCliente()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanPoliticasCliente(this.politicasclienteReturnGeneral,this.politicasclienteBean,false);
		
		if(this.politicasclienteReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente());
		}
		
		if(this.politicasclienteReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente(),classes);//this.politicasclienteBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyPoliticasCliente();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyPoliticasCliente();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.RecargarFormPoliticasCliente(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingPoliticasCliente(false);
						
			if(politicasclienteSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPoliticasCliente();
			}
			
			this.actualizarVisualTableDatosPoliticasCliente();
			
			this.jTableDatosPoliticasCliente.setRowSelectionInterval(this.getIndiceNuevoPoliticasCliente(), this.getIndiceNuevoPoliticasCliente());
			
			this.seleccionarFilaTablaPoliticasClienteActual();
						
			this.actualizarEstadoCeldasBotonesPoliticasCliente("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesPoliticasCliente(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarlimite_creditoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarfecha_inicioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarfecha_renovacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarfecha_finPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activardias_neto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activardias_graciaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarcupoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activardescuento_generalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activardescuento_pronto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarcon_lista_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarcon_impuestosPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activaractivar_monto_facturacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarvalor_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarfecha_venci_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarvalor_solicitadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarvalor_aprobadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarfecha_solicitudPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarobsevacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarwebPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarcasilla_postalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarforma_envioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarnumero_cuentaPoliticasCliente);	
		//
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_empresaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_tipo_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_transportePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_linea_negocioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_bancoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_tipo_cuenta_banco_globalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setEnabled(isHabilitar && this.politicasclienteConstantesFunciones.activarid_estado_politicas_clientePoliticasCliente);
	};
	
	public void setDefaultControlesPoliticasCliente() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoPoliticasCliente(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.politicasclienteSessionBean.setConGuardarRelaciones(true);			
			this.politicasclienteSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.setVisible(true);
			
					
		} else {
			//this.politicasclienteSessionBean.setConGuardarRelaciones(false);			
			this.politicasclienteSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoPoliticasCliente() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
				if(politicasclienteAux.getId().equals(this.iIdNuevoPoliticasCliente)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PoliticasCliente politicasclienteAux:this.politicasclientes) {
				if(politicasclienteAux.getId().equals(this.iIdNuevoPoliticasCliente)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualPoliticasCliente(PoliticasCliente politicascliente,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
				if(politicasclienteAux.getId().equals(politicascliente.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PoliticasCliente politicasclienteAux:this.politicasclientes) {
				if(politicasclienteAux.getId().equals(politicascliente.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalPoliticasCliente(PoliticasCliente politicasclienteOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
				if(politicasclienteAux.getPoliticasClienteOriginal().getId().equals(politicasclienteOriginal.getId())) {
					existe=true;
					politicasclienteOriginal.setId(politicasclienteAux.getId());
					politicasclienteOriginal.setVersionRow(politicasclienteAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PoliticasCliente politicasclienteAux:this.politicasclientes) {
				if(politicasclienteAux.getPoliticasClienteOriginal().getId().equals(politicasclienteOriginal.getId())) {
					existe=true;
					politicasclienteOriginal.setId(politicasclienteAux.getId());
					politicasclienteOriginal.setVersionRow(politicasclienteAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosPoliticasCliente(Boolean esParaCancelar) throws Exception {
		politicasclientesAux=new ArrayList<PoliticasCliente>();
		politicasclienteAux=new PoliticasCliente();
		
		if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
					if(politicasclienteAux.getId()<0) {
						politicasclientesAux.add(politicasclienteAux);
					}		
				}
				this.iIdNuevoPoliticasCliente=0L;
				this.politicasclienteLogic.getPoliticasClientes().removeAll(politicasclientesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PoliticasCliente politicasclienteAux:this.politicasclientes) {
					if(politicasclienteAux.getId()<0) {
						politicasclientesAux.add(politicasclienteAux);
					}		
				}
				this.iIdNuevoPoliticasCliente=0L;
				this.politicasclientes.removeAll(politicasclientesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoPoliticasCliente 
					&& this.politicasclienteLogic.getPoliticasClientes().size()>0
					) {
					politicasclienteAux=this.politicasclienteLogic.getPoliticasClientes().get(this.politicasclienteLogic.getPoliticasClientes().size() - 1);
				
					if(politicasclienteAux.getId()<0) {
						this.politicasclienteLogic.getPoliticasClientes().remove(politicasclienteAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoPoliticasCliente && this.politicasclientes.size()>0) {
					politicasclienteAux=this.politicasclientes.get(this.politicasclientes.size() - 1);
				
					if(politicasclienteAux.getId()<0) {
						this.politicasclientes.remove(politicasclienteAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoPoliticasCliente(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(politicascliente.getId()<0) {
				this.politicasclienteLogic.getPoliticasClientes().remove(this.politicascliente);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(politicascliente.getId()<0) {
				this.politicasclientes.remove(this.politicascliente);
			}
		}			
	}
	
	public void setEstadosInicialesPoliticasCliente(List<PoliticasCliente> politicasclientesAux) throws Exception {
		PoliticasClienteConstantesFunciones.setEstadosInicialesPoliticasCliente(politicasclientesAux);
	}
	
	public void setEstadosInicialesPoliticasCliente(PoliticasCliente politicasclienteAux) throws Exception {
		PoliticasClienteConstantesFunciones.setEstadosInicialesPoliticasCliente(politicasclienteAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarPoliticasClienteActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarPoliticasClienteActual()) {
				if(!this.isEsNuevoPoliticasCliente) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoPoliticasCliente=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarPoliticasClienteActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Politicas Cliente ?", "MANTENIMIENTO DE Politicas Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(PoliticasCliente politicascliente) throws Exception {
		PoliticasClienteConstantesFunciones.seleccionarAsignar(this.politicascliente,politicascliente);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarPoliticasCliente=this.isPermisoActualizarOriginalPoliticasCliente;
			
			
			this.seleccionarAsignar(politicascliente);
			
			

			idClienteActual=politicascliente.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PoliticasClienteConstantesFunciones.quitarEspaciosPoliticasCliente(this.politicascliente,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesPoliticasCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.politicasclienteSessionBean.setsFuncionBusquedaRapida(this.politicasclienteSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoPoliticasCliente) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosPoliticasCliente(esParaCancelar);				
				this.cancelarNuevoPoliticasCliente(esParaCancelar);								
			}
			
			this.politicascliente=new PoliticasCliente();
			
			this.inicializarPoliticasCliente();
			
			this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarPoliticasCliente() throws Exception {
		try {
			PoliticasClienteConstantesFunciones.inicializarPoliticasCliente(this.politicascliente);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.politicasclienteLogic.getPoliticasClientes().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReportePoliticasClientes(String sAccionBusqueda,List<PoliticasCliente> politicasclientesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="PoliticasCliente"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="PoliticasClienteMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("PoliticasClienteMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="PoliticasCliente"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Politicas Clientes");		
		parameters.put("busquedapor", PoliticasClienteConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourcePoliticasCliente=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			PoliticasClienteConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			PoliticasClienteConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourcePoliticasCliente=new JRBeanArrayDataSource(PoliticasClienteJInternalFrame.TraerPoliticasClienteBeans(politicasclientesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourcePoliticasCliente);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+PoliticasClienteConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+PoliticasClienteConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(PoliticasClienteBean.TraerPoliticasClienteBeans(politicasclientesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReportePoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalPoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoPoliticasClienteActionPerformed(null);
					//this.generarExcelReportePoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalPoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesPoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesPoliticasClientes(sAccionBusqueda,sTipoArchivoReporte,politicasclientesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReportePoliticasClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<PoliticasCliente> politicasclientesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PoliticasClientes");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPoliticasCliente("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(PoliticasCliente politicascliente : politicasclientesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			PoliticasClienteConstantesFunciones.generarExcelReporteDataPoliticasCliente("NORMAL",row,workbook,politicascliente,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderPoliticasCliente(String sTipo,Row row,Workbook workbook) {
		
		PoliticasClienteConstantesFunciones.generarExcelReporteHeaderPoliticasCliente(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalPoliticasClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<PoliticasCliente> politicasclientesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PoliticasClientes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(PoliticasCliente politicascliente : politicasclientesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(PoliticasClienteConstantesFunciones.getPoliticasClienteDescripcion(politicascliente));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getlimite_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getfecha_inicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getfecha_renovacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getfecha_fin());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getdias_neto_pago());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getdias_gracia());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_CUPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CUPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getcupo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getdescuento_general());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getdescuento_pronto_pago());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(politicascliente.getcon_lista_precio()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(politicascliente.getcon_impuestos()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(politicascliente.getactivar_monto_facturacion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getvalor_sobregiro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getfecha_venci_sobregiro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.gettransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getvalor_solicitado());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getvalor_aprobado());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getlineanegocio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getfecha_solicitud());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getobsevacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_WEB))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_WEB);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getweb());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getcasilla_postal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getforma_envio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getbanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.gettipocuentabancoglobal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getnumero_cuenta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(politicascliente.getestadopoliticascliente_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesPoliticasClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<PoliticasCliente> politicasclientesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<PoliticasCliente> politicasclientesRespaldo=null;
		
		classes=PoliticasClienteConstantesFunciones.getClassesRelationshipsOfPoliticasCliente(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.politicasclienteLogic.setDatosCliente(this.datosCliente);
		this.politicasclienteLogic.setDatosDeep(this.datosDeep);
		this.politicasclienteLogic.setIsConDeep(true);
		
		politicasclientesRespaldo=this.politicasclienteLogic.getPoliticasClientes();
		
		this.politicasclienteLogic.setPoliticasClientes(politicasclientesParaReportes);	
		this.politicasclienteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		politicasclientesParaReportes=this.politicasclienteLogic.getPoliticasClientes();
		this.politicasclienteLogic.setPoliticasClientes(politicasclientesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PoliticasClientes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPoliticasCliente("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(PoliticasCliente politicascliente : politicasclientesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderPoliticasCliente("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			PoliticasClienteConstantesFunciones.generarExcelReporteDataPoliticasCliente("NORMAL",row,workbook,politicascliente,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(PoliticasClienteConstantesFunciones.getPoliticasClienteDescripcion(politicascliente));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPoliticasCliente.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessPoliticasCliente() throws Exception {		
		this.startProcessPoliticasCliente(true);
	}
	
	public void startProcessPoliticasCliente(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasPoliticasCliente ,this.jPanelParametrosReportesPoliticasCliente, this.jScrollPanelDatosPoliticasCliente,this.jPanelPaginacionPoliticasCliente, this.jScrollPanelDatosEdicionPoliticasCliente, this.jPanelAccionesPoliticasCliente,this.jPanelAccionesFormularioPoliticasCliente,this.jmenuBarPoliticasCliente,this.jmenuBarDetallePoliticasCliente,this.jTtoolBarPoliticasCliente,this.jTtoolBarDetallePoliticasCliente);		
		
		final JTabbedPane jTabbedPaneBusquedasPoliticasCliente=this.jTabbedPaneBusquedasPoliticasCliente; 
		
		final JPanel jPanelParametrosReportesPoliticasCliente=this.jPanelParametrosReportesPoliticasCliente;
		//final JScrollPane jScrollPanelDatosPoliticasCliente=this.jScrollPanelDatosPoliticasCliente;
		final JTable jTableDatosPoliticasCliente=this.jTableDatosPoliticasCliente;		
		final JPanel jPanelPaginacionPoliticasCliente=this.jPanelPaginacionPoliticasCliente;
		//final JScrollPane jScrollPanelDatosEdicionPoliticasCliente=this.jScrollPanelDatosEdicionPoliticasCliente;
		final JPanel jPanelAccionesPoliticasCliente=this.jPanelAccionesPoliticasCliente;
		
		JPanel jPanelCamposAuxiliarPoliticasCliente=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarPoliticasCliente=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			jPanelCamposAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jPanelCamposPoliticasCliente;
			jPanelAccionesFormularioAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jPanelAccionesFormularioPoliticasCliente;
		}
		
		final JPanel jPanelCamposPoliticasCliente=jPanelCamposAuxiliarPoliticasCliente;
		final JPanel jPanelAccionesFormularioPoliticasCliente=jPanelAccionesFormularioAuxiliarPoliticasCliente;
		
		
		final JMenuBar jmenuBarPoliticasCliente=this.jmenuBarPoliticasCliente;
		final JToolBar jTtoolBarPoliticasCliente=this.jTtoolBarPoliticasCliente;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarPoliticasCliente=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPoliticasCliente=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			jmenuBarDetalleAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jmenuBarDetallePoliticasCliente;
			jTtoolBarDetalleAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jTtoolBarDetallePoliticasCliente;
		}
		
		final JMenuBar jmenuBarDetallePoliticasCliente=jmenuBarDetalleAuxiliarPoliticasCliente;
		final JToolBar jTtoolBarDetallePoliticasCliente=jTtoolBarDetalleAuxiliarPoliticasCliente;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPoliticasCliente;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPoliticasCliente;
			processRunnable.jTableDatos=jTableDatosPoliticasCliente;
			processRunnable.jPanelCampos=jPanelCamposPoliticasCliente;
			processRunnable.jPanelPaginacion=jPanelPaginacionPoliticasCliente;
			processRunnable.jPanelAcciones=jPanelAccionesPoliticasCliente;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPoliticasCliente;
			
			
			processRunnable.jmenuBar=jmenuBarPoliticasCliente;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePoliticasCliente;
			processRunnable.jTtoolBar=jTtoolBarPoliticasCliente;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePoliticasCliente;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPoliticasCliente ,jPanelParametrosReportesPoliticasCliente,jTableDatosPoliticasCliente, /*jScrollPanelDatosPoliticasCliente,*/jPanelCamposPoliticasCliente,jPanelPaginacionPoliticasCliente, /*jScrollPanelDatosEdicionPoliticasCliente,*/ jPanelAccionesPoliticasCliente,jPanelAccionesFormularioPoliticasCliente,jmenuBarPoliticasCliente,jmenuBarDetallePoliticasCliente,jTtoolBarPoliticasCliente,jTtoolBarDetallePoliticasCliente);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPoliticasCliente ,jPanelParametrosReportesPoliticasCliente, jScrollPanelDatosPoliticasCliente,jPanelPaginacionPoliticasCliente, jScrollPanelDatosEdicionPoliticasCliente, jPanelAccionesPoliticasCliente,jPanelAccionesFormularioPoliticasCliente,jmenuBarPoliticasCliente,jmenuBarDetallePoliticasCliente,jTtoolBarPoliticasCliente,jTtoolBarDetallePoliticasCliente);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessPoliticasCliente() {// throws Exception 
		this.finishProcessPoliticasCliente(true);
	}
	
	public void finishProcessPoliticasCliente(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasPoliticasCliente ,this.jPanelParametrosReportesPoliticasCliente, this.jScrollPanelDatosPoliticasCliente,this.jPanelPaginacionPoliticasCliente, this.jScrollPanelDatosEdicionPoliticasCliente, this.jPanelAccionesPoliticasCliente,this.jPanelAccionesFormularioPoliticasCliente,this.jmenuBarPoliticasCliente,this.jmenuBarDetallePoliticasCliente,this.jTtoolBarPoliticasCliente,this.jTtoolBarDetallePoliticasCliente);		
		
		final JTabbedPane jTabbedPaneBusquedasPoliticasCliente=this.jTabbedPaneBusquedasPoliticasCliente; 
		
		final JPanel jPanelParametrosReportesPoliticasCliente=this.jPanelParametrosReportesPoliticasCliente;
		//final JScrollPane jScrollPanelDatosPoliticasCliente=this.jScrollPanelDatosPoliticasCliente;
		final JTable jTableDatosPoliticasCliente=this.jTableDatosPoliticasCliente;		
		final JPanel jPanelPaginacionPoliticasCliente=this.jPanelPaginacionPoliticasCliente;
		//final JScrollPane jScrollPanelDatosEdicionPoliticasCliente=this.jScrollPanelDatosEdicionPoliticasCliente;
		final JPanel jPanelAccionesPoliticasCliente=this.jPanelAccionesPoliticasCliente;
		
		JPanel jPanelCamposAuxiliarPoliticasCliente=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarPoliticasCliente=new JPanel();
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			jPanelCamposAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jPanelCamposPoliticasCliente;
			jPanelAccionesFormularioAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jPanelAccionesFormularioPoliticasCliente;
		}
		
		final JPanel jPanelCamposPoliticasCliente=jPanelCamposAuxiliarPoliticasCliente;
		final JPanel jPanelAccionesFormularioPoliticasCliente=jPanelAccionesFormularioAuxiliarPoliticasCliente;
		
		
		final JMenuBar jmenuBarPoliticasCliente=this.jmenuBarPoliticasCliente;		
		final JToolBar jTtoolBarPoliticasCliente=this.jTtoolBarPoliticasCliente;
				
		JMenuBar jmenuBarDetalleAuxiliarPoliticasCliente=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPoliticasCliente=new JToolBar();
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			jmenuBarDetalleAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jmenuBarDetallePoliticasCliente;
			jTtoolBarDetalleAuxiliarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jTtoolBarDetallePoliticasCliente;		
		}
		
		final JMenuBar jmenuBarDetallePoliticasCliente=jmenuBarDetalleAuxiliarPoliticasCliente;
		final JToolBar jTtoolBarDetallePoliticasCliente=jTtoolBarDetalleAuxiliarPoliticasCliente;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPoliticasCliente;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPoliticasCliente;
			processRunnable.jTableDatos=jTableDatosPoliticasCliente;
			processRunnable.jPanelCampos=jPanelCamposPoliticasCliente;
			processRunnable.jPanelPaginacion=jPanelPaginacionPoliticasCliente;
			processRunnable.jPanelAcciones=jPanelAccionesPoliticasCliente;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPoliticasCliente;
			
			
			processRunnable.jmenuBar=jmenuBarPoliticasCliente;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePoliticasCliente;
			processRunnable.jTtoolBar=jTtoolBarPoliticasCliente;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePoliticasCliente;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasPoliticasCliente ,jPanelParametrosReportesPoliticasCliente, jTableDatosPoliticasCliente,/*jScrollPanelDatosPoliticasCliente,*/jPanelCamposPoliticasCliente,jPanelPaginacionPoliticasCliente, /*jScrollPanelDatosEdicionPoliticasCliente,*/ jPanelAccionesPoliticasCliente,jPanelAccionesFormularioPoliticasCliente,jmenuBarPoliticasCliente,jmenuBarDetallePoliticasCliente,jTtoolBarPoliticasCliente,jTtoolBarDetallePoliticasCliente));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesPoliticasCliente(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarPoliticasCliente(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuPoliticasCliente(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarPoliticasCliente(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarPoliticasCliente,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetallePoliticasCliente,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuPoliticasCliente(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarPoliticasCliente,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetallePoliticasCliente,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.politicasclienteConstantesFunciones.getsFinalQueryPoliticasCliente();
		String  finalQueryPaginacionTodos=this.politicasclienteConstantesFunciones.getsFinalQueryPoliticasCliente();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=PoliticasClienteConstantesFunciones.getArrayColumnasGlobalesNoPoliticasCliente(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=PoliticasClienteConstantesFunciones.getArrayColumnasGlobalesPoliticasCliente(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,PoliticasClienteConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.politicasclientesEliminados= new ArrayList<PoliticasCliente>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessPoliticasCliente();
		
				///*PoliticasClienteSessionBean*/this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			
			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=PoliticasClienteConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=PoliticasClienteConstantesFunciones.getClassesForeignKeysOfPoliticasCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/politicascliente."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			politicasclientesAux= new ArrayList<PoliticasCliente>();
			
				
			politicasclienteLogic.setDatosCliente(this.datosCliente);
			politicasclienteLogic.setDatosDeep(this.datosDeep);
			politicasclienteLogic.setIsConDeep(true);
			
			
			politicasclienteLogic.getPoliticasClienteDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					politicasclienteLogic.getTodosPoliticasClientes(finalQueryGlobal,pagination);
					
					//politicasclienteLogic.getTodosPoliticasClientesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(politicasclienteLogic.getPoliticasClientes()==null|| politicasclienteLogic.getPoliticasClientes().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							politicasclientesAux= new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux= new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							politicasclienteLogic.getTodosPoliticasClientes(finalQueryGlobal+"",this.pagination);												
							
							//politicasclienteLogic.getTodosPoliticasClientesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReportePoliticasClientes("Todos",politicasclienteLogic.getPoliticasClientes() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());					
							politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idPoliticasCliente=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idPoliticasCliente=this.idActual;
				
				} else if(this.idPoliticasClienteActual!=null && this.idPoliticasClienteActual!=0L) {
					idPoliticasCliente=idPoliticasClienteActual;
				}
				
					
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndicePorId(idPoliticasCliente);
				
				this.politicasclientes=new ArrayList<PoliticasCliente>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					politicasclienteLogic.getEntity(idPoliticasCliente);
					
					//politicasclienteLogic.getEntityWithConnection(idPoliticasCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
					politicasclienteLogic.getPoliticasClientes().add(politicasclienteLogic.getPoliticasCliente());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicasclientes=new ArrayList<PoliticasCliente>();
					this.politicasclientes.add(politicascliente);
				}
				
				if(politicasclienteLogic.getPoliticasCliente()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBanco")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdBanco",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdBanco",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdCliente",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdCliente",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					Boolean isTieneDatosPoliticasCliente=true;
					isTieneDatosPoliticasCliente=politicasclienteLogic.getPoliticasClientes()!=null && politicasclienteLogic.getPoliticasClientes().size()>0;

					if(isTieneDatosPoliticasCliente) {
					}
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					if(politicasclientes!=null && politicasclientes.size()>0) {
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdEmpresa",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdEmpresa",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoPoliticasCliente")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEstadoPoliticasCliente(id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdEstadoPoliticasCliente(finalQueryGlobal,pagination,id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEstadoPoliticasCliente(id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEstadoPoliticasCliente(id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdEstadoPoliticasCliente(finalQueryGlobal,pagination,id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEstadoPoliticasCliente(id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdEstadoPoliticasCliente(id_estado_politicas_clienteFK_IdEstadoPoliticasCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdEstadoPoliticasCliente",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdEstadoPoliticasCliente",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdLineaNegocio")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdLineaNegocio(id_linea_negocioFK_IdLineaNegocio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdLineaNegocio(finalQueryGlobal,pagination,id_linea_negocioFK_IdLineaNegocio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdLineaNegocio(id_linea_negocioFK_IdLineaNegocio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdLineaNegocio(id_linea_negocioFK_IdLineaNegocio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdLineaNegocio(finalQueryGlobal,pagination,id_linea_negocioFK_IdLineaNegocio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdLineaNegocio(id_linea_negocioFK_IdLineaNegocio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdLineaNegocio(id_linea_negocioFK_IdLineaNegocio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdLineaNegocio",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdLineaNegocio",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdTipoCuentaBancoGlobal",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdTipoCuentaBancoGlobal",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoPrecio")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdTipoPrecio",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdTipoPrecio",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransporte")) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTransporte(id_transporteFK_IdTransporte);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					politicasclienteLogic.getPoliticasClientesFK_IdTransporte(finalQueryGlobal,pagination,id_transporteFK_IdTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTransporte(id_transporteFK_IdTransporte);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTransporte(id_transporteFK_IdTransporte);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=politicasclienteLogic.getPoliticasClientes()==null||politicasclienteLogic.getPoliticasClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=politicasclientes==null|| politicasclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclientesAux=new ArrayList<PoliticasCliente>();
						politicasclientesAux.addAll(politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientesAux=new ArrayList<PoliticasCliente>();
							politicasclientesAux.addAll(politicasclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							politicasclienteLogic.getPoliticasClientesFK_IdTransporte(finalQueryGlobal,pagination,id_transporteFK_IdTransporte);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTransporte(id_transporteFK_IdTransporte);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PoliticasClienteConstantesFunciones.getDetalleIndiceFK_IdTransporte(id_transporteFK_IdTransporte);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePoliticasClientes("FK_IdTransporte",politicasclienteLogic.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePoliticasClientes("FK_IdTransporte",politicasclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteLogic.setPoliticasClientes(new ArrayList<PoliticasCliente>());
						politicasclienteLogic.getPoliticasClientes().addAll(politicasclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclientes=new ArrayList<PoliticasCliente>();
							politicasclientes.addAll(politicasclientesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesPoliticasCliente();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessPoliticasCliente();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=politicasclienteLogic.getPoliticasClientes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=politicasclientes.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=politicasclienteLogic.getPoliticasClientes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=politicasclientes.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(PoliticasCliente politicascliente) {
		Boolean permite=true;
		
		if(this.politicascliente.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=PoliticasClienteConstantesFunciones.getOrderByListaPoliticasCliente();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=PoliticasClienteConstantesFunciones.getOrderByListaPoliticasCliente();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PoliticasCliente politicascliente:politicasclienteLogic.getPoliticasClientes()) {
				if(politicascliente.getsType().equals(Constantes2.S_TOTALES)) {
					politicasclienteTotales=politicascliente;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PoliticasCliente politicascliente:this.politicasclientes) {
				if(politicascliente.getsType().equals(Constantes2.S_TOTALES)) {
					politicasclienteTotales=politicascliente;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		politicasclienteTotales=new PoliticasCliente();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.politicasclienteLogic.getPoliticasClientes().remove(politicasclienteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.politicasclientes.remove(politicasclienteTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		politicasclienteTotales=new PoliticasCliente();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PoliticasCliente politicascliente:politicasclienteLogic.getPoliticasClientes()) {
				if(politicascliente.getsType().equals(Constantes2.S_TOTALES)) {
					politicasclienteTotales=politicascliente;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PoliticasClienteConstantesFunciones.TotalizarValoresFilaPoliticasCliente(this.politicasclienteLogic.getPoliticasClientes(),politicasclienteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PoliticasCliente politicascliente:this.politicasclientes) {
				if(politicascliente.getsType().equals(Constantes2.S_TOTALES)) {
					politicasclienteTotales=politicascliente;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PoliticasClienteConstantesFunciones.TotalizarValoresFilaPoliticasCliente(this.politicasclientes,politicasclienteTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getPoliticasClientesFK_IdBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdEstadoPoliticasCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoPoliticasCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdLineaNegocio()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaNegocio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdTipoCuentaBancoGlobal()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCuentaBancoGlobal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPoliticasClientesFK_IdTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getPoliticasClientesFK_IdBanco(String sFinalQuery,Long id_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdBanco(sFinalQuery,this.pagination,id_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdEstadoPoliticasCliente(String sFinalQuery,Long id_estado_politicas_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdEstadoPoliticasCliente(sFinalQuery,this.pagination,id_estado_politicas_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdLineaNegocio(String sFinalQuery,Long id_linea_negocio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdLineaNegocio(sFinalQuery,this.pagination,id_linea_negocio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdTipoCuentaBancoGlobal(String sFinalQuery,Long id_tipo_cuenta_banco_global)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdTipoCuentaBancoGlobal(sFinalQuery,this.pagination,id_tipo_cuenta_banco_global);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPoliticasClientesFK_IdTransporte(String sFinalQuery,Long id_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLogic.getPoliticasClientesFK_IdTransporte(sFinalQuery,this.pagination,id_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosPoliticasCliente() {
		this.isPermisoTodoPoliticasCliente=false;
		this.isPermisoNuevoPoliticasCliente=false;
		this.isPermisoActualizarPoliticasCliente=false;
		this.isPermisoActualizarOriginalPoliticasCliente=false;
		this.isPermisoEliminarPoliticasCliente=false;
		this.isPermisoGuardarCambiosPoliticasCliente=false;
		this.isPermisoConsultaPoliticasCliente=false;
		this.isPermisoBusquedaPoliticasCliente=false;
		this.isPermisoReportePoliticasCliente=false;		
		this.isPermisoOrdenPoliticasCliente=false;		
		this.isPermisoPaginacionMedioPoliticasCliente=false;		
		this.isPermisoPaginacionAltoPoliticasCliente=false;
		this.isPermisoPaginacionTodoPoliticasCliente=false;
		this.isPermisoCopiarPoliticasCliente=false;		
		this.isPermisoVerFormPoliticasCliente=false;		
		this.isPermisoDuplicarPoliticasCliente=false;		
		this.isPermisoOrdenPoliticasCliente=false;		
	}
	
	public void setPermisosUsuarioPoliticasCliente(Boolean isPermiso) {
		this.isPermisoTodoPoliticasCliente=isPermiso;
		this.isPermisoNuevoPoliticasCliente=isPermiso;
		this.isPermisoActualizarPoliticasCliente=isPermiso;
		this.isPermisoActualizarOriginalPoliticasCliente=isPermiso;
		this.isPermisoEliminarPoliticasCliente=isPermiso;
		this.isPermisoGuardarCambiosPoliticasCliente=isPermiso;
		this.isPermisoConsultaPoliticasCliente=isPermiso;
		this.isPermisoBusquedaPoliticasCliente=isPermiso;
		this.isPermisoReportePoliticasCliente=isPermiso;
		this.isPermisoOrdenPoliticasCliente=isPermiso;		
		this.isPermisoPaginacionMedioPoliticasCliente=isPermiso;		
		this.isPermisoPaginacionAltoPoliticasCliente=isPermiso;		
		this.isPermisoPaginacionTodoPoliticasCliente=isPermiso;		
		this.isPermisoCopiarPoliticasCliente=isPermiso;		
		this.isPermisoVerFormPoliticasCliente=isPermiso;		
		this.isPermisoDuplicarPoliticasCliente=isPermiso;
		this.isPermisoOrdenPoliticasCliente=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioPoliticasCliente(Boolean isPermiso) {
		//this.isPermisoTodoPoliticasCliente=isPermiso;
		this.isPermisoNuevoPoliticasCliente=isPermiso;
		this.isPermisoActualizarPoliticasCliente=isPermiso;
		this.isPermisoActualizarOriginalPoliticasCliente=isPermiso;
		this.isPermisoEliminarPoliticasCliente=isPermiso;
		this.isPermisoGuardarCambiosPoliticasCliente=isPermiso;
		//this.isPermisoConsultaPoliticasCliente=isPermiso;
		//this.isPermisoBusquedaPoliticasCliente=isPermiso;
		//this.isPermisoReportePoliticasCliente=isPermiso;
		//this.isPermisoOrdenPoliticasCliente=isPermiso;		
		//this.isPermisoPaginacionMedioPoliticasCliente=isPermiso;		
		//this.isPermisoPaginacionAltoPoliticasCliente=isPermiso;		
		//this.isPermisoPaginacionTodoPoliticasCliente=isPermiso;		
		//this.isPermisoCopiarPoliticasCliente=isPermiso;		
		//this.isPermisoDuplicarPoliticasCliente=isPermiso;
		//this.isPermisoOrdenPoliticasCliente=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioPoliticasClienteClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(PoliticasClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebPoliticasCliente(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioPoliticasClienteClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioPoliticasClienteClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionPoliticasClienteClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioPoliticasClienteClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioPoliticasCliente() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(PoliticasClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, PoliticasClienteConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoPoliticasCliente=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarPoliticasCliente=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalPoliticasCliente=this.isPermisoActualizarPoliticasCliente;
			this.isPermisoEliminarPoliticasCliente=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosPoliticasCliente=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaPoliticasCliente=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaPoliticasCliente=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoPoliticasCliente=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReportePoliticasCliente=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPoliticasCliente=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioPoliticasCliente=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoPoliticasCliente=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoPoliticasCliente=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarPoliticasCliente=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormPoliticasCliente=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarPoliticasCliente=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPoliticasCliente=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosPoliticasCliente.setToolTipText(this.jTableDatosPoliticasCliente.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioPoliticasCliente(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioPoliticasCliente(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(PoliticasClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(PoliticasClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioPoliticasCliente() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyPoliticasClienteListas()throws Exception {
		try	{						
			
				this.clientesForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.transportesForeignKey=new ArrayList();
				this.lineanegociosForeignKey=new ArrayList();
				this.bancosForeignKey=new ArrayList();
				this.tipocuentabancoglobalsForeignKey=new ArrayList();
				this.estadopoliticasclientesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyPoliticasClienteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(PoliticasClienteJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyPoliticasClienteListas(false);
			} else {
			
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaNegocioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoPoliticasClienteListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaNegocioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineanegociosForeignKey==null||this.lineanegociosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaNegocioConstantesFunciones.getArrayColumnasGlobalesLineaNegocio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaNegocioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaNegocioConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaNegociosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoPoliticasClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadopoliticasclientesForeignKey==null||this.estadopoliticasclientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoPoliticasClienteConstantesFunciones.getArrayColumnasGlobalesEstadoPoliticasCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoPoliticasClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoPoliticasClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoPoliticasClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyPoliticasClienteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			PoliticasClienteParameterReturnGeneral politicasclienteReturnGeneral=new PoliticasClienteParameterReturnGeneral();
						
			


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_clientePoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_clientePoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_empresaPoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_empresaPoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_tipo_precioPoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_tipo_precioPoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalTransporte="";

				if(((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_transportePoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_transportePoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalTransporte, "");
						finalQueryGlobalTransporte+=TransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransporte=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidTransporteActual();
					}
				} else {
					finalQueryGlobalTransporte="NONE";
				}


				String finalQueryGlobalLineaNegocio="";

				if(((this.lineanegociosForeignKey==null||this.lineanegociosForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_linea_negocioPoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_linea_negocioPoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionLineaNegocio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=LineaNegocioConstantesFunciones.getArrayColumnasGlobalesLineaNegocio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalLineaNegocio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaNegocioConstantesFunciones.TABLENAME);

						finalQueryGlobalLineaNegocio=Funciones.GetFinalQueryAppend(finalQueryGlobalLineaNegocio, "");
						finalQueryGlobalLineaNegocio+=LineaNegocioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosLineaNegociosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalLineaNegocio=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidLineaNegocioActual();
					}
				} else {
					finalQueryGlobalLineaNegocio="NONE";
				}


				String finalQueryGlobalBanco="";

				if(((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_bancoPoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_bancoPoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

						finalQueryGlobalBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalBanco, "");
						finalQueryGlobalBanco+=BancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBanco=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidBancoActual();
					}
				} else {
					finalQueryGlobalBanco="NONE";
				}


				String finalQueryGlobalTipoCuentaBancoGlobal="";

				if(((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_tipo_cuenta_banco_globalPoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_tipo_cuenta_banco_globalPoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCuentaBancoGlobal, "");
						finalQueryGlobalTipoCuentaBancoGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCuentaBancoGlobal=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidTipoCuentaBancoGlobalActual();
					}
				} else {
					finalQueryGlobalTipoCuentaBancoGlobal="NONE";
				}


				String finalQueryGlobalEstadoPoliticasCliente="";

				if(((this.estadopoliticasclientesForeignKey==null||this.estadopoliticasclientesForeignKey.size()<=0) && this.politicasclienteConstantesFunciones.cargarid_estado_politicas_clientePoliticasCliente)
					 || (this.esRecargarFks && this.politicasclienteConstantesFunciones.cargarid_estado_politicas_clientePoliticasCliente)) {

					if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPoliticasCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoPoliticasClienteConstantesFunciones.getArrayColumnasGlobalesEstadoPoliticasCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoPoliticasCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoPoliticasClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoPoliticasCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoPoliticasCliente, "");
						finalQueryGlobalEstadoPoliticasCliente+=EstadoPoliticasClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoPoliticasClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoPoliticasCliente=" WHERE " + ConstantesSql.ID + "="+politicasclienteSessionBean.getlidEstadoPoliticasClienteActual();
					}
				} else {
					finalQueryGlobalEstadoPoliticasCliente="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				politicasclienteReturnGeneral=politicasclienteLogic.cargarCombosLoteForeignKeyPoliticasCliente(finalQueryGlobalCliente,finalQueryGlobalEmpresa,finalQueryGlobalTipoPrecio,finalQueryGlobalTransporte,finalQueryGlobalLineaNegocio,finalQueryGlobalBanco,finalQueryGlobalTipoCuentaBancoGlobal,finalQueryGlobalEstadoPoliticasCliente);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=politicasclienteReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=politicasclienteReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=politicasclienteReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalTransporte.equals("NONE")) {
				this.transportesForeignKey=politicasclienteReturnGeneral.gettransportesForeignKey();
			}

			if(!finalQueryGlobalLineaNegocio.equals("NONE")) {
				this.lineanegociosForeignKey=politicasclienteReturnGeneral.getlineanegociosForeignKey();
			}

			if(!finalQueryGlobalBanco.equals("NONE")) {
				this.bancosForeignKey=politicasclienteReturnGeneral.getbancosForeignKey();
			}

			if(!finalQueryGlobalTipoCuentaBancoGlobal.equals("NONE")) {
				this.tipocuentabancoglobalsForeignKey=politicasclienteReturnGeneral.gettipocuentabancoglobalsForeignKey();
			}

			if(!finalQueryGlobalEstadoPoliticasCliente.equals("NONE")) {
				this.estadopoliticasclientesForeignKey=politicasclienteReturnGeneral.getestadopoliticasclientesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyPoliticasCliente()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyTransporte();
			this.addItemDefectoCombosForeignKeyLineaNegocio();
			this.addItemDefectoCombosForeignKeyBanco();
			this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
			this.addItemDefectoCombosForeignKeyEstadoPoliticasCliente();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {
			if(this.politicasclienteSessionBean==null) {
				this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransporte()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				Transporte transporte=new Transporte();
				TransporteConstantesFunciones.setTransporteDescripcion(transporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				transporte.setId(null);

				if(!TransporteConstantesFunciones.ExisteEnLista(this.transportesForeignKey,transporte,true)) {

					this.transportesForeignKey.add(0,transporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaNegocio()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionLineaNegocio()) {
				LineaNegocio lineanegocio=new LineaNegocio();
				LineaNegocioConstantesFunciones.setLineaNegocioDescripcion(lineanegocio,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineanegocio.setId(null);

				if(!LineaNegocioConstantesFunciones.ExisteEnLista(this.lineanegociosForeignKey,lineanegocio,true)) {

					this.lineanegociosForeignKey.add(0,lineanegocio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBanco()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				Banco banco=new Banco();
				BancoConstantesFunciones.setBancoDescripcion(banco,Constantes.SMENSAJE_ESCOJA_OPCION);
				banco.setId(null);

				if(!BancoConstantesFunciones.ExisteEnLista(this.bancosForeignKey,banco,true)) {

					this.bancosForeignKey.add(0,banco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				TipoCuentaBancoGlobal tipocuentabancoglobal=new TipoCuentaBancoGlobal();
				TipoCuentaBancoGlobalConstantesFunciones.setTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobal,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocuentabancoglobal.setId(null);

				if(!TipoCuentaBancoGlobalConstantesFunciones.ExisteEnLista(this.tipocuentabancoglobalsForeignKey,tipocuentabancoglobal,true)) {

					this.tipocuentabancoglobalsForeignKey.add(0,tipocuentabancoglobal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoPoliticasCliente()throws Exception {
		try {

			if(!this.politicasclienteSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPoliticasCliente()) {
				EstadoPoliticasCliente estadopoliticascliente=new EstadoPoliticasCliente();
				EstadoPoliticasClienteConstantesFunciones.setEstadoPoliticasClienteDescripcion(estadopoliticascliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadopoliticascliente.setId(null);

				if(!EstadoPoliticasClienteConstantesFunciones.ExisteEnLista(this.estadopoliticasclientesForeignKey,estadopoliticascliente,true)) {

					this.estadopoliticasclientesForeignKey.add(0,estadopoliticascliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyPoliticasCliente()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyPoliticasCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyPoliticasCliente()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
				this.politicascliente.setfecha_inicio(this.parametroGeneralUsuario.getfecha_sistema());
				this.politicascliente.setfecha_renovacion(this.parametroGeneralUsuario.getfecha_sistema());
				this.politicascliente.setfecha_fin(this.parametroGeneralUsuario.getfecha_sistema());
				this.politicascliente.setfecha_venci_sobregiro(this.parametroGeneralUsuario.getfecha_sistema());
				this.politicascliente.setfecha_solicitud(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyPoliticasCliente();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyPoliticasCliente(PoliticasCliente politicascliente)throws Exception {	
		try {
			
			this.setActualClienteForeignKey(politicascliente.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(politicascliente.getid_tipo_precio(),false,"Formulario");
			this.setActualTransporteForeignKey(politicascliente.getid_transporte(),false,"Formulario");
			this.setActualLineaNegocioForeignKey(politicascliente.getid_linea_negocio(),false,"Formulario");
			this.setActualBancoForeignKey(politicascliente.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(politicascliente.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualEstadoPoliticasClienteForeignKey(politicascliente.getid_estado_politicas_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyPoliticasCliente(PoliticasCliente politicascliente,String sTipoEvento)throws Exception {	
		try {
			
			

				if(politicascliente.getCliente()!=null && !sTipoEvento.equals("id_clientePoliticasCliente")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(politicascliente.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyPoliticasCliente()throws Exception {	
		try {
			
			this.setActualClienteForeignKey(this.politicasclienteConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.politicasclienteConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualTransporteForeignKey(this.politicasclienteConstantesFunciones.getid_transporte(),false,"Formulario");
			this.setActualLineaNegocioForeignKey(this.politicasclienteConstantesFunciones.getid_linea_negocio(),false,"Formulario");
			this.setActualBancoForeignKey(this.politicasclienteConstantesFunciones.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(this.politicasclienteConstantesFunciones.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualEstadoPoliticasClienteForeignKey(this.politicasclienteConstantesFunciones.getid_estado_politicas_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyPoliticasCliente()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyPoliticasCliente()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyPoliticasCliente()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroPoliticasCliente()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyPoliticasCliente()throws Exception {
		try {
			

			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameTransportesForeignKey("Todos");
			this.cargarCombosFrameLineaNegociosForeignKey("Todos");
			this.cargarCombosFrameBancosForeignKey("Todos");
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
			this.cargarCombosFrameEstadoPoliticasClientesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyPoliticasCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaNegociosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoPoliticasClientesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyPoliticasCliente()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_clientePoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
















	
	

	public PoliticasClienteBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public PoliticasClienteBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public PoliticasClienteBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.politicasclienteSessionBean=new PoliticasClienteSessionBean(); 
		this.politicasclienteConstantesFunciones=new PoliticasClienteConstantesFunciones(); 
		this.politicasclienteBean=new PoliticasCliente();//(this.politicasclienteConstantesFunciones); 		
		this.politicasclienteReturnGeneral=new PoliticasClienteParameterReturnGeneral(); 
		
		this.politicasclienteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.politicasclienteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public PoliticasClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public PoliticasClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public PoliticasClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessPoliticasCliente(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.politicasclienteConstantesFunciones=new PoliticasClienteConstantesFunciones(); 
			this.politicasclienteBean=new PoliticasCliente();//this.politicasclienteConstantesFunciones); 			
			this.politicasclienteReturnGeneral=new PoliticasClienteParameterReturnGeneral(); 
		
			PoliticasClienteBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Politicas Cliente Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.politicascliente=new PoliticasCliente();
			this.politicasclientes = new ArrayList<PoliticasCliente>();
			this.politicasclientesAux = new ArrayList<PoliticasCliente>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic=new PoliticasClienteLogic();
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			//this.politicasclienteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.politicasclienteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormPoliticasCliente);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPoliticasCliente);	
					}
					
					if(this.jInternalFrameImportacionPoliticasCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPoliticasCliente);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByPoliticasCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByPoliticasCliente);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormPoliticasCliente);
				this.jInternalFrameDetalleFormPoliticasCliente.setVisible(false);
				this.jInternalFrameDetalleFormPoliticasCliente.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPoliticasCliente);
					this.jInternalFrameReporteDinamicoPoliticasCliente.setVisible(false);
					this.jInternalFrameReporteDinamicoPoliticasCliente.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionPoliticasCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionPoliticasCliente);
					this.jInternalFrameImportacionPoliticasCliente.setVisible(false);
					this.jInternalFrameImportacionPoliticasCliente.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByPoliticasCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByPoliticasCliente);
					this.jInternalFrameOrderByPoliticasCliente.setVisible(false);
					this.jInternalFrameOrderByPoliticasCliente.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idPoliticasClienteActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=PoliticasClienteConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.politicasclienteReturnGeneral=new PoliticasClienteParameterReturnGeneral();
			
			this.politicasclienteParameterGeneral=new PoliticasClienteParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.politicasclienteLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(PoliticasClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PoliticasClienteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.politicasclienteSessionBean.getEsGuardarRelacionado(),this.politicasclienteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PoliticasClienteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.politicasclienteSessionBean.getEsGuardarRelacionado(),this.politicasclienteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaDuplicarPoliticasCliente=true;
			this.isVisibilidadCeldaCopiarPoliticasCliente=true;
			this.isVisibilidadCeldaVerFormPoliticasCliente=true;
			this.isVisibilidadCeldaOrdenPoliticasCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			
			
			this.isVisibilidadFK_IdBanco=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoPoliticasCliente=true;
			this.isVisibilidadFK_IdLineaNegocio=true;
			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdTransporte=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosPoliticasCliente();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioPoliticasCliente(false);
			
			this.setPermisosUsuarioPoliticasCliente();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.politicasclienteSessionBean.getEsGuardarRelacionado() 
				|| (this.politicasclienteSessionBean.getEsGuardarRelacionado() && this.politicasclienteSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioPoliticasClienteClasesRelacionadas();
			}
			
			if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioPoliticasClienteClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosPoliticasCliente();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualPoliticasCliente();
			}
			
			if(!this.isPermisoBusquedaPoliticasCliente) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioPoliticasCliente,this.isPermisoPaginacionMedioPoliticasCliente,this.isPermisoPaginacionTodoPoliticasCliente);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(PoliticasClienteConstantesFunciones.getTiposSeleccionarPoliticasCliente());
				
				this.tiposColumnasSelect=PoliticasClienteConstantesFunciones.getTiposSeleccionarPoliticasCliente(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioPoliticasCliente();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioPoliticasCliente(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioPoliticasCliente(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesPoliticasCliente() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.clienteLogic=new ClienteLogic();
			this.empresaLogic=new EmpresaLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.transporteLogic=new TransporteLogic();
			this.lineanegocioLogic=new LineaNegocioLogic();
			this.bancoLogic=new BancoLogic();
			this.tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();
			this.estadopoliticasclienteLogic=new EstadoPoliticasClienteLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				politicasclienteImplementable= (PoliticasClienteImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PoliticasClienteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				politicasclienteImplementableHome= (PoliticasClienteImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PoliticasClienteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.politicasclientes= new ArrayList<PoliticasCliente>();
			this.politicasclientesEliminados= new ArrayList<PoliticasCliente>();
						
			this.isEsNuevoPoliticasCliente=false;
			this.esParaAccionDesdeFormularioPoliticasCliente=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.transportesForeignKey=new ArrayList<Transporte>() ;
			this.lineanegociosForeignKey=new ArrayList<LineaNegocio>() ;
			this.bancosForeignKey=new ArrayList<Banco>() ;
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>() ;
			this.estadopoliticasclientesForeignKey=new ArrayList<EstadoPoliticasCliente>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyPoliticasCliente(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroPoliticasCliente();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			PoliticasClienteBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=PoliticasClienteConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesPoliticasCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingPoliticasCliente(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioPoliticasCliente();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioPoliticasCliente();
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasPoliticasCliente.getTabCount(); i++) {
					this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessPoliticasCliente(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga PoliticasCliente: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectPoliticasCliente() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesPoliticasCliente")) {
				iIndex=this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessPoliticasCliente();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyPoliticasCliente(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyPoliticasCliente(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyPoliticasCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyPoliticasClienteListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyPoliticasCliente();
		
		this.cargarCombosFrameForeignKeyPoliticasCliente();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyPoliticasCliente();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyPoliticasCliente();
		}
	}
	
	

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransporte(this.transportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaNegocio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaNegocioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaNegocio();
				this.cargarCombosFrameLineaNegociosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaNegocio(this.lineanegociosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBanco(this.bancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCuentaBancoGlobal(this.tipocuentabancoglobalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoPoliticasCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoPoliticasClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoPoliticasCliente();
				this.cargarCombosFrameEstadoPoliticasClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoPoliticasCliente(this.estadopoliticasclientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoPoliticasClienteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			
			if(jTableDatosPoliticasCliente.getRowCount()>=1) {
				jTableDatosPoliticasCliente.removeRowSelectionInterval(0, jTableDatosPoliticasCliente.getRowCount()-1);						
			}
			
			this.isEsNuevoPoliticasCliente=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoPoliticasCliente(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesPoliticasCliente(true);			
			//this.politicascliente=new PoliticasCliente();
			//this.politicascliente.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPoliticasCliente(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPoliticasCliente() ;
			
			if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePoliticasCliente(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.politicascliente);	
			this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);				
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar PoliticasCliente: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarPoliticasClienteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosPoliticasCliente.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosPoliticasCliente.getSelectedRows().length;			
			}
			
			politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoPoliticasCliente--;			
				//PoliticasCliente politicasclienteAux= new PoliticasCliente();			
				//politicasclienteAux.setId(this.iIdNuevoPoliticasCliente);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//PoliticasCliente politicasclienteOrigen=new PoliticasCliente();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(PoliticasCliente politicasclienteOrigen : politicasclientesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							politicasclienteOrigen =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							politicasclienteOrigen =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaPoliticasCliente();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.politicascliente.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosPoliticasCliente(politicasclienteOrigen,this.politicascliente,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.politicasclienteLogic.getPoliticasClientes().add(this.politicasclienteAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.politicasclientes.add(this.politicasclienteAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
				
				this.jTableDatosPoliticasCliente.setRowSelectionInterval(this.getIndiceNuevoPoliticasCliente(), this.getIndiceNuevoPoliticasCliente());
				
				int iLastRow =  this.jTableDatosPoliticasCliente.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPoliticasCliente.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPoliticasCliente.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPoliticasCliente(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();									
		
			PoliticasCliente politicasclienteOrigen=new PoliticasCliente();
			PoliticasCliente politicasclienteDestino=new PoliticasCliente();
				
			politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosPoliticasCliente.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || politicasclientesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosPoliticasCliente.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteOrigen =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						politicasclienteOrigen =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						politicasclienteDestino =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						politicasclienteDestino =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				politicasclienteOrigen =politicasclientesSeleccionados.get(0);
				politicasclienteDestino =politicasclientesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosPoliticasCliente(politicasclienteOrigen,politicasclienteDestino,true,false);
				
				politicasclienteDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(politicasclienteDestino,politicasclienteLogic.getPoliticasClientes());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(politicasclienteDestino,politicasclientes);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
				
				//this.jTableDatosPoliticasCliente.setRowSelectionInterval(this.getIndiceNuevoPoliticasCliente(), this.getIndiceNuevoPoliticasCliente());
				
				int iLastRow =  this.jTableDatosPoliticasCliente.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPoliticasCliente.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPoliticasCliente.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPoliticasCliente(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormPoliticasCliente.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesPoliticasCliente.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasPoliticasCliente.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesPoliticasCliente.setVisible(!isVisible);
			this.jPanelPaginacionPoliticasCliente.setVisible(!isVisible);
			this.jPanelAccionesPoliticasCliente.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFramePoliticasCliente();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoPoliticasCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionPoliticasCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByPoliticasCliente();
			
			this.abrirFrameOrderByPoliticasCliente();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByPoliticasCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetallePoliticasCliente(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormPoliticasCliente);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormPoliticasCliente.isMaximum()) {
					this.jInternalFrameDetalleFormPoliticasCliente.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormPoliticasCliente.setSize(this.jInternalFrameDetalleFormPoliticasCliente.iWidthFormulario,this.jInternalFrameDetalleFormPoliticasCliente.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormPoliticasCliente.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormPoliticasCliente.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormPoliticasCliente.isMaximum()) {
						this.jInternalFrameDetalleFormPoliticasCliente.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormPoliticasCliente.jContentPaneDetallePoliticasCliente.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormPoliticasCliente.jContentPaneDetallePoliticasCliente.getWidth(),PoliticasClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormPoliticasCliente.jContentPaneDetallePoliticasCliente.getWidth(),PoliticasClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormPoliticasCliente.jContentPaneDetallePoliticasCliente.getWidth(),PoliticasClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormPoliticasCliente.setVisible(true);
	        this.jInternalFrameDetalleFormPoliticasCliente.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByPoliticasCliente() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByPoliticasCliente==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByPoliticasCliente=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPoliticasCliente,false,this);
				} else {
					this.jInternalFrameOrderByPoliticasCliente=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPoliticasCliente,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByPoliticasCliente);
				this.jInternalFrameOrderByPoliticasCliente.setVisible(false);
				this.jInternalFrameOrderByPoliticasCliente.setSelected(false);
				
				this.jInternalFrameOrderByPoliticasCliente.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPoliticasCliente"));
				
				this.inicializarActualizarBindingTablaOrderByPoliticasCliente();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionPoliticasCliente() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionPoliticasCliente==null) {
				
				this.jInternalFrameImportacionPoliticasCliente=new ImportacionJInternalFrame(PoliticasClienteConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPoliticasCliente);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionPoliticasCliente);
				this.jInternalFrameImportacionPoliticasCliente.setVisible(false);
				this.jInternalFrameImportacionPoliticasCliente.setSelected(false);


				this.jInternalFrameImportacionPoliticasCliente.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPoliticasCliente"));
				this.jInternalFrameImportacionPoliticasCliente.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPoliticasCliente"));
				this.jInternalFrameImportacionPoliticasCliente.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPoliticasCliente"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoPoliticasCliente() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoPoliticasCliente==null) {
				this.jInternalFrameReporteDinamicoPoliticasCliente=new ReporteDinamicoJInternalFrame(PoliticasClienteConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPoliticasCliente);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPoliticasCliente);
				this.jInternalFrameReporteDinamicoPoliticasCliente.setVisible(false);
				this.jInternalFrameReporteDinamicoPoliticasCliente.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPoliticasCliente"));
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPoliticasCliente"));
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPoliticasCliente"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPoliticasCliente();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetallePoliticasCliente() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormPoliticasCliente);
			
	       	this.jInternalFrameDetalleFormPoliticasCliente.setVisible(false);
	        this.jInternalFrameDetalleFormPoliticasCliente.setSelected(false);
			
			//this.jInternalFrameDetalleFormPoliticasCliente.dispose();
			//this.jInternalFrameDetalleFormPoliticasCliente=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoPoliticasCliente() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoPoliticasCliente.setVisible(true);
	        this.jInternalFrameReporteDinamicoPoliticasCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionPoliticasCliente() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionPoliticasCliente.setVisible(true);
	        this.jInternalFrameImportacionPoliticasCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByPoliticasCliente() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByPoliticasCliente.setVisible(true);
	        this.jInternalFrameOrderByPoliticasCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByPoliticasCliente() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByPoliticasCliente.setVisible(false);
	        this.jInternalFrameOrderByPoliticasCliente.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoPoliticasCliente() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoPoliticasCliente.setVisible(false);
	        this.jInternalFrameReporteDinamicoPoliticasCliente.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionPoliticasCliente() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionPoliticasCliente.setVisible(false);
	        this.jInternalFrameImportacionPoliticasCliente.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarPoliticasCliente(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarPoliticasCliente(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesPoliticasCliente(true);
			//this.isEsNuevoPoliticasCliente=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesPoliticasCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPoliticasCliente(false) ;
			
			if(politicasclienteSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePoliticasCliente(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPoliticasCliente(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaPoliticasClienteActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarPoliticasCliente(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesPoliticasCliente(true);
			//this.isEsNuevoPoliticasCliente=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.politicascliente.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesPoliticasCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesPoliticasCliente(false) ;
			
			if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePoliticasCliente(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPoliticasCliente(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.politicasclienteConstantesFunciones.cargarid_clientePoliticasCliente) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPoliticasCliente(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_ID));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransporte(List<Transporte> transportesForeignKey)throws Exception{
		TableColumn tableColumnTransporte=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE));
		TableCellEditor tableCellEditorTransporte =tableColumnTransporte.getCellEditor();

		TransporteTableCell transporteTableCellFk=(TransporteTableCell)tableCellEditorTransporte;

		if(transporteTableCellFk!=null) {
			transporteTableCellFk.settransportesForeignKey(transportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transporteTableCellFk.setRowActual(intSelectedRow);
			//transporteTableCellFk.settransportesForeignKeyActual(transportesForeignKey);
		//}


		if(transporteTableCellFk!=null) {
			transporteTableCellFk.RecargarTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaNegocio(List<LineaNegocio> lineanegociosForeignKey)throws Exception{
		TableColumn tableColumnLineaNegocio=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO));
		TableCellEditor tableCellEditorLineaNegocio =tableColumnLineaNegocio.getCellEditor();

		LineaNegocioTableCell lineanegocioTableCellFk=(LineaNegocioTableCell)tableCellEditorLineaNegocio;

		if(lineanegocioTableCellFk!=null) {
			lineanegocioTableCellFk.setlineanegociosForeignKey(lineanegociosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineanegocioTableCellFk.setRowActual(intSelectedRow);
			//lineanegocioTableCellFk.setlineanegociosForeignKeyActual(lineanegociosForeignKey);
		//}


		if(lineanegocioTableCellFk!=null) {
			lineanegocioTableCellFk.RecargarLineaNegociosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBanco(List<Banco> bancosForeignKey)throws Exception{
		TableColumn tableColumnBanco=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDBANCO));
		TableCellEditor tableCellEditorBanco =tableColumnBanco.getCellEditor();

		BancoTableCell bancoTableCellFk=(BancoTableCell)tableCellEditorBanco;

		if(bancoTableCellFk!=null) {
			bancoTableCellFk.setbancosForeignKey(bancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bancoTableCellFk.setRowActual(intSelectedRow);
			//bancoTableCellFk.setbancosForeignKeyActual(bancosForeignKey);
		//}


		if(bancoTableCellFk!=null) {
			bancoTableCellFk.RecargarBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCuentaBancoGlobal(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey)throws Exception{
		TableColumn tableColumnTipoCuentaBancoGlobal=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));
		TableCellEditor tableCellEditorTipoCuentaBancoGlobal =tableColumnTipoCuentaBancoGlobal.getCellEditor();

		TipoCuentaBancoGlobalTableCell tipocuentabancoglobalTableCellFk=(TipoCuentaBancoGlobalTableCell)tableCellEditorTipoCuentaBancoGlobal;

		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKey(tipocuentabancoglobalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocuentabancoglobalTableCellFk.setRowActual(intSelectedRow);
			//tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKeyActual(tipocuentabancoglobalsForeignKey);
		//}


		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.RecargarTipoCuentaBancoGlobalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoPoliticasCliente(List<EstadoPoliticasCliente> estadopoliticasclientesForeignKey)throws Exception{
		TableColumn tableColumnEstadoPoliticasCliente=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE));
		TableCellEditor tableCellEditorEstadoPoliticasCliente =tableColumnEstadoPoliticasCliente.getCellEditor();

		EstadoPoliticasClienteTableCell estadopoliticasclienteTableCellFk=(EstadoPoliticasClienteTableCell)tableCellEditorEstadoPoliticasCliente;

		if(estadopoliticasclienteTableCellFk!=null) {
			estadopoliticasclienteTableCellFk.setestadopoliticasclientesForeignKey(estadopoliticasclientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadopoliticasclienteTableCellFk.setRowActual(intSelectedRow);
			//estadopoliticasclienteTableCellFk.setestadopoliticasclientesForeignKeyActual(estadopoliticasclientesForeignKey);
		//}


		if(estadopoliticasclienteTableCellFk!=null) {
			estadopoliticasclienteTableCellFk.RecargarEstadoPoliticasClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesPoliticasCliente(false);
			
			//if(!this.isEsNuevoPoliticasCliente) {								
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				
				//OTRA VEZ SE EJECUTA ESTO
				//PARA RELACION DE UNO A UNO
				if(this.isEsNuevoPoliticasCliente) {
					this.politicascliente.setId(this.id_clienteFK_IdCliente);
				}
			}
			
			if(this.permiteMantenimiento(this.politicascliente)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoPoliticasCliente=true;
					this.inicializarActualizarBindingTablaPoliticasCliente(false);
					this.isEsNuevoPoliticasCliente=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoPoliticasCliente=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoPoliticasCliente=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPoliticasCliente(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPoliticasCliente(false);
				
				this.habilitarDeshabilitarControlesPoliticasCliente(false);
			
												
				
				if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetallePoliticasCliente();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoPoliticasClienteActionPerformed(evt,politicasclienteSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualPoliticasCliente(this.politicascliente,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,politicasclienteSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.politicascliente.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				this.politicascliente.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				this.politicascliente.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.politicascliente)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((PoliticasClienteModel) this.jTableDatosPoliticasCliente.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoPoliticasCliente=true;
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
				this.isEsNuevoPoliticasCliente=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPoliticasCliente(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPoliticasCliente(false);
				
				this.habilitarDeshabilitarControlesPoliticasCliente(false);
				
				
				
				if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetallePoliticasCliente();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosPoliticasCliente.getRowCount()>=1) {
				jTableDatosPoliticasCliente.removeRowSelectionInterval(0, jTableDatosPoliticasCliente.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesPoliticasCliente(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaPoliticasCliente(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPoliticasCliente(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPoliticasCliente(false) ;
			
			this.isEsNuevoPoliticasCliente=false;
			
			if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetallePoliticasCliente();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingPoliticasCliente(false);
				
				//SI ES MANUAL
				if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualPoliticasCliente();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoPoliticasCliente--;			
			//PoliticasCliente politicasclienteAux= new PoliticasCliente();			
			//politicasclienteAux.setId(this.iIdNuevoPoliticasCliente);
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaPoliticasCliente();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
			
			this.politicascliente.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.politicasclienteLogic.getPoliticasClientes().add(this.politicasclienteAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.politicasclientes.add(this.politicasclienteAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaPoliticasCliente(false);
			
			this.jTableDatosPoliticasCliente.setRowSelectionInterval(this.getIndiceNuevoPoliticasCliente(), this.getIndiceNuevoPoliticasCliente());
			
			int iLastRow =  this.jTableDatosPoliticasCliente.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosPoliticasCliente.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosPoliticasCliente.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPoliticasCliente(false);
			
			//SI ES MANUAL
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPoliticasCliente();
			}
			
			//this.abrirFrameTreePoliticasCliente();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Politicas ClienteS ?", "MANTENIMIENTO DE Politicas Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionPoliticasCliente.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralPoliticasCliente();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.politicasclienteReturnGeneral=politicasclienteLogic.procesarImportacionPoliticasClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.politicasclienteParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarPoliticasClienteReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionPoliticasCliente.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionPoliticasCliente.setFileImportacion(this.jInternalFrameImportacionPoliticasCliente.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionPoliticasCliente.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionPoliticasCliente.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionPoliticasCliente.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionPoliticasCliente.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		

		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("PoliticasClienteBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"PoliticasClienteBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_miteCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_miteCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_miteCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_miteCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaInicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaInicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaInicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaInicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaRenovacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaRenovacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaRenovacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaRenovacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAFIN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_asNetoPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_asNetoPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_asNetoPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_asNetoPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_asGracia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_asGracia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_asGracia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_asGracia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_CUPO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_po_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_po_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_po_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_po_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoGeneral_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoGeneral_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoGeneral_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoGeneral_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoProntoPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoProntoPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoProntoPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoProntoPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nListaPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nListaPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nListaPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nListaPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nImpuestos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nImpuestos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nImpuestos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nImpuestos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tivarMontoFacturacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tivarMontoFacturacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tivarMontoFacturacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tivarMontoFacturacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorSobregiro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorSobregiro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorSobregiro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorSobregiro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVenciSobregiro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVenciSobregiro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVenciSobregiro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVenciSobregiro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorSolicitado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorSolicitado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorSolicitado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorSolicitado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorAprobado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorAprobado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorAprobado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorAprobado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_LineaNegocio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_LineaNegocio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_LineaNegocio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_LineaNegocio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaSolicitud_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaSolicitud_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaSolicitud_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaSolicitud_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_OBSEVACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sevacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sevacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sevacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sevacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_WEB:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_b_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_b_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_b_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_b_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sillaPostal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sillaPostal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sillaPostal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sillaPostal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rmaEnvio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rmaEnvio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rmaEnvio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rmaEnvio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCuentaBancoGlobal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCuentaBancoGlobal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCuentaBancoGlobal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCuentaBancoGlobal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCuenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCuenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCuenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCuenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoPoliticasCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoPoliticasCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoPoliticasCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoPoliticasCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO:
					sNombreCampoCategoria="limite_credito";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO:
					sNombreCampoCategoria="fecha_inicio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION:
					sNombreCampoCategoria="fecha_renovacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAFIN:
					sNombreCampoCategoria="fecha_fin";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO:
					sNombreCampoCategoria="dias_neto_pago";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA:
					sNombreCampoCategoria="dias_gracia";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CUPO:
					sNombreCampoCategoria="cupo";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL:
					sNombreCampoCategoria="descuento_general";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO:
					sNombreCampoCategoria="descuento_pronto_pago";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO:
					sNombreCampoCategoria="con_lista_precio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS:
					sNombreCampoCategoria="con_impuestos";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION:
					sNombreCampoCategoria="activar_monto_facturacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO:
					sNombreCampoCategoria="valor_sobregiro";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO:
					sNombreCampoCategoria="fecha_venci_sobregiro";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoria="id_transporte";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO:
					sNombreCampoCategoria="valor_solicitado";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO:
					sNombreCampoCategoria="valor_aprobado";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO:
					sNombreCampoCategoria="id_linea_negocio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD:
					sNombreCampoCategoria="fecha_solicitud";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_OBSEVACION:
					sNombreCampoCategoria="obsevacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_WEB:
					sNombreCampoCategoria="web";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL:
					sNombreCampoCategoria="casilla_postal";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO:
					sNombreCampoCategoria="forma_envio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoria="id_banco";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoria="id_tipo_cuenta_banco_global";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoria="numero_cuenta";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE:
					sNombreCampoCategoria="id_estado_politicas_cliente";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO:
					sNombreCampoCategoriaValor="limite_credito";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO:
					sNombreCampoCategoriaValor="fecha_inicio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION:
					sNombreCampoCategoriaValor="fecha_renovacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAFIN:
					sNombreCampoCategoriaValor="fecha_fin";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO:
					sNombreCampoCategoriaValor="dias_neto_pago";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA:
					sNombreCampoCategoriaValor="dias_gracia";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CUPO:
					sNombreCampoCategoriaValor="cupo";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL:
					sNombreCampoCategoriaValor="descuento_general";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO:
					sNombreCampoCategoriaValor="descuento_pronto_pago";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO:
					sNombreCampoCategoriaValor="con_lista_precio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS:
					sNombreCampoCategoriaValor="con_impuestos";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION:
					sNombreCampoCategoriaValor="activar_monto_facturacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO:
					sNombreCampoCategoriaValor="valor_sobregiro";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO:
					sNombreCampoCategoriaValor="fecha_venci_sobregiro";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoriaValor="id_transporte";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO:
					sNombreCampoCategoriaValor="valor_solicitado";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO:
					sNombreCampoCategoriaValor="valor_aprobado";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO:
					sNombreCampoCategoriaValor="id_linea_negocio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD:
					sNombreCampoCategoriaValor="fecha_solicitud";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_OBSEVACION:
					sNombreCampoCategoriaValor="obsevacion";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_WEB:
					sNombreCampoCategoriaValor="web";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL:
					sNombreCampoCategoriaValor="casilla_postal";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO:
					sNombreCampoCategoriaValor="forma_envio";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoriaValor="id_banco";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoriaValor="id_tipo_cuenta_banco_global";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoriaValor="numero_cuenta";
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE:
					sNombreCampoCategoriaValor="id_estado_politicas_cliente";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Limite Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"limite_credito");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Inicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_inicio");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Renovacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_renovacion");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_fin");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dias Neto Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"dias_neto_pago");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dias Gracia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"dias_gracia");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CUPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cupo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cupo");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento General",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_general");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Pronto Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_pronto_pago");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Lista Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_lista_precio");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Impuestos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_impuestos");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Activar Monto Facturacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"activar_monto_facturacion");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Sobregiro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_sobregiro");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Venci Sobregiro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_venci_sobregiro");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transporte");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Solicitado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_solicitado");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Aprobado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_aprobado");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Linea Negocio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_linea_negocio");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Solicitud",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_solicitud");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_OBSEVACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Obsevacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"obsevacion");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_WEB:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Web",sNombreCampoCategoria,sNombreCampoCategoriaValor,"web");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Casilla Postal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"casilla_postal");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Forma Envio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"forma_envio");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_banco");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cuenta Banco Global",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cuenta_banco_global");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cuenta");
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Politicas Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_politicas_cliente");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("PoliticasClientes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getlimite_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getfecha_inicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getfecha_renovacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getfecha_fin());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getdias_neto_pago());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getdias_gracia());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CUPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CUPO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getcupo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getdescuento_general());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getdescuento_pronto_pago());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getcon_lista_precio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getcon_impuestos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getactivar_monto_facturacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getvalor_sobregiro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getfecha_venci_sobregiro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.gettransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getvalor_solicitado());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getvalor_aprobado());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getlineanegocio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getfecha_solicitud());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_OBSEVACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getobsevacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_WEB:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_WEB);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getweb());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getcasilla_postal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getforma_envio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDBANCO);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getbanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.gettipocuentabancoglobal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getnumero_cuenta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE);
					iRow++;

					for(PoliticasCliente politicascliente:politicasclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(politicascliente.getestadopoliticascliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelPoliticasCliente(row);				
			//	iRow++;
			//}				
			
			//for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelPoliticasCliente(politicasclienteAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPoliticasCliente(false);
			
			//SI ES MANUAL
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPoliticasCliente();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPoliticasCliente(false);
			
			//SI ES MANUAL
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPoliticasCliente();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPoliticasCliente(false);
			
			//SI ES MANUAL
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPoliticasCliente();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaPoliticasCliente() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosPoliticasCliente.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosPoliticasCliente.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosPoliticasCliente.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosPoliticasCliente.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosPoliticasCliente.setMinimumSize(dimensionMinimum);
		this.jTableDatosPoliticasCliente.setMaximumSize(dimensionMaximum);
		this.jTableDatosPoliticasCliente.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingPoliticasCliente(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingPoliticasCliente(esInicializar,true);
	}
	
	public void inicializarActualizarBindingPoliticasCliente(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaPoliticasCliente(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesPoliticasCliente(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasPoliticasCliente(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPoliticasCliente(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesPoliticasCliente(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualPoliticasCliente() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaPoliticasCliente();
		
		this.inicializarActualizarBindingBotonesManualPoliticasCliente(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualPoliticasCliente();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPoliticasCliente() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualPoliticasCliente(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualPoliticasCliente(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosPoliticasCliente.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosPoliticasCliente.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReportePoliticasCliente.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionNuevoPoliticasCliente.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionSinCerrarPoliticasCliente.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionSinMensajePoliticasCliente.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosPoliticasCliente.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosPoliticasCliente.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReportePoliticasCliente.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
				this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionNuevoPoliticasCliente.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionSinCerrarPoliticasCliente.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxPostAccionSinMensajePoliticasCliente.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionPoliticasCliente.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionPoliticasCliente.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesPoliticasCliente.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesPoliticasCliente.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesPoliticasCliente.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarPoliticasCliente.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesPoliticasCliente.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesPoliticasCliente.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralPoliticasCliente.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPoliticasCliente(Boolean esInicializar) throws Exception {
		try	{	
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualPoliticasCliente(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesPoliticasCliente() throws Exception {
		try	{
			if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualPoliticasCliente();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePoliticasCliente() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualPoliticasCliente() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesPoliticasCliente.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesPoliticasCliente.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesPoliticasCliente.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionPoliticasCliente.addItem(reporte);
			}
			
			
			if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionPoliticasCliente.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionPoliticasCliente.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesPoliticasCliente.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesPoliticasCliente.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarPoliticasCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarPoliticasCliente.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarPoliticasCliente.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPoliticasCliente();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPoliticasCliente() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
				
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=PoliticasClienteConstantesFunciones.getTiposSeleccionarPoliticasCliente(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=PoliticasClienteConstantesFunciones.getTiposSeleccionarPoliticasCliente(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=PoliticasClienteConstantesFunciones.getTiposSeleccionarPoliticasCliente(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoPoliticasCliente.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualPoliticasCliente()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.getSelectedItem()!=null){this.id_bancoFK_IdBanco=((Banco)this.jComboBoxid_bancoFK_IdBancoPoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClientePoliticasCliente.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClientePoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.getSelectedItem()!=null){this.id_estado_politicas_clienteFK_IdEstadoPoliticasCliente=((EstadoPoliticasCliente)this.jComboBoxid_estado_politicas_clienteFK_IdEstadoPoliticasClientePoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.getSelectedItem()!=null){this.id_linea_negocioFK_IdLineaNegocio=((LineaNegocio)this.jComboBoxid_linea_negocioFK_IdLineaNegocioPoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.getSelectedItem()!=null){this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=((TipoCuentaBancoGlobal)this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalPoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.getSelectedItem()!=null){this.id_tipo_precioFK_IdTipoPrecio=((TipoPrecio)this.jComboBoxid_tipo_precioFK_IdTipoPrecioPoliticasCliente.getSelectedItem()).getId();}
		if(this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.getSelectedItem()!=null){this.id_transporteFK_IdTransporte=((Transporte)this.jComboBoxid_transporteFK_IdTransportePoliticasCliente.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasPoliticasCliente(Boolean esInicializar) throws Exception {				
		if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualPoliticasCliente();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaPoliticasCliente() throws Exception {
		this.inicializarActualizarBindingTablaPoliticasCliente(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByPoliticasCliente() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosPoliticasClienteOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasClienteOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaPoliticasCliente(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=politicasclienteLogic.getPoliticasClientes().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=politicasclientes.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosPoliticasCliente.setModel(new PoliticasClienteModel(this.politicasclienteLogic.getPoliticasClientes(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosPoliticasCliente.setModel(new PoliticasClienteModel(this.politicasclientes,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByPoliticasCliente!=null && this.jInternalFrameOrderByPoliticasCliente.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByPoliticasCliente();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+PoliticasClienteConstantesFunciones.SCLASSWEBTITULO,politicasclienteConstantesFunciones.resaltarSeleccionarPoliticasCliente,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+PoliticasClienteConstantesFunciones.SCLASSWEBTITULO,politicasclienteConstantesFunciones.resaltarSeleccionarPoliticasCliente,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_ID));

		if(this.politicasclienteConstantesFunciones.mostrarid_clientePoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_ID,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarid_clientePoliticasCliente,this.politicasclienteConstantesFunciones.activarid_clientePoliticasCliente,iSizeTabla,this,true,"id_clientePoliticasCliente","CON_BUSQUEDA"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarid_clientePoliticasCliente,this.politicasclienteConstantesFunciones.activarid_clientePoliticasCliente,this,true,"id_clientePoliticasCliente","CON_BUSQUEDA",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA));

		if(this.politicasclienteConstantesFunciones.mostrarid_empresaPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.politicasclienteConstantesFunciones.resaltarid_empresaPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_empresaPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.politicasclienteConstantesFunciones.resaltarid_empresaPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_empresaPoliticasCliente,false,"id_empresaPoliticasCliente","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO));

		if(this.politicasclienteConstantesFunciones.mostrarlimite_creditoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarlimite_creditoPoliticasCliente,this.politicasclienteConstantesFunciones.activarlimite_creditoPoliticasCliente,iSizeTabla,this,true,"limite_creditoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarlimite_creditoPoliticasCliente,this.politicasclienteConstantesFunciones.activarlimite_creditoPoliticasCliente,this,true,"limite_creditoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO));

		if(this.politicasclienteConstantesFunciones.mostrarfecha_inicioPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_inicioPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_inicioPoliticasCliente,iSizeTabla,this,true,"fecha_inicioPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_inicioPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_inicioPoliticasCliente,this,true,"fecha_inicioPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION));

		if(this.politicasclienteConstantesFunciones.mostrarfecha_renovacionPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_renovacionPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_renovacionPoliticasCliente,iSizeTabla,this,true,"fecha_renovacionPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_renovacionPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_renovacionPoliticasCliente,this,true,"fecha_renovacionPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FECHAFIN));

		if(this.politicasclienteConstantesFunciones.mostrarfecha_finPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FECHAFIN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_finPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_finPoliticasCliente,iSizeTabla,this,true,"fecha_finPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_finPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_finPoliticasCliente,this,true,"fecha_finPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO));

		if(this.politicasclienteConstantesFunciones.mostrardias_neto_pagoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltardias_neto_pagoPoliticasCliente,this.politicasclienteConstantesFunciones.activardias_neto_pagoPoliticasCliente,iSizeTabla,this,true,"dias_neto_pagoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltardias_neto_pagoPoliticasCliente,this.politicasclienteConstantesFunciones.activardias_neto_pagoPoliticasCliente,this,true,"dias_neto_pagoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA));

		if(this.politicasclienteConstantesFunciones.mostrardias_graciaPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltardias_graciaPoliticasCliente,this.politicasclienteConstantesFunciones.activardias_graciaPoliticasCliente,iSizeTabla,this,true,"dias_graciaPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltardias_graciaPoliticasCliente,this.politicasclienteConstantesFunciones.activardias_graciaPoliticasCliente,this,true,"dias_graciaPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_CUPO));

		if(this.politicasclienteConstantesFunciones.mostrarcupoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_CUPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarcupoPoliticasCliente,this.politicasclienteConstantesFunciones.activarcupoPoliticasCliente,iSizeTabla,this,true,"cupoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarcupoPoliticasCliente,this.politicasclienteConstantesFunciones.activarcupoPoliticasCliente,this,true,"cupoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL));

		if(this.politicasclienteConstantesFunciones.mostrardescuento_generalPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltardescuento_generalPoliticasCliente,this.politicasclienteConstantesFunciones.activardescuento_generalPoliticasCliente,iSizeTabla,this,true,"descuento_generalPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltardescuento_generalPoliticasCliente,this.politicasclienteConstantesFunciones.activardescuento_generalPoliticasCliente,this,true,"descuento_generalPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO));

		if(this.politicasclienteConstantesFunciones.mostrardescuento_pronto_pagoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltardescuento_pronto_pagoPoliticasCliente,this.politicasclienteConstantesFunciones.activardescuento_pronto_pagoPoliticasCliente,iSizeTabla,this,true,"descuento_pronto_pagoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltardescuento_pronto_pagoPoliticasCliente,this.politicasclienteConstantesFunciones.activardescuento_pronto_pagoPoliticasCliente,this,true,"descuento_pronto_pagoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.politicasclienteConstantesFunciones.mostrarid_tipo_precioPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_tipo_precioPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_tipo_precioPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_tipo_precioPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_tipo_precioPoliticasCliente,true,"id_tipo_precioPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO));

		if(this.politicasclienteConstantesFunciones.mostrarcon_lista_precioPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.politicasclienteConstantesFunciones.resaltarcon_lista_precioPoliticasCliente,this.politicasclienteConstantesFunciones.activarcon_lista_precioPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.politicasclienteConstantesFunciones.resaltarcon_lista_precioPoliticasCliente,this.politicasclienteConstantesFunciones.activarcon_lista_precioPoliticasCliente,this,true,"con_lista_precioPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS));

		if(this.politicasclienteConstantesFunciones.mostrarcon_impuestosPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.politicasclienteConstantesFunciones.resaltarcon_impuestosPoliticasCliente,this.politicasclienteConstantesFunciones.activarcon_impuestosPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.politicasclienteConstantesFunciones.resaltarcon_impuestosPoliticasCliente,this.politicasclienteConstantesFunciones.activarcon_impuestosPoliticasCliente,this,true,"con_impuestosPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION));

		if(this.politicasclienteConstantesFunciones.mostraractivar_monto_facturacionPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.politicasclienteConstantesFunciones.resaltaractivar_monto_facturacionPoliticasCliente,this.politicasclienteConstantesFunciones.activaractivar_monto_facturacionPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.politicasclienteConstantesFunciones.resaltaractivar_monto_facturacionPoliticasCliente,this.politicasclienteConstantesFunciones.activaractivar_monto_facturacionPoliticasCliente,this,true,"activar_monto_facturacionPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO));

		if(this.politicasclienteConstantesFunciones.mostrarvalor_sobregiroPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_sobregiroPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_sobregiroPoliticasCliente,iSizeTabla,this,true,"valor_sobregiroPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_sobregiroPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_sobregiroPoliticasCliente,this,true,"valor_sobregiroPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO));

		if(this.politicasclienteConstantesFunciones.mostrarfecha_venci_sobregiroPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_venci_sobregiroPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_venci_sobregiroPoliticasCliente,iSizeTabla,this,true,"fecha_venci_sobregiroPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_venci_sobregiroPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_venci_sobregiroPoliticasCliente,this,true,"fecha_venci_sobregiroPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE));

		if(this.politicasclienteConstantesFunciones.mostrarid_transportePoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransporteTableCell(this.transportesForeignKey,this.politicasclienteConstantesFunciones.resaltarid_transportePoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_transportePoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new TransporteTableCell(this.transportesForeignKey,this.politicasclienteConstantesFunciones.resaltarid_transportePoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_transportePoliticasCliente,true,"id_transportePoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO));

		if(this.politicasclienteConstantesFunciones.mostrarvalor_solicitadoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_solicitadoPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_solicitadoPoliticasCliente,iSizeTabla,this,true,"valor_solicitadoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_solicitadoPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_solicitadoPoliticasCliente,this,true,"valor_solicitadoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO));

		if(this.politicasclienteConstantesFunciones.mostrarvalor_aprobadoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_aprobadoPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_aprobadoPoliticasCliente,iSizeTabla,this,true,"valor_aprobadoPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarvalor_aprobadoPoliticasCliente,this.politicasclienteConstantesFunciones.activarvalor_aprobadoPoliticasCliente,this,true,"valor_aprobadoPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO));

		if(this.politicasclienteConstantesFunciones.mostrarid_linea_negocioPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new LineaNegocioTableCell(this.lineanegociosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_linea_negocioPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_linea_negocioPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new LineaNegocioTableCell(this.lineanegociosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_linea_negocioPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_linea_negocioPoliticasCliente,true,"id_linea_negocioPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD));

		if(this.politicasclienteConstantesFunciones.mostrarfecha_solicitudPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_solicitudPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_solicitudPoliticasCliente,iSizeTabla,this,true,"fecha_solicitudPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.politicasclienteConstantesFunciones.resaltarfecha_solicitudPoliticasCliente,this.politicasclienteConstantesFunciones.activarfecha_solicitudPoliticasCliente,this,true,"fecha_solicitudPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_OBSEVACION));

		if(this.politicasclienteConstantesFunciones.mostrarobsevacionPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_OBSEVACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.politicasclienteConstantesFunciones.resaltarobsevacionPoliticasCliente,this.politicasclienteConstantesFunciones.activarobsevacionPoliticasCliente,iSizeTabla,this,true,"obsevacionPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarobsevacionPoliticasCliente,this.politicasclienteConstantesFunciones.activarobsevacionPoliticasCliente,this,true,"obsevacionPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_WEB));

		if(this.politicasclienteConstantesFunciones.mostrarwebPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_WEB,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.politicasclienteConstantesFunciones.resaltarwebPoliticasCliente,this.politicasclienteConstantesFunciones.activarwebPoliticasCliente,iSizeTabla,this,true,"webPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarwebPoliticasCliente,this.politicasclienteConstantesFunciones.activarwebPoliticasCliente,this,true,"webPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL));

		if(this.politicasclienteConstantesFunciones.mostrarcasilla_postalPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.politicasclienteConstantesFunciones.resaltarcasilla_postalPoliticasCliente,this.politicasclienteConstantesFunciones.activarcasilla_postalPoliticasCliente,iSizeTabla,this,true,"casilla_postalPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarcasilla_postalPoliticasCliente,this.politicasclienteConstantesFunciones.activarcasilla_postalPoliticasCliente,this,true,"casilla_postalPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO));

		if(this.politicasclienteConstantesFunciones.mostrarforma_envioPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.politicasclienteConstantesFunciones.resaltarforma_envioPoliticasCliente,this.politicasclienteConstantesFunciones.activarforma_envioPoliticasCliente,iSizeTabla,this,true,"forma_envioPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarforma_envioPoliticasCliente,this.politicasclienteConstantesFunciones.activarforma_envioPoliticasCliente,this,true,"forma_envioPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDBANCO));

		if(this.politicasclienteConstantesFunciones.mostrarid_bancoPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BancoTableCell(this.bancosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_bancoPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_bancoPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new BancoTableCell(this.bancosForeignKey,this.politicasclienteConstantesFunciones.resaltarid_bancoPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_bancoPoliticasCliente,true,"id_bancoPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));

		if(this.politicasclienteConstantesFunciones.mostrarid_tipo_cuenta_banco_globalPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.politicasclienteConstantesFunciones.resaltarid_tipo_cuenta_banco_globalPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_tipo_cuenta_banco_globalPoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.politicasclienteConstantesFunciones.resaltarid_tipo_cuenta_banco_globalPoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_tipo_cuenta_banco_globalPoliticasCliente,true,"id_tipo_cuenta_banco_globalPoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA));

		if(this.politicasclienteConstantesFunciones.mostrarnumero_cuentaPoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.politicasclienteConstantesFunciones.resaltarnumero_cuentaPoliticasCliente,this.politicasclienteConstantesFunciones.activarnumero_cuentaPoliticasCliente,iSizeTabla,this,true,"numero_cuentaPoliticasCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.politicasclienteConstantesFunciones.resaltarnumero_cuentaPoliticasCliente,this.politicasclienteConstantesFunciones.activarnumero_cuentaPoliticasCliente,this,true,"numero_cuentaPoliticasCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE));

		if(this.politicasclienteConstantesFunciones.mostrarid_estado_politicas_clientePoliticasCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoPoliticasClienteTableCell(this.estadopoliticasclientesForeignKey,this.politicasclienteConstantesFunciones.resaltarid_estado_politicas_clientePoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_estado_politicas_clientePoliticasCliente,iSizeTabla));
			tableColumn.setCellEditor(new EstadoPoliticasClienteTableCell(this.estadopoliticasclientesForeignKey,this.politicasclienteConstantesFunciones.resaltarid_estado_politicas_clientePoliticasCliente,this,this.politicasclienteConstantesFunciones.activarid_estado_politicas_clientePoliticasCliente,true,"id_estado_politicas_clientePoliticasCliente","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PoliticasClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosPoliticasCliente.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosPoliticasCliente.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.politicasclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosPoliticasCliente.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosPoliticasCliente.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosPoliticasCliente.moveColumn(this.jTableDatosPoliticasCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosPoliticasCliente.moveColumn(this.jTableDatosPoliticasCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosPoliticasCliente.moveColumn(this.jTableDatosPoliticasCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosPoliticasCliente.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosPoliticasCliente.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosPoliticasCliente,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosPoliticasCliente.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosPoliticasCliente.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosPoliticasCliente.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosPoliticasCliente.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosPoliticasCliente.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosPoliticasCliente.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosPoliticasCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosPoliticasCliente();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoPoliticasCliente=false;
					
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
				if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormPoliticasCliente==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPoliticasCliente.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.politicascliente.getsType().equals("DUPLICADO")
				   || this.politicascliente.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoPoliticasCliente=true;
				
				} else {
					this.isEsNuevoPoliticasCliente=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					if(this.politicascliente.getId()>=0 && !this.politicascliente.getIsNew()) {						
						this.isEsNuevoPoliticasCliente=false;
						
					} else {
						this.isEsNuevoPoliticasCliente=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoPoliticasCliente(esRelaciones);						
				
				this.seleccionarPoliticasCliente(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.politicascliente.getId()<0) {
					this.isEsNuevoPoliticasCliente=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarPoliticasCliente(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarPoliticasCliente(evt,rowIndex);
				}	
				
				if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion PoliticasCliente: " + this.dDif); 
					}
				}								
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarPoliticasCliente(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.politicascliente)) {
					if(this.politicascliente.getId()>0) {
						this.politicascliente.setIsDeleted(true);
						
						this.politicasclientesEliminados.add(this.politicascliente);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.politicasclienteLogic.getPoliticasClientes().remove(this.politicascliente);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.politicasclientes.remove(this.politicascliente);				
					}
					
					
					((PoliticasClienteModel) this.jTableDatosPoliticasCliente.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaPoliticasCliente(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarPoliticasCliente(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoPoliticasCliente) {
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPoliticasCliente.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPoliticasCliente.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioPoliticasCliente(this.politicascliente);
				}
				
				//ARCHITECTURE
				try {
					

					//Cliente
					if(!this.politicasclienteConstantesFunciones.cargarid_clientePoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_clientePoliticasCliente) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.politicascliente.getid_cliente());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(politicascliente.getCliente()!=null) {
							this.clientesForeignKey.add(politicascliente.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.politicascliente.getid_cliente(),false,"Formulario");

					//Empresa
					if(!this.politicasclienteConstantesFunciones.cargarid_empresaPoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_empresaPoliticasCliente) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.politicascliente.getid_empresa());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(politicascliente.getEmpresa()!=null) {
							this.empresasForeignKey.add(politicascliente.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.politicascliente.getid_empresa(),false,"Formulario");

					//TipoPrecio
					if(!this.politicasclienteConstantesFunciones.cargarid_tipo_precioPoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_tipo_precioPoliticasCliente) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.politicascliente.getid_tipo_precio());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(politicascliente.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(politicascliente.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.politicascliente.getid_tipo_precio(),false,"Formulario");

					//Transporte
					if(!this.politicasclienteConstantesFunciones.cargarid_transportePoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_transportePoliticasCliente) {
						//this.cargarCombosTransportesForeignKeyLista(" where id="+this.politicascliente.getid_transporte());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.transportesForeignKey=new ArrayList<Transporte>();

						if(politicascliente.getTransporte()!=null) {
							this.transportesForeignKey.add(politicascliente.getTransporte());
						}

						this.addItemDefectoCombosForeignKeyTransporte();
						this.cargarCombosFrameTransportesForeignKey("Todos");
					}
					this.setActualTransporteForeignKey(this.politicascliente.getid_transporte(),false,"Formulario");

					//LineaNegocio
					if(!this.politicasclienteConstantesFunciones.cargarid_linea_negocioPoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_linea_negocioPoliticasCliente) {
						//this.cargarCombosLineaNegociosForeignKeyLista(" where id="+this.politicascliente.getid_linea_negocio());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.lineanegociosForeignKey=new ArrayList<LineaNegocio>();

						if(politicascliente.getLineaNegocio()!=null) {
							this.lineanegociosForeignKey.add(politicascliente.getLineaNegocio());
						}

						this.addItemDefectoCombosForeignKeyLineaNegocio();
						this.cargarCombosFrameLineaNegociosForeignKey("Todos");
					}
					this.setActualLineaNegocioForeignKey(this.politicascliente.getid_linea_negocio(),false,"Formulario");

					//Banco
					if(!this.politicasclienteConstantesFunciones.cargarid_bancoPoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_bancoPoliticasCliente) {
						//this.cargarCombosBancosForeignKeyLista(" where id="+this.politicascliente.getid_banco());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.bancosForeignKey=new ArrayList<Banco>();

						if(politicascliente.getBanco()!=null) {
							this.bancosForeignKey.add(politicascliente.getBanco());
						}

						this.addItemDefectoCombosForeignKeyBanco();
						this.cargarCombosFrameBancosForeignKey("Todos");
					}
					this.setActualBancoForeignKey(this.politicascliente.getid_banco(),false,"Formulario");

					//TipoCuentaBancoGlobal
					if(!this.politicasclienteConstantesFunciones.cargarid_tipo_cuenta_banco_globalPoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_tipo_cuenta_banco_globalPoliticasCliente) {
						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(" where id="+this.politicascliente.getid_tipo_cuenta_banco_global());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

						if(politicascliente.getTipoCuentaBancoGlobal()!=null) {
							this.tipocuentabancoglobalsForeignKey.add(politicascliente.getTipoCuentaBancoGlobal());
						}

						this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
						this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
					}
					this.setActualTipoCuentaBancoGlobalForeignKey(this.politicascliente.getid_tipo_cuenta_banco_global(),false,"Formulario");

					//EstadoPoliticasCliente
					if(!this.politicasclienteConstantesFunciones.cargarid_estado_politicas_clientePoliticasCliente || this.politicasclienteConstantesFunciones.event_dependid_estado_politicas_clientePoliticasCliente) {
						//this.cargarCombosEstadoPoliticasClientesForeignKeyLista(" where id="+this.politicascliente.getid_estado_politicas_cliente());
									//this.inicializarActualizarBindingPoliticasCliente(false,false);
						this.estadopoliticasclientesForeignKey=new ArrayList<EstadoPoliticasCliente>();

						if(politicascliente.getEstadoPoliticasCliente()!=null) {
							this.estadopoliticasclientesForeignKey.add(politicascliente.getEstadoPoliticasCliente());
						}

						this.addItemDefectoCombosForeignKeyEstadoPoliticasCliente();
						this.cargarCombosFrameEstadoPoliticasClientesForeignKey("Todos");
					}
					this.setActualEstadoPoliticasClienteForeignKey(this.politicascliente.getid_estado_politicas_cliente(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesPoliticasCliente("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesPoliticasCliente(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPoliticasCliente() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoPoliticasCliente(PoliticasCliente politicascliente) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoPoliticasCliente(politicascliente,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoPoliticasCliente(PoliticasCliente politicascliente,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioPoliticasCliente(politicascliente);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyPoliticasCliente(politicascliente,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyPoliticasCliente(politicascliente);
	}
	
	public void setVariablesObjetoActualToFormularioPoliticasCliente(PoliticasCliente politicascliente) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setText(politicascliente.getId().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setText(politicascliente.getlimite_credito().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setDate(politicascliente.getfecha_inicio());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setDate(politicascliente.getfecha_renovacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setDate(politicascliente.getfecha_fin());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setText(politicascliente.getdias_neto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setText(politicascliente.getdias_gracia().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setText(politicascliente.getcupo().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setText(politicascliente.getdescuento_general().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setText(politicascliente.getdescuento_pronto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setSelected(politicascliente.getcon_lista_precio());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setSelected(politicascliente.getcon_impuestos());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setSelected(politicascliente.getactivar_monto_facturacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setText(politicascliente.getvalor_sobregiro().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setDate(politicascliente.getfecha_venci_sobregiro());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setText(politicascliente.getvalor_solicitado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setText(politicascliente.getvalor_aprobado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setDate(politicascliente.getfecha_solicitud());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setText(politicascliente.getobsevacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setText(politicascliente.getweb());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setText(politicascliente.getcasilla_postal());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setText(politicascliente.getforma_envio());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setText(politicascliente.getnumero_cuenta());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,PoliticasCliente politicasclienteLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,politicasclienteLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,PoliticasCliente politicasclienteLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				politicasclienteLocal=this.politicascliente;
			} else {
				politicasclienteLocal=this.politicasclienteAnterior;
			}
		}
		
		if(this.permiteMantenimiento(politicasclienteLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoPoliticasCliente(politicasclienteLocal,true);
					
					if(politicasclienteSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(politicasclienteLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(politicasclienteLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoPoliticasCliente(PoliticasCliente politicascliente,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPoliticasCliente(politicascliente,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(politicascliente);
	}
	
	public void setVariablesFormularioToObjetoActualPoliticasCliente(PoliticasCliente politicascliente,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPoliticasCliente(politicascliente,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualPoliticasCliente(PoliticasCliente politicascliente,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			
			if(this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.getText()==null || this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.getText()=="" || this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.getText()=="Id") {
				this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setText("0");
			}

			if(conColumnasBase) {politicascliente.setId(Long.parseLong(this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.getText()));}

		try {
			politicascliente.setlimite_credito(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabellimite_creditoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setfecha_inicio(this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_inicioPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setfecha_renovacion(this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_renovacionPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setfecha_fin(this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FECHAFIN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_finPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setdias_neto_pago(Integer.parseInt(this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_neto_pagoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setdias_gracia(Integer.parseInt(this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldias_graciaPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setcupo(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_CUPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcupoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setdescuento_general(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_generalPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setdescuento_pronto_pago(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabeldescuento_pronto_pagoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setcon_lista_precio(this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_lista_precioPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setcon_impuestos(this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcon_impuestosPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setactivar_monto_facturacion(this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelactivar_monto_facturacionPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setvalor_sobregiro(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_sobregiroPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setfecha_venci_sobregiro(this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_venci_sobregiroPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setvalor_solicitado(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_solicitadoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setvalor_aprobado(Double.parseDouble(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelvalor_aprobadoPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setfecha_solicitud(this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelfecha_solicitudPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setobsevacion(this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_OBSEVACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelobsevacionPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setweb(this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_WEB+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelwebPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setcasilla_postal(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelcasilla_postalPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setforma_envio(this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelforma_envioPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			politicascliente.setnumero_cuenta(this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPoliticasCliente.jLabelnumero_cuentaPoliticasCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPoliticasCliente(PoliticasCliente politicasclienteBean,PoliticasCliente politicascliente,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && politicasclienteBean.getId()!=null && !politicasclienteBean.getId().equals(-1L))) {politicascliente.setId(politicasclienteBean.getId());}}
			if(conDefault || (!conDefault && politicasclienteBean.getid_tipo_precio()!=null && !politicasclienteBean.getid_tipo_precio().equals(-1L))) {politicascliente.setid_tipo_precio(politicasclienteBean.getid_tipo_precio());}
			if(conDefault || (!conDefault && politicasclienteBean.getid_transporte()!=null && !politicasclienteBean.getid_transporte().equals(-1L))) {politicascliente.setid_transporte(politicasclienteBean.getid_transporte());}
			if(conDefault || (!conDefault && politicasclienteBean.getid_linea_negocio()!=null && !politicasclienteBean.getid_linea_negocio().equals(-1L))) {politicascliente.setid_linea_negocio(politicasclienteBean.getid_linea_negocio());}
			if(conDefault || (!conDefault && politicasclienteBean.getid_banco()!=null && !politicasclienteBean.getid_banco().equals(-1L))) {politicascliente.setid_banco(politicasclienteBean.getid_banco());}
			if(conDefault || (!conDefault && politicasclienteBean.getid_tipo_cuenta_banco_global()!=null && !politicasclienteBean.getid_tipo_cuenta_banco_global().equals(-1L))) {politicascliente.setid_tipo_cuenta_banco_global(politicasclienteBean.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && politicasclienteBean.getid_estado_politicas_cliente()!=null && !politicasclienteBean.getid_estado_politicas_cliente().equals(-1L))) {politicascliente.setid_estado_politicas_cliente(politicasclienteBean.getid_estado_politicas_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosPoliticasCliente(PoliticasCliente politicasclienteOrigen,PoliticasCliente politicascliente,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && politicasclienteOrigen.getId()!=null && !politicasclienteOrigen.getId().equals(-1L))) {politicascliente.setId(politicasclienteOrigen.getId());}}
			if(conDefault || (!conDefault && politicasclienteOrigen.getlimite_credito()!=null && !politicasclienteOrigen.getlimite_credito().equals(0.0))) {politicascliente.setlimite_credito(politicasclienteOrigen.getlimite_credito());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getfecha_inicio()!=null && !politicasclienteOrigen.getfecha_inicio().equals(new Date()))) {politicascliente.setfecha_inicio(politicasclienteOrigen.getfecha_inicio());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getfecha_renovacion()!=null && !politicasclienteOrigen.getfecha_renovacion().equals(new Date()))) {politicascliente.setfecha_renovacion(politicasclienteOrigen.getfecha_renovacion());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getfecha_fin()!=null && !politicasclienteOrigen.getfecha_fin().equals(new Date()))) {politicascliente.setfecha_fin(politicasclienteOrigen.getfecha_fin());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getdias_neto_pago()!=null && !politicasclienteOrigen.getdias_neto_pago().equals(0))) {politicascliente.setdias_neto_pago(politicasclienteOrigen.getdias_neto_pago());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getdias_gracia()!=null && !politicasclienteOrigen.getdias_gracia().equals(0))) {politicascliente.setdias_gracia(politicasclienteOrigen.getdias_gracia());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getcupo()!=null && !politicasclienteOrigen.getcupo().equals(0.0))) {politicascliente.setcupo(politicasclienteOrigen.getcupo());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getdescuento_general()!=null && !politicasclienteOrigen.getdescuento_general().equals(0.0))) {politicascliente.setdescuento_general(politicasclienteOrigen.getdescuento_general());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getdescuento_pronto_pago()!=null && !politicasclienteOrigen.getdescuento_pronto_pago().equals(0.0))) {politicascliente.setdescuento_pronto_pago(politicasclienteOrigen.getdescuento_pronto_pago());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_tipo_precio()!=null && !politicasclienteOrigen.getid_tipo_precio().equals(-1L))) {politicascliente.setid_tipo_precio(politicasclienteOrigen.getid_tipo_precio());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getcon_lista_precio()!=null && !politicasclienteOrigen.getcon_lista_precio().equals(false))) {politicascliente.setcon_lista_precio(politicasclienteOrigen.getcon_lista_precio());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getcon_impuestos()!=null && !politicasclienteOrigen.getcon_impuestos().equals(false))) {politicascliente.setcon_impuestos(politicasclienteOrigen.getcon_impuestos());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getactivar_monto_facturacion()!=null && !politicasclienteOrigen.getactivar_monto_facturacion().equals(false))) {politicascliente.setactivar_monto_facturacion(politicasclienteOrigen.getactivar_monto_facturacion());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getvalor_sobregiro()!=null && !politicasclienteOrigen.getvalor_sobregiro().equals(0.0))) {politicascliente.setvalor_sobregiro(politicasclienteOrigen.getvalor_sobregiro());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getfecha_venci_sobregiro()!=null && !politicasclienteOrigen.getfecha_venci_sobregiro().equals(new Date()))) {politicascliente.setfecha_venci_sobregiro(politicasclienteOrigen.getfecha_venci_sobregiro());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_transporte()!=null && !politicasclienteOrigen.getid_transporte().equals(-1L))) {politicascliente.setid_transporte(politicasclienteOrigen.getid_transporte());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getvalor_solicitado()!=null && !politicasclienteOrigen.getvalor_solicitado().equals(0.0))) {politicascliente.setvalor_solicitado(politicasclienteOrigen.getvalor_solicitado());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getvalor_aprobado()!=null && !politicasclienteOrigen.getvalor_aprobado().equals(0.0))) {politicascliente.setvalor_aprobado(politicasclienteOrigen.getvalor_aprobado());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_linea_negocio()!=null && !politicasclienteOrigen.getid_linea_negocio().equals(-1L))) {politicascliente.setid_linea_negocio(politicasclienteOrigen.getid_linea_negocio());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getfecha_solicitud()!=null && !politicasclienteOrigen.getfecha_solicitud().equals(new Date()))) {politicascliente.setfecha_solicitud(politicasclienteOrigen.getfecha_solicitud());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getobsevacion()!=null && !politicasclienteOrigen.getobsevacion().equals(""))) {politicascliente.setobsevacion(politicasclienteOrigen.getobsevacion());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getweb()!=null && !politicasclienteOrigen.getweb().equals(""))) {politicascliente.setweb(politicasclienteOrigen.getweb());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getcasilla_postal()!=null && !politicasclienteOrigen.getcasilla_postal().equals(""))) {politicascliente.setcasilla_postal(politicasclienteOrigen.getcasilla_postal());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getforma_envio()!=null && !politicasclienteOrigen.getforma_envio().equals(""))) {politicascliente.setforma_envio(politicasclienteOrigen.getforma_envio());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_banco()!=null && !politicasclienteOrigen.getid_banco().equals(-1L))) {politicascliente.setid_banco(politicasclienteOrigen.getid_banco());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_tipo_cuenta_banco_global()!=null && !politicasclienteOrigen.getid_tipo_cuenta_banco_global().equals(-1L))) {politicascliente.setid_tipo_cuenta_banco_global(politicasclienteOrigen.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getnumero_cuenta()!=null && !politicasclienteOrigen.getnumero_cuenta().equals(""))) {politicascliente.setnumero_cuenta(politicasclienteOrigen.getnumero_cuenta());}
			if(conDefault || (!conDefault && politicasclienteOrigen.getid_estado_politicas_cliente()!=null && !politicasclienteOrigen.getid_estado_politicas_cliente().equals(-1L))) {politicascliente.setid_estado_politicas_cliente(politicasclienteOrigen.getid_estado_politicas_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPoliticasCliente(PoliticasCliente politicascliente) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setText(politicascliente.getId().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setText(politicascliente.getlimite_credito().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setDate(politicascliente.getfecha_inicio());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setDate(politicascliente.getfecha_renovacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setDate(politicascliente.getfecha_fin());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setText(politicascliente.getdias_neto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setText(politicascliente.getdias_gracia().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setText(politicascliente.getcupo().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setText(politicascliente.getdescuento_general().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setText(politicascliente.getdescuento_pronto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setSelected(politicascliente.getcon_lista_precio());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setSelected(politicascliente.getcon_impuestos());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setSelected(politicascliente.getactivar_monto_facturacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setText(politicascliente.getvalor_sobregiro().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setDate(politicascliente.getfecha_venci_sobregiro());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setText(politicascliente.getvalor_solicitado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setText(politicascliente.getvalor_aprobado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setDate(politicascliente.getfecha_solicitud());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setText(politicascliente.getobsevacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setText(politicascliente.getweb());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setText(politicascliente.getcasilla_postal());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setText(politicascliente.getforma_envio());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setText(politicascliente.getnumero_cuenta());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPoliticasCliente(PoliticasClienteBean politicasclienteBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setText(politicasclienteBean.getId().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setText(politicasclienteBean.getlimite_credito().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setDate(politicasclienteBean.getfecha_inicio());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setDate(politicasclienteBean.getfecha_renovacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setDate(politicasclienteBean.getfecha_fin());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setText(politicasclienteBean.getdias_neto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setText(politicasclienteBean.getdias_gracia().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setText(politicasclienteBean.getcupo().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setText(politicasclienteBean.getdescuento_general().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setText(politicasclienteBean.getdescuento_pronto_pago().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setSelected(politicasclienteBean.getcon_lista_precio());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setSelected(politicasclienteBean.getcon_impuestos());
			this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setSelected(politicasclienteBean.getactivar_monto_facturacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setText(politicasclienteBean.getvalor_sobregiro().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setDate(politicasclienteBean.getfecha_venci_sobregiro());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setText(politicasclienteBean.getvalor_solicitado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setText(politicasclienteBean.getvalor_aprobado().toString());
			this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setDate(politicasclienteBean.getfecha_solicitud());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setText(politicasclienteBean.getobsevacion());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setText(politicasclienteBean.getweb());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setText(politicasclienteBean.getcasilla_postal());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setText(politicasclienteBean.getforma_envio());
			this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setText(politicasclienteBean.getnumero_cuenta());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanPoliticasCliente(PoliticasClienteParameterReturnGeneral politicasclienteReturnGeneral,PoliticasClienteBean politicasclienteBean,Boolean conDefault) throws Exception { 
		try {
			PoliticasCliente politicasclienteLocal=new PoliticasCliente();
			
			politicasclienteLocal=politicasclienteReturnGeneral.getPoliticasCliente();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && politicasclienteLocal.getId()!=null && !politicasclienteLocal.getId().equals(-1L))) {politicasclienteBean.setId(politicasclienteLocal.getId());}}
			if(conDefault || (!conDefault && politicasclienteLocal.getlimite_credito()!=null && !politicasclienteLocal.getlimite_credito().equals(0.0))) {politicasclienteBean.setlimite_credito(politicasclienteLocal.getlimite_credito());}
			if(conDefault || (!conDefault && politicasclienteLocal.getfecha_inicio()!=null && !politicasclienteLocal.getfecha_inicio().equals(new Date()))) {politicasclienteBean.setfecha_inicio(politicasclienteLocal.getfecha_inicio());}
			if(conDefault || (!conDefault && politicasclienteLocal.getfecha_renovacion()!=null && !politicasclienteLocal.getfecha_renovacion().equals(new Date()))) {politicasclienteBean.setfecha_renovacion(politicasclienteLocal.getfecha_renovacion());}
			if(conDefault || (!conDefault && politicasclienteLocal.getfecha_fin()!=null && !politicasclienteLocal.getfecha_fin().equals(new Date()))) {politicasclienteBean.setfecha_fin(politicasclienteLocal.getfecha_fin());}
			if(conDefault || (!conDefault && politicasclienteLocal.getdias_neto_pago()!=null && !politicasclienteLocal.getdias_neto_pago().equals(0))) {politicasclienteBean.setdias_neto_pago(politicasclienteLocal.getdias_neto_pago());}
			if(conDefault || (!conDefault && politicasclienteLocal.getdias_gracia()!=null && !politicasclienteLocal.getdias_gracia().equals(0))) {politicasclienteBean.setdias_gracia(politicasclienteLocal.getdias_gracia());}
			if(conDefault || (!conDefault && politicasclienteLocal.getcupo()!=null && !politicasclienteLocal.getcupo().equals(0.0))) {politicasclienteBean.setcupo(politicasclienteLocal.getcupo());}
			if(conDefault || (!conDefault && politicasclienteLocal.getdescuento_general()!=null && !politicasclienteLocal.getdescuento_general().equals(0.0))) {politicasclienteBean.setdescuento_general(politicasclienteLocal.getdescuento_general());}
			if(conDefault || (!conDefault && politicasclienteLocal.getdescuento_pronto_pago()!=null && !politicasclienteLocal.getdescuento_pronto_pago().equals(0.0))) {politicasclienteBean.setdescuento_pronto_pago(politicasclienteLocal.getdescuento_pronto_pago());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_tipo_precio()!=null && !politicasclienteLocal.getid_tipo_precio().equals(-1L))) {politicasclienteBean.setid_tipo_precio(politicasclienteLocal.getid_tipo_precio());}
			if(conDefault || (!conDefault && politicasclienteLocal.getcon_lista_precio()!=null && !politicasclienteLocal.getcon_lista_precio().equals(false))) {politicasclienteBean.setcon_lista_precio(politicasclienteLocal.getcon_lista_precio());}
			if(conDefault || (!conDefault && politicasclienteLocal.getcon_impuestos()!=null && !politicasclienteLocal.getcon_impuestos().equals(false))) {politicasclienteBean.setcon_impuestos(politicasclienteLocal.getcon_impuestos());}
			if(conDefault || (!conDefault && politicasclienteLocal.getactivar_monto_facturacion()!=null && !politicasclienteLocal.getactivar_monto_facturacion().equals(false))) {politicasclienteBean.setactivar_monto_facturacion(politicasclienteLocal.getactivar_monto_facturacion());}
			if(conDefault || (!conDefault && politicasclienteLocal.getvalor_sobregiro()!=null && !politicasclienteLocal.getvalor_sobregiro().equals(0.0))) {politicasclienteBean.setvalor_sobregiro(politicasclienteLocal.getvalor_sobregiro());}
			if(conDefault || (!conDefault && politicasclienteLocal.getfecha_venci_sobregiro()!=null && !politicasclienteLocal.getfecha_venci_sobregiro().equals(new Date()))) {politicasclienteBean.setfecha_venci_sobregiro(politicasclienteLocal.getfecha_venci_sobregiro());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_transporte()!=null && !politicasclienteLocal.getid_transporte().equals(-1L))) {politicasclienteBean.setid_transporte(politicasclienteLocal.getid_transporte());}
			if(conDefault || (!conDefault && politicasclienteLocal.getvalor_solicitado()!=null && !politicasclienteLocal.getvalor_solicitado().equals(0.0))) {politicasclienteBean.setvalor_solicitado(politicasclienteLocal.getvalor_solicitado());}
			if(conDefault || (!conDefault && politicasclienteLocal.getvalor_aprobado()!=null && !politicasclienteLocal.getvalor_aprobado().equals(0.0))) {politicasclienteBean.setvalor_aprobado(politicasclienteLocal.getvalor_aprobado());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_linea_negocio()!=null && !politicasclienteLocal.getid_linea_negocio().equals(-1L))) {politicasclienteBean.setid_linea_negocio(politicasclienteLocal.getid_linea_negocio());}
			if(conDefault || (!conDefault && politicasclienteLocal.getfecha_solicitud()!=null && !politicasclienteLocal.getfecha_solicitud().equals(new Date()))) {politicasclienteBean.setfecha_solicitud(politicasclienteLocal.getfecha_solicitud());}
			if(conDefault || (!conDefault && politicasclienteLocal.getobsevacion()!=null && !politicasclienteLocal.getobsevacion().equals(""))) {politicasclienteBean.setobsevacion(politicasclienteLocal.getobsevacion());}
			if(conDefault || (!conDefault && politicasclienteLocal.getweb()!=null && !politicasclienteLocal.getweb().equals(""))) {politicasclienteBean.setweb(politicasclienteLocal.getweb());}
			if(conDefault || (!conDefault && politicasclienteLocal.getcasilla_postal()!=null && !politicasclienteLocal.getcasilla_postal().equals(""))) {politicasclienteBean.setcasilla_postal(politicasclienteLocal.getcasilla_postal());}
			if(conDefault || (!conDefault && politicasclienteLocal.getforma_envio()!=null && !politicasclienteLocal.getforma_envio().equals(""))) {politicasclienteBean.setforma_envio(politicasclienteLocal.getforma_envio());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_banco()!=null && !politicasclienteLocal.getid_banco().equals(-1L))) {politicasclienteBean.setid_banco(politicasclienteLocal.getid_banco());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_tipo_cuenta_banco_global()!=null && !politicasclienteLocal.getid_tipo_cuenta_banco_global().equals(-1L))) {politicasclienteBean.setid_tipo_cuenta_banco_global(politicasclienteLocal.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && politicasclienteLocal.getnumero_cuenta()!=null && !politicasclienteLocal.getnumero_cuenta().equals(""))) {politicasclienteBean.setnumero_cuenta(politicasclienteLocal.getnumero_cuenta());}
			if(conDefault || (!conDefault && politicasclienteLocal.getid_estado_politicas_cliente()!=null && !politicasclienteLocal.getid_estado_politicas_cliente().equals(-1L))) {politicasclienteBean.setid_estado_politicas_cliente(politicasclienteLocal.getid_estado_politicas_cliente());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxPoliticasClienteGenerico(Long idPoliticasClienteSeleccionado,JComboBox jComboBoxPoliticasCliente,List<PoliticasCliente> politicasclientesLocal)throws Exception {
		try {
			PoliticasCliente  politicasclienteTemp=null;

			for(PoliticasCliente politicasclienteAux:politicasclientesLocal) {
				if(politicasclienteAux.getId()!=null && politicasclienteAux.getId().equals(idPoliticasClienteSeleccionado)) {
					politicasclienteTemp=politicasclienteAux;
					break;
				}
			}

			jComboBoxPoliticasCliente.setSelectedItem(politicasclienteTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxPoliticasClienteGenerico(JComboBox jComboBoxPoliticasCliente,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxPoliticasCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPoliticasCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxPoliticasCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPoliticasCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPoliticasCliente.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxPoliticasCliente.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPoliticasCliente.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxPoliticasCliente.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxPoliticasCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxPoliticasCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			politicascliente=(PoliticasCliente) politicasclienteLogic.getPoliticasClientes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			politicascliente =(PoliticasCliente) politicasclientes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.getempresa_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Transporte")) {
			//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.gettransporte_descripcion();
			} else {
				//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.gettransporte_descripcion();
			}
		}

		if(sTipo.equals("LineaNegocio")) {
			//sDescripcion=this.getActualLineaNegocioForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.getlineanegocio_descripcion();
			} else {
				//sDescripcion=this.getActualLineaNegocioForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.getlineanegocio_descripcion();
			}
		}

		if(sTipo.equals("Banco")) {
			//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.getbanco_descripcion();
			} else {
				//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.getbanco_descripcion();
			}
		}

		if(sTipo.equals("TipoCuentaBancoGlobal")) {
			//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.gettipocuentabancoglobal_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.gettipocuentabancoglobal_descripcion();
			}
		}

		if(sTipo.equals("EstadoPoliticasCliente")) {
			//sDescripcion=this.getActualEstadoPoliticasClienteForeignKeyDescripcion((Long)value);
			if(!politicascliente.getIsNew() && !politicascliente.getIsChanged() && !politicascliente.getIsDeleted()) {
				sDescripcion=politicascliente.getestadopoliticascliente_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoPoliticasClienteForeignKeyDescripcion((Long)value);
				sDescripcion=politicascliente.getestadopoliticascliente_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		PoliticasCliente politicasclienteRow=new PoliticasCliente();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			politicasclienteRow=(PoliticasCliente) politicasclienteLogic.getPoliticasClientes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			politicasclienteRow=(PoliticasCliente) politicasclientes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualPoliticasCliente(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente));			
			this.jButtonDuplicarPoliticasCliente.setVisible((this.isVisibilidadCeldaDuplicarPoliticasCliente && this.isPermisoDuplicarPoliticasCliente));			
			this.jButtonCopiarPoliticasCliente.setVisible((this.isVisibilidadCeldaCopiarPoliticasCliente && this.isPermisoCopiarPoliticasCliente));
			this.jButtonVerFormPoliticasCliente.setVisible((this.isVisibilidadCeldaVerFormPoliticasCliente && this.isPermisoVerFormPoliticasCliente));
			
			this.jButtonAbrirOrderByPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));			
			
			this.jButtonNuevoRelacionesPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente && this.isPermisoNuevoPoliticasCliente));			
			this.jButtonNuevoGuardarCambiosPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarPoliticasCliente.setVisible((this.isVisibilidadCeldaModificarPoliticasCliente && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.setVisible((this.isVisibilidadCeldaActualizarPoliticasCliente && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.setVisible((this.isVisibilidadCeldaEliminarPoliticasCliente && this.isPermisoEliminarPoliticasCliente));
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.setVisible(this.isVisibilidadCeldaCancelarPoliticasCliente);							
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));			
			
			}
						
			this.jButtonGuardarCambiosTablaPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente));						
			this.jButtonDuplicarToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaDuplicarPoliticasCliente && this.isPermisoDuplicarPoliticasCliente));						
			this.jButtonCopiarToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaCopiarPoliticasCliente && this.isPermisoCopiarPoliticasCliente));			
			this.jButtonVerFormToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaVerFormPoliticasCliente && this.isPermisoVerFormPoliticasCliente));			
			this.jButtonAbrirOrderByToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));
			this.jButtonNuevoRelacionesToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente && this.isPermisoNuevoPoliticasCliente));			
			this.jButtonNuevoGuardarCambiosToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));			
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaModificarPoliticasCliente && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaActualizarPoliticasCliente  && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaEliminarPoliticasCliente && this.isPermisoEliminarPoliticasCliente));
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarToolBarPoliticasCliente.setVisible(this.isVisibilidadCeldaCancelarPoliticasCliente);				
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente));			
			this.jMenuItemDuplicarPoliticasCliente.setVisible((this.isVisibilidadCeldaDuplicarPoliticasCliente && this.isPermisoDuplicarPoliticasCliente));			
			this.jMenuItemCopiarPoliticasCliente.setVisible((this.isVisibilidadCeldaCopiarPoliticasCliente && this.isPermisoCopiarPoliticasCliente));			
			this.jMenuItemVerFormPoliticasCliente.setVisible((this.isVisibilidadCeldaVerFormPoliticasCliente && this.isPermisoVerFormPoliticasCliente));			
			this.jMenuItemAbrirOrderByPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));			
			//this.jMenuItemMostrarOcultarPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));
			this.jMenuItemDetalleAbrirOrderByPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));			
			//this.jMenuItemDetalleMostrarOcultarPoliticasCliente.setVisible((this.isVisibilidadCeldaOrdenPoliticasCliente && this.isPermisoOrdenPoliticasCliente));			
			this.jMenuItemNuevoRelacionesPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente && this.isPermisoNuevoPoliticasCliente));			
			this.jMenuItemNuevoGuardarCambiosPoliticasCliente.setVisible((this.isVisibilidadCeldaNuevoPoliticasCliente && this.isPermisoNuevoPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));									
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemModificarPoliticasCliente.setVisible((this.isVisibilidadCeldaModificarPoliticasCliente && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemActualizarPoliticasCliente.setVisible((this.isVisibilidadCeldaActualizarPoliticasCliente && this.isPermisoActualizarPoliticasCliente));	
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemEliminarPoliticasCliente.setVisible((this.isVisibilidadCeldaEliminarPoliticasCliente && this.isPermisoEliminarPoliticasCliente));
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemCancelarPoliticasCliente.setVisible(this.isVisibilidadCeldaCancelarPoliticasCliente);				
			}
			
			this.jMenuItemGuardarCambiosPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));						
			this.jMenuItemGuardarCambiosTablaPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoPoliticasCliente=this.jButtonNuevoPoliticasCliente.isVisible();
			this.isVisibilidadCeldaDuplicarPoliticasCliente=this.jButtonDuplicarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaCopiarPoliticasCliente=this.jButtonCopiarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaVerFormPoliticasCliente=this.jButtonVerFormPoliticasCliente.isVisible();
			
			this.isVisibilidadCeldaOrdenPoliticasCliente=this.jButtonAbrirOrderByPoliticasCliente.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=this.jButtonNuevoRelacionesPoliticasCliente.isVisible();
			this.isVisibilidadCeldaModificarPoliticasCliente=this.jButtonModificarPoliticasCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.isVisibilidadCeldaActualizarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaEliminarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaCancelarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaGuardarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=this.jButtonGuardarCambiosTablaPoliticasCliente.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoPoliticasCliente=this.jButtonNuevoToolBarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=this.jButtonNuevoRelacionesToolBarPoliticasCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.isVisibilidadCeldaModificarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarToolBarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaActualizarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarToolBarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaEliminarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarToolBarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaCancelarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarToolBarPoliticasCliente.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPoliticasCliente=this.jButtonGuardarCambiosToolBarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=this.jButtonGuardarCambiosTablaToolBarPoliticasCliente.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoPoliticasCliente=this.jMenuItemNuevoPoliticasCliente.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=this.jMenuItemNuevoRelacionesPoliticasCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.isVisibilidadCeldaModificarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemModificarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaActualizarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemActualizarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaEliminarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemEliminarPoliticasCliente.isVisible();
			this.isVisibilidadCeldaCancelarPoliticasCliente=this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemCancelarPoliticasCliente.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPoliticasCliente=this.jMenuItemGuardarCambiosPoliticasCliente.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=this.jMenuItemGuardarCambiosTablaPoliticasCliente.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesPoliticasCliente(Boolean esInicializar) {
		if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {			
			if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
				//if(this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesPoliticasCliente();
			}
			
			this.inicializarActualizarBindingBotonesManualPoliticasCliente(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualPoliticasCliente() {
		this.jButtonNuevoPoliticasCliente.setVisible(this.isPermisoNuevoPoliticasCliente);			
		this.jButtonDuplicarPoliticasCliente.setVisible(this.isPermisoDuplicarPoliticasCliente);			
		this.jButtonCopiarPoliticasCliente.setVisible(this.isPermisoCopiarPoliticasCliente);			
		this.jButtonVerFormPoliticasCliente.setVisible(this.isPermisoVerFormPoliticasCliente);			
		
		this.jButtonAbrirOrderByPoliticasCliente.setVisible(this.isPermisoOrdenPoliticasCliente);					
		
		this.jButtonNuevoRelacionesPoliticasCliente.setVisible(this.isPermisoNuevoPoliticasCliente);			
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarPoliticasCliente.setVisible(this.isPermisoActualizarPoliticasCliente);	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.setVisible(this.isPermisoActualizarPoliticasCliente);	
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.setVisible(this.isPermisoEliminarPoliticasCliente);
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.setVisible(this.isVisibilidadCeldaCancelarPoliticasCliente);						
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.setVisible(this.isPermisoGuardarCambiosPoliticasCliente);							
		}
		
		this.jButtonGuardarCambiosTablaPoliticasCliente.setVisible(this.isPermisoActualizarPoliticasCliente);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetallePoliticasCliente() {
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarPoliticasCliente.setVisible(this.isPermisoActualizarPoliticasCliente);	
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.setVisible(this.isPermisoActualizarPoliticasCliente);	
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.setVisible(this.isPermisoEliminarPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.setVisible(this.isVisibilidadCeldaCancelarPoliticasCliente);							
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.setVisible((this.isVisibilidadCeldaGuardarPoliticasCliente && this.isPermisoGuardarCambiosPoliticasCliente));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosPoliticasCliente() {
		if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualPoliticasCliente();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesPoliticasCliente() {
	}
	
	public void jTableDatosPoliticasClienteListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarPoliticasCliente(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonid_clientePoliticasClienteActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPoliticasCliente=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosPoliticasCliente.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clientePoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getId()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.politicascliente.getId());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clientePoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.politicascliente.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaPoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.politicascliente.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlimite_creditoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getlimite_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where limite_credito = "+this.politicascliente.getlimite_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_inicioPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getfecha_inicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_inicio = '"+Funciones2.getStringPostgresDate(this.politicascliente.getfecha_inicio())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_renovacionPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getfecha_renovacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_renovacion = '"+Funciones2.getStringPostgresDate(this.politicascliente.getfecha_renovacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_finPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getfecha_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_fin = '"+Funciones2.getStringPostgresDate(this.politicascliente.getfecha_fin())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondias_neto_pagoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getdias_neto_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where dias_neto_pago = "+this.politicascliente.getdias_neto_pago().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondias_graciaPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getdias_gracia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where dias_gracia = "+this.politicascliente.getdias_gracia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncupoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getcupo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cupo = "+this.politicascliente.getcupo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_generalPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getdescuento_general()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_general = "+this.politicascliente.getdescuento_general().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_pronto_pagoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getdescuento_pronto_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_pronto_pago = "+this.politicascliente.getdescuento_pronto_pago().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioPoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.politicascliente.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_lista_precioPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getcon_lista_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_lista_precio = "+this.politicascliente.getcon_lista_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_impuestosPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getcon_impuestos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_impuestos = "+this.politicascliente.getcon_impuestos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonactivar_monto_facturacionPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getactivar_monto_facturacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where activar_monto_facturacion = "+this.politicascliente.getactivar_monto_facturacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_sobregiroPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getvalor_sobregiro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_sobregiro = "+this.politicascliente.getvalor_sobregiro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_venci_sobregiroPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getfecha_venci_sobregiro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_venci_sobregiro = '"+Funciones2.getStringPostgresDate(this.politicascliente.getfecha_venci_sobregiro())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportePoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransporte=true;

			idTienePermisotransporte=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(TransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisotransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.transporteBeanSwingJInternalFrame=new TransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transporteBeanSwingJInternalFrame.getTransporteLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_transporte()!=null) {
					this.transporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transporteBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_transporte());
					this.transporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.transporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBordertransporte=(TitledBorder)this.transporteBeanSwingJInternalFrame.jScrollPanelDatosTransporte.getBorder();

				titledBordertransporte.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportePoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transporte = "+this.politicascliente.getid_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_solicitadoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getvalor_solicitado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_solicitado = "+this.politicascliente.getvalor_solicitado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_aprobadoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getvalor_aprobado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_aprobado = "+this.politicascliente.getvalor_aprobado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_negocioPoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineanegocio=true;

			idTienePermisolineanegocio=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(LineaNegocioConstantesFunciones.CLASSNAME);

			if(idTienePermisolineanegocio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.lineanegocioBeanSwingJInternalFrame=new LineaNegocioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineanegocioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineanegocioBeanSwingJInternalFrame.getLineaNegocioLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_linea_negocio()!=null) {
					this.lineanegocioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineanegocioBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_linea_negocio());
					this.lineanegocioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineanegocioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineanegocioBeanSwingJInternalFrame.inicializarActualizarBindingTablaLineaNegocio();
				}

				JInternalFrameBase jinternalFrame =this.lineanegocioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBorderlineanegocio=(TitledBorder)this.lineanegocioBeanSwingJInternalFrame.jScrollPanelDatosLineaNegocio.getBorder();

				titledBorderlineanegocio.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Linea_negocio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_negocioPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_linea_negocio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_negocio = "+this.politicascliente.getid_linea_negocio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_solicitudPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getfecha_solicitud()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_solicitud = '"+Funciones2.getStringPostgresDate(this.politicascliente.getfecha_solicitud())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonobsevacionPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getobsevacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where obsevacion like '%"+this.politicascliente.getobsevacion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonwebPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getweb()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where web like '%"+this.politicascliente.getweb()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncasilla_postalPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getcasilla_postal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where casilla_postal like '%"+this.politicascliente.getcasilla_postal()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonforma_envioPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getforma_envio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where forma_envio like '%"+this.politicascliente.getforma_envio()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bancoPoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobanco=true;

			idTienePermisobanco=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(BancoConstantesFunciones.CLASSNAME);

			if(idTienePermisobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.bancoBeanSwingJInternalFrame=new BancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bancoBeanSwingJInternalFrame.getBancoLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_banco()!=null) {
					this.bancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bancoBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_banco());
					this.bancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaBanco();
				}

				JInternalFrameBase jinternalFrame =this.bancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBorderbanco=(TitledBorder)this.bancoBeanSwingJInternalFrame.jScrollPanelDatosBanco.getBorder();

				titledBorderbanco.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bancoPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_banco = "+this.politicascliente.getid_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocuentabancoglobal=true;

			idTienePermisotipocuentabancoglobal=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(TipoCuentaBancoGlobalConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocuentabancoglobal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.tipocuentabancoglobalBeanSwingJInternalFrame=new TipoCuentaBancoGlobalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocuentabancoglobalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocuentabancoglobalBeanSwingJInternalFrame.getTipoCuentaBancoGlobalLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_tipo_cuenta_banco_global()!=null) {
					this.tipocuentabancoglobalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_tipo_cuenta_banco_global());
					this.tipocuentabancoglobalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCuentaBancoGlobal();
				}

				JInternalFrameBase jinternalFrame =this.tipocuentabancoglobalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBordertipocuentabancoglobal=(TitledBorder)this.tipocuentabancoglobalBeanSwingJInternalFrame.jScrollPanelDatosTipoCuentaBancoGlobal.getBorder();

				titledBordertipocuentabancoglobal.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Tipo Cuenta Banco Global");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_tipo_cuenta_banco_global()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cuenta_banco_global = "+this.politicascliente.getid_tipo_cuenta_banco_global().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cuentaPoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getnumero_cuenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cuenta like '%"+this.politicascliente.getnumero_cuenta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_politicas_clientePoliticasClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadopoliticascliente=true;

			idTienePermisoestadopoliticascliente=this.tienePermisosUsuarioEnPaginaWebPoliticasCliente(EstadoPoliticasClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadopoliticascliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPoliticasCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPoliticasCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);

				this.estadopoliticasclienteBeanSwingJInternalFrame=new EstadoPoliticasClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadopoliticasclienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadopoliticasclienteBeanSwingJInternalFrame.getEstadoPoliticasClienteLogic().setConnexion(this.politicasclienteLogic.getConnexion());

				if(this.politicascliente.getid_estado_politicas_cliente()!=null) {
					this.estadopoliticasclienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadopoliticasclienteBeanSwingJInternalFrame.setIdActual(this.politicascliente.getid_estado_politicas_cliente());
					this.estadopoliticasclienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadopoliticasclienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadopoliticasclienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoPoliticasCliente();
				}

				JInternalFrameBase jinternalFrame =this.estadopoliticasclienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPoliticasCliente=(TitledBorder)this.jScrollPanelDatosPoliticasCliente.getBorder();
				TitledBorder titledBorderestadopoliticascliente=(TitledBorder)this.estadopoliticasclienteBeanSwingJInternalFrame.jScrollPanelDatosEstadoPoliticasCliente.getBorder();

				titledBorderestadopoliticascliente.setTitle(titledBorderPoliticasCliente.getTitle() + " -> Estado Politicas Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_politicas_clientePoliticasClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.getpoliticascliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.politicascliente==null) {
						this.politicascliente = new PoliticasCliente();
					}

					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);
				}

				if(this.politicascliente.getid_estado_politicas_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_politicas_cliente = "+this.politicascliente.getid_estado_politicas_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPoliticasCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBancoPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdBanco();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClientePoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdCliente();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdEmpresa();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoPoliticasClientePoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdEstadoPoliticasCliente();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaNegocioPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdLineaNegocio();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCuentaBancoGlobalPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdTipoCuentaBancoGlobal();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioPoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdTipoPrecio();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportePoliticasClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPoliticasCliente(false,false);

			this.getPoliticasClientesFK_IdTransporte();

			this.inicializarActualizarBindingPoliticasCliente(false);

			//if(PoliticasClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPoliticasCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.politicasclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFramePoliticasCliente() {
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
			this.jInternalFrameDetalleFormPoliticasCliente.setVisible(false);	    			
			this.jInternalFrameDetalleFormPoliticasCliente.dispose();
			this.jInternalFrameDetalleFormPoliticasCliente=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
			this.jInternalFrameReporteDinamicoPoliticasCliente.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoPoliticasCliente.dispose();
			this.jInternalFrameReporteDinamicoPoliticasCliente=null;
		}
		
		if(this.jInternalFrameImportacionPoliticasCliente!=null) {
			this.jInternalFrameImportacionPoliticasCliente.setVisible(false);	    			
			this.jInternalFrameImportacionPoliticasCliente.dispose();
			this.jInternalFrameImportacionPoliticasCliente=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessPoliticasCliente();
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			
			if(sTipo.equals("NuevoPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarPoliticasCliente")) {
				jButtonDuplicarPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarPoliticasCliente")) {
				jButtonCopiarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("VerFormPoliticasCliente")) {
				jButtonVerFormPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarPoliticasCliente")) {
				jButtonDuplicarPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarPoliticasCliente")) {
				jButtonDuplicarPoliticasClienteActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarPoliticasCliente")) {
				jButtonModificarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarPoliticasCliente")) {
				jButtonModificarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarPoliticasCliente")) {
				jButtonModificarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarPoliticasCliente")) {
				jButtonActualizarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarPoliticasCliente")) {
				jButtonActualizarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarPoliticasCliente")) {
				jButtonActualizarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("EliminarPoliticasCliente")) {
				jButtonEliminarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarPoliticasCliente")) {
				jButtonEliminarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarPoliticasCliente")) {
				jButtonEliminarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("CancelarPoliticasCliente")) {
				jButtonCancelarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarPoliticasCliente")) {
				jButtonCancelarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarPoliticasCliente")) {
				jButtonCancelarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("CerrarPoliticasCliente")) {
				jButtonCerrarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarPoliticasCliente")) {
				jButtonCerrarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarPoliticasCliente")) {
				jButtonCerrarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarPoliticasCliente")) {
				jButtonMostrarOcultarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarPoliticasCliente")) {
				jButtonCancelarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarPoliticasCliente")) {
				jButtonCopiarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarPoliticasCliente")) {
				jButtonVerFormPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarPoliticasCliente")) {
				jButtonCopiarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormPoliticasCliente")) {
				jButtonVerFormPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionPoliticasCliente")) {
				jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarPoliticasCliente")) {
				jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionPoliticasCliente")) {
				jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresPoliticasCliente")) {
				jButtonAnterioresPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarPoliticasCliente")) {
				jButtonAnterioresPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnteriorePoliticasCliente")) {
				jButtonAnterioresPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesPoliticasCliente")) {
				jButtonSiguientesPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarPoliticasCliente")) {
				jButtonSiguientesPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesPoliticasCliente")) {
				jButtonSiguientesPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByPoliticasCliente") || sTipo.equals("MenuItemDetalleAbrirOrderByPoliticasCliente")) {
				jButtonAbrirOrderByPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarPoliticasCliente") || sTipo.equals("MenuItemDetalleMostrarOcultarPoliticasCliente")) {
				jButtonMostrarOcultarPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosPoliticasCliente")) {
				jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarPoliticasCliente")) {
				jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosPoliticasCliente")) {
				jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoPoliticasCliente")) {
				jButtonCerrarReporteDinamicoPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoPoliticasCliente")) {
				jButtonGenerarReporteDinamicoPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoPoliticasCliente")) {
				
				jButtonGenerarExcelReporteDinamicoPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionPoliticasCliente")) {
				jButtonCerrarImportacionPoliticasClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionPoliticasCliente")) {
				
				jButtonGenerarImportacionPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionPoliticasCliente")) {
				
				jButtonAbrirImportacionPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesPoliticasCliente")) {
				jComboBoxTiposAccionesPoliticasClienteActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesPoliticasCliente")) {
				jComboBoxTiposRelacionesPoliticasClienteActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioPoliticasCliente")) {
				jComboBoxTiposAccionesPoliticasClienteActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarPoliticasCliente")) {
				
				jComboBoxTiposSeleccionarPoliticasClienteActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralPoliticasCliente")) {
				jTextFieldValorCampoGeneralPoliticasClienteActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByPoliticasCliente")) {
				jButtonAbrirOrderByPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarPoliticasCliente")) {
				jButtonAbrirOrderByPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByPoliticasCliente")) {
				jButtonCerrarOrderByPoliticasClienteActionPerformed(evt);
			} 
						
			
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clientePoliticasCliente")) {
				this.jButtonid_clientePoliticasClienteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clientePoliticasClienteUpdate")) {
				this.jButtonid_clientePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clientePoliticasClienteBusqueda")) {
				this.jButtonid_clientePoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPoliticasClienteUpdate")) {
				this.jButtonid_empresaPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPoliticasClienteBusqueda")) {
				this.jButtonid_empresaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("limite_creditoPoliticasClienteBusqueda")) {
				this.jButtonlimite_creditoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_inicioPoliticasClienteBusqueda")) {
				this.jButtonfecha_inicioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_renovacionPoliticasClienteBusqueda")) {
				this.jButtonfecha_renovacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finPoliticasClienteBusqueda")) {
				this.jButtonfecha_finPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_neto_pagoPoliticasClienteBusqueda")) {
				this.jButtondias_neto_pagoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_graciaPoliticasClienteBusqueda")) {
				this.jButtondias_graciaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cupoPoliticasClienteBusqueda")) {
				this.jButtoncupoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_generalPoliticasClienteBusqueda")) {
				this.jButtondescuento_generalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_pronto_pagoPoliticasClienteBusqueda")) {
				this.jButtondescuento_pronto_pagoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioPoliticasClienteUpdate")) {
				this.jButtonid_tipo_precioPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioPoliticasClienteBusqueda")) {
				this.jButtonid_tipo_precioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lista_precioPoliticasClienteBusqueda")) {
				this.jButtoncon_lista_precioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_impuestosPoliticasClienteBusqueda")) {
				this.jButtoncon_impuestosPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("activar_monto_facturacionPoliticasClienteBusqueda")) {
				this.jButtonactivar_monto_facturacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_sobregiroPoliticasClienteBusqueda")) {
				this.jButtonvalor_sobregiroPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venci_sobregiroPoliticasClienteBusqueda")) {
				this.jButtonfecha_venci_sobregiroPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportePoliticasClienteUpdate")) {
				this.jButtonid_transportePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportePoliticasClienteBusqueda")) {
				this.jButtonid_transportePoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_solicitadoPoliticasClienteBusqueda")) {
				this.jButtonvalor_solicitadoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_aprobadoPoliticasClienteBusqueda")) {
				this.jButtonvalor_aprobadoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_negocioPoliticasClienteUpdate")) {
				this.jButtonid_linea_negocioPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_negocioPoliticasClienteBusqueda")) {
				this.jButtonid_linea_negocioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_solicitudPoliticasClienteBusqueda")) {
				this.jButtonfecha_solicitudPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("obsevacionPoliticasClienteBusqueda")) {
				this.jButtonobsevacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("webPoliticasClienteBusqueda")) {
				this.jButtonwebPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("casilla_postalPoliticasClienteBusqueda")) {
				this.jButtoncasilla_postalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("forma_envioPoliticasClienteBusqueda")) {
				this.jButtonforma_envioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoPoliticasClienteUpdate")) {
				this.jButtonid_bancoPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoPoliticasClienteBusqueda")) {
				this.jButtonid_bancoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalPoliticasClienteUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalPoliticasClienteBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaPoliticasClienteBusqueda")) {
				this.jButtonnumero_cuentaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_politicas_clientePoliticasClienteUpdate")) {
				this.jButtonid_estado_politicas_clientePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_politicas_clientePoliticasClienteBusqueda")) {
				this.jButtonid_estado_politicas_clientePoliticasClienteBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clientePoliticasCliente")) {
				this.jButtonid_clientePoliticasClienteActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBancoPoliticasCliente")) {
				this.jButtonFK_IdBancoPoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClientePoliticasCliente")) {
				this.jButtonFK_IdClientePoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoPoliticasClientePoliticasCliente")) {
				this.jButtonFK_IdEstadoPoliticasClientePoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdLineaNegocioPoliticasCliente")) {
				this.jButtonFK_IdLineaNegocioPoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCuentaBancoGlobalPoliticasCliente")) {
				this.jButtonFK_IdTipoCuentaBancoGlobalPoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoPrecioPoliticasCliente")) {
				this.jButtonFK_IdTipoPrecioPoliticasClienteActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransportePoliticasCliente")) {
				this.jButtonFK_IdTransportePoliticasClienteActionPerformed(evt);
			}
			
			;
			
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessPoliticasCliente();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			PoliticasCliente politicasclienteLocal=null;
			
			if(!this.getEsControlTabla()) {
				politicasclienteLocal=this.politicascliente;
			} else {
				politicasclienteLocal=this.politicasclienteAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
							
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
								
						
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
								
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
							
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
								
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosPoliticasCliente")) {
					jCheckBoxSeleccionarTodosPoliticasClienteItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosPoliticasCliente")) {
					jCheckBoxSeleccionadosPoliticasClienteItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarPoliticasCliente")) {
					
				}
				
				


				
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
												
				
				


				
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPoliticasClienteActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.politicascliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.politicascliente);
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PoliticasCliente.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PoliticasCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPoliticasClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.politicasclienteAnterior =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarPoliticasCliente")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosPoliticasClienteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosPoliticasCliente.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.politicascliente =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.politicascliente =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.politicascliente);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarPoliticasCliente")) {
				
				}
				
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarPoliticasCliente")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosPoliticasCliente.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarPoliticasCliente")) {
			
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessPoliticasCliente();
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			if(sTipo.equals("NuevoPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarPoliticasCliente")) {
				jButtonDuplicarPoliticasClienteActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarPoliticasCliente")) {
				jButtonCopiarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormPoliticasCliente")) {
				jButtonVerFormPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesPoliticasCliente")) {
				jButtonNuevoPoliticasClienteActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarPoliticasCliente")) {
				jButtonModificarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarPoliticasCliente")) {
				jButtonActualizarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarPoliticasCliente")) {
				jButtonEliminarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarPoliticasCliente")) {
				jButtonCancelarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarPoliticasCliente")) {
				jButtonCerrarPoliticasClienteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosPoliticasCliente")) {
				jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosPoliticasCliente")) {
				jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByPoliticasCliente")) {
				jButtonAbrirOrderByPoliticasClienteActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionPoliticasCliente")) {
				jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresPoliticasCliente")) {
				jButtonAnterioresPoliticasClienteActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesPoliticasCliente")) {
				jButtonSiguientesPoliticasClienteActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clientePoliticasCliente")) {
				this.jButtonid_clientePoliticasClienteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clientePoliticasClienteUpdate")) {
				this.jButtonid_clientePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clientePoliticasClienteBusqueda")) {
				this.jButtonid_clientePoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPoliticasClienteUpdate")) {
				this.jButtonid_empresaPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPoliticasClienteBusqueda")) {
				this.jButtonid_empresaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("limite_creditoPoliticasClienteBusqueda")) {
				this.jButtonlimite_creditoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_inicioPoliticasClienteBusqueda")) {
				this.jButtonfecha_inicioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_renovacionPoliticasClienteBusqueda")) {
				this.jButtonfecha_renovacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finPoliticasClienteBusqueda")) {
				this.jButtonfecha_finPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_neto_pagoPoliticasClienteBusqueda")) {
				this.jButtondias_neto_pagoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_graciaPoliticasClienteBusqueda")) {
				this.jButtondias_graciaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cupoPoliticasClienteBusqueda")) {
				this.jButtoncupoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_generalPoliticasClienteBusqueda")) {
				this.jButtondescuento_generalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_pronto_pagoPoliticasClienteBusqueda")) {
				this.jButtondescuento_pronto_pagoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioPoliticasClienteUpdate")) {
				this.jButtonid_tipo_precioPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioPoliticasClienteBusqueda")) {
				this.jButtonid_tipo_precioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lista_precioPoliticasClienteBusqueda")) {
				this.jButtoncon_lista_precioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_impuestosPoliticasClienteBusqueda")) {
				this.jButtoncon_impuestosPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("activar_monto_facturacionPoliticasClienteBusqueda")) {
				this.jButtonactivar_monto_facturacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_sobregiroPoliticasClienteBusqueda")) {
				this.jButtonvalor_sobregiroPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venci_sobregiroPoliticasClienteBusqueda")) {
				this.jButtonfecha_venci_sobregiroPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportePoliticasClienteUpdate")) {
				this.jButtonid_transportePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportePoliticasClienteBusqueda")) {
				this.jButtonid_transportePoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_solicitadoPoliticasClienteBusqueda")) {
				this.jButtonvalor_solicitadoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_aprobadoPoliticasClienteBusqueda")) {
				this.jButtonvalor_aprobadoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_negocioPoliticasClienteUpdate")) {
				this.jButtonid_linea_negocioPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_negocioPoliticasClienteBusqueda")) {
				this.jButtonid_linea_negocioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_solicitudPoliticasClienteBusqueda")) {
				this.jButtonfecha_solicitudPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("obsevacionPoliticasClienteBusqueda")) {
				this.jButtonobsevacionPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("webPoliticasClienteBusqueda")) {
				this.jButtonwebPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("casilla_postalPoliticasClienteBusqueda")) {
				this.jButtoncasilla_postalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("forma_envioPoliticasClienteBusqueda")) {
				this.jButtonforma_envioPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoPoliticasClienteUpdate")) {
				this.jButtonid_bancoPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoPoliticasClienteBusqueda")) {
				this.jButtonid_bancoPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalPoliticasClienteUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalPoliticasClienteBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaPoliticasClienteBusqueda")) {
				this.jButtonnumero_cuentaPoliticasClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_politicas_clientePoliticasClienteUpdate")) {
				this.jButtonid_estado_politicas_clientePoliticasClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_politicas_clientePoliticasClienteBusqueda")) {
				this.jButtonid_estado_politicas_clientePoliticasClienteBusquedaActionPerformed(evt);
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessPoliticasCliente();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
			
			if(sTipo.equals("CloseInternalFramePoliticasCliente")) {
				closingInternalFramePoliticasCliente();
				
			} else if(sTipo.equals("jButtonCancelarPoliticasCliente")) {
				JInternalFrameBase jInternalFrameDetalleFormPoliticasCliente = (JInternalFrameBase)evt.getSource();
	            	
	            PoliticasClienteBeanSwingJInternalFrame jInternalFrameParent=(PoliticasClienteBeanSwingJInternalFrame)jInternalFrameDetalleFormPoliticasCliente.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarPoliticasClienteActionPerformed(null);
			}
			
			PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.politicascliente,new Object(),this.politicasclienteParameterGeneral,this.politicasclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormPoliticasCliente(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormPoliticasCliente(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormPoliticasCliente(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.politicascliente)) {
			if(!esControlTabla) {
				if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);			
				}
				
				if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualPoliticasCliente(this.politicascliente,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.politicasclienteReturnGeneral=politicasclienteLogic.procesarEventosPoliticasClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.politicasclienteLogic.getPoliticasClientes(),this.politicascliente,this.politicasclienteParameterGeneral,this.isEsNuevoPoliticasCliente,classes);//this.politicasclienteLogic.getPoliticasCliente()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanPoliticasCliente(this.politicasclienteReturnGeneral,this.politicasclienteBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanPoliticasCliente(classes,this.politicasclienteReturnGeneral,this.politicasclienteBean,false);
					}
						
					if(this.politicasclienteReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente());	
					}
						
					if(this.politicasclienteReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente(),classes);//this.politicasclienteBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioPoliticasCliente(this.politicascliente,classes);//this.politicasclienteBean);									
				}
			
				if(PoliticasClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualPoliticasCliente(this.politicascliente,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPoliticasCliente(this.politicascliente);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.politicasclienteAnterior!=null) {
						this.politicascliente=this.politicasclienteAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.politicasclienteReturnGeneral=politicasclienteLogic.procesarEventosPoliticasClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.politicasclienteLogic.getPoliticasClientes(),this.politicascliente,this.politicasclienteParameterGeneral,this.isEsNuevoPoliticasCliente,classes);//this.politicasclienteLogic.getPoliticasCliente()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.politicasclienteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.politicasclienteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.politicasclienteReturnGeneral.getPoliticasCliente(),politicasclienteLogic.getPoliticasClientes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.politicasclienteReturnGeneral.getPoliticasCliente(),this.politicasclientes);
				}
				//ARCHITECTURE
				
				//this.jTableDatosPoliticasCliente.repaint();
				
				//((AbstractTableModel) this.jTableDatosPoliticasCliente.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosPoliticasCliente();
			}
		}
	}
	
	public void actualizarVisualTableDatosPoliticasCliente() throws Exception {
		
		PoliticasClienteModel politicasclienteModel=(PoliticasClienteModel)this.jTableDatosPoliticasCliente.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			politicasclienteModel.politicasclientes=this.politicasclienteLogic.getPoliticasClientes();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			politicasclienteModel.politicasclientes=this.politicasclientes;
		}
		
		
		((PoliticasClienteModel) this.jTableDatosPoliticasCliente.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaPoliticasCliente() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getpoliticasclienteAnterior(),this.politicasclienteLogic.getPoliticasClientes());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getpoliticasclienteAnterior(),this.politicasclientes);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosPoliticasCliente();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioPoliticasCliente(PoliticasCliente politicascliente,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.politicascliente,new Object(),generalEntityParameterGeneral,this.politicasclienteReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.politicasclienteSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=PoliticasClienteConstantesFunciones.getClassesRelationshipsOfPoliticasCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=PoliticasClienteConstantesFunciones.getClassesRelationshipsFromStringsOfPoliticasCliente(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormPoliticasCliente(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				PoliticasClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.politicascliente,new Object(),generalEntityParameterGeneral,this.politicasclienteReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioPoliticasCliente(PoliticasClienteBean politicasclienteBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanPoliticasCliente(ArrayList<Classe> classes,PoliticasClienteReturnGeneral politicasclienteReturnGeneral,PoliticasClienteBean politicasclienteBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualPoliticasCliente(PoliticasCliente politicascliente,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.politicascliente)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormPoliticasCliente = new PoliticasClienteDetalleFormJInternalFrame(jDesktopPane,this.politicasclienteSessionBean.getConGuardarRelaciones(),this.politicasclienteSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.setVisible(false);
		this.jInternalFrameDetalleFormPoliticasCliente.setSelected(false);						
		
		this.jInternalFrameDetalleFormPoliticasCliente.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormPoliticasCliente.politicasclienteLogic=this.politicasclienteLogic;
		
		this.cargarCombosFrameForeignKeyPoliticasCliente("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetallePoliticasCliente();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePoliticasCliente();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyPoliticasCliente("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyPoliticasCliente();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormPoliticasCliente.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPoliticasCliente"));
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ModificarPoliticasCliente"));

		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ModificarToolBarPoliticasCliente"));
					
		this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemModificarPoliticasCliente.addActionListener(new ButtonActionListener(this,"MenuItemModificarPoliticasCliente"));		
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.addActionListener (new ButtonActionListener(this,"ActualizarPoliticasCliente"));
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPoliticasCliente"));
						
		this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemActualizarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPoliticasCliente"));		
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.addActionListener (new ButtonActionListener(this,"EliminarPoliticasCliente"));
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"EliminarToolBarPoliticasCliente"));
								
		this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemEliminarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPoliticasCliente"));		
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CancelarPoliticasCliente"));
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CancelarToolBarPoliticasCliente"));
					
		this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemCancelarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPoliticasCliente"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemDetalleCerrarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPoliticasCliente"));		
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPoliticasCliente"));
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPoliticasCliente"));
		
		
		
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPoliticasCliente"));
		
		
				
		
		//jButtonid_clientePoliticasCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePoliticasClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasCliente.addActionListener(new ButtonActionListener(this,"id_clientePoliticasCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonlimite_creditoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"limite_creditoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_inicioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_renovacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_renovacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_finPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_neto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_neto_pagoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_graciaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_graciaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncupoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"cupoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_generalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_pronto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_pronto_pagoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_lista_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_lista_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_impuestosPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_impuestosPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonactivar_monto_facturacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"activar_monto_facturacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_sobregiroPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_venci_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venci_sobregiroPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_solicitadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_solicitadoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_aprobadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_aprobadoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_solicitudPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_solicitudPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonobsevacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"obsevacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonwebPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"webPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncasilla_postalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"casilla_postalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonforma_envioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"forma_envioPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonnumero_cuentaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPoliticasCliente"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFramePoliticasCliente"));
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPoliticasCliente"));
		}
		
		this.jTableDatosPoliticasCliente.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarPoliticasCliente"));
		
		this.jTableDatosPoliticasCliente.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarPoliticasCliente"));
		
		this.jButtonNuevoPoliticasCliente.addActionListener(new ButtonActionListener(this,"NuevoPoliticasCliente"));
		
		this.jButtonDuplicarPoliticasCliente.addActionListener(new ButtonActionListener(this,"DuplicarPoliticasCliente"));
		
		this.jButtonCopiarPoliticasCliente.addActionListener(new ButtonActionListener(this,"CopiarPoliticasCliente"));
		
		this.jButtonVerFormPoliticasCliente.addActionListener(new ButtonActionListener(this,"VerFormPoliticasCliente"));
		
		
		this.jButtonNuevoToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"NuevoToolBarPoliticasCliente"));
			
		this.jButtonDuplicarToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"DuplicarToolBarPoliticasCliente"));
			
		this.jMenuItemNuevoPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemNuevoPoliticasCliente"));
			
		this.jMenuItemDuplicarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarPoliticasCliente"));		
		
		
		this.jButtonNuevoRelacionesPoliticasCliente.addActionListener (new ButtonActionListener(this,"NuevoRelacionesPoliticasCliente"));
		
		
		this.jButtonNuevoRelacionesToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarPoliticasCliente"));
			
		this.jMenuItemNuevoRelacionesPoliticasCliente.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesPoliticasCliente"));		
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ModificarPoliticasCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonModificarToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ModificarToolBarPoliticasCliente"));
			
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemModificarPoliticasCliente.addActionListener(new ButtonActionListener(this,"MenuItemModificarPoliticasCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarPoliticasCliente.addActionListener (new ButtonActionListener(this,"ActualizarPoliticasCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonActualizarToolBarPoliticasCliente.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPoliticasCliente"));
				
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemActualizarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPoliticasCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarPoliticasCliente.addActionListener (new ButtonActionListener(this,"EliminarPoliticasCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonEliminarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"EliminarToolBarPoliticasCliente"));
						
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemEliminarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPoliticasCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CancelarPoliticasCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonCancelarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CancelarToolBarPoliticasCliente"));
			
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemCancelarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPoliticasCliente"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarPoliticasCliente"));		
		
		
		this.jButtonCerrarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CerrarPoliticasCliente"));
		
		
		this.jButtonCerrarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CerrarToolBarPoliticasCliente"));
			
		this.jMenuItemCerrarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemCerrarPoliticasCliente"));
			
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jMenuItemDetalleCerrarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPoliticasCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosPoliticasCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPoliticasCliente"));
		}
		
		this.jButtonCopiarToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"CopiarToolBarPoliticasCliente"));
			
		this.jButtonVerFormToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"VerFormToolBarPoliticasCliente"));
		
		this.jMenuItemGuardarCambiosPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosPoliticasCliente"));
			
		this.jMenuItemCopiarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemCopiarPoliticasCliente"));		
		
		this.jMenuItemVerFormPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemVerFormPoliticasCliente"));		
		
		
		this.jButtonGuardarCambiosTablaPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPoliticasCliente"));
		
		
		this.jButtonGuardarCambiosTablaToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarPoliticasCliente"));
			
		this.jMenuItemGuardarCambiosTablaPoliticasCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPoliticasCliente"));		
		
		
		
		this.jButtonRecargarInformacionPoliticasCliente.addActionListener (new ButtonActionListener(this,"RecargarInformacionPoliticasCliente"));
					
		this.jButtonRecargarInformacionToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarPoliticasCliente"));
		
		this.jMenuItemRecargarInformacionPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionPoliticasCliente"));		
		
		
		
		this.jButtonAnterioresPoliticasCliente.addActionListener (new ButtonActionListener(this,"AnterioresPoliticasCliente"));
		
		
		this.jButtonAnterioresToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"AnterioresToolBarPoliticasCliente"));
		
		this.jMenuItemAnterioresPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresPoliticasCliente"));		
		
		
		this.jButtonSiguientesPoliticasCliente.addActionListener (new ButtonActionListener(this,"SiguientesPoliticasCliente"));
		
		
		this.jButtonSiguientesToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"SiguientesToolBarPoliticasCliente"));
			
		this.jMenuItemSiguientesPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesPoliticasCliente"));
			
		this.jMenuItemAbrirOrderByPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByPoliticasCliente"));
			
		this.jMenuItemMostrarOcultarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarPoliticasCliente"));
			
		this.jMenuItemDetalleAbrirOrderByPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByPoliticasCliente"));
			
		this.jMenuItemDetalleMostarOcultarPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarPoliticasCliente"));		
		
		
		this.jButtonNuevoGuardarCambiosPoliticasCliente.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosPoliticasCliente"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarPoliticasCliente"));
			
		this.jMenuItemNuevoGuardarCambiosPoliticasCliente.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosPoliticasCliente"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosPoliticasCliente.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosPoliticasCliente"));

		this.jCheckBoxSeleccionadosPoliticasCliente.addItemListener(new CheckBoxItemListener(this,"SeleccionadosPoliticasCliente"));
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPoliticasCliente"));
		}
		
		
		this.jComboBoxTiposRelacionesPoliticasCliente.addActionListener (new ButtonActionListener(this,"TiposRelacionesPoliticasCliente"));
			
		this.jComboBoxTiposAccionesPoliticasCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesPoliticasCliente"));
					
		this.jComboBoxTiposSeleccionarPoliticasCliente.addActionListener (new ButtonActionListener(this,"TiposSeleccionarPoliticasCliente"));
			
		this.jTextFieldValorCampoGeneralPoliticasCliente.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralPoliticasCliente"));		
		
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//jButtonid_clientePoliticasCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePoliticasClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasCliente.addActionListener(new ButtonActionListener(this,"id_clientePoliticasCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonlimite_creditoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"limite_creditoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_inicioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_renovacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_renovacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_finPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_neto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_neto_pagoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_graciaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_graciaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncupoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"cupoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_generalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_pronto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_pronto_pagoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_lista_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_lista_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_impuestosPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_impuestosPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonactivar_monto_facturacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"activar_monto_facturacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_sobregiroPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_venci_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venci_sobregiroPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_solicitadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_solicitadoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_aprobadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_aprobadoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_solicitudPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_solicitudPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonobsevacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"obsevacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonwebPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"webPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncasilla_postalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"casilla_postalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonforma_envioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"forma_envioPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonnumero_cuentaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBancoPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdBancoPoliticasCliente"));

			this.jButtonFK_IdClientePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdClientePoliticasCliente"));

			this.jButtonBuscarFK_IdClienteid_clientePoliticasCliente.addActionListener(new ButtonActionListener(this,"id_clientePoliticasCliente"));

			this.jButtonFK_IdEstadoPoliticasClientePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdEstadoPoliticasClientePoliticasCliente"));

			this.jButtonFK_IdLineaNegocioPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdLineaNegocioPoliticasCliente"));

			this.jButtonFK_IdTipoCuentaBancoGlobalPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalPoliticasCliente"));

			this.jButtonFK_IdTipoPrecioPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioPoliticasCliente"));

			this.jButtonFK_IdTransportePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTransportePoliticasCliente"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoPoliticasCliente!=null) {
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPoliticasCliente"));
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPoliticasCliente"));
				this.jInternalFrameReporteDinamicoPoliticasCliente.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPoliticasCliente"));
			}
			
			//this.jButtonCerrarReporteDinamicoPoliticasCliente.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPoliticasCliente"));				
			//this.jButtonGenerarReporteDinamicoPoliticasCliente.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPoliticasCliente"));
			//this.jButtonGenerarExcelReporteDinamicoPoliticasCliente.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPoliticasCliente"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionPoliticasCliente!=null) {
				this.jInternalFrameImportacionPoliticasCliente.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPoliticasCliente"));
				this.jInternalFrameImportacionPoliticasCliente.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPoliticasCliente"));
				this.jInternalFrameImportacionPoliticasCliente.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPoliticasCliente"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByPoliticasCliente.addActionListener (new ButtonActionListener(this,"AbrirOrderByPoliticasCliente"));
			
			this.jButtonAbrirOrderByToolBarPoliticasCliente.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarPoliticasCliente"));			
			
			if(this.jInternalFrameOrderByPoliticasCliente!=null) {
				this.jInternalFrameOrderByPoliticasCliente.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPoliticasCliente"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPoliticasCliente.jTabbedPaneRelacionesPoliticasCliente.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPoliticasCliente"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFramePoliticasCliente();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormPoliticasCliente.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormPoliticasCliente = (JInternalFrameBase)event.getSource();
	            	
	            PoliticasClienteBeanSwingJInternalFrame jInternalFrameParent=(PoliticasClienteBeanSwingJInternalFrame)jInternalFrameDetalleFormPoliticasCliente.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarPoliticasClienteActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosPoliticasCliente.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosPoliticasClienteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosPoliticasCliente.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosPoliticasCliente.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoPoliticasCliente";
		inputMap = this.jButtonNuevoPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPoliticasClienteActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPoliticasClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesPoliticasCliente";
		inputMap = this.jButtonNuevoRelacionesPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPoliticasClienteActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarPoliticasCliente";
		inputMap = this.jButtonModificarPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarPoliticasCliente";
		inputMap = this.jButtonActualizarPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarPoliticasCliente";
		inputMap = this.jButtonEliminarPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarPoliticasCliente";
		inputMap = this.jButtonCancelarPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarPoliticasCliente";
		inputMap = this.jButtonCerrarPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosPoliticasCliente";
		inputMap = this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonGuardarCambiosPoliticasCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosPoliticasClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosPoliticasCliente.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosPoliticasClienteItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesPoliticasCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesPoliticasClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarPoliticasCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarPoliticasClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralPoliticasCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralPoliticasClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//jButtonid_clientePoliticasCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePoliticasClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasCliente.addActionListener(new ButtonActionListener(this,"id_clientePoliticasCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_empresaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonlimite_creditoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"limite_creditoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_inicioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_renovacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_renovacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_finPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_neto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_neto_pagoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondias_graciaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"dias_graciaPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncupoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"cupoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_generalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_generalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtondescuento_pronto_pagoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"descuento_pronto_pagoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_lista_precioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_lista_precioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncon_impuestosPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"con_impuestosPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonactivar_monto_facturacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"activar_monto_facturacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_sobregiroPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_venci_sobregiroPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venci_sobregiroPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_transportePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_transportePoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_solicitadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_solicitadoPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonvalor_aprobadoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"valor_aprobadoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_linea_negocioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_negocioPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonfecha_solicitudPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"fecha_solicitudPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonobsevacionPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"obsevacionPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonwebPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"webPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtoncasilla_postalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"casilla_postalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonforma_envioPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"forma_envioPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_bancoPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_tipo_cuenta_banco_globalPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalPoliticasClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonnumero_cuentaPoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaPoliticasClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteUpdate.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_estado_politicas_clientePoliticasClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_politicas_clientePoliticasClienteBusqueda"));
		
		
		this.jButtonFK_IdBancoPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdBancoPoliticasCliente"));

		this.jButtonFK_IdClientePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdClientePoliticasCliente"));

		this.jButtonBuscarFK_IdClienteid_clientePoliticasCliente.addActionListener(new ButtonActionListener(this,"id_clientePoliticasCliente"));

		this.jButtonFK_IdEstadoPoliticasClientePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdEstadoPoliticasClientePoliticasCliente"));

		this.jButtonFK_IdLineaNegocioPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdLineaNegocioPoliticasCliente"));

		this.jButtonFK_IdTipoCuentaBancoGlobalPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalPoliticasCliente"));

		this.jButtonFK_IdTipoPrecioPoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioPoliticasCliente"));

		this.jButtonFK_IdTransportePoliticasCliente.addActionListener(new ButtonActionListener(this,"FK_IdTransportePoliticasCliente"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionPoliticasCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionPoliticasClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarPoliticasClienteActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarPoliticasCliente.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosPoliticasCliente(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
					politicasclienteAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PoliticasCliente politicasclienteAux:politicasclientes) {
					politicasclienteAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosPoliticasClienteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
						politicasclienteAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PoliticasCliente politicasclienteAux:politicasclientes) {
						politicasclienteAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
					
						if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO)) {
							existe=true;
							politicasclienteAux.setcon_lista_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS)) {
							existe=true;
							politicasclienteAux.setcon_impuestos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION)) {
							existe=true;
							politicasclienteAux.setactivar_monto_facturacion(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PoliticasCliente politicasclienteAux:politicasclientes) {
						
						if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO)) {
							existe=true;
							politicasclienteAux.setcon_lista_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS)) {
							existe=true;
							politicasclienteAux.setcon_impuestos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION)) {
							existe=true;
							politicasclienteAux.setactivar_monto_facturacion(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPoliticasCliente.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPoliticasCliente.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosPoliticasClienteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosPoliticasCliente.getSelectedRows();
			
			PoliticasCliente politicasclienteLocal=new PoliticasCliente();
			
			//this.seleccionarTodosPoliticasCliente(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					politicasclienteLocal =(PoliticasCliente) this.politicasclienteLogic.getPoliticasClientes().toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					politicasclienteLocal =(PoliticasCliente) this.politicasclientes.toArray()[this.jTableDatosPoliticasCliente.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				politicasclienteLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
						politicasclienteAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PoliticasCliente politicasclienteAux:politicasclientes) {
						politicasclienteAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPoliticasCliente.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPoliticasCliente.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPoliticasCliente,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualPoliticasClienteItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarPoliticasClienteParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralPoliticasClienteActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralPoliticasCliente.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PoliticasCliente politicasclienteAux:this.politicasclienteLogic.getPoliticasClientes()) {
				
						if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO)) {
							existe=true;
							politicasclienteAux.setlimite_credito(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO)) {
							existe=true;
							politicasclienteAux.setfecha_inicio(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION)) {
							existe=true;
							politicasclienteAux.setfecha_renovacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN)) {
							existe=true;
							politicasclienteAux.setfecha_fin(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO)) {
							existe=true;
							politicasclienteAux.setdias_neto_pago(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA)) {
							existe=true;
							politicasclienteAux.setdias_gracia(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CUPO)) {
							existe=true;
							politicasclienteAux.setcupo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL)) {
							existe=true;
							politicasclienteAux.setdescuento_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO)) {
							existe=true;
							politicasclienteAux.setdescuento_pronto_pago(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO)) {
							existe=true;
							politicasclienteAux.setvalor_sobregiro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO)) {
							existe=true;
							politicasclienteAux.setfecha_venci_sobregiro(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO)) {
							existe=true;
							politicasclienteAux.setvalor_solicitado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO)) {
							existe=true;
							politicasclienteAux.setvalor_aprobado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD)) {
							existe=true;
							politicasclienteAux.setfecha_solicitud(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION)) {
							existe=true;
							politicasclienteAux.setobsevacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_WEB)) {
							existe=true;
							politicasclienteAux.setweb(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL)) {
							existe=true;
							politicasclienteAux.setcasilla_postal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO)) {
							existe=true;
							politicasclienteAux.setforma_envio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							politicasclienteAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PoliticasCliente politicasclienteAux:politicasclientes) {
					
						if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO)) {
							existe=true;
							politicasclienteAux.setlimite_credito(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO)) {
							existe=true;
							politicasclienteAux.setfecha_inicio(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION)) {
							existe=true;
							politicasclienteAux.setfecha_renovacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN)) {
							existe=true;
							politicasclienteAux.setfecha_fin(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO)) {
							existe=true;
							politicasclienteAux.setdias_neto_pago(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA)) {
							existe=true;
							politicasclienteAux.setdias_gracia(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CUPO)) {
							existe=true;
							politicasclienteAux.setcupo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL)) {
							existe=true;
							politicasclienteAux.setdescuento_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO)) {
							existe=true;
							politicasclienteAux.setdescuento_pronto_pago(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO)) {
							existe=true;
							politicasclienteAux.setvalor_sobregiro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO)) {
							existe=true;
							politicasclienteAux.setfecha_venci_sobregiro(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO)) {
							existe=true;
							politicasclienteAux.setvalor_solicitado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO)) {
							existe=true;
							politicasclienteAux.setvalor_aprobado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD)) {
							existe=true;
							politicasclienteAux.setfecha_solicitud(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION)) {
							existe=true;
							politicasclienteAux.setobsevacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_WEB)) {
							existe=true;
							politicasclienteAux.setweb(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL)) {
							existe=true;
							politicasclienteAux.setcasilla_postal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO)) {
							existe=true;
							politicasclienteAux.setforma_envio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							politicasclienteAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaPoliticasCliente(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesPoliticasClienteActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioPoliticasCliente=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesPoliticasCliente.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReportePoliticasCliente) {				
					conSplash=true;//false;										
					
					//this.startProcessPoliticasCliente(conSplash);
				
					this.generarReportePoliticasClientesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoPoliticasClientesSeleccionados();
				//this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPoliticasClientesSeleccionados(false);
				//this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPoliticasClientesSeleccionados(true);
				//this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPoliticasCliente();
				
				this.exportarPoliticasClientesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionPoliticasClientes();
				//this.importarPoliticasClientes();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPoliticasCliente();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelPoliticasClientesSeleccionados();
				//this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Politicas Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessPoliticasCliente();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoPoliticasCliente)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyPoliticasCliente(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
				}	
			} 			
			else if(PoliticasClienteBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReportePoliticasCliente) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessPoliticasCliente(conSplash);
					
						//this.actualizarParametrosGeneralPoliticasCliente();
						
						this.generarReporteProcesoAccionPoliticasClientesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(PoliticasClienteBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Politicas ClienteS SELECCIONADOS?", "MANTENIMIENTO DE Politicas Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessPoliticasCliente();
				
						this.actualizarParametrosGeneralPoliticasCliente();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.politicasclienteReturnGeneral=politicasclienteLogic.procesarAccionPoliticasClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.politicasclienteLogic.getPoliticasClientes(),this.politicasclienteParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarPoliticasClienteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralPoliticasCliente();
					
					PoliticasClienteBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarPoliticasClienteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPoliticasCliente.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxTiposAccionesFormularioPoliticasCliente.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessPoliticasCliente(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesPoliticasClienteActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessPoliticasCliente();
			
			if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
			PoliticasCliente politicascliente=new PoliticasCliente();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingPoliticasCliente(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesPoliticasCliente.getSelectedItem();
			
			
			
			
			politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
			//this.sTipoAccion;
			
			if(politicasclientesSeleccionados.size()==1) {
				for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
					politicascliente=politicasclienteAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessPoliticasCliente();
			
      		//this.finishProcessPoliticasCliente(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarPoliticasClienteReturnGeneral() throws Exception {
		if(this.politicasclienteReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.politicasclienteReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.politicasclienteReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.politicasclienteReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.politicasclienteReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.politicasclienteReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingPoliticasCliente(false);
		}
		
		if(this.politicasclienteReturnGeneral.getConRetornoLista() || this.politicasclienteReturnGeneral.getConRetornoObjeto()) {
			if(this.politicasclienteReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.politicasclienteLogic.setPoliticasClientes(this.politicasclienteReturnGeneral.getPoliticasClientes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.politicasclienteReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.politicasclienteLogic.setPoliticasCliente(this.politicasclienteReturnGeneral.getPoliticasCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingPoliticasCliente(false);
		}
	}
	
	public void actualizarParametrosGeneralPoliticasCliente() throws Exception {
		
		
	}
	
	public ArrayList<PoliticasCliente> getPoliticasClientesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioPoliticasCliente) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(PoliticasCliente politicasclienteAux:politicasclienteLogic.getPoliticasClientes()) {
					if(politicasclienteAux.getIsSelected()) {
						politicasclientesSeleccionados.add(politicasclienteAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PoliticasCliente politicasclienteAux:this.politicasclientes) {
					if(politicasclienteAux.getIsSelected()) {
						politicasclientesSeleccionados.add(politicasclienteAux);				
					}
				}
			}
			
			if(politicasclientesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						politicasclientesSeleccionados.addAll(this.politicasclienteLogic.getPoliticasClientes());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						politicasclientesSeleccionados.addAll(this.politicasclientes);				
					}
				}
			}
		} else {
			politicasclientesSeleccionados.add(this.politicascliente);
		}
		
		return politicasclientesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReportePoliticasClientesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalPoliticasClientesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoPoliticasClientesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPoliticasClientesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPoliticasClientesSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Politicas Cliente",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados);
		
	}	
	
	public void generarReporteNormalPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionPoliticasClientesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		
		this.abrirInicializarFrameReporteDinamicoPoliticasCliente();
		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoPoliticasCliente();
		
		
		//this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados ,politicasclienteImplementable,politicasclienteImplementableHome);
	}
	
	public void mostrarImportacionPoliticasClientes() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionPoliticasCliente();
		
		this.abrirFrameImportacionPoliticasCliente();		
		
			
		//this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados ,politicasclienteImplementable,politicasclienteImplementableHome);
	}
	
	public void importarPoliticasClientes() throws Exception {		
	
	}
	
	public void exportarPoliticasClientesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelPoliticasClientesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoPoliticasClientesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlPoliticasClientesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Politicas Cliente",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarPoliticasCliente(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarPoliticasCliente(politicasclienteAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//politicasclienteAux.setsDetalleGeneralEntityReporte(politicasclienteAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarPoliticasCliente(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FECHAFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_CUPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_OBSEVACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_WEB;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarPoliticasCliente(PoliticasCliente politicascliente,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=politicascliente.getcliente_descripcion();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getlimite_credito().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getfecha_inicio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getfecha_renovacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getfecha_fin().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getdias_neto_pago().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getdias_gracia().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getcupo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getdescuento_general().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getdescuento_pronto_pago().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getcon_lista_precio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getcon_impuestos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getactivar_monto_facturacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getvalor_sobregiro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getfecha_venci_sobregiro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.gettransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getvalor_solicitado().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getvalor_aprobado().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getlineanegocio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getfecha_solicitud().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getobsevacion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getweb();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getcasilla_postal();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getforma_envio();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getbanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.gettipocuentabancoglobal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getnumero_cuenta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=politicascliente.getestadopoliticascliente_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("PoliticasClientes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelPoliticasCliente(row);				
				iRow++;
			}				
			
			for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelPoliticasCliente(politicasclienteAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlPoliticasClientesSeleccionados() throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();		
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"politicascliente.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("politicasclientes");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("politicascliente");
			//elementRoot.appendChild(element);
		
			for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
				element = document.createElement("politicascliente");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlPoliticasCliente(politicasclienteAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Politicas Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelPoliticasCliente(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_LIMITECREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CUPO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOGENERAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_DESCUENTOPRONTOPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOBREGIRO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORSOLICITADO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_VALORAPROBADO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_WEB);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelPoliticasCliente(PoliticasCliente politicascliente,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getlimite_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getfecha_inicio());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getfecha_renovacion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getfecha_fin());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getdias_neto_pago());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getdias_gracia());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getcupo());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getdescuento_general());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getdescuento_pronto_pago());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getcon_lista_precio());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getcon_impuestos());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getactivar_monto_facturacion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getvalor_sobregiro());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getfecha_venci_sobregiro());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.gettransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getvalor_solicitado());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getvalor_aprobado());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getlineanegocio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getfecha_solicitud());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getobsevacion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getweb());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getcasilla_postal());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getforma_envio());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getbanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.gettipocuentabancoglobal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getnumero_cuenta());
		cell = row.createCell(iColumn++);cell.setCellValue(politicascliente.getestadopoliticascliente_descripcion());				
	}
	
	public void setFilaDatosExportarXmlPoliticasCliente(PoliticasCliente politicascliente,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementcliente_descripcion = document.createElement(PoliticasClienteConstantesFunciones.ID);
		elementcliente_descripcion.appendChild(document.createTextNode(politicascliente.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(PoliticasClienteConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(politicascliente.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(politicascliente.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementlimite_credito = document.createElement(PoliticasClienteConstantesFunciones.LIMITECREDITO);
		elementlimite_credito.appendChild(document.createTextNode(politicascliente.getlimite_credito().toString().trim()));
		element.appendChild(elementlimite_credito);

		Element elementfecha_inicio = document.createElement(PoliticasClienteConstantesFunciones.FECHAINICIO);
		elementfecha_inicio.appendChild(document.createTextNode(politicascliente.getfecha_inicio().toString().trim()));
		element.appendChild(elementfecha_inicio);

		Element elementfecha_renovacion = document.createElement(PoliticasClienteConstantesFunciones.FECHARENOVACION);
		elementfecha_renovacion.appendChild(document.createTextNode(politicascliente.getfecha_renovacion().toString().trim()));
		element.appendChild(elementfecha_renovacion);

		Element elementfecha_fin = document.createElement(PoliticasClienteConstantesFunciones.FECHAFIN);
		elementfecha_fin.appendChild(document.createTextNode(politicascliente.getfecha_fin().toString().trim()));
		element.appendChild(elementfecha_fin);

		Element elementdias_neto_pago = document.createElement(PoliticasClienteConstantesFunciones.DIASNETOPAGO);
		elementdias_neto_pago.appendChild(document.createTextNode(politicascliente.getdias_neto_pago().toString().trim()));
		element.appendChild(elementdias_neto_pago);

		Element elementdias_gracia = document.createElement(PoliticasClienteConstantesFunciones.DIASGRACIA);
		elementdias_gracia.appendChild(document.createTextNode(politicascliente.getdias_gracia().toString().trim()));
		element.appendChild(elementdias_gracia);

		Element elementcupo = document.createElement(PoliticasClienteConstantesFunciones.CUPO);
		elementcupo.appendChild(document.createTextNode(politicascliente.getcupo().toString().trim()));
		element.appendChild(elementcupo);

		Element elementdescuento_general = document.createElement(PoliticasClienteConstantesFunciones.DESCUENTOGENERAL);
		elementdescuento_general.appendChild(document.createTextNode(politicascliente.getdescuento_general().toString().trim()));
		element.appendChild(elementdescuento_general);

		Element elementdescuento_pronto_pago = document.createElement(PoliticasClienteConstantesFunciones.DESCUENTOPRONTOPAGO);
		elementdescuento_pronto_pago.appendChild(document.createTextNode(politicascliente.getdescuento_pronto_pago().toString().trim()));
		element.appendChild(elementdescuento_pronto_pago);

		Element elementtipoprecio_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(politicascliente.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementcon_lista_precio = document.createElement(PoliticasClienteConstantesFunciones.CONLISTAPRECIO);
		elementcon_lista_precio.appendChild(document.createTextNode(politicascliente.getcon_lista_precio().toString().trim()));
		element.appendChild(elementcon_lista_precio);

		Element elementcon_impuestos = document.createElement(PoliticasClienteConstantesFunciones.CONIMPUESTOS);
		elementcon_impuestos.appendChild(document.createTextNode(politicascliente.getcon_impuestos().toString().trim()));
		element.appendChild(elementcon_impuestos);

		Element elementactivar_monto_facturacion = document.createElement(PoliticasClienteConstantesFunciones.ACTIVARMONTOFACTURACION);
		elementactivar_monto_facturacion.appendChild(document.createTextNode(politicascliente.getactivar_monto_facturacion().toString().trim()));
		element.appendChild(elementactivar_monto_facturacion);

		Element elementvalor_sobregiro = document.createElement(PoliticasClienteConstantesFunciones.VALORSOBREGIRO);
		elementvalor_sobregiro.appendChild(document.createTextNode(politicascliente.getvalor_sobregiro().toString().trim()));
		element.appendChild(elementvalor_sobregiro);

		Element elementfecha_venci_sobregiro = document.createElement(PoliticasClienteConstantesFunciones.FECHAVENCISOBREGIRO);
		elementfecha_venci_sobregiro.appendChild(document.createTextNode(politicascliente.getfecha_venci_sobregiro().toString().trim()));
		element.appendChild(elementfecha_venci_sobregiro);

		Element elementtransporte_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDTRANSPORTE);
		elementtransporte_descripcion.appendChild(document.createTextNode(politicascliente.gettransporte_descripcion()));
		element.appendChild(elementtransporte_descripcion);

		Element elementvalor_solicitado = document.createElement(PoliticasClienteConstantesFunciones.VALORSOLICITADO);
		elementvalor_solicitado.appendChild(document.createTextNode(politicascliente.getvalor_solicitado().toString().trim()));
		element.appendChild(elementvalor_solicitado);

		Element elementvalor_aprobado = document.createElement(PoliticasClienteConstantesFunciones.VALORAPROBADO);
		elementvalor_aprobado.appendChild(document.createTextNode(politicascliente.getvalor_aprobado().toString().trim()));
		element.appendChild(elementvalor_aprobado);

		Element elementlineanegocio_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDLINEANEGOCIO);
		elementlineanegocio_descripcion.appendChild(document.createTextNode(politicascliente.getlineanegocio_descripcion()));
		element.appendChild(elementlineanegocio_descripcion);

		Element elementfecha_solicitud = document.createElement(PoliticasClienteConstantesFunciones.FECHASOLICITUD);
		elementfecha_solicitud.appendChild(document.createTextNode(politicascliente.getfecha_solicitud().toString().trim()));
		element.appendChild(elementfecha_solicitud);

		Element elementobsevacion = document.createElement(PoliticasClienteConstantesFunciones.OBSEVACION);
		elementobsevacion.appendChild(document.createTextNode(politicascliente.getobsevacion().trim()));
		element.appendChild(elementobsevacion);

		Element elementweb = document.createElement(PoliticasClienteConstantesFunciones.WEB);
		elementweb.appendChild(document.createTextNode(politicascliente.getweb().trim()));
		element.appendChild(elementweb);

		Element elementcasilla_postal = document.createElement(PoliticasClienteConstantesFunciones.CASILLAPOSTAL);
		elementcasilla_postal.appendChild(document.createTextNode(politicascliente.getcasilla_postal().trim()));
		element.appendChild(elementcasilla_postal);

		Element elementforma_envio = document.createElement(PoliticasClienteConstantesFunciones.FORMAENVIO);
		elementforma_envio.appendChild(document.createTextNode(politicascliente.getforma_envio().trim()));
		element.appendChild(elementforma_envio);

		Element elementbanco_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDBANCO);
		elementbanco_descripcion.appendChild(document.createTextNode(politicascliente.getbanco_descripcion()));
		element.appendChild(elementbanco_descripcion);

		Element elementtipocuentabancoglobal_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDTIPOCUENTABANCOGLOBAL);
		elementtipocuentabancoglobal_descripcion.appendChild(document.createTextNode(politicascliente.gettipocuentabancoglobal_descripcion()));
		element.appendChild(elementtipocuentabancoglobal_descripcion);

		Element elementnumero_cuenta = document.createElement(PoliticasClienteConstantesFunciones.NUMEROCUENTA);
		elementnumero_cuenta.appendChild(document.createTextNode(politicascliente.getnumero_cuenta().trim()));
		element.appendChild(elementnumero_cuenta);

		Element elementestadopoliticascliente_descripcion = document.createElement(PoliticasClienteConstantesFunciones.IDESTADOPOLITICASCLIENTE);
		elementestadopoliticascliente_descripcion.appendChild(document.createTextNode(politicascliente.getestadopoliticascliente_descripcion()));
		element.appendChild(elementestadopoliticascliente_descripcion);
	}
	
	public void generarReporteGroupGenericoPoliticasClientesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<PoliticasCliente> politicasclientesSeleccionados=new ArrayList<PoliticasCliente>();
		
		politicasclientesSeleccionados=this.getPoliticasClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoPoliticasCliente(politicasclientesSeleccionados);
		
		this.generarReportePoliticasClientes("Todos",politicasclientesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoPoliticasCliente(ArrayList<PoliticasCliente> politicasclientesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(PoliticasCliente politicasclienteAux:politicasclientesSeleccionados) {
				politicasclienteAux.setsDetalleGeneralEntityReporte(politicasclienteAux.toString());
			
				if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAINICIO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(politicasclienteAux.getfecha_inicio()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHARENOVACION)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(politicasclienteAux.getfecha_renovacion()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAFIN)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(politicasclienteAux.getfecha_fin()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASNETOPAGO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getdias_neto_pago().toString());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_DIASGRACIA)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getdias_gracia().toString());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONLISTAPRECIO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(politicasclienteAux.getcon_lista_precio()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CONIMPUESTOS)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(politicasclienteAux.getcon_impuestos()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_ACTIVARMONTOFACTURACION)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(politicasclienteAux.getactivar_monto_facturacion()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHAVENCISOBREGIRO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(politicasclienteAux.getfecha_venci_sobregiro()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDTRANSPORTE)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.gettransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDLINEANEGOCIO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getlineanegocio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FECHASOLICITUD)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(politicasclienteAux.getfecha_solicitud()));
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_OBSEVACION)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getobsevacion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_WEB)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getweb());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_CASILLAPOSTAL)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getcasilla_postal());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_FORMAENVIO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getforma_envio());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDBANCO)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getbanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.gettipocuentabancoglobal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_NUMEROCUENTA)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getnumero_cuenta());
				}
				 else if(sTipoSeleccionar.equals(PoliticasClienteConstantesFunciones.LABEL_IDESTADOPOLITICASCLIENTE)) {
					existe=true;
					politicasclienteAux.setsDescripcionGeneralEntityReporte1(politicasclienteAux.getestadopoliticascliente_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PoliticasClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesPoliticasCliente(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoPoliticasCliente=true;
				this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=true;
				this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=true;
			}
			
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=true;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=true;
			this.isVisibilidadCeldaEliminarPoliticasCliente=true;
			this.isVisibilidadCeldaCancelarPoliticasCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=true;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=true;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=true;
			this.isVisibilidadCeldaModificarPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			this.isVisibilidadCeldaModificarPoliticasCliente=true;
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
			this.isVisibilidadCeldaCancelarPoliticasCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarPoliticasCliente=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(PoliticasClienteJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoPoliticasCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=true;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=true;
		} else {
			this.actualizarEstadoPanelsPoliticasCliente(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarPoliticasCliente=false;
			//this.isVisibilidadCeldaVerFormPoliticasCliente=false;
			this.isVisibilidadCeldaDuplicarPoliticasCliente=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!politicasclienteSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
		} else {
			this.isVisibilidadCeldaNuevoPoliticasCliente=false;
			this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(politicasclienteSessionBean.getEsGuardarRelacionado()) {
			if(!politicasclienteSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;												
			}
			
			this.jButtonCerrarPoliticasCliente.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
		}
		
		if(!this.permiteMantenimiento(this.politicascliente)) {
			this.isVisibilidadCeldaActualizarPoliticasCliente=false;
			this.isVisibilidadCeldaEliminarPoliticasCliente=false;
		}
		
		//SI ES UNO A UNO FK
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			
			if(politicasclienteLogic.getPoliticasClientes().size()>0) {
									this.isVisibilidadCeldaNuevoPoliticasCliente=false;	
									this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
									this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			}
			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			if(politicasclientes.size()>0) {
				this.isVisibilidadCeldaNuevoPoliticasCliente=false;	
				this.isVisibilidadCeldaNuevoRelacionesPoliticasCliente=false;
				this.isVisibilidadCeldaGuardarCambiosPoliticasCliente=false;
			}
		}
		//ARCHITECTURE
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesPoliticasCliente() {
	}
	
	public void actualizarEstadoPanelsPoliticasCliente(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionPoliticasCliente!=null) {
				this.jScrollPanelDatosEdicionPoliticasCliente.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPoliticasCliente!=null) {
				this.jScrollPanelDatosPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionPoliticasCliente!=null) {
				this.jPanelPaginacionPoliticasCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
					this.jTabbedPaneBusquedasPoliticasCliente.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.politicasclienteSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPoliticasCliente!=null) {
				this.jTabbedPaneBusquedasPoliticasCliente.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesPoliticasCliente!=null) {
				this.jPanelParametrosReportesPoliticasCliente.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadFK_IdBanco=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoPrecio;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransporte(Boolean isParaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransporteNegation=!isParaTransporte;

			this.isVisibilidadFK_IdBanco=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaTransporte;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaNegocio(Boolean isParaLineaNegocio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaNegocioNegation=!isParaLineaNegocio;

			this.isVisibilidadFK_IdBanco=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaLineaNegocio;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaLineaNegocioNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaBanco(Boolean isParaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBancoNegation=!isParaBanco;

			this.isVisibilidadFK_IdBanco=isParaBanco;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCuentaBancoGlobal(Boolean isParaTipoCuentaBancoGlobal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCuentaBancoGlobalNegation=!isParaTipoCuentaBancoGlobal;

			this.isVisibilidadFK_IdBanco=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoCuentaBancoGlobal;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoPoliticasCliente(Boolean isParaEstadoPoliticasCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoPoliticasClienteNegation=!isParaEstadoPoliticasCliente;

			this.isVisibilidadFK_IdBanco=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdBancoPoliticasCliente);}

			this.isVisibilidadFK_IdCliente=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdClientePoliticasCliente);}

			this.isVisibilidadFK_IdEstadoPoliticasCliente=isParaEstadoPoliticasCliente;
			if(!this.isVisibilidadFK_IdEstadoPoliticasCliente) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdEstadoPoliticasClientePoliticasCliente);}

			this.isVisibilidadFK_IdLineaNegocio=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdLineaNegocio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdLineaNegocioPoliticasCliente);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTipoPrecioPoliticasCliente);}

			this.isVisibilidadFK_IdTransporte=isParaEstadoPoliticasClienteNegation;
			if(!this.isVisibilidadFK_IdTransporte) {this.jTabbedPaneBusquedasPoliticasCliente.remove(jPanelFK_IdTransportePoliticasCliente);}
		}
		
	}
	
	
	
	

	public String registrarSesionPoliticasClienteParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(politicasclienteSessionBean==null) {
				politicasclienteSessionBean=new PoliticasClienteSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(politicasclienteSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.politicasclienteFuncionGeneral.setCombosCodigoDesdeBusquedaId(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(PoliticasClienteConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionPoliticasCliente(true);
			//clienteSessionBean.setlidPoliticasClienteActual(this.idPoliticasClienteActual);

			politicasclienteSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPoliticasCliente(true);
			politicasclienteSessionBean.setlIdPoliticasClienteActualForeignKey(this.idPoliticasClienteActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//PoliticasClienteSessionBean politicasclienteSessionBean=new PoliticasClienteSessionBean();
		
		if(this.politicasclienteSessionBean==null) {
			this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
		}
		
		this.politicasclienteSessionBean.setsUltimaBusquedaPoliticasCliente(this.getsAccionBusqueda());
		this.politicasclienteSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.politicasclienteSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
			politicasclienteSessionBean.setid_banco(this.getid_bancoFK_IdBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			politicasclienteSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			politicasclienteSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoPoliticasCliente")) {
			politicasclienteSessionBean.setid_estado_politicas_cliente(this.getid_estado_politicas_clienteFK_IdEstadoPoliticasCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdLineaNegocio")) {
			politicasclienteSessionBean.setid_linea_negocio(this.getid_linea_negocioFK_IdLineaNegocio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
			politicasclienteSessionBean.setid_tipo_cuenta_banco_global(this.getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
			politicasclienteSessionBean.setid_tipo_precio(this.getid_tipo_precioFK_IdTipoPrecio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransporte")) {
			politicasclienteSessionBean.setid_transporte(this.getid_transporteFK_IdTransporte());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//PoliticasClienteSessionBean politicasclienteSessionBean=new PoliticasClienteSessionBean();
		
		if(this.politicasclienteSessionBean==null) {
			this.politicasclienteSessionBean=new PoliticasClienteSessionBean();
		}
		
		if(this.politicasclienteSessionBean.getsUltimaBusquedaPoliticasCliente()!=null&&!this.politicasclienteSessionBean.getsUltimaBusquedaPoliticasCliente().equals("")) {
			this.setsAccionBusqueda(politicasclienteSessionBean.getsUltimaBusquedaPoliticasCliente());
			this.setiNumeroPaginacion(politicasclienteSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(politicasclienteSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
				this.setid_bancoFK_IdBanco(politicasclienteSessionBean.getid_banco());
				politicasclienteSessionBean.setid_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(politicasclienteSessionBean.getid_cliente());
				politicasclienteSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(politicasclienteSessionBean.getid_empresa());
				politicasclienteSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoPoliticasCliente")) {
				this.setid_estado_politicas_clienteFK_IdEstadoPoliticasCliente(politicasclienteSessionBean.getid_estado_politicas_cliente());
				politicasclienteSessionBean.setid_estado_politicas_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdLineaNegocio")) {
				this.setid_linea_negocioFK_IdLineaNegocio(politicasclienteSessionBean.getid_linea_negocio());
				politicasclienteSessionBean.setid_linea_negocio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
				this.setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(politicasclienteSessionBean.getid_tipo_cuenta_banco_global());
				politicasclienteSessionBean.setid_tipo_cuenta_banco_global(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
				this.setid_tipo_precioFK_IdTipoPrecio(politicasclienteSessionBean.getid_tipo_precio());
				politicasclienteSessionBean.setid_tipo_precio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransporte")) {
				this.setid_transporteFK_IdTransporte(politicasclienteSessionBean.getid_transporte());
				politicasclienteSessionBean.setid_transporte(-1L);
			}
		}
		
		this.politicasclienteSessionBean.setsUltimaBusquedaPoliticasCliente("");
		this.politicasclienteSessionBean.setiNumeroPaginacion(PoliticasClienteConstantesFunciones.INUMEROPAGINACION);
		this.politicasclienteSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaPoliticasCliente(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioPoliticasCliente() {
		this.updateBorderResaltarBusquedasFormularioPoliticasCliente();
		this.updateVisibilidadBusquedasFormularioPoliticasCliente();
		this.updateHabilitarBusquedasFormularioPoliticasCliente();
	}
	
	public void updateBorderResaltarBusquedasFormularioPoliticasCliente() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasPoliticasCliente.getComponents().length>0) {
	

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdBancoPoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdBancoPoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdBancoPoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdClientePoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdClientePoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdClientePoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdEstadoPoliticasClientePoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdEstadoPoliticasClientePoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdEstadoPoliticasClientePoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdLineaNegocioPoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdLineaNegocioPoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdLineaNegocioPoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalPoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoPrecioPoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoPrecioPoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoPrecioPoliticasCliente);
			}
		}

		if(this.politicasclienteConstantesFunciones.resaltarFK_IdTransportePoliticasCliente!=null) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTransportePoliticasCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTransportePoliticasCliente);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioPoliticasCliente() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasPoliticasCliente.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdBancoPoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdBancoPoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdBancoPoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdClientePoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdClientePoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdClientePoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdEstadoPoliticasClientePoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdEstadoPoliticasClientePoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdEstadoPoliticasClientePoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdLineaNegocioPoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdLineaNegocioPoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdLineaNegocioPoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalPoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoPrecioPoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdTipoPrecioPoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdTipoPrecioPoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTransportePoliticasCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.politicasclienteConstantesFunciones.mostrarFK_IdTransportePoliticasCliente);
			if(!this.politicasclienteConstantesFunciones.mostrarFK_IdTransportePoliticasCliente && index>-1) {
				this.jTabbedPaneBusquedasPoliticasCliente.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioPoliticasCliente() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasPoliticasCliente.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdBancoPoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdBancoPoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdBancoPoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdClientePoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdClientePoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdClientePoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdEstadoPoliticasClientePoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdEstadoPoliticasClientePoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdEstadoPoliticasClientePoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdLineaNegocioPoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdLineaNegocioPoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdLineaNegocioPoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalPoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoPrecioPoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdTipoPrecioPoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdTipoPrecioPoliticasCliente);
			}

			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTransportePoliticasCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.politicasclienteConstantesFunciones.activarFK_IdTransportePoliticasCliente);
				this.jTabbedPaneBusquedasPoliticasCliente.setEnabledAt(index,this.politicasclienteConstantesFunciones.activarFK_IdTransportePoliticasCliente);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaPoliticasCliente(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBanco")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdBancoPoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdBancoPoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdBancoPoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdClientePoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdClientePoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdClientePoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoPoliticasCliente")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdEstadoPoliticasClientePoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdEstadoPoliticasClientePoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdEstadoPoliticasClientePoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdLineaNegocio")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdLineaNegocioPoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdLineaNegocioPoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdLineaNegocioPoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalPoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdTipoCuentaBancoGlobalPoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalPoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoPrecio")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTipoPrecioPoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdTipoPrecioPoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTipoPrecioPoliticasCliente);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransporte")) {
			index= this.jTabbedPaneBusquedasPoliticasCliente.indexOfComponent(this.jPanelFK_IdTransportePoliticasCliente);

			this.jTabbedPaneBusquedasPoliticasCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPoliticasCliente.getComponent(index);

			this.politicasclienteConstantesFunciones.setResaltarFK_IdTransportePoliticasCliente(resaltar);

			jPanel.setBorder(this.politicasclienteConstantesFunciones.resaltarFK_IdTransportePoliticasCliente);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarPoliticasCliente.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioPoliticasCliente() throws Exception {

		if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioPoliticasCliente();
		this.updateVisibilidadResaltarControlesFormularioPoliticasCliente();
		this.updateHabilitarResaltarControlesFormularioPoliticasCliente();
		
	}
	
	public void updateBorderResaltarControlesFormularioPoliticasCliente() throws Exception {
		if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.politicasclienteConstantesFunciones.resaltarid_clientePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_clientePoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_empresaPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_empresaPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarlimite_creditoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarlimite_creditoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarfecha_inicioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarfecha_inicioPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarfecha_renovacionPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarfecha_renovacionPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarfecha_finPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarfecha_finPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltardias_neto_pagoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltardias_neto_pagoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltardias_graciaPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltardias_graciaPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarcupoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarcupoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltardescuento_generalPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltardescuento_generalPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltardescuento_pronto_pagoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltardescuento_pronto_pagoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_tipo_precioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_tipo_precioPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarcon_lista_precioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setBorderPainted(true);this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarcon_lista_precioPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarcon_impuestosPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setBorderPainted(true);this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarcon_impuestosPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltaractivar_monto_facturacionPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setBorderPainted(true);this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltaractivar_monto_facturacionPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarvalor_sobregiroPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarvalor_sobregiroPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarfecha_venci_sobregiroPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarfecha_venci_sobregiroPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_transportePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_transportePoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarvalor_solicitadoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarvalor_solicitadoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarvalor_aprobadoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarvalor_aprobadoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_linea_negocioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_linea_negocioPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarfecha_solicitudPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarfecha_solicitudPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarobsevacionPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarobsevacionPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarwebPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarwebPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarcasilla_postalPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarcasilla_postalPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarforma_envioPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarforma_envioPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_bancoPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_bancoPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_tipo_cuenta_banco_globalPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_tipo_cuenta_banco_globalPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarnumero_cuentaPoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarnumero_cuentaPoliticasCliente);}
		if(this.politicasclienteConstantesFunciones.resaltarid_estado_politicas_clientePoliticasCliente!=null && this.jInternalFrameDetalleFormPoliticasCliente!=null) {this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setBorder(this.politicasclienteConstantesFunciones.resaltarid_estado_politicas_clientePoliticasCliente);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioPoliticasCliente() throws Exception {		
		if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
	
		//this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_clientePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_clientePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_clientePoliticasCliente);
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_clientePoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_empresaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_empresaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_empresaPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarlimite_creditoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanellimite_creditoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarlimite_creditoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_inicioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelfecha_inicioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_inicioPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_renovacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelfecha_renovacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_renovacionPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_finPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelfecha_finPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_finPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardias_neto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPaneldias_neto_pagoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardias_neto_pagoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardias_graciaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPaneldias_graciaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardias_graciaPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcupoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelcupoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcupoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardescuento_generalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPaneldescuento_generalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardescuento_generalPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardescuento_pronto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPaneldescuento_pronto_pagoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrardescuento_pronto_pagoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_tipo_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_tipo_precioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_tipo_precioPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcon_lista_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelcon_lista_precioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcon_lista_precioPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcon_impuestosPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelcon_impuestosPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcon_impuestosPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostraractivar_monto_facturacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelactivar_monto_facturacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostraractivar_monto_facturacionPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelvalor_sobregiroPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_sobregiroPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_venci_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelfecha_venci_sobregiroPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_venci_sobregiroPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_transportePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_transportePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_transportePoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_solicitadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelvalor_solicitadoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_solicitadoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_aprobadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelvalor_aprobadoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarvalor_aprobadoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_linea_negocioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_linea_negocioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_linea_negocioPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_solicitudPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelfecha_solicitudPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarfecha_solicitudPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarobsevacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelobsevacionPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarobsevacionPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarwebPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelwebPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarwebPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcasilla_postalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelcasilla_postalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarcasilla_postalPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarforma_envioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelforma_envioPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarforma_envioPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_bancoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_bancoPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_bancoPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_tipo_cuenta_banco_globalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_tipo_cuenta_banco_globalPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_tipo_cuenta_banco_globalPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarnumero_cuentaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelnumero_cuentaPoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarnumero_cuentaPoliticasCliente);
		//this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_estado_politicas_clientePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jPanelid_estado_politicas_clientePoliticasCliente.setVisible(this.politicasclienteConstantesFunciones.mostrarid_estado_politicas_clientePoliticasCliente);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioPoliticasCliente() throws Exception {
		if(this.jInternalFrameDetalleFormPoliticasCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPoliticasCliente!=null) {
	
		this.jInternalFrameDetalleFormPoliticasCliente.jLabelid_clientePoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_clientePoliticasCliente);
			this.jInternalFrameDetalleFormPoliticasCliente.jButtonid_clientePoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_clientePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_empresaPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_empresaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldlimite_creditoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarlimite_creditoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_inicioPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarfecha_inicioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_renovacionPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarfecha_renovacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_finPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarfecha_finPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_neto_pagoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activardias_neto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddias_graciaPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activardias_graciaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcupoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarcupoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_generalPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activardescuento_generalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFielddescuento_pronto_pagoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activardescuento_pronto_pagoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_precioPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_tipo_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_lista_precioPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarcon_lista_precioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxcon_impuestosPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarcon_impuestosPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jCheckBoxactivar_monto_facturacionPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activaractivar_monto_facturacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_sobregiroPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarvalor_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_venci_sobregiroPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarfecha_venci_sobregiroPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_transportePoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_transportePoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_solicitadoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarvalor_solicitadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldvalor_aprobadoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarvalor_aprobadoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_linea_negocioPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_linea_negocioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jDateChooserfecha_solicitudPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarfecha_solicitudPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaobsevacionPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarobsevacionPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreawebPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarwebPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldcasilla_postalPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarcasilla_postalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextAreaforma_envioPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarforma_envioPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_bancoPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_bancoPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_tipo_cuenta_banco_globalPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_tipo_cuenta_banco_globalPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jTextFieldnumero_cuentaPoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarnumero_cuentaPoliticasCliente);
		this.jInternalFrameDetalleFormPoliticasCliente.jComboBoxid_estado_politicas_clientePoliticasCliente.setEnabled(this.politicasclienteConstantesFunciones.activarid_estado_politicas_clientePoliticasCliente);
		}
	}
	
		
}