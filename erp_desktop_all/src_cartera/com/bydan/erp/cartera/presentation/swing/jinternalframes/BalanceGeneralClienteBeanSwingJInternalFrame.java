/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.cartera.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.cartera.util.BalanceGeneralClienteConstantesFunciones;
import com.bydan.erp.cartera.util.BalanceGeneralClienteParameterReturnGeneral;
//import com.bydan.erp.cartera.util.BalanceGeneralClienteParameterGeneral;
//import com.bydan.erp.cartera.presentation.report.source.BalanceGeneralClienteBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.cartera.resources.reportes.AuxiliarReportes;


import com.bydan.erp.cartera.util.*;
import com.bydan.erp.cartera.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.cartera.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class BalanceGeneralClienteBeanSwingJInternalFrame extends BalanceGeneralClienteJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(BalanceGeneralClienteBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<BalanceGeneralCliente> balancegeneralclienteValidator = new ClassValidator<BalanceGeneralCliente>(BalanceGeneralCliente.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public BalanceGeneralCliente balancegeneralcliente;	
	public BalanceGeneralCliente balancegeneralclienteAux;
	public BalanceGeneralCliente balancegeneralclienteAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public BalanceGeneralCliente balancegeneralclienteTotales;
	public Long idBalanceGeneralClienteActual;
	public Long iIdNuevoBalanceGeneralCliente=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoBalanceGeneralCliente;
	public Boolean isPermisoNuevoBalanceGeneralCliente;
	public Boolean isPermisoActualizarBalanceGeneralCliente;
	public Boolean isPermisoActualizarOriginalBalanceGeneralCliente;
	public Boolean isPermisoEliminarBalanceGeneralCliente;
	public Boolean isPermisoGuardarCambiosBalanceGeneralCliente;
	public Boolean isPermisoConsultaBalanceGeneralCliente;
	public Boolean isPermisoBusquedaBalanceGeneralCliente;
	public Boolean isPermisoReporteBalanceGeneralCliente;
	public Boolean isPermisoPaginacionMedioBalanceGeneralCliente;
	public Boolean isPermisoPaginacionAltoBalanceGeneralCliente;
	public Boolean isPermisoPaginacionTodoBalanceGeneralCliente;
	public Boolean isPermisoCopiarBalanceGeneralCliente;
	public Boolean isPermisoVerFormBalanceGeneralCliente;
	public Boolean isPermisoDuplicarBalanceGeneralCliente;
	public Boolean isPermisoOrdenBalanceGeneralCliente;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteReturnGeneral;
	public BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoBalanceGeneralCliente=false;
	public Boolean esParaAccionDesdeFormularioBalanceGeneralCliente=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected BalanceGeneralClienteSessionBeanAdditional balancegeneralclienteSessionBeanAdditional=null;
	
	public BalanceGeneralClienteSessionBeanAdditional getBalanceGeneralClienteSessionBeanAdditional() {
		return this.balancegeneralclienteSessionBeanAdditional;
	}
	
	public void setBalanceGeneralClienteSessionBeanAdditional(BalanceGeneralClienteSessionBeanAdditional balancegeneralclienteSessionBeanAdditional) {
		try {
			this.balancegeneralclienteSessionBeanAdditional=balancegeneralclienteSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected BalanceGeneralClienteBeanSwingJInternalFrameAdditional balancegeneralclienteBeanSwingJInternalFrameAdditional=null;
	//public class BalanceGeneralClienteBeanSwingJInternalFrame
	
	public BalanceGeneralClienteBeanSwingJInternalFrameAdditional getBalanceGeneralClienteBeanSwingJInternalFrameAdditional() {
		return this.balancegeneralclienteBeanSwingJInternalFrameAdditional;
	}
	
	public void setBalanceGeneralClienteBeanSwingJInternalFrameAdditional(BalanceGeneralClienteBeanSwingJInternalFrameAdditional balancegeneralclienteBeanSwingJInternalFrameAdditional) {
		try {
			this.balancegeneralclienteBeanSwingJInternalFrameAdditional=balancegeneralclienteBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public BalanceGeneralClienteLogic balancegeneralclienteLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public BalanceGeneralCliente balancegeneralclienteBean;
	public BalanceGeneralClienteConstantesFunciones balancegeneralclienteConstantesFunciones;
	//public BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public ClienteLogic clienteLogic;
	
	//PARAMETROS
	
	
	//public List<BalanceGeneralCliente> balancegeneralclientes;	
	//public List<BalanceGeneralCliente> balancegeneralclientesEliminados;
	//public List<BalanceGeneralCliente> balancegeneralclientesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaDuplicarBalanceGeneralCliente=true;
	public Boolean isVisibilidadCeldaCopiarBalanceGeneralCliente=true;
	public Boolean isVisibilidadCeldaVerFormBalanceGeneralCliente=true;
	public Boolean isVisibilidadCeldaOrdenBalanceGeneralCliente=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaModificarBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaCancelarBalanceGeneralCliente=false;
	public Boolean isVisibilidadCeldaGuardarBalanceGeneralCliente=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;	
	
	
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	
	public Long getiIdNuevoBalanceGeneralCliente() {
		return this.iIdNuevoBalanceGeneralCliente;
	}

	public void setiIdNuevoBalanceGeneralCliente(Long iIdNuevoBalanceGeneralCliente) {
		this.iIdNuevoBalanceGeneralCliente = iIdNuevoBalanceGeneralCliente;
	}
	
	public Long getidBalanceGeneralClienteActual() {
		return this.idBalanceGeneralClienteActual;
	}

	public void setidBalanceGeneralClienteActual(Long idBalanceGeneralClienteActual) {
		this.idBalanceGeneralClienteActual = idBalanceGeneralClienteActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public BalanceGeneralCliente getbalancegeneralcliente() {
		return this.balancegeneralcliente;
	}

	public void setbalancegeneralcliente(BalanceGeneralCliente balancegeneralcliente) {
		this.balancegeneralcliente = balancegeneralcliente;
	}
	
	public BalanceGeneralCliente getbalancegeneralclienteAux() {
		return this.balancegeneralclienteAux;
	}

	public void setbalancegeneralclienteAux(BalanceGeneralCliente balancegeneralclienteAux) {
		this.balancegeneralclienteAux = balancegeneralclienteAux;
	}				
	
	public BalanceGeneralCliente getbalancegeneralclienteAnterior() {
		return this.balancegeneralclienteAnterior;
	}

	public void setbalancegeneralclienteAnterior(BalanceGeneralCliente balancegeneralclienteAnterior) {
		this.balancegeneralclienteAnterior = balancegeneralclienteAnterior;
	}	
	
	public BalanceGeneralCliente getbalancegeneralclienteTotales() {
		return this.balancegeneralclienteTotales;
	}

	public void setbalancegeneralclienteTotales(BalanceGeneralCliente balancegeneralclienteTotales) {
		this.balancegeneralclienteTotales = balancegeneralclienteTotales;
	}	
	
	public BalanceGeneralCliente getbalancegeneralclienteBean() {
		return this.balancegeneralclienteBean;
	}

	public void setbalancegeneralclienteBean(BalanceGeneralCliente balancegeneralclienteBean) {
		this.balancegeneralclienteBean = balancegeneralclienteBean;
	}	
	
	public BalanceGeneralClienteParameterReturnGeneral getbalancegeneralclienteReturnGeneral() {
		return this.balancegeneralclienteReturnGeneral;
	}

	public void setbalancegeneralclienteReturnGeneral(BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteReturnGeneral) {
		this.balancegeneralclienteReturnGeneral = balancegeneralclienteReturnGeneral;
	}	
	
	
	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public BalanceGeneralClienteLogic getBalanceGeneralClienteLogic()	{		
		return balancegeneralclienteLogic;
	}

	public void setBalanceGeneralClienteLogic(BalanceGeneralClienteLogic balancegeneralclienteLogic) {
		this.balancegeneralclienteLogic = balancegeneralclienteLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoBalanceGeneralCliente() {
		return isEsNuevoBalanceGeneralCliente;
	}

	public void setIsEsNuevoBalanceGeneralCliente(Boolean isEsNuevoBalanceGeneralCliente) {
		this.isEsNuevoBalanceGeneralCliente = isEsNuevoBalanceGeneralCliente;
	}

	public Boolean getEsParaAccionDesdeFormularioBalanceGeneralCliente() {
		return esParaAccionDesdeFormularioBalanceGeneralCliente;
	}
	
	public void setEsParaAccionDesdeFormularioBalanceGeneralCliente(Boolean esParaAccionDesdeFormularioBalanceGeneralCliente) {
		this.esParaAccionDesdeFormularioBalanceGeneralCliente = esParaAccionDesdeFormularioBalanceGeneralCliente;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.balancegeneralclienteSessionBean==null) {
				this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			}

			if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(balancegeneralclienteSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.balancegeneralclienteSessionBean==null) {
				this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			}

			if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(balancegeneralclienteSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.balancegeneralcliente!=null) {
						this.balancegeneralcliente.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
						this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaBalanceGeneralCliente.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaBalanceGeneralClienteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaBalanceGeneralClienteGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaBalanceGeneralClienteGenerico!=null && jComboBoxid_empresaBalanceGeneralClienteGenerico.getItemCount()>0) {
					jComboBoxid_empresaBalanceGeneralClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.balancegeneralcliente!=null) {
						this.balancegeneralcliente.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
						this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteBalanceGeneralCliente.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.getItemCount()>0) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente!=null) {
						jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente!=null) {
							//jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteBalanceGeneralClienteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteBalanceGeneralClienteGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteBalanceGeneralClienteGenerico!=null && jComboBoxid_clienteBalanceGeneralClienteGenerico.getItemCount()>0) {
					jComboBoxid_clienteBalanceGeneralClienteGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(BalanceGeneralCliente balancegeneralcliente,JComboBox jComboBoxid_empresaBalanceGeneralClienteGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaBalanceGeneralClienteGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaBalanceGeneralClienteGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				balancegeneralcliente.setid_empresa(empresaAux.getId());
				balancegeneralcliente.setempresa_descripcion(BalanceGeneralClienteConstantesFunciones.getEmpresaDescripcion(empresaAux));
				balancegeneralcliente.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(BalanceGeneralCliente balancegeneralcliente,JComboBox jComboBoxid_clienteBalanceGeneralClienteGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteBalanceGeneralClienteGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteBalanceGeneralClienteGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				balancegeneralcliente.setid_cliente(clienteAux.getId());
				balancegeneralcliente.setcliente_descripcion(BalanceGeneralClienteConstantesFunciones.getClienteDescripcion(clienteAux));
				balancegeneralcliente.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { 
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { 
					}

					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { 
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { 
					}

					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.addItem(cliente);
							}
						}

						if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesBalanceGeneralCliente() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			BalanceGeneralClienteConstantesFunciones.refrescarForeignKeysDescripcionesBalanceGeneralCliente(this.balancegeneralclienteLogic.getBalanceGeneralClientes());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			BalanceGeneralClienteConstantesFunciones.refrescarForeignKeysDescripcionesBalanceGeneralCliente(this.balancegeneralclientes);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Cliente.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//balancegeneralclienteLogic.setBalanceGeneralClientes(this.balancegeneralclientes);
			balancegeneralclienteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public BalanceGeneralClienteParameterReturnGeneral getBalanceGeneralClienteParameterGeneral() {
		return this.balancegeneralclienteParameterGeneral;
	}
	
	public void setBalanceGeneralClienteParameterGeneral(BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteParameterGeneral) {
		this.balancegeneralclienteParameterGeneral = balancegeneralclienteParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoBalanceGeneralCliente() {
		return isPermisoTodoBalanceGeneralCliente;
	}

	public void setIsPermisoTodoBalanceGeneralCliente(Boolean isPermisoTodoBalanceGeneralCliente) {
		this.isPermisoTodoBalanceGeneralCliente = isPermisoTodoBalanceGeneralCliente;
	}

	public Boolean getIsPermisoNuevoBalanceGeneralCliente() {
		return isPermisoNuevoBalanceGeneralCliente;
	}

	public void setIsPermisoNuevoBalanceGeneralCliente(Boolean isPermisoNuevoBalanceGeneralCliente) {
		this.isPermisoNuevoBalanceGeneralCliente = isPermisoNuevoBalanceGeneralCliente;
	}

	public Boolean getIsPermisoActualizarBalanceGeneralCliente() {
		return isPermisoActualizarBalanceGeneralCliente;
	}

	public void setIsPermisoActualizarBalanceGeneralCliente(Boolean isPermisoActualizarBalanceGeneralCliente) {
		this.isPermisoActualizarBalanceGeneralCliente = isPermisoActualizarBalanceGeneralCliente;
	}

	public Boolean getIsPermisoEliminarBalanceGeneralCliente() {
		return isPermisoEliminarBalanceGeneralCliente;
	}

	public void setIsPermisoEliminarBalanceGeneralCliente(Boolean isPermisoEliminarBalanceGeneralCliente) {
		this.isPermisoEliminarBalanceGeneralCliente = isPermisoEliminarBalanceGeneralCliente;
	}

	public Boolean getIsPermisoGuardarCambiosBalanceGeneralCliente() {
		return isPermisoGuardarCambiosBalanceGeneralCliente;
	}

	public void setIsPermisoGuardarCambiosBalanceGeneralCliente(Boolean isPermisoGuardarCambiosBalanceGeneralCliente) {
		this.isPermisoGuardarCambiosBalanceGeneralCliente = isPermisoGuardarCambiosBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoConsultaBalanceGeneralCliente() {
		return isPermisoConsultaBalanceGeneralCliente;
	}

	public void setIsPermisoConsultaBalanceGeneralCliente(Boolean isPermisoConsultaBalanceGeneralCliente) {
		this.isPermisoConsultaBalanceGeneralCliente = isPermisoConsultaBalanceGeneralCliente;
	}

	public Boolean getIsPermisoBusquedaBalanceGeneralCliente() {
		return isPermisoBusquedaBalanceGeneralCliente;
	}

	public void setIsPermisoBusquedaBalanceGeneralCliente(Boolean isPermisoBusquedaBalanceGeneralCliente) {
		this.isPermisoBusquedaBalanceGeneralCliente = isPermisoBusquedaBalanceGeneralCliente;
	}

	public Boolean getIsPermisoReporteBalanceGeneralCliente() {
		return isPermisoReporteBalanceGeneralCliente;
	}

	public void setIsPermisoReporteBalanceGeneralCliente(Boolean isPermisoReporteBalanceGeneralCliente) {
		this.isPermisoReporteBalanceGeneralCliente = isPermisoReporteBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoPaginacionMedioBalanceGeneralCliente() {
		return isPermisoPaginacionMedioBalanceGeneralCliente;
	}

	public void setIsPermisoPaginacionMedioBalanceGeneralCliente(Boolean isPermisoPaginacionMedioBalanceGeneralCliente) {
		this.isPermisoPaginacionMedioBalanceGeneralCliente = isPermisoPaginacionMedioBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoPaginacionTodoBalanceGeneralCliente() {
		return isPermisoPaginacionTodoBalanceGeneralCliente;
	}

	public void setIsPermisoPaginacionTodoBalanceGeneralCliente(Boolean isPermisoPaginacionTodoBalanceGeneralCliente) {
		this.isPermisoPaginacionTodoBalanceGeneralCliente = isPermisoPaginacionTodoBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoPaginacionAltoBalanceGeneralCliente() {
		return isPermisoPaginacionAltoBalanceGeneralCliente;
	}

	public void setIsPermisoPaginacionAltoBalanceGeneralCliente(Boolean isPermisoPaginacionAltoBalanceGeneralCliente) {
		this.isPermisoPaginacionAltoBalanceGeneralCliente = isPermisoPaginacionAltoBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoCopiarBalanceGeneralCliente() {
		return isPermisoCopiarBalanceGeneralCliente;
	}

	public void setIsPermisoCopiarBalanceGeneralCliente(Boolean isPermisoCopiarBalanceGeneralCliente) {
		this.isPermisoCopiarBalanceGeneralCliente = isPermisoCopiarBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoVerFormBalanceGeneralCliente() {
		return isPermisoVerFormBalanceGeneralCliente;
	}

	public void setIsPermisoVerFormBalanceGeneralCliente(Boolean isPermisoVerFormBalanceGeneralCliente) {
		this.isPermisoVerFormBalanceGeneralCliente = isPermisoVerFormBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoDuplicarBalanceGeneralCliente() {
		return isPermisoDuplicarBalanceGeneralCliente;
	}

	public void setIsPermisoDuplicarBalanceGeneralCliente(Boolean isPermisoDuplicarBalanceGeneralCliente) {
		this.isPermisoDuplicarBalanceGeneralCliente = isPermisoDuplicarBalanceGeneralCliente;
	}
	
	public Boolean getIsPermisoOrdenBalanceGeneralCliente() {
		return isPermisoOrdenBalanceGeneralCliente;
	}

	public void setIsPermisoOrdenBalanceGeneralCliente(Boolean isPermisoOrdenBalanceGeneralCliente) {
		this.isPermisoOrdenBalanceGeneralCliente = isPermisoOrdenBalanceGeneralCliente;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoBalanceGeneralCliente() {
		return isVisibilidadCeldaNuevoBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaNuevoBalanceGeneralCliente(Boolean isVisibilidadCeldaNuevoBalanceGeneralCliente) {
		this.isVisibilidadCeldaNuevoBalanceGeneralCliente = isVisibilidadCeldaNuevoBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarBalanceGeneralCliente() {
		return isVisibilidadCeldaDuplicarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaDuplicarBalanceGeneralCliente(Boolean isVisibilidadCeldaDuplicarBalanceGeneralCliente) {
		this.isVisibilidadCeldaDuplicarBalanceGeneralCliente = isVisibilidadCeldaDuplicarBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarBalanceGeneralCliente() {
		return isVisibilidadCeldaCopiarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaCopiarBalanceGeneralCliente(Boolean isVisibilidadCeldaCopiarBalanceGeneralCliente) {
		this.isVisibilidadCeldaCopiarBalanceGeneralCliente = isVisibilidadCeldaCopiarBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormBalanceGeneralCliente() {
		return isVisibilidadCeldaVerFormBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaVerFormBalanceGeneralCliente(Boolean isVisibilidadCeldaVerFormBalanceGeneralCliente) {
		this.isVisibilidadCeldaVerFormBalanceGeneralCliente = isVisibilidadCeldaVerFormBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenBalanceGeneralCliente() {
		return isVisibilidadCeldaOrdenBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaOrdenBalanceGeneralCliente(Boolean isVisibilidadCeldaOrdenBalanceGeneralCliente) {
		this.isVisibilidadCeldaOrdenBalanceGeneralCliente = isVisibilidadCeldaOrdenBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente() {
		return isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente(Boolean isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente) {
		this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente = isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaModificarBalanceGeneralCliente() {
		return isVisibilidadCeldaModificarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaModificarBalanceGeneralCliente(Boolean isVisibilidadCeldaModificarBalanceGeneralCliente) {
		this.isVisibilidadCeldaModificarBalanceGeneralCliente = isVisibilidadCeldaModificarBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarBalanceGeneralCliente() {
		return isVisibilidadCeldaActualizarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaActualizarBalanceGeneralCliente(Boolean isVisibilidadCeldaActualizarBalanceGeneralCliente) {
		this.isVisibilidadCeldaActualizarBalanceGeneralCliente = isVisibilidadCeldaActualizarBalanceGeneralCliente;
	}

	public Boolean getIsVisibilidadCeldaEliminarBalanceGeneralCliente() {
		return isVisibilidadCeldaEliminarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaEliminarBalanceGeneralCliente(Boolean isVisibilidadCeldaEliminarBalanceGeneralCliente) {
		this.isVisibilidadCeldaEliminarBalanceGeneralCliente = isVisibilidadCeldaEliminarBalanceGeneralCliente;
	}

	public Boolean getIsVisibilidadCeldaCancelarBalanceGeneralCliente() {
		return isVisibilidadCeldaCancelarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaCancelarBalanceGeneralCliente(Boolean isVisibilidadCeldaCancelarBalanceGeneralCliente) {
		this.isVisibilidadCeldaCancelarBalanceGeneralCliente = isVisibilidadCeldaCancelarBalanceGeneralCliente;
	}

	public Boolean getIsVisibilidadCeldaGuardarBalanceGeneralCliente() {
		return isVisibilidadCeldaGuardarBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaGuardarBalanceGeneralCliente(Boolean isVisibilidadCeldaGuardarBalanceGeneralCliente) {
		this.isVisibilidadCeldaGuardarBalanceGeneralCliente = isVisibilidadCeldaGuardarBalanceGeneralCliente;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosBalanceGeneralCliente() {
		return isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente;
	}

	public void setIsVisibilidadCeldaGuardarCambiosBalanceGeneralCliente(Boolean isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente) {
		this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente = isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente;
	}
		
	public BalanceGeneralClienteSessionBean getbalancegeneralclienteSessionBean() {
		return this.balancegeneralclienteSessionBean;
	}
	
	public void setbalancegeneralclienteSessionBean(BalanceGeneralClienteSessionBean balancegeneralclienteSessionBean) {
		this.balancegeneralclienteSessionBean=balancegeneralclienteSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(balancegeneralcliente,null);
				this.setActualParaGuardarClienteForeignKey(balancegeneralcliente,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(BalanceGeneralCliente balancegeneralcliente,BalanceGeneralCliente balancegeneralclienteAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalBalanceGeneralCliente(balancegeneralcliente);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		balancegeneralclienteAux.setId(balancegeneralcliente.getId());
		balancegeneralclienteAux.setVersionRow(balancegeneralcliente.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessBalanceGeneralCliente();
		
			int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = balancegeneralclienteValidator.getInvalidValues(this.balancegeneralcliente);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			balancegeneralclienteLogic.setDatosCliente(datosCliente);
			balancegeneralclienteLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				balancegeneralclienteAux=new  BalanceGeneralCliente();
				
				balancegeneralclienteAux.setIsNew(true);
				balancegeneralclienteAux.setIsChanged(true);
				
				balancegeneralclienteAux.setBalanceGeneralClienteOriginal(this.balancegeneralcliente);
				
				balancegeneralclienteAux.setId(this.balancegeneralcliente.getId());	
				balancegeneralclienteAux.setVersionRow(this.balancegeneralcliente.getVersionRow());	
				balancegeneralclienteAux.setid_empresa(this.balancegeneralcliente.getid_empresa());	
				balancegeneralclienteAux.setid_cliente(this.balancegeneralcliente.getid_cliente());	
				balancegeneralclienteAux.setcaja_bancos_disponible(this.balancegeneralcliente.getcaja_bancos_disponible());	
				balancegeneralclienteAux.setcuentas_por_cobrar_clientes(this.balancegeneralcliente.getcuentas_por_cobrar_clientes());	
				balancegeneralclienteAux.setinventario(this.balancegeneralcliente.getinventario());	
				balancegeneralclienteAux.setotros_activos_corrientes(this.balancegeneralcliente.getotros_activos_corrientes());	
				balancegeneralclienteAux.settotal_activos_corrientes(this.balancegeneralcliente.gettotal_activos_corrientes());	
				balancegeneralclienteAux.setbienes_inmuebles(this.balancegeneralcliente.getbienes_inmuebles());	
				balancegeneralclienteAux.setbienes_muebles(this.balancegeneralcliente.getbienes_muebles());	
				balancegeneralclienteAux.setotros_activos_no_corrientes(this.balancegeneralcliente.getotros_activos_no_corrientes());	
				balancegeneralclienteAux.settotal_activos_no_corrientes(this.balancegeneralcliente.gettotal_activos_no_corrientes());	
				balancegeneralclienteAux.setventas_mensuales(this.balancegeneralcliente.getventas_mensuales());	
				balancegeneralclienteAux.setcosto_ventas_mensuales(this.balancegeneralcliente.getcosto_ventas_mensuales());	
				balancegeneralclienteAux.setutilidad_bruta(this.balancegeneralcliente.getutilidad_bruta());	
				balancegeneralclienteAux.setgastos_operativos(this.balancegeneralcliente.getgastos_operativos());	
				balancegeneralclienteAux.setsueldos(this.balancegeneralcliente.getsueldos());	
				balancegeneralclienteAux.setservicios(this.balancegeneralcliente.getservicios());	
				balancegeneralclienteAux.setarriendos(this.balancegeneralcliente.getarriendos());	
				balancegeneralclienteAux.setimpuestos(this.balancegeneralcliente.getimpuestos());	
				balancegeneralclienteAux.setutilidad_operativa(this.balancegeneralcliente.getutilidad_operativa());	
				balancegeneralclienteAux.setgastos_familiares(this.balancegeneralcliente.getgastos_familiares());	
				balancegeneralclienteAux.setexcedente_antes_dividendos(this.balancegeneralcliente.getexcedente_antes_dividendos());	
				balancegeneralclienteAux.setdividendos_bancos_otros(this.balancegeneralcliente.getdividendos_bancos_otros());	
				balancegeneralclienteAux.setexedente_neto_mensual(this.balancegeneralcliente.getexedente_neto_mensual());	
				balancegeneralclienteAux.setdeudas_bancarias(this.balancegeneralcliente.getdeudas_bancarias());	
				balancegeneralclienteAux.setcuentas_por_pagar(this.balancegeneralcliente.getcuentas_por_pagar());	
				balancegeneralclienteAux.setanticipos_recibos(this.balancegeneralcliente.getanticipos_recibos());	
				balancegeneralclienteAux.setotras_cuentas_por_pagar(this.balancegeneralcliente.getotras_cuentas_por_pagar());	
				balancegeneralclienteAux.setotras_deudas_familiares(this.balancegeneralcliente.getotras_deudas_familiares());	
				balancegeneralclienteAux.settotal_pasivo_corriente(this.balancegeneralcliente.gettotal_pasivo_corriente());	
				balancegeneralclienteAux.setdeudas_bancarias_largo_plazo(this.balancegeneralcliente.getdeudas_bancarias_largo_plazo());	
				balancegeneralclienteAux.setotros_pasivos_largo_plazo(this.balancegeneralcliente.getotros_pasivos_largo_plazo());	
				balancegeneralclienteAux.settotal_pasivo_no_corriente(this.balancegeneralcliente.gettotal_pasivo_no_corriente());	
				balancegeneralclienteAux.settotal_pasivo(this.balancegeneralcliente.gettotal_pasivo());	
				balancegeneralclienteAux.setpatrimonio(this.balancegeneralcliente.getpatrimonio());	
				balancegeneralclienteAux.setdescripcion(this.balancegeneralcliente.getdescripcion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteLogic.saveBalanceGeneralClientes();//WithConnection
						//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);
					
					this.refrescarForeignKeysDescripcionesBalanceGeneralCliente();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								balancegeneralclienteLogic.saveBalanceGeneralClienteRelaciones(balancegeneralclienteAux);//WithConnection
								//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
									|| this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				balancegeneralclienteAux=new  BalanceGeneralCliente();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado() 
					|| (this.balancegeneralclienteSessionBean.getEsGuardarRelacionado() && this.balancegeneralcliente.getId()>=0)) {
						
					balancegeneralclienteAux.setIsNew(false);
				}
				
				balancegeneralclienteAux.setIsDeleted(false);
			
				balancegeneralclienteAux.setId(this.balancegeneralcliente.getId());	
				balancegeneralclienteAux.setVersionRow(this.balancegeneralcliente.getVersionRow());	
				balancegeneralclienteAux.setid_empresa(this.balancegeneralcliente.getid_empresa());	
				balancegeneralclienteAux.setid_cliente(this.balancegeneralcliente.getid_cliente());	
				balancegeneralclienteAux.setcaja_bancos_disponible(this.balancegeneralcliente.getcaja_bancos_disponible());	
				balancegeneralclienteAux.setcuentas_por_cobrar_clientes(this.balancegeneralcliente.getcuentas_por_cobrar_clientes());	
				balancegeneralclienteAux.setinventario(this.balancegeneralcliente.getinventario());	
				balancegeneralclienteAux.setotros_activos_corrientes(this.balancegeneralcliente.getotros_activos_corrientes());	
				balancegeneralclienteAux.settotal_activos_corrientes(this.balancegeneralcliente.gettotal_activos_corrientes());	
				balancegeneralclienteAux.setbienes_inmuebles(this.balancegeneralcliente.getbienes_inmuebles());	
				balancegeneralclienteAux.setbienes_muebles(this.balancegeneralcliente.getbienes_muebles());	
				balancegeneralclienteAux.setotros_activos_no_corrientes(this.balancegeneralcliente.getotros_activos_no_corrientes());	
				balancegeneralclienteAux.settotal_activos_no_corrientes(this.balancegeneralcliente.gettotal_activos_no_corrientes());	
				balancegeneralclienteAux.setventas_mensuales(this.balancegeneralcliente.getventas_mensuales());	
				balancegeneralclienteAux.setcosto_ventas_mensuales(this.balancegeneralcliente.getcosto_ventas_mensuales());	
				balancegeneralclienteAux.setutilidad_bruta(this.balancegeneralcliente.getutilidad_bruta());	
				balancegeneralclienteAux.setgastos_operativos(this.balancegeneralcliente.getgastos_operativos());	
				balancegeneralclienteAux.setsueldos(this.balancegeneralcliente.getsueldos());	
				balancegeneralclienteAux.setservicios(this.balancegeneralcliente.getservicios());	
				balancegeneralclienteAux.setarriendos(this.balancegeneralcliente.getarriendos());	
				balancegeneralclienteAux.setimpuestos(this.balancegeneralcliente.getimpuestos());	
				balancegeneralclienteAux.setutilidad_operativa(this.balancegeneralcliente.getutilidad_operativa());	
				balancegeneralclienteAux.setgastos_familiares(this.balancegeneralcliente.getgastos_familiares());	
				balancegeneralclienteAux.setexcedente_antes_dividendos(this.balancegeneralcliente.getexcedente_antes_dividendos());	
				balancegeneralclienteAux.setdividendos_bancos_otros(this.balancegeneralcliente.getdividendos_bancos_otros());	
				balancegeneralclienteAux.setexedente_neto_mensual(this.balancegeneralcliente.getexedente_neto_mensual());	
				balancegeneralclienteAux.setdeudas_bancarias(this.balancegeneralcliente.getdeudas_bancarias());	
				balancegeneralclienteAux.setcuentas_por_pagar(this.balancegeneralcliente.getcuentas_por_pagar());	
				balancegeneralclienteAux.setanticipos_recibos(this.balancegeneralcliente.getanticipos_recibos());	
				balancegeneralclienteAux.setotras_cuentas_por_pagar(this.balancegeneralcliente.getotras_cuentas_por_pagar());	
				balancegeneralclienteAux.setotras_deudas_familiares(this.balancegeneralcliente.getotras_deudas_familiares());	
				balancegeneralclienteAux.settotal_pasivo_corriente(this.balancegeneralcliente.gettotal_pasivo_corriente());	
				balancegeneralclienteAux.setdeudas_bancarias_largo_plazo(this.balancegeneralcliente.getdeudas_bancarias_largo_plazo());	
				balancegeneralclienteAux.setotros_pasivos_largo_plazo(this.balancegeneralcliente.getotros_pasivos_largo_plazo());	
				balancegeneralclienteAux.settotal_pasivo_no_corriente(this.balancegeneralcliente.gettotal_pasivo_no_corriente());	
				balancegeneralclienteAux.settotal_pasivo(this.balancegeneralcliente.gettotal_pasivo());	
				balancegeneralclienteAux.setpatrimonio(this.balancegeneralcliente.getpatrimonio());	
				balancegeneralclienteAux.setdescripcion(this.balancegeneralcliente.getdescripcion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteLogic.saveBalanceGeneralClientes();//WithConnection
						//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);
					
					this.refrescarForeignKeysDescripcionesBalanceGeneralCliente();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								balancegeneralclienteLogic.saveBalanceGeneralClienteRelaciones(balancegeneralclienteAux);//WithConnection
								//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
									|| this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.balancegeneralcliente,balancegeneralclienteAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				balancegeneralclienteAux=new  BalanceGeneralCliente();
				
				balancegeneralclienteAux.setIsNew(false);
				balancegeneralclienteAux.setIsChanged(false);
				
				balancegeneralclienteAux.setIsDeleted(true);
				
				balancegeneralclienteAux.setId(this.balancegeneralcliente.getId());	
				balancegeneralclienteAux.setVersionRow(this.balancegeneralcliente.getVersionRow());	
				balancegeneralclienteAux.setid_empresa(this.balancegeneralcliente.getid_empresa());	
				balancegeneralclienteAux.setid_cliente(this.balancegeneralcliente.getid_cliente());	
				balancegeneralclienteAux.setcaja_bancos_disponible(this.balancegeneralcliente.getcaja_bancos_disponible());	
				balancegeneralclienteAux.setcuentas_por_cobrar_clientes(this.balancegeneralcliente.getcuentas_por_cobrar_clientes());	
				balancegeneralclienteAux.setinventario(this.balancegeneralcliente.getinventario());	
				balancegeneralclienteAux.setotros_activos_corrientes(this.balancegeneralcliente.getotros_activos_corrientes());	
				balancegeneralclienteAux.settotal_activos_corrientes(this.balancegeneralcliente.gettotal_activos_corrientes());	
				balancegeneralclienteAux.setbienes_inmuebles(this.balancegeneralcliente.getbienes_inmuebles());	
				balancegeneralclienteAux.setbienes_muebles(this.balancegeneralcliente.getbienes_muebles());	
				balancegeneralclienteAux.setotros_activos_no_corrientes(this.balancegeneralcliente.getotros_activos_no_corrientes());	
				balancegeneralclienteAux.settotal_activos_no_corrientes(this.balancegeneralcliente.gettotal_activos_no_corrientes());	
				balancegeneralclienteAux.setventas_mensuales(this.balancegeneralcliente.getventas_mensuales());	
				balancegeneralclienteAux.setcosto_ventas_mensuales(this.balancegeneralcliente.getcosto_ventas_mensuales());	
				balancegeneralclienteAux.setutilidad_bruta(this.balancegeneralcliente.getutilidad_bruta());	
				balancegeneralclienteAux.setgastos_operativos(this.balancegeneralcliente.getgastos_operativos());	
				balancegeneralclienteAux.setsueldos(this.balancegeneralcliente.getsueldos());	
				balancegeneralclienteAux.setservicios(this.balancegeneralcliente.getservicios());	
				balancegeneralclienteAux.setarriendos(this.balancegeneralcliente.getarriendos());	
				balancegeneralclienteAux.setimpuestos(this.balancegeneralcliente.getimpuestos());	
				balancegeneralclienteAux.setutilidad_operativa(this.balancegeneralcliente.getutilidad_operativa());	
				balancegeneralclienteAux.setgastos_familiares(this.balancegeneralcliente.getgastos_familiares());	
				balancegeneralclienteAux.setexcedente_antes_dividendos(this.balancegeneralcliente.getexcedente_antes_dividendos());	
				balancegeneralclienteAux.setdividendos_bancos_otros(this.balancegeneralcliente.getdividendos_bancos_otros());	
				balancegeneralclienteAux.setexedente_neto_mensual(this.balancegeneralcliente.getexedente_neto_mensual());	
				balancegeneralclienteAux.setdeudas_bancarias(this.balancegeneralcliente.getdeudas_bancarias());	
				balancegeneralclienteAux.setcuentas_por_pagar(this.balancegeneralcliente.getcuentas_por_pagar());	
				balancegeneralclienteAux.setanticipos_recibos(this.balancegeneralcliente.getanticipos_recibos());	
				balancegeneralclienteAux.setotras_cuentas_por_pagar(this.balancegeneralcliente.getotras_cuentas_por_pagar());	
				balancegeneralclienteAux.setotras_deudas_familiares(this.balancegeneralcliente.getotras_deudas_familiares());	
				balancegeneralclienteAux.settotal_pasivo_corriente(this.balancegeneralcliente.gettotal_pasivo_corriente());	
				balancegeneralclienteAux.setdeudas_bancarias_largo_plazo(this.balancegeneralcliente.getdeudas_bancarias_largo_plazo());	
				balancegeneralclienteAux.setotros_pasivos_largo_plazo(this.balancegeneralcliente.getotros_pasivos_largo_plazo());	
				balancegeneralclienteAux.settotal_pasivo_no_corriente(this.balancegeneralcliente.gettotal_pasivo_no_corriente());	
				balancegeneralclienteAux.settotal_pasivo(this.balancegeneralcliente.gettotal_pasivo());	
				balancegeneralclienteAux.setpatrimonio(this.balancegeneralcliente.getpatrimonio());	
				balancegeneralclienteAux.setdescripcion(this.balancegeneralcliente.getdescripcion());	
				
				if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.balancegeneralclienteAux.getId()>=0) {	
						this.balancegeneralclientesEliminados.add(balancegeneralclienteAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteLogic.saveBalanceGeneralClientes();//WithConnection
						//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								balancegeneralclienteLogic.saveBalanceGeneralClienteRelaciones(balancegeneralclienteAux);//WithConnection
								//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
								|| this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(balancegeneralclienteAux,balancegeneralclienteLogic.getBalanceGeneralClientes());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(balancegeneralclienteAux,balancegeneralclientes);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getBalanceGeneralClientes().addAll(this.balancegeneralclientesEliminados);
					
					balancegeneralclienteLogic.saveBalanceGeneralClientes();//WithConnection
					//balancegeneralclienteLogic.getSetVersionRowBalanceGeneralClientes();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesBalanceGeneralCliente();
				
				this.balancegeneralclientesEliminados= new ArrayList<BalanceGeneralCliente>();		
			}
			
			if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Balance General Cliente GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.balancegeneralcliente=balancegeneralclienteAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessBalanceGeneralCliente();
      	}
		
	}	
	
	public void actualizarRelaciones(BalanceGeneralCliente balancegeneralclienteLocal) throws Exception {
		
		if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(BalanceGeneralCliente balancegeneralclienteLocal) throws Exception {	
		if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				balancegeneralclienteLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				balancegeneralclienteLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarBalanceGeneralClienteActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = balancegeneralclienteValidator.getInvalidValues(this.balancegeneralcliente);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(BalanceGeneralCliente balancegeneralcliente,List<BalanceGeneralCliente> balancegeneralclientes) throws Exception {
		try	{		
			BalanceGeneralClienteConstantesFunciones.actualizarLista(balancegeneralcliente,balancegeneralclientes,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(BalanceGeneralCliente balancegeneralcliente,List<BalanceGeneralCliente> balancegeneralclientes) throws Exception {
		try	{			
			BalanceGeneralClienteConstantesFunciones.actualizarSelectedLista(balancegeneralcliente,balancegeneralclientes);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<BalanceGeneralCliente> balancegeneralclientesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				balancegeneralclientesLocal=this.balancegeneralclienteLogic.getBalanceGeneralClientes();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				balancegeneralclientesLocal=this.balancegeneralclientes;
			}
			//ARCHITECTURE
		
			for(BalanceGeneralCliente balancegeneralclienteLocal:balancegeneralclientesLocal) {
				if(this.permiteMantenimiento(balancegeneralclienteLocal) && balancegeneralclienteLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+BalanceGeneralClienteConstantesFunciones.getBalanceGeneralClienteLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelid_empresaBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelid_clienteBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.CAJABANCOSDISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcaja_bancos_disponibleBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.CUENTASPORCOBRARCLIENTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_cobrar_clientesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.INVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelinventarioBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.OTROSACTIVOSCORRIENTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_corrientesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.TOTALACTIVOSCORRIENTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_corrientesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.BIENESINMUEBLES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_inmueblesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.BIENESMUEBLES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_mueblesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.OTROSACTIVOSNOCORRIENTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_no_corrientesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.TOTALACTIVOSNOCORRIENTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_no_corrientesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.VENTASMENSUALES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelventas_mensualesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.COSTOVENTASMENSUALES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcosto_ventas_mensualesBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.UTILIDADBRUTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_brutaBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.GASTOSOPERATIVOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_operativosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.SUELDOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelsueldosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.SERVICIOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelserviciosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.ARRIENDOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelarriendosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.IMPUESTOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelimpuestosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.UTILIDADOPERATIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_operativaBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.GASTOSFAMILIARES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_familiaresBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.EXCEDENTEANTESDIVIDENDOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexcedente_antes_dividendosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.DIVIDENDOSBANCOSOTROS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldividendos_bancos_otrosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.EXEDENTENETOMENSUAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexedente_neto_mensualBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.DEUDASBANCARIAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancariasBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.CUENTASPORPAGAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_pagarBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.ANTICIPOSRECIBOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelanticipos_recibosBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.OTRASCUENTASPORPAGAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_cuentas_por_pagarBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.OTRASDEUDASFAMILIARES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_deudas_familiaresBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.TOTALPASIVOCORRIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_corrienteBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.DEUDASBANCARIASLARGOPLAZO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancarias_largo_plazoBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.OTROSPASIVOSLARGOPLAZO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_pasivos_largo_plazoBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.TOTALPASIVONOCORRIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_no_corrienteBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.TOTALPASIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivoBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.PATRIMONIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelpatrimonioBalanceGeneralCliente,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BalanceGeneralClienteConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldescripcionBalanceGeneralCliente,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelid_empresaBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelid_clienteBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcaja_bancos_disponibleBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_cobrar_clientesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelinventarioBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_corrientesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_corrientesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_inmueblesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_mueblesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_no_corrientesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_no_corrientesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelventas_mensualesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcosto_ventas_mensualesBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_brutaBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_operativosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelsueldosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelserviciosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelarriendosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelimpuestosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_operativaBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_familiaresBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexcedente_antes_dividendosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldividendos_bancos_otrosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexedente_neto_mensualBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancariasBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_pagarBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelanticipos_recibosBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_cuentas_por_pagarBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_deudas_familiaresBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_corrienteBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancarias_largo_plazoBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_pasivos_largo_plazoBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_no_corrienteBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivoBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelpatrimonioBalanceGeneralCliente,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldescripcionBalanceGeneralCliente,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoBalanceGeneralCliente--;	
		
		
		this.balancegeneralclienteAux=new BalanceGeneralCliente();
		
		this.balancegeneralclienteAux.setId(this.iIdNuevoBalanceGeneralCliente);
		this.balancegeneralclienteAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.balancegeneralclienteLogic.getBalanceGeneralClientes().add(this.balancegeneralclienteAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.balancegeneralclientes.add(this.balancegeneralclienteAux);
		}
		//ARCHITECTURE
		
		this.balancegeneralcliente=this.balancegeneralclienteAux;
		
		if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralcliente);
			this.setVariablesObjetoActualToFormularioForeignKeyBalanceGeneralCliente(this.balancegeneralcliente);
		}
				
		//this.setDefaultControlesBalanceGeneralCliente();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyBalanceGeneralCliente();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyBalanceGeneralCliente();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyBalanceGeneralCliente();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualBalanceGeneralCliente(this.balancegeneralclienteBean,this.balancegeneralcliente,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
			classes=BalanceGeneralClienteConstantesFunciones.getClassesRelationshipsOfBalanceGeneralCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.procesarEventosBalanceGeneralClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this.balancegeneralcliente,this.balancegeneralclienteParameterGeneral,this.isEsNuevoBalanceGeneralCliente,classes);//this.balancegeneralclienteLogic.getBalanceGeneralCliente()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral,this.balancegeneralclienteBean,false);
		
		if(this.balancegeneralclienteReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente());
		}
		
		if(this.balancegeneralclienteReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente(),classes);//this.balancegeneralclienteBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyBalanceGeneralCliente();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyBalanceGeneralCliente();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.RecargarFormBalanceGeneralCliente(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
						
			if(balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBalanceGeneralCliente();
			}
			
			this.actualizarVisualTableDatosBalanceGeneralCliente();
			
			this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(this.getIndiceNuevoBalanceGeneralCliente(), this.getIndiceNuevoBalanceGeneralCliente());
			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
						
			this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesBalanceGeneralCliente(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarcaja_bancos_disponibleBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarcuentas_por_cobrar_clientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarinventarioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarotros_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activartotal_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarbienes_inmueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarbienes_mueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarotros_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activartotal_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarcosto_ventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarutilidad_brutaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activargastos_operativosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarsueldosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarserviciosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activararriendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarimpuestosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarutilidad_operativaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activargastos_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarexcedente_antes_dividendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activardividendos_bancos_otrosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarexedente_neto_mensualBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activardeudas_bancariasBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarcuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activaranticipos_recibosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarotras_cuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarotras_deudas_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activardeudas_bancarias_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarotros_pasivos_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_no_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activartotal_pasivoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarpatrimonioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activardescripcionBalanceGeneralCliente);	
		//
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarid_empresaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setEnabled(isHabilitar && this.balancegeneralclienteConstantesFunciones.activarid_clienteBalanceGeneralCliente);
	};
	
	public void setDefaultControlesBalanceGeneralCliente() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoBalanceGeneralCliente(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.balancegeneralclienteSessionBean.setConGuardarRelaciones(true);			
			this.balancegeneralclienteSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.setVisible(true);
			
					
		} else {
			//this.balancegeneralclienteSessionBean.setConGuardarRelaciones(false);			
			this.balancegeneralclienteSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoBalanceGeneralCliente() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				if(balancegeneralclienteAux.getId().equals(this.iIdNuevoBalanceGeneralCliente)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclientes) {
				if(balancegeneralclienteAux.getId().equals(this.iIdNuevoBalanceGeneralCliente)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				if(balancegeneralclienteAux.getId().equals(balancegeneralcliente.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclientes) {
				if(balancegeneralclienteAux.getId().equals(balancegeneralcliente.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalBalanceGeneralCliente(BalanceGeneralCliente balancegeneralclienteOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				if(balancegeneralclienteAux.getBalanceGeneralClienteOriginal().getId().equals(balancegeneralclienteOriginal.getId())) {
					existe=true;
					balancegeneralclienteOriginal.setId(balancegeneralclienteAux.getId());
					balancegeneralclienteOriginal.setVersionRow(balancegeneralclienteAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclientes) {
				if(balancegeneralclienteAux.getBalanceGeneralClienteOriginal().getId().equals(balancegeneralclienteOriginal.getId())) {
					existe=true;
					balancegeneralclienteOriginal.setId(balancegeneralclienteAux.getId());
					balancegeneralclienteOriginal.setVersionRow(balancegeneralclienteAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosBalanceGeneralCliente(Boolean esParaCancelar) throws Exception {
		balancegeneralclientesAux=new ArrayList<BalanceGeneralCliente>();
		balancegeneralclienteAux=new BalanceGeneralCliente();
		
		if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
					if(balancegeneralclienteAux.getId()<0) {
						balancegeneralclientesAux.add(balancegeneralclienteAux);
					}		
				}
				this.iIdNuevoBalanceGeneralCliente=0L;
				this.balancegeneralclienteLogic.getBalanceGeneralClientes().removeAll(balancegeneralclientesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclientes) {
					if(balancegeneralclienteAux.getId()<0) {
						balancegeneralclientesAux.add(balancegeneralclienteAux);
					}		
				}
				this.iIdNuevoBalanceGeneralCliente=0L;
				this.balancegeneralclientes.removeAll(balancegeneralclientesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoBalanceGeneralCliente 
					&& this.balancegeneralclienteLogic.getBalanceGeneralClientes().size()>0
					) {
					balancegeneralclienteAux=this.balancegeneralclienteLogic.getBalanceGeneralClientes().get(this.balancegeneralclienteLogic.getBalanceGeneralClientes().size() - 1);
				
					if(balancegeneralclienteAux.getId()<0) {
						this.balancegeneralclienteLogic.getBalanceGeneralClientes().remove(balancegeneralclienteAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoBalanceGeneralCliente && this.balancegeneralclientes.size()>0) {
					balancegeneralclienteAux=this.balancegeneralclientes.get(this.balancegeneralclientes.size() - 1);
				
					if(balancegeneralclienteAux.getId()<0) {
						this.balancegeneralclientes.remove(balancegeneralclienteAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoBalanceGeneralCliente(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(balancegeneralcliente.getId()<0) {
				this.balancegeneralclienteLogic.getBalanceGeneralClientes().remove(this.balancegeneralcliente);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(balancegeneralcliente.getId()<0) {
				this.balancegeneralclientes.remove(this.balancegeneralcliente);
			}
		}			
	}
	
	public void setEstadosInicialesBalanceGeneralCliente(List<BalanceGeneralCliente> balancegeneralclientesAux) throws Exception {
		BalanceGeneralClienteConstantesFunciones.setEstadosInicialesBalanceGeneralCliente(balancegeneralclientesAux);
	}
	
	public void setEstadosInicialesBalanceGeneralCliente(BalanceGeneralCliente balancegeneralclienteAux) throws Exception {
		BalanceGeneralClienteConstantesFunciones.setEstadosInicialesBalanceGeneralCliente(balancegeneralclienteAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarBalanceGeneralClienteActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarBalanceGeneralClienteActual()) {
				if(!this.isEsNuevoBalanceGeneralCliente) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoBalanceGeneralCliente=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarBalanceGeneralClienteActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Balance General Cliente ?", "MANTENIMIENTO DE Balance General Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(BalanceGeneralCliente balancegeneralcliente) throws Exception {
		BalanceGeneralClienteConstantesFunciones.seleccionarAsignar(this.balancegeneralcliente,balancegeneralcliente);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarBalanceGeneralCliente=this.isPermisoActualizarOriginalBalanceGeneralCliente;
			
			
			this.seleccionarAsignar(balancegeneralcliente);
			
			

			idClienteActual=balancegeneralcliente.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			BalanceGeneralClienteConstantesFunciones.quitarEspaciosBalanceGeneralCliente(this.balancegeneralcliente,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.balancegeneralclienteSessionBean.setsFuncionBusquedaRapida(this.balancegeneralclienteSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoBalanceGeneralCliente) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosBalanceGeneralCliente(esParaCancelar);				
				this.cancelarNuevoBalanceGeneralCliente(esParaCancelar);								
			}
			
			this.balancegeneralcliente=new BalanceGeneralCliente();
			
			this.inicializarBalanceGeneralCliente();
			
			this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarBalanceGeneralCliente() throws Exception {
		try {
			BalanceGeneralClienteConstantesFunciones.inicializarBalanceGeneralCliente(this.balancegeneralcliente);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.balancegeneralclienteLogic.getBalanceGeneralClientes().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteBalanceGeneralClientes(String sAccionBusqueda,List<BalanceGeneralCliente> balancegeneralclientesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="BalanceGeneralCliente"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="BalanceGeneralClienteMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("BalanceGeneralClienteMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="BalanceGeneralCliente"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Balance General Clientes");		
		parameters.put("busquedapor", BalanceGeneralClienteConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceBalanceGeneralCliente=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			BalanceGeneralClienteConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			BalanceGeneralClienteConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceBalanceGeneralCliente=new JRBeanArrayDataSource(BalanceGeneralClienteJInternalFrame.TraerBalanceGeneralClienteBeans(balancegeneralclientesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceBalanceGeneralCliente);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+BalanceGeneralClienteConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+BalanceGeneralClienteConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(BalanceGeneralClienteBean.TraerBalanceGeneralClienteBeans(balancegeneralclientesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoBalanceGeneralClienteActionPerformed(null);
					//this.generarExcelReporteBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesBalanceGeneralClientes(sAccionBusqueda,sTipoArchivoReporte,balancegeneralclientesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteBalanceGeneralClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<BalanceGeneralCliente> balancegeneralclientesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("BalanceGeneralClientes");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderBalanceGeneralCliente("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(BalanceGeneralCliente balancegeneralcliente : balancegeneralclientesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			BalanceGeneralClienteConstantesFunciones.generarExcelReporteDataBalanceGeneralCliente("NORMAL",row,workbook,balancegeneralcliente,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderBalanceGeneralCliente(String sTipo,Row row,Workbook workbook) {
		
		BalanceGeneralClienteConstantesFunciones.generarExcelReporteHeaderBalanceGeneralCliente(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalBalanceGeneralClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<BalanceGeneralCliente> balancegeneralclientesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("BalanceGeneralClientes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(BalanceGeneralCliente balancegeneralcliente : balancegeneralclientesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(BalanceGeneralClienteConstantesFunciones.getBalanceGeneralClienteDescripcion(balancegeneralcliente));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getcaja_bancos_disponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getcuentas_por_cobrar_clientes());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getinventario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getotros_activos_corrientes());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.gettotal_activos_corrientes());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getbienes_inmuebles());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getbienes_muebles());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getotros_activos_no_corrientes());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.gettotal_activos_no_corrientes());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getventas_mensuales());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getcosto_ventas_mensuales());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getutilidad_bruta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getgastos_operativos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getsueldos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getservicios());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getarriendos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getimpuestos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getutilidad_operativa());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getgastos_familiares());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getexcedente_antes_dividendos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getdividendos_bancos_otros());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getexedente_neto_mensual());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getdeudas_bancarias());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getcuentas_por_pagar());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getanticipos_recibos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getotras_cuentas_por_pagar());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getotras_deudas_familiares());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.gettotal_pasivo_corriente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getdeudas_bancarias_largo_plazo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getotros_pasivos_largo_plazo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.gettotal_pasivo_no_corriente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.gettotal_pasivo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getpatrimonio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(balancegeneralcliente.getdescripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesBalanceGeneralClientes(String sAccionBusqueda,String sTipoArchivoReporte,List<BalanceGeneralCliente> balancegeneralclientesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<BalanceGeneralCliente> balancegeneralclientesRespaldo=null;
		
		classes=BalanceGeneralClienteConstantesFunciones.getClassesRelationshipsOfBalanceGeneralCliente(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.balancegeneralclienteLogic.setDatosCliente(this.datosCliente);
		this.balancegeneralclienteLogic.setDatosDeep(this.datosDeep);
		this.balancegeneralclienteLogic.setIsConDeep(true);
		
		balancegeneralclientesRespaldo=this.balancegeneralclienteLogic.getBalanceGeneralClientes();
		
		this.balancegeneralclienteLogic.setBalanceGeneralClientes(balancegeneralclientesParaReportes);	
		this.balancegeneralclienteLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		balancegeneralclientesParaReportes=this.balancegeneralclienteLogic.getBalanceGeneralClientes();
		this.balancegeneralclienteLogic.setBalanceGeneralClientes(balancegeneralclientesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("BalanceGeneralClientes");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderBalanceGeneralCliente("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(BalanceGeneralCliente balancegeneralcliente : balancegeneralclientesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderBalanceGeneralCliente("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			BalanceGeneralClienteConstantesFunciones.generarExcelReporteDataBalanceGeneralCliente("NORMAL",row,workbook,balancegeneralcliente,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(BalanceGeneralClienteConstantesFunciones.getBalanceGeneralClienteDescripcion(balancegeneralcliente));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessBalanceGeneralCliente() throws Exception {		
		this.startProcessBalanceGeneralCliente(true);
	}
	
	public void startProcessBalanceGeneralCliente(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasBalanceGeneralCliente ,this.jPanelParametrosReportesBalanceGeneralCliente, this.jScrollPanelDatosBalanceGeneralCliente,this.jPanelPaginacionBalanceGeneralCliente, this.jScrollPanelDatosEdicionBalanceGeneralCliente, this.jPanelAccionesBalanceGeneralCliente,this.jPanelAccionesFormularioBalanceGeneralCliente,this.jmenuBarBalanceGeneralCliente,this.jmenuBarDetalleBalanceGeneralCliente,this.jTtoolBarBalanceGeneralCliente,this.jTtoolBarDetalleBalanceGeneralCliente);		
		
		final JTabbedPane jTabbedPaneBusquedasBalanceGeneralCliente=this.jTabbedPaneBusquedasBalanceGeneralCliente; 
		
		final JPanel jPanelParametrosReportesBalanceGeneralCliente=this.jPanelParametrosReportesBalanceGeneralCliente;
		//final JScrollPane jScrollPanelDatosBalanceGeneralCliente=this.jScrollPanelDatosBalanceGeneralCliente;
		final JTable jTableDatosBalanceGeneralCliente=this.jTableDatosBalanceGeneralCliente;		
		final JPanel jPanelPaginacionBalanceGeneralCliente=this.jPanelPaginacionBalanceGeneralCliente;
		//final JScrollPane jScrollPanelDatosEdicionBalanceGeneralCliente=this.jScrollPanelDatosEdicionBalanceGeneralCliente;
		final JPanel jPanelAccionesBalanceGeneralCliente=this.jPanelAccionesBalanceGeneralCliente;
		
		JPanel jPanelCamposAuxiliarBalanceGeneralCliente=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarBalanceGeneralCliente=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			jPanelCamposAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelCamposBalanceGeneralCliente;
			jPanelAccionesFormularioAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelAccionesFormularioBalanceGeneralCliente;
		}
		
		final JPanel jPanelCamposBalanceGeneralCliente=jPanelCamposAuxiliarBalanceGeneralCliente;
		final JPanel jPanelAccionesFormularioBalanceGeneralCliente=jPanelAccionesFormularioAuxiliarBalanceGeneralCliente;
		
		
		final JMenuBar jmenuBarBalanceGeneralCliente=this.jmenuBarBalanceGeneralCliente;
		final JToolBar jTtoolBarBalanceGeneralCliente=this.jTtoolBarBalanceGeneralCliente;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarBalanceGeneralCliente=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarBalanceGeneralCliente=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			jmenuBarDetalleAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jmenuBarDetalleBalanceGeneralCliente;
			jTtoolBarDetalleAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jTtoolBarDetalleBalanceGeneralCliente;
		}
		
		final JMenuBar jmenuBarDetalleBalanceGeneralCliente=jmenuBarDetalleAuxiliarBalanceGeneralCliente;
		final JToolBar jTtoolBarDetalleBalanceGeneralCliente=jTtoolBarDetalleAuxiliarBalanceGeneralCliente;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasBalanceGeneralCliente;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesBalanceGeneralCliente;
			processRunnable.jTableDatos=jTableDatosBalanceGeneralCliente;
			processRunnable.jPanelCampos=jPanelCamposBalanceGeneralCliente;
			processRunnable.jPanelPaginacion=jPanelPaginacionBalanceGeneralCliente;
			processRunnable.jPanelAcciones=jPanelAccionesBalanceGeneralCliente;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioBalanceGeneralCliente;
			
			
			processRunnable.jmenuBar=jmenuBarBalanceGeneralCliente;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleBalanceGeneralCliente;
			processRunnable.jTtoolBar=jTtoolBarBalanceGeneralCliente;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleBalanceGeneralCliente;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasBalanceGeneralCliente ,jPanelParametrosReportesBalanceGeneralCliente,jTableDatosBalanceGeneralCliente, /*jScrollPanelDatosBalanceGeneralCliente,*/jPanelCamposBalanceGeneralCliente,jPanelPaginacionBalanceGeneralCliente, /*jScrollPanelDatosEdicionBalanceGeneralCliente,*/ jPanelAccionesBalanceGeneralCliente,jPanelAccionesFormularioBalanceGeneralCliente,jmenuBarBalanceGeneralCliente,jmenuBarDetalleBalanceGeneralCliente,jTtoolBarBalanceGeneralCliente,jTtoolBarDetalleBalanceGeneralCliente);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasBalanceGeneralCliente ,jPanelParametrosReportesBalanceGeneralCliente, jScrollPanelDatosBalanceGeneralCliente,jPanelPaginacionBalanceGeneralCliente, jScrollPanelDatosEdicionBalanceGeneralCliente, jPanelAccionesBalanceGeneralCliente,jPanelAccionesFormularioBalanceGeneralCliente,jmenuBarBalanceGeneralCliente,jmenuBarDetalleBalanceGeneralCliente,jTtoolBarBalanceGeneralCliente,jTtoolBarDetalleBalanceGeneralCliente);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessBalanceGeneralCliente() {// throws Exception 
		this.finishProcessBalanceGeneralCliente(true);
	}
	
	public void finishProcessBalanceGeneralCliente(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasBalanceGeneralCliente ,this.jPanelParametrosReportesBalanceGeneralCliente, this.jScrollPanelDatosBalanceGeneralCliente,this.jPanelPaginacionBalanceGeneralCliente, this.jScrollPanelDatosEdicionBalanceGeneralCliente, this.jPanelAccionesBalanceGeneralCliente,this.jPanelAccionesFormularioBalanceGeneralCliente,this.jmenuBarBalanceGeneralCliente,this.jmenuBarDetalleBalanceGeneralCliente,this.jTtoolBarBalanceGeneralCliente,this.jTtoolBarDetalleBalanceGeneralCliente);		
		
		final JTabbedPane jTabbedPaneBusquedasBalanceGeneralCliente=this.jTabbedPaneBusquedasBalanceGeneralCliente; 
		
		final JPanel jPanelParametrosReportesBalanceGeneralCliente=this.jPanelParametrosReportesBalanceGeneralCliente;
		//final JScrollPane jScrollPanelDatosBalanceGeneralCliente=this.jScrollPanelDatosBalanceGeneralCliente;
		final JTable jTableDatosBalanceGeneralCliente=this.jTableDatosBalanceGeneralCliente;		
		final JPanel jPanelPaginacionBalanceGeneralCliente=this.jPanelPaginacionBalanceGeneralCliente;
		//final JScrollPane jScrollPanelDatosEdicionBalanceGeneralCliente=this.jScrollPanelDatosEdicionBalanceGeneralCliente;
		final JPanel jPanelAccionesBalanceGeneralCliente=this.jPanelAccionesBalanceGeneralCliente;
		
		JPanel jPanelCamposAuxiliarBalanceGeneralCliente=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarBalanceGeneralCliente=new JPanel();
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			jPanelCamposAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelCamposBalanceGeneralCliente;
			jPanelAccionesFormularioAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelAccionesFormularioBalanceGeneralCliente;
		}
		
		final JPanel jPanelCamposBalanceGeneralCliente=jPanelCamposAuxiliarBalanceGeneralCliente;
		final JPanel jPanelAccionesFormularioBalanceGeneralCliente=jPanelAccionesFormularioAuxiliarBalanceGeneralCliente;
		
		
		final JMenuBar jmenuBarBalanceGeneralCliente=this.jmenuBarBalanceGeneralCliente;		
		final JToolBar jTtoolBarBalanceGeneralCliente=this.jTtoolBarBalanceGeneralCliente;
				
		JMenuBar jmenuBarDetalleAuxiliarBalanceGeneralCliente=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarBalanceGeneralCliente=new JToolBar();
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			jmenuBarDetalleAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jmenuBarDetalleBalanceGeneralCliente;
			jTtoolBarDetalleAuxiliarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jTtoolBarDetalleBalanceGeneralCliente;		
		}
		
		final JMenuBar jmenuBarDetalleBalanceGeneralCliente=jmenuBarDetalleAuxiliarBalanceGeneralCliente;
		final JToolBar jTtoolBarDetalleBalanceGeneralCliente=jTtoolBarDetalleAuxiliarBalanceGeneralCliente;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasBalanceGeneralCliente;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesBalanceGeneralCliente;
			processRunnable.jTableDatos=jTableDatosBalanceGeneralCliente;
			processRunnable.jPanelCampos=jPanelCamposBalanceGeneralCliente;
			processRunnable.jPanelPaginacion=jPanelPaginacionBalanceGeneralCliente;
			processRunnable.jPanelAcciones=jPanelAccionesBalanceGeneralCliente;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioBalanceGeneralCliente;
			
			
			processRunnable.jmenuBar=jmenuBarBalanceGeneralCliente;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleBalanceGeneralCliente;
			processRunnable.jTtoolBar=jTtoolBarBalanceGeneralCliente;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleBalanceGeneralCliente;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasBalanceGeneralCliente ,jPanelParametrosReportesBalanceGeneralCliente, jTableDatosBalanceGeneralCliente,/*jScrollPanelDatosBalanceGeneralCliente,*/jPanelCamposBalanceGeneralCliente,jPanelPaginacionBalanceGeneralCliente, /*jScrollPanelDatosEdicionBalanceGeneralCliente,*/ jPanelAccionesBalanceGeneralCliente,jPanelAccionesFormularioBalanceGeneralCliente,jmenuBarBalanceGeneralCliente,jmenuBarDetalleBalanceGeneralCliente,jTtoolBarBalanceGeneralCliente,jTtoolBarDetalleBalanceGeneralCliente));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesBalanceGeneralCliente(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarBalanceGeneralCliente(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuBalanceGeneralCliente(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarBalanceGeneralCliente(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarBalanceGeneralCliente,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleBalanceGeneralCliente,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuBalanceGeneralCliente(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarBalanceGeneralCliente,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleBalanceGeneralCliente,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.balancegeneralclienteConstantesFunciones.getsFinalQueryBalanceGeneralCliente();
		String  finalQueryPaginacionTodos=this.balancegeneralclienteConstantesFunciones.getsFinalQueryBalanceGeneralCliente();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=BalanceGeneralClienteConstantesFunciones.getArrayColumnasGlobalesNoBalanceGeneralCliente(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=BalanceGeneralClienteConstantesFunciones.getArrayColumnasGlobalesBalanceGeneralCliente(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,BalanceGeneralClienteConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.balancegeneralclientesEliminados= new ArrayList<BalanceGeneralCliente>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessBalanceGeneralCliente();
		
				///*BalanceGeneralClienteSessionBean*/this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			
			if(this.balancegeneralclienteSessionBean==null) {
				this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=BalanceGeneralClienteConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=BalanceGeneralClienteConstantesFunciones.getClassesForeignKeysOfBalanceGeneralCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/balancegeneralcliente."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			balancegeneralclientesAux= new ArrayList<BalanceGeneralCliente>();
			
				
			balancegeneralclienteLogic.setDatosCliente(this.datosCliente);
			balancegeneralclienteLogic.setDatosDeep(this.datosDeep);
			balancegeneralclienteLogic.setIsConDeep(true);
			
			
			balancegeneralclienteLogic.getBalanceGeneralClienteDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					balancegeneralclienteLogic.getTodosBalanceGeneralClientes(finalQueryGlobal,pagination);
					
					//balancegeneralclienteLogic.getTodosBalanceGeneralClientesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(balancegeneralclienteLogic.getBalanceGeneralClientes()==null|| balancegeneralclienteLogic.getBalanceGeneralClientes().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							balancegeneralclientesAux= new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientesAux.addAll(balancegeneralclienteLogic.getBalanceGeneralClientes());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientesAux= new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientesAux.addAll(balancegeneralclientes);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							balancegeneralclienteLogic.getTodosBalanceGeneralClientes(finalQueryGlobal+"",this.pagination);												
							
							//balancegeneralclienteLogic.getTodosBalanceGeneralClientesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclienteLogic.getBalanceGeneralClientes() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							balancegeneralclienteLogic.setBalanceGeneralClientes(new ArrayList<BalanceGeneralCliente>());					
							balancegeneralclienteLogic.getBalanceGeneralClientes().addAll(balancegeneralclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientes=new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientes.addAll(balancegeneralclientesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idBalanceGeneralCliente=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idBalanceGeneralCliente=this.idActual;
				
				} else if(this.idBalanceGeneralClienteActual!=null && this.idBalanceGeneralClienteActual!=0L) {
					idBalanceGeneralCliente=idBalanceGeneralClienteActual;
				}
				
					
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndicePorId(idBalanceGeneralCliente);
				
				this.balancegeneralclientes=new ArrayList<BalanceGeneralCliente>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					balancegeneralclienteLogic.getEntity(idBalanceGeneralCliente);
					
					//balancegeneralclienteLogic.getEntityWithConnection(idBalanceGeneralCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					balancegeneralclienteLogic.setBalanceGeneralClientes(new ArrayList<BalanceGeneralCliente>());
					balancegeneralclienteLogic.getBalanceGeneralClientes().add(balancegeneralclienteLogic.getBalanceGeneralCliente());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.balancegeneralclientes=new ArrayList<BalanceGeneralCliente>();
					this.balancegeneralclientes.add(balancegeneralcliente);
				}
				
				if(balancegeneralclienteLogic.getBalanceGeneralCliente()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=balancegeneralclienteLogic.getBalanceGeneralClientes()==null||balancegeneralclienteLogic.getBalanceGeneralClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=balancegeneralclientes==null|| balancegeneralclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclientesAux=new ArrayList<BalanceGeneralCliente>();
						balancegeneralclientesAux.addAll(balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientesAux=new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientesAux.addAll(balancegeneralclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBalanceGeneralClientes("FK_IdCliente",balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBalanceGeneralClientes("FK_IdCliente",balancegeneralclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteLogic.setBalanceGeneralClientes(new ArrayList<BalanceGeneralCliente>());
						balancegeneralclienteLogic.getBalanceGeneralClientes().addAll(balancegeneralclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientes=new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientes.addAll(balancegeneralclientesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=balancegeneralclienteLogic.getBalanceGeneralClientes()==null||balancegeneralclienteLogic.getBalanceGeneralClientes().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=balancegeneralclientes==null|| balancegeneralclientes.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclientesAux=new ArrayList<BalanceGeneralCliente>();
						balancegeneralclientesAux.addAll(balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientesAux=new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientesAux.addAll(balancegeneralclientes);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BalanceGeneralClienteConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBalanceGeneralClientes("FK_IdEmpresa",balancegeneralclienteLogic.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBalanceGeneralClientes("FK_IdEmpresa",balancegeneralclientes);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteLogic.setBalanceGeneralClientes(new ArrayList<BalanceGeneralCliente>());
						balancegeneralclienteLogic.getBalanceGeneralClientes().addAll(balancegeneralclientesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclientes=new ArrayList<BalanceGeneralCliente>();
							balancegeneralclientes.addAll(balancegeneralclientesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesBalanceGeneralCliente();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessBalanceGeneralCliente();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=balancegeneralclienteLogic.getBalanceGeneralClientes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=balancegeneralclientes.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=balancegeneralclienteLogic.getBalanceGeneralClientes().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=balancegeneralclientes.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(BalanceGeneralCliente balancegeneralcliente) {
		Boolean permite=true;
		
		if(this.balancegeneralcliente.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=BalanceGeneralClienteConstantesFunciones.getOrderByListaBalanceGeneralCliente();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=BalanceGeneralClienteConstantesFunciones.getOrderByListaBalanceGeneralCliente();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				if(balancegeneralcliente.getsType().equals(Constantes2.S_TOTALES)) {
					balancegeneralclienteTotales=balancegeneralcliente;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(BalanceGeneralCliente balancegeneralcliente:this.balancegeneralclientes) {
				if(balancegeneralcliente.getsType().equals(Constantes2.S_TOTALES)) {
					balancegeneralclienteTotales=balancegeneralcliente;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.balancegeneralclienteAux=new BalanceGeneralCliente();
			this.balancegeneralclienteAux.setsType(Constantes2.S_TOTALES);
			this.balancegeneralclienteAux.setIsNew(false);
			this.balancegeneralclienteAux.setIsChanged(false);
			this.balancegeneralclienteAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				BalanceGeneralClienteConstantesFunciones.TotalizarValoresFilaBalanceGeneralCliente(this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this.balancegeneralclienteAux);
				
				this.balancegeneralclienteLogic.getBalanceGeneralClientes().add(this.balancegeneralclienteAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				BalanceGeneralClienteConstantesFunciones.TotalizarValoresFilaBalanceGeneralCliente(this.balancegeneralclientes,this.balancegeneralclienteAux);
				
				this.balancegeneralclientes.add(this.balancegeneralclienteAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		balancegeneralclienteTotales=new BalanceGeneralCliente();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.balancegeneralclienteLogic.getBalanceGeneralClientes().remove(balancegeneralclienteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.balancegeneralclientes.remove(balancegeneralclienteTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		balancegeneralclienteTotales=new BalanceGeneralCliente();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				if(balancegeneralcliente.getsType().equals(Constantes2.S_TOTALES)) {
					balancegeneralclienteTotales=balancegeneralcliente;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				BalanceGeneralClienteConstantesFunciones.TotalizarValoresFilaBalanceGeneralCliente(this.balancegeneralclienteLogic.getBalanceGeneralClientes(),balancegeneralclienteTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(BalanceGeneralCliente balancegeneralcliente:this.balancegeneralclientes) {
				if(balancegeneralcliente.getsType().equals(Constantes2.S_TOTALES)) {
					balancegeneralclienteTotales=balancegeneralcliente;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				BalanceGeneralClienteConstantesFunciones.TotalizarValoresFilaBalanceGeneralCliente(this.balancegeneralclientes,balancegeneralclienteTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getBalanceGeneralClientesFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBalanceGeneralClientesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getBalanceGeneralClientesFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBalanceGeneralClientesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					balancegeneralclienteLogic.getBalanceGeneralClientesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosBalanceGeneralCliente() {
		this.isPermisoTodoBalanceGeneralCliente=false;
		this.isPermisoNuevoBalanceGeneralCliente=false;
		this.isPermisoActualizarBalanceGeneralCliente=false;
		this.isPermisoActualizarOriginalBalanceGeneralCliente=false;
		this.isPermisoEliminarBalanceGeneralCliente=false;
		this.isPermisoGuardarCambiosBalanceGeneralCliente=false;
		this.isPermisoConsultaBalanceGeneralCliente=false;
		this.isPermisoBusquedaBalanceGeneralCliente=false;
		this.isPermisoReporteBalanceGeneralCliente=false;		
		this.isPermisoOrdenBalanceGeneralCliente=false;		
		this.isPermisoPaginacionMedioBalanceGeneralCliente=false;		
		this.isPermisoPaginacionAltoBalanceGeneralCliente=false;
		this.isPermisoPaginacionTodoBalanceGeneralCliente=false;
		this.isPermisoCopiarBalanceGeneralCliente=false;		
		this.isPermisoVerFormBalanceGeneralCliente=false;		
		this.isPermisoDuplicarBalanceGeneralCliente=false;		
		this.isPermisoOrdenBalanceGeneralCliente=false;		
	}
	
	public void setPermisosUsuarioBalanceGeneralCliente(Boolean isPermiso) {
		this.isPermisoTodoBalanceGeneralCliente=isPermiso;
		this.isPermisoNuevoBalanceGeneralCliente=isPermiso;
		this.isPermisoActualizarBalanceGeneralCliente=isPermiso;
		this.isPermisoActualizarOriginalBalanceGeneralCliente=isPermiso;
		this.isPermisoEliminarBalanceGeneralCliente=isPermiso;
		this.isPermisoGuardarCambiosBalanceGeneralCliente=isPermiso;
		this.isPermisoConsultaBalanceGeneralCliente=isPermiso;
		this.isPermisoBusquedaBalanceGeneralCliente=isPermiso;
		this.isPermisoReporteBalanceGeneralCliente=isPermiso;
		this.isPermisoOrdenBalanceGeneralCliente=isPermiso;		
		this.isPermisoPaginacionMedioBalanceGeneralCliente=isPermiso;		
		this.isPermisoPaginacionAltoBalanceGeneralCliente=isPermiso;		
		this.isPermisoPaginacionTodoBalanceGeneralCliente=isPermiso;		
		this.isPermisoCopiarBalanceGeneralCliente=isPermiso;		
		this.isPermisoVerFormBalanceGeneralCliente=isPermiso;		
		this.isPermisoDuplicarBalanceGeneralCliente=isPermiso;
		this.isPermisoOrdenBalanceGeneralCliente=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioBalanceGeneralCliente(Boolean isPermiso) {
		//this.isPermisoTodoBalanceGeneralCliente=isPermiso;
		this.isPermisoNuevoBalanceGeneralCliente=isPermiso;
		this.isPermisoActualizarBalanceGeneralCliente=isPermiso;
		this.isPermisoActualizarOriginalBalanceGeneralCliente=isPermiso;
		this.isPermisoEliminarBalanceGeneralCliente=isPermiso;
		this.isPermisoGuardarCambiosBalanceGeneralCliente=isPermiso;
		//this.isPermisoConsultaBalanceGeneralCliente=isPermiso;
		//this.isPermisoBusquedaBalanceGeneralCliente=isPermiso;
		//this.isPermisoReporteBalanceGeneralCliente=isPermiso;
		//this.isPermisoOrdenBalanceGeneralCliente=isPermiso;		
		//this.isPermisoPaginacionMedioBalanceGeneralCliente=isPermiso;		
		//this.isPermisoPaginacionAltoBalanceGeneralCliente=isPermiso;		
		//this.isPermisoPaginacionTodoBalanceGeneralCliente=isPermiso;		
		//this.isPermisoCopiarBalanceGeneralCliente=isPermiso;		
		//this.isPermisoDuplicarBalanceGeneralCliente=isPermiso;
		//this.isPermisoOrdenBalanceGeneralCliente=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioBalanceGeneralClienteClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(BalanceGeneralClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebBalanceGeneralCliente(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioBalanceGeneralClienteClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioBalanceGeneralClienteClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionBalanceGeneralClienteClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioBalanceGeneralClienteClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioBalanceGeneralCliente() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(BalanceGeneralClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, BalanceGeneralClienteConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoBalanceGeneralCliente=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarBalanceGeneralCliente=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalBalanceGeneralCliente=this.isPermisoActualizarBalanceGeneralCliente;
			this.isPermisoEliminarBalanceGeneralCliente=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosBalanceGeneralCliente=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaBalanceGeneralCliente=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaBalanceGeneralCliente=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoBalanceGeneralCliente=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteBalanceGeneralCliente=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenBalanceGeneralCliente=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioBalanceGeneralCliente=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoBalanceGeneralCliente=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoBalanceGeneralCliente=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarBalanceGeneralCliente=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormBalanceGeneralCliente=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarBalanceGeneralCliente=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenBalanceGeneralCliente=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosBalanceGeneralCliente.setToolTipText(this.jTableDatosBalanceGeneralCliente.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioBalanceGeneralCliente(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioBalanceGeneralCliente(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(BalanceGeneralClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(BalanceGeneralClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioBalanceGeneralCliente() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyBalanceGeneralClienteListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyBalanceGeneralClienteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(BalanceGeneralClienteJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyBalanceGeneralClienteListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyBalanceGeneralClienteListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteReturnGeneral=new BalanceGeneralClienteParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.balancegeneralclienteConstantesFunciones.cargarid_empresaBalanceGeneralCliente)
					 || (this.esRecargarFks && this.balancegeneralclienteConstantesFunciones.cargarid_empresaBalanceGeneralCliente)) {

					if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+balancegeneralclienteSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.balancegeneralclienteConstantesFunciones.cargarid_clienteBalanceGeneralCliente)
					 || (this.esRecargarFks && this.balancegeneralclienteConstantesFunciones.cargarid_clienteBalanceGeneralCliente)) {

					if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+balancegeneralclienteSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.cargarCombosLoteForeignKeyBalanceGeneralCliente(finalQueryGlobalEmpresa,finalQueryGlobalCliente);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=balancegeneralclienteReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=balancegeneralclienteReturnGeneral.getclientesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyBalanceGeneralCliente()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyCliente();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.balancegeneralclienteSessionBean==null) {
				this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			}

			if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.balancegeneralclienteSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyBalanceGeneralCliente()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyBalanceGeneralCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyBalanceGeneralCliente()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyBalanceGeneralCliente();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente)throws Exception {	
		try {
			
			this.setActualClienteForeignKey(balancegeneralcliente.getid_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,String sTipoEvento)throws Exception {	
		try {
			
			

				if(balancegeneralcliente.getCliente()!=null && !sTipoEvento.equals("id_clienteBalanceGeneralCliente")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(balancegeneralcliente.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyBalanceGeneralCliente()throws Exception {	
		try {
			
			this.setActualClienteForeignKey(this.balancegeneralclienteConstantesFunciones.getid_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyBalanceGeneralCliente()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyBalanceGeneralCliente()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyBalanceGeneralCliente()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroBalanceGeneralCliente()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyBalanceGeneralCliente()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyBalanceGeneralCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyBalanceGeneralCliente()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.getItemCount()>0) {
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




	
	

	public BalanceGeneralClienteBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public BalanceGeneralClienteBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public BalanceGeneralClienteBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean(); 
		this.balancegeneralclienteConstantesFunciones=new BalanceGeneralClienteConstantesFunciones(); 
		this.balancegeneralclienteBean=new BalanceGeneralCliente();//(this.balancegeneralclienteConstantesFunciones); 		
		this.balancegeneralclienteReturnGeneral=new BalanceGeneralClienteParameterReturnGeneral(); 
		
		this.balancegeneralclienteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.balancegeneralclienteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public BalanceGeneralClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public BalanceGeneralClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public BalanceGeneralClienteBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessBalanceGeneralCliente(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.balancegeneralclienteConstantesFunciones=new BalanceGeneralClienteConstantesFunciones(); 
			this.balancegeneralclienteBean=new BalanceGeneralCliente();//this.balancegeneralclienteConstantesFunciones); 			
			this.balancegeneralclienteReturnGeneral=new BalanceGeneralClienteParameterReturnGeneral(); 
		
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Balance General Cliente Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.balancegeneralcliente=new BalanceGeneralCliente();
			this.balancegeneralclientes = new ArrayList<BalanceGeneralCliente>();
			this.balancegeneralclientesAux = new ArrayList<BalanceGeneralCliente>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic=new BalanceGeneralClienteLogic();
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			//this.balancegeneralclienteSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.balancegeneralclienteSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormBalanceGeneralCliente);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoBalanceGeneralCliente);	
					}
					
					if(this.jInternalFrameImportacionBalanceGeneralCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionBalanceGeneralCliente);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByBalanceGeneralCliente!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByBalanceGeneralCliente);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormBalanceGeneralCliente);
				this.jInternalFrameDetalleFormBalanceGeneralCliente.setVisible(false);
				this.jInternalFrameDetalleFormBalanceGeneralCliente.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoBalanceGeneralCliente);
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setVisible(false);
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionBalanceGeneralCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionBalanceGeneralCliente);
					this.jInternalFrameImportacionBalanceGeneralCliente.setVisible(false);
					this.jInternalFrameImportacionBalanceGeneralCliente.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByBalanceGeneralCliente!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByBalanceGeneralCliente);
					this.jInternalFrameOrderByBalanceGeneralCliente.setVisible(false);
					this.jInternalFrameOrderByBalanceGeneralCliente.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idBalanceGeneralClienteActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=BalanceGeneralClienteConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.balancegeneralclienteReturnGeneral=new BalanceGeneralClienteParameterReturnGeneral();
			
			this.balancegeneralclienteParameterGeneral=new BalanceGeneralClienteParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.balancegeneralclienteLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(BalanceGeneralClienteJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,BalanceGeneralClienteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),this.balancegeneralclienteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,BalanceGeneralClienteConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),this.balancegeneralclienteSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaDuplicarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaCopiarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaVerFormBalanceGeneralCliente=true;
			this.isVisibilidadCeldaOrdenBalanceGeneralCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			
			
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEmpresa=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosBalanceGeneralCliente();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioBalanceGeneralCliente(false);
			
			this.setPermisosUsuarioBalanceGeneralCliente();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado() 
				|| (this.balancegeneralclienteSessionBean.getEsGuardarRelacionado() && this.balancegeneralclienteSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioBalanceGeneralClienteClasesRelacionadas();
			}
			
			if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioBalanceGeneralClienteClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosBalanceGeneralCliente();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualBalanceGeneralCliente();
			}
			
			if(!this.isPermisoBusquedaBalanceGeneralCliente) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioBalanceGeneralCliente,this.isPermisoPaginacionMedioBalanceGeneralCliente,this.isPermisoPaginacionTodoBalanceGeneralCliente);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(BalanceGeneralClienteConstantesFunciones.getTiposSeleccionarBalanceGeneralCliente());
				
				this.tiposColumnasSelect=BalanceGeneralClienteConstantesFunciones.getTiposSeleccionarBalanceGeneralCliente(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioBalanceGeneralCliente();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioBalanceGeneralCliente(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioBalanceGeneralCliente(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesBalanceGeneralCliente() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.clienteLogic=new ClienteLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				balancegeneralclienteImplementable= (BalanceGeneralClienteImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+BalanceGeneralClienteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				balancegeneralclienteImplementableHome= (BalanceGeneralClienteImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+BalanceGeneralClienteConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.balancegeneralclientes= new ArrayList<BalanceGeneralCliente>();
			this.balancegeneralclientesEliminados= new ArrayList<BalanceGeneralCliente>();
						
			this.isEsNuevoBalanceGeneralCliente=false;
			this.esParaAccionDesdeFormularioBalanceGeneralCliente=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyBalanceGeneralCliente(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroBalanceGeneralCliente();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=BalanceGeneralClienteConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingBalanceGeneralCliente(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioBalanceGeneralCliente();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioBalanceGeneralCliente();
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasBalanceGeneralCliente.getTabCount(); i++) {
					this.jTabbedPaneBusquedasBalanceGeneralCliente.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasBalanceGeneralCliente.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessBalanceGeneralCliente(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga BalanceGeneralCliente: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectBalanceGeneralCliente() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesBalanceGeneralCliente")) {
				iIndex=this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessBalanceGeneralCliente();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyBalanceGeneralCliente(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyBalanceGeneralCliente(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyBalanceGeneralCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyBalanceGeneralClienteListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyBalanceGeneralCliente();
		
		this.cargarCombosFrameForeignKeyBalanceGeneralCliente();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyBalanceGeneralCliente();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyBalanceGeneralCliente();
		}
	}
	
	

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoBalanceGeneralClienteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			
			if(jTableDatosBalanceGeneralCliente.getRowCount()>=1) {
				jTableDatosBalanceGeneralCliente.removeRowSelectionInterval(0, jTableDatosBalanceGeneralCliente.getRowCount()-1);						
			}
			
			this.isEsNuevoBalanceGeneralCliente=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoBalanceGeneralCliente(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesBalanceGeneralCliente(true);			
			//this.balancegeneralcliente=new BalanceGeneralCliente();
			//this.balancegeneralcliente.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente() ;
			
			if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBalanceGeneralCliente(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.balancegeneralcliente);	
			this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);				
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar BalanceGeneralCliente: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarBalanceGeneralClienteActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosBalanceGeneralCliente.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosBalanceGeneralCliente.getSelectedRows().length;			
			}
			
			balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoBalanceGeneralCliente--;			
				//BalanceGeneralCliente balancegeneralclienteAux= new BalanceGeneralCliente();			
				//balancegeneralclienteAux.setId(this.iIdNuevoBalanceGeneralCliente);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//BalanceGeneralCliente balancegeneralclienteOrigen=new BalanceGeneralCliente();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(BalanceGeneralCliente balancegeneralclienteOrigen : balancegeneralclientesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							balancegeneralclienteOrigen =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							balancegeneralclienteOrigen =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaBalanceGeneralCliente();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.balancegeneralcliente.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosBalanceGeneralCliente(balancegeneralclienteOrigen,this.balancegeneralcliente,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.balancegeneralclienteLogic.getBalanceGeneralClientes().add(this.balancegeneralclienteAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.balancegeneralclientes.add(this.balancegeneralclienteAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
				
				this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(this.getIndiceNuevoBalanceGeneralCliente(), this.getIndiceNuevoBalanceGeneralCliente());
				
				int iLastRow =  this.jTableDatosBalanceGeneralCliente.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosBalanceGeneralCliente.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosBalanceGeneralCliente.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();									
		
			BalanceGeneralCliente balancegeneralclienteOrigen=new BalanceGeneralCliente();
			BalanceGeneralCliente balancegeneralclienteDestino=new BalanceGeneralCliente();
				
			balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosBalanceGeneralCliente.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || balancegeneralclientesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosBalanceGeneralCliente.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteOrigen =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						balancegeneralclienteOrigen =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						balancegeneralclienteDestino =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						balancegeneralclienteDestino =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				balancegeneralclienteOrigen =balancegeneralclientesSeleccionados.get(0);
				balancegeneralclienteDestino =balancegeneralclientesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosBalanceGeneralCliente(balancegeneralclienteOrigen,balancegeneralclienteDestino,true,false);
				
				balancegeneralclienteDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(balancegeneralclienteDestino,balancegeneralclienteLogic.getBalanceGeneralClientes());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(balancegeneralclienteDestino,balancegeneralclientes);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
				
				//this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(this.getIndiceNuevoBalanceGeneralCliente(), this.getIndiceNuevoBalanceGeneralCliente());
				
				int iLastRow =  this.jTableDatosBalanceGeneralCliente.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosBalanceGeneralCliente.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosBalanceGeneralCliente.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesBalanceGeneralCliente.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(!isVisible);
			this.jPanelPaginacionBalanceGeneralCliente.setVisible(!isVisible);
			this.jPanelAccionesBalanceGeneralCliente.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameBalanceGeneralCliente();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoBalanceGeneralCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionBalanceGeneralCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByBalanceGeneralCliente();
			
			this.abrirFrameOrderByBalanceGeneralCliente();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByBalanceGeneralCliente();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleBalanceGeneralCliente(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormBalanceGeneralCliente);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormBalanceGeneralCliente.isMaximum()) {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormBalanceGeneralCliente.setSize(this.jInternalFrameDetalleFormBalanceGeneralCliente.iWidthFormulario,this.jInternalFrameDetalleFormBalanceGeneralCliente.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormBalanceGeneralCliente.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormBalanceGeneralCliente.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormBalanceGeneralCliente.isMaximum()) {
						this.jInternalFrameDetalleFormBalanceGeneralCliente.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jContentPaneDetalleBalanceGeneralCliente.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormBalanceGeneralCliente.jContentPaneDetalleBalanceGeneralCliente.getWidth(),BalanceGeneralClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormBalanceGeneralCliente.jContentPaneDetalleBalanceGeneralCliente.getWidth(),BalanceGeneralClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormBalanceGeneralCliente.jContentPaneDetalleBalanceGeneralCliente.getWidth(),BalanceGeneralClienteConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormBalanceGeneralCliente.setVisible(true);
	        this.jInternalFrameDetalleFormBalanceGeneralCliente.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByBalanceGeneralCliente() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByBalanceGeneralCliente==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByBalanceGeneralCliente=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByBalanceGeneralCliente,false,this);
				} else {
					this.jInternalFrameOrderByBalanceGeneralCliente=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByBalanceGeneralCliente,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByBalanceGeneralCliente);
				this.jInternalFrameOrderByBalanceGeneralCliente.setVisible(false);
				this.jInternalFrameOrderByBalanceGeneralCliente.setSelected(false);
				
				this.jInternalFrameOrderByBalanceGeneralCliente.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByBalanceGeneralCliente"));
				
				this.inicializarActualizarBindingTablaOrderByBalanceGeneralCliente();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionBalanceGeneralCliente() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionBalanceGeneralCliente==null) {
				
				this.jInternalFrameImportacionBalanceGeneralCliente=new ImportacionJInternalFrame(BalanceGeneralClienteConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionBalanceGeneralCliente);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionBalanceGeneralCliente);
				this.jInternalFrameImportacionBalanceGeneralCliente.setVisible(false);
				this.jInternalFrameImportacionBalanceGeneralCliente.setSelected(false);


				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionBalanceGeneralCliente"));
				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionBalanceGeneralCliente"));
				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionBalanceGeneralCliente"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoBalanceGeneralCliente() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente==null) {
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente=new ReporteDinamicoJInternalFrame(BalanceGeneralClienteConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoBalanceGeneralCliente);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoBalanceGeneralCliente);
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setVisible(false);
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBalanceGeneralCliente"));
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBalanceGeneralCliente"));
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBalanceGeneralCliente"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBalanceGeneralCliente();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleBalanceGeneralCliente() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormBalanceGeneralCliente);
			
	       	this.jInternalFrameDetalleFormBalanceGeneralCliente.setVisible(false);
	        this.jInternalFrameDetalleFormBalanceGeneralCliente.setSelected(false);
			
			//this.jInternalFrameDetalleFormBalanceGeneralCliente.dispose();
			//this.jInternalFrameDetalleFormBalanceGeneralCliente=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoBalanceGeneralCliente() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setVisible(true);
	        this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionBalanceGeneralCliente() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionBalanceGeneralCliente.setVisible(true);
	        this.jInternalFrameImportacionBalanceGeneralCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByBalanceGeneralCliente() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByBalanceGeneralCliente.setVisible(true);
	        this.jInternalFrameOrderByBalanceGeneralCliente.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByBalanceGeneralCliente() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByBalanceGeneralCliente.setVisible(false);
	        this.jInternalFrameOrderByBalanceGeneralCliente.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoBalanceGeneralCliente() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setVisible(false);
	        this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionBalanceGeneralCliente() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionBalanceGeneralCliente.setVisible(false);
	        this.jInternalFrameImportacionBalanceGeneralCliente.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarBalanceGeneralCliente(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarBalanceGeneralCliente(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesBalanceGeneralCliente(true);
			//this.isEsNuevoBalanceGeneralCliente=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false) ;
			
			if(balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBalanceGeneralCliente(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaBalanceGeneralClienteActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarBalanceGeneralCliente(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesBalanceGeneralCliente(true);
			//this.isEsNuevoBalanceGeneralCliente=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.balancegeneralcliente.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false) ;
			
			if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBalanceGeneralCliente(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.balancegeneralclienteConstantesFunciones.cargarid_clienteBalanceGeneralCliente) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBalanceGeneralCliente.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesBalanceGeneralCliente(false);
			
			//if(!this.isEsNuevoBalanceGeneralCliente) {								
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
				this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				
			}
			
			if(this.permiteMantenimiento(this.balancegeneralcliente)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoBalanceGeneralCliente=true;
					this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
					this.isEsNuevoBalanceGeneralCliente=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoBalanceGeneralCliente=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoBalanceGeneralCliente=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(false);
				
				this.habilitarDeshabilitarControlesBalanceGeneralCliente(false);
			
												
				
				if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleBalanceGeneralCliente();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoBalanceGeneralClienteActionPerformed(evt,balancegeneralclienteSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualBalanceGeneralCliente(this.balancegeneralcliente,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,balancegeneralclienteSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.balancegeneralcliente.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				this.balancegeneralcliente.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				this.balancegeneralcliente.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.balancegeneralcliente)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((BalanceGeneralClienteModel) this.jTableDatosBalanceGeneralCliente.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoBalanceGeneralCliente=true;
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
				this.isEsNuevoBalanceGeneralCliente=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(false);
				
				this.habilitarDeshabilitarControlesBalanceGeneralCliente(false);
				
				
				
				if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleBalanceGeneralCliente();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosBalanceGeneralCliente.getRowCount()>=1) {
				jTableDatosBalanceGeneralCliente.removeRowSelectionInterval(0, jTableDatosBalanceGeneralCliente.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesBalanceGeneralCliente(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(false) ;
			
			this.isEsNuevoBalanceGeneralCliente=false;
			
			if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleBalanceGeneralCliente();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBalanceGeneralCliente(false);
				
				//SI ES MANUAL
				if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualBalanceGeneralCliente();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoBalanceGeneralCliente--;			
			//BalanceGeneralCliente balancegeneralclienteAux= new BalanceGeneralCliente();			
			//balancegeneralclienteAux.setId(this.iIdNuevoBalanceGeneralCliente);
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaBalanceGeneralCliente();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
			
			this.balancegeneralcliente.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.balancegeneralclienteLogic.getBalanceGeneralClientes().add(this.balancegeneralclienteAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.balancegeneralclientes.add(this.balancegeneralclienteAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			
			this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(this.getIndiceNuevoBalanceGeneralCliente(), this.getIndiceNuevoBalanceGeneralCliente());
			
			int iLastRow =  this.jTableDatosBalanceGeneralCliente.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosBalanceGeneralCliente.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosBalanceGeneralCliente.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
			
			//SI ES MANUAL
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBalanceGeneralCliente();
			}
			
			//this.abrirFrameTreeBalanceGeneralCliente();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Balance General ClienteS ?", "MANTENIMIENTO DE Balance General Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionBalanceGeneralCliente.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralBalanceGeneralCliente();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.procesarImportacionBalanceGeneralClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.balancegeneralclienteParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarBalanceGeneralClienteReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionBalanceGeneralCliente.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionBalanceGeneralCliente.setFileImportacion(this.jInternalFrameImportacionBalanceGeneralCliente.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionBalanceGeneralCliente.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionBalanceGeneralCliente.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionBalanceGeneralCliente.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionBalanceGeneralCliente.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		

		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("BalanceGeneralClienteBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"BalanceGeneralClienteBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_jaBancosDisponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_jaBancosDisponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_jaBancosDisponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_jaBancosDisponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_entasPorCobrarClientes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_entasPorCobrarClientes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_entasPorCobrarClientes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_entasPorCobrarClientes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rosActivosCorrientes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rosActivosCorrientes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rosActivosCorrientes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rosActivosCorrientes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talActivosCorrientes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talActivosCorrientes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talActivosCorrientes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talActivosCorrientes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_enesInmuebles_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_enesInmuebles_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_enesInmuebles_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_enesInmuebles_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_enesMuebles_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_enesMuebles_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_enesMuebles_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_enesMuebles_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rosActivosNoCorrientes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rosActivosNoCorrientes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rosActivosNoCorrientes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rosActivosNoCorrientes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talActivosNoCorrientes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talActivosNoCorrientes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talActivosNoCorrientes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talActivosNoCorrientes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntasMensuales_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntasMensuales_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntasMensuales_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntasMensuales_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoVentasMensuales_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoVentasMensuales_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoVentasMensuales_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoVentasMensuales_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ilidadBruta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ilidadBruta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ilidadBruta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ilidadBruta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stosOperativos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stosOperativos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stosOperativos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stosOperativos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eldos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eldos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eldos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eldos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rvicios_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rvicios_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rvicios_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rvicios_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_riendos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_riendos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_riendos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_riendos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_puestos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_puestos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_puestos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_puestos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ilidadOperativa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ilidadOperativa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ilidadOperativa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ilidadOperativa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stosFamiliares_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stosFamiliares_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stosFamiliares_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stosFamiliares_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cedenteAntesDividendos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cedenteAntesDividendos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cedenteAntesDividendos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cedenteAntesDividendos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_videndosBancosOtros_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_videndosBancosOtros_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_videndosBancosOtros_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_videndosBancosOtros_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_edenteNetoMensual_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_edenteNetoMensual_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_edenteNetoMensual_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_edenteNetoMensual_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_udasBancarias_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_udasBancarias_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_udasBancarias_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_udasBancarias_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_entasPorPagar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_entasPorPagar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_entasPorPagar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_entasPorPagar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ticiposRecibos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ticiposRecibos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ticiposRecibos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ticiposRecibos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rasCuentasPorPagar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rasCuentasPorPagar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rasCuentasPorPagar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rasCuentasPorPagar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rasDeudasFamiliares_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rasDeudasFamiliares_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rasDeudasFamiliares_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rasDeudasFamiliares_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talPasivoCorriente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talPasivoCorriente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talPasivoCorriente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talPasivoCorriente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_udasBancariasLargoPlazo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_udasBancariasLargoPlazo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_udasBancariasLargoPlazo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_udasBancariasLargoPlazo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rosPasivosLargoPlazo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rosPasivosLargoPlazo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rosPasivosLargoPlazo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rosPasivosLargoPlazo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talPasivoNoCorriente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talPasivoNoCorriente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talPasivoNoCorriente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talPasivoNoCorriente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talPasivo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talPasivo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talPasivo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talPasivo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_trimonio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_trimonio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_trimonio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_trimonio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE:
					sNombreCampoCategoria="caja_bancos_disponible";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES:
					sNombreCampoCategoria="cuentas_por_cobrar_clientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO:
					sNombreCampoCategoria="inventario";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES:
					sNombreCampoCategoria="otros_activos_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES:
					sNombreCampoCategoria="total_activos_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES:
					sNombreCampoCategoria="bienes_inmuebles";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES:
					sNombreCampoCategoria="bienes_muebles";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES:
					sNombreCampoCategoria="otros_activos_no_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES:
					sNombreCampoCategoria="total_activos_no_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES:
					sNombreCampoCategoria="ventas_mensuales";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES:
					sNombreCampoCategoria="costo_ventas_mensuales";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA:
					sNombreCampoCategoria="utilidad_bruta";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS:
					sNombreCampoCategoria="gastos_operativos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS:
					sNombreCampoCategoria="sueldos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS:
					sNombreCampoCategoria="servicios";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS:
					sNombreCampoCategoria="arriendos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS:
					sNombreCampoCategoria="impuestos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA:
					sNombreCampoCategoria="utilidad_operativa";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES:
					sNombreCampoCategoria="gastos_familiares";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS:
					sNombreCampoCategoria="excedente_antes_dividendos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS:
					sNombreCampoCategoria="dividendos_bancos_otros";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL:
					sNombreCampoCategoria="exedente_neto_mensual";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS:
					sNombreCampoCategoria="deudas_bancarias";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR:
					sNombreCampoCategoria="cuentas_por_pagar";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS:
					sNombreCampoCategoria="anticipos_recibos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR:
					sNombreCampoCategoria="otras_cuentas_por_pagar";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES:
					sNombreCampoCategoria="otras_deudas_familiares";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE:
					sNombreCampoCategoria="total_pasivo_corriente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO:
					sNombreCampoCategoria="deudas_bancarias_largo_plazo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO:
					sNombreCampoCategoria="otros_pasivos_largo_plazo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE:
					sNombreCampoCategoria="total_pasivo_no_corriente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO:
					sNombreCampoCategoria="total_pasivo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO:
					sNombreCampoCategoria="patrimonio";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE:
					sNombreCampoCategoriaValor="caja_bancos_disponible";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES:
					sNombreCampoCategoriaValor="cuentas_por_cobrar_clientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO:
					sNombreCampoCategoriaValor="inventario";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES:
					sNombreCampoCategoriaValor="otros_activos_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES:
					sNombreCampoCategoriaValor="total_activos_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES:
					sNombreCampoCategoriaValor="bienes_inmuebles";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES:
					sNombreCampoCategoriaValor="bienes_muebles";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES:
					sNombreCampoCategoriaValor="otros_activos_no_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES:
					sNombreCampoCategoriaValor="total_activos_no_corrientes";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES:
					sNombreCampoCategoriaValor="ventas_mensuales";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES:
					sNombreCampoCategoriaValor="costo_ventas_mensuales";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA:
					sNombreCampoCategoriaValor="utilidad_bruta";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS:
					sNombreCampoCategoriaValor="gastos_operativos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS:
					sNombreCampoCategoriaValor="sueldos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS:
					sNombreCampoCategoriaValor="servicios";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS:
					sNombreCampoCategoriaValor="arriendos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS:
					sNombreCampoCategoriaValor="impuestos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA:
					sNombreCampoCategoriaValor="utilidad_operativa";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES:
					sNombreCampoCategoriaValor="gastos_familiares";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS:
					sNombreCampoCategoriaValor="excedente_antes_dividendos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS:
					sNombreCampoCategoriaValor="dividendos_bancos_otros";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL:
					sNombreCampoCategoriaValor="exedente_neto_mensual";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS:
					sNombreCampoCategoriaValor="deudas_bancarias";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR:
					sNombreCampoCategoriaValor="cuentas_por_pagar";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS:
					sNombreCampoCategoriaValor="anticipos_recibos";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR:
					sNombreCampoCategoriaValor="otras_cuentas_por_pagar";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES:
					sNombreCampoCategoriaValor="otras_deudas_familiares";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE:
					sNombreCampoCategoriaValor="total_pasivo_corriente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO:
					sNombreCampoCategoriaValor="deudas_bancarias_largo_plazo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO:
					sNombreCampoCategoriaValor="otros_pasivos_largo_plazo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE:
					sNombreCampoCategoriaValor="total_pasivo_no_corriente";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO:
					sNombreCampoCategoriaValor="total_pasivo";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO:
					sNombreCampoCategoriaValor="patrimonio";
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Caja Bancos Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"caja_bancos_disponible");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuentas Por Cobrar Clientes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cuentas_por_cobrar_clientes");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"inventario");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros Activos Corrientes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros_activos_corrientes");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Activos Corrientes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_activos_corrientes");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bienes Inmuebles",sNombreCampoCategoria,sNombreCampoCategoriaValor,"bienes_inmuebles");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bienes Muebles",sNombreCampoCategoria,sNombreCampoCategoriaValor,"bienes_muebles");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros Activos No Corrientes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros_activos_no_corrientes");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Activos No Corrientes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_activos_no_corrientes");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ventas Mensuales",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ventas_mensuales");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Ventas Mensuales",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_ventas_mensuales");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Utilidad Bruta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"utilidad_bruta");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gastos Operativos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gastos_operativos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sueldos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sueldos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Servicios",sNombreCampoCategoria,sNombreCampoCategoriaValor,"servicios");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Arriendos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"arriendos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Impuestos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"impuestos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Utilidad Operativa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"utilidad_operativa");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gastos Familiares",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gastos_familiares");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Excedente Antes Dividendos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"excedente_antes_dividendos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dividendos Bancos Otros",sNombreCampoCategoria,sNombreCampoCategoriaValor,"dividendos_bancos_otros");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Exedente Neto Mensual",sNombreCampoCategoria,sNombreCampoCategoriaValor,"exedente_neto_mensual");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Deudas Bancarias",sNombreCampoCategoria,sNombreCampoCategoriaValor,"deudas_bancarias");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuentas Por Pagar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cuentas_por_pagar");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anticipos Recibos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anticipos_recibos");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otras Cuentas Por Pagar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otras_cuentas_por_pagar");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otras Deudas Familiares",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otras_deudas_familiares");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Pasivo Corriente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_pasivo_corriente");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Deudas Bancarias Largo Plazo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"deudas_bancarias_largo_plazo");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros Pasivos Largo Plazo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros_pasivos_largo_plazo");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Pasivo No Corriente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_pasivo_no_corriente");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Pasivo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_pasivo");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Patrimonio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"patrimonio");
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("BalanceGeneralClientes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getcaja_bancos_disponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getcuentas_por_cobrar_clientes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getinventario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getotros_activos_corrientes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.gettotal_activos_corrientes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getbienes_inmuebles());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getbienes_muebles());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getotros_activos_no_corrientes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.gettotal_activos_no_corrientes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getventas_mensuales());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getcosto_ventas_mensuales());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getutilidad_bruta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getgastos_operativos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getsueldos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getservicios());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getarriendos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getimpuestos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getutilidad_operativa());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getgastos_familiares());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getexcedente_antes_dividendos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getdividendos_bancos_otros());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getexedente_neto_mensual());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getdeudas_bancarias());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getcuentas_por_pagar());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getanticipos_recibos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getotras_cuentas_por_pagar());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getotras_deudas_familiares());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.gettotal_pasivo_corriente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getdeudas_bancarias_largo_plazo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getotros_pasivos_largo_plazo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.gettotal_pasivo_no_corriente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.gettotal_pasivo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getpatrimonio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(BalanceGeneralCliente balancegeneralcliente:balancegeneralclientesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(balancegeneralcliente.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelBalanceGeneralCliente(row);				
			//	iRow++;
			//}				
			
			//for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelBalanceGeneralCliente(balancegeneralclienteAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
			
			//SI ES MANUAL
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBalanceGeneralCliente();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
			
			//SI ES MANUAL
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualBalanceGeneralCliente();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
			
			//SI ES MANUAL
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualBalanceGeneralCliente();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaBalanceGeneralCliente() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosBalanceGeneralCliente.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosBalanceGeneralCliente.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosBalanceGeneralCliente.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosBalanceGeneralCliente.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosBalanceGeneralCliente.setMinimumSize(dimensionMinimum);
		this.jTableDatosBalanceGeneralCliente.setMaximumSize(dimensionMaximum);
		this.jTableDatosBalanceGeneralCliente.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingBalanceGeneralCliente(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingBalanceGeneralCliente(esInicializar,true);
	}
	
	public void inicializarActualizarBindingBalanceGeneralCliente(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaBalanceGeneralCliente(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesBalanceGeneralCliente(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasBalanceGeneralCliente(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesBalanceGeneralCliente(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesBalanceGeneralCliente(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualBalanceGeneralCliente() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaBalanceGeneralCliente();
		
		this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualBalanceGeneralCliente();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesBalanceGeneralCliente() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualBalanceGeneralCliente(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualBalanceGeneralCliente(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosBalanceGeneralCliente.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosBalanceGeneralCliente.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteBalanceGeneralCliente.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionNuevoBalanceGeneralCliente.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionSinCerrarBalanceGeneralCliente.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionSinMensajeBalanceGeneralCliente.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosBalanceGeneralCliente.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosBalanceGeneralCliente.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteBalanceGeneralCliente.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionNuevoBalanceGeneralCliente.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionSinCerrarBalanceGeneralCliente.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jCheckBoxPostAccionSinMensajeBalanceGeneralCliente.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionBalanceGeneralCliente.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionBalanceGeneralCliente.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesBalanceGeneralCliente.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesBalanceGeneralCliente.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesBalanceGeneralCliente.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarBalanceGeneralCliente.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesBalanceGeneralCliente.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesBalanceGeneralCliente.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralBalanceGeneralCliente.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesBalanceGeneralCliente(Boolean esInicializar) throws Exception {
		try	{	
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualBalanceGeneralCliente(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesBalanceGeneralCliente() throws Exception {
		try	{
			if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualBalanceGeneralCliente();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleBalanceGeneralCliente() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualBalanceGeneralCliente() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesBalanceGeneralCliente.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesBalanceGeneralCliente.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesBalanceGeneralCliente.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionBalanceGeneralCliente.addItem(reporte);
			}
			
			
			if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionBalanceGeneralCliente.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionBalanceGeneralCliente.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesBalanceGeneralCliente.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesBalanceGeneralCliente.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarBalanceGeneralCliente.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarBalanceGeneralCliente.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarBalanceGeneralCliente.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBalanceGeneralCliente();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBalanceGeneralCliente() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
				
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=BalanceGeneralClienteConstantesFunciones.getTiposSeleccionarBalanceGeneralCliente(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=BalanceGeneralClienteConstantesFunciones.getTiposSeleccionarBalanceGeneralCliente(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=BalanceGeneralClienteConstantesFunciones.getTiposSeleccionarBalanceGeneralCliente(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualBalanceGeneralCliente()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteBalanceGeneralCliente.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasBalanceGeneralCliente(Boolean esInicializar) throws Exception {				
		if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualBalanceGeneralCliente();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaBalanceGeneralCliente() throws Exception {
		this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByBalanceGeneralCliente() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosBalanceGeneralClienteOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralClienteOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaBalanceGeneralCliente(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=balancegeneralclienteLogic.getBalanceGeneralClientes().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=balancegeneralclientes.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosBalanceGeneralCliente.setModel(new BalanceGeneralClienteModel(this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosBalanceGeneralCliente.setModel(new BalanceGeneralClienteModel(this.balancegeneralclientes,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByBalanceGeneralCliente!=null && this.jInternalFrameOrderByBalanceGeneralCliente.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByBalanceGeneralCliente();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+BalanceGeneralClienteConstantesFunciones.SCLASSWEBTITULO,balancegeneralclienteConstantesFunciones.resaltarSeleccionarBalanceGeneralCliente,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+BalanceGeneralClienteConstantesFunciones.SCLASSWEBTITULO,balancegeneralclienteConstantesFunciones.resaltarSeleccionarBalanceGeneralCliente,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_ID));

		if(this.balancegeneralclienteConstantesFunciones.mostraridBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltaridBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activaridBalanceGeneralCliente,iSizeTabla,this,true,"idBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltaridBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activaridBalanceGeneralCliente,this,true,"idBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA));

		if(this.balancegeneralclienteConstantesFunciones.mostrarid_empresaBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.balancegeneralclienteConstantesFunciones.resaltarid_empresaBalanceGeneralCliente,this,this.balancegeneralclienteConstantesFunciones.activarid_empresaBalanceGeneralCliente,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.balancegeneralclienteConstantesFunciones.resaltarid_empresaBalanceGeneralCliente,this,this.balancegeneralclienteConstantesFunciones.activarid_empresaBalanceGeneralCliente,false,"id_empresaBalanceGeneralCliente","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE));

		if(this.balancegeneralclienteConstantesFunciones.mostrarid_clienteBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.balancegeneralclienteConstantesFunciones.resaltarid_clienteBalanceGeneralCliente,this,this.balancegeneralclienteConstantesFunciones.activarid_clienteBalanceGeneralCliente,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.balancegeneralclienteConstantesFunciones.resaltarid_clienteBalanceGeneralCliente,this,this.balancegeneralclienteConstantesFunciones.activarid_clienteBalanceGeneralCliente,true,"id_clienteBalanceGeneralCliente","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE));

		if(this.balancegeneralclienteConstantesFunciones.mostrarcaja_bancos_disponibleBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcaja_bancos_disponibleBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcaja_bancos_disponibleBalanceGeneralCliente,iSizeTabla,this,true,"caja_bancos_disponibleBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcaja_bancos_disponibleBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcaja_bancos_disponibleBalanceGeneralCliente,this,true,"caja_bancos_disponibleBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_cobrar_clientesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_cobrar_clientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcuentas_por_cobrar_clientesBalanceGeneralCliente,iSizeTabla,this,true,"cuentas_por_cobrar_clientesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_cobrar_clientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcuentas_por_cobrar_clientesBalanceGeneralCliente,this,true,"cuentas_por_cobrar_clientesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO));

		if(this.balancegeneralclienteConstantesFunciones.mostrarinventarioBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarinventarioBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarinventarioBalanceGeneralCliente,iSizeTabla,this,true,"inventarioBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarinventarioBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarinventarioBalanceGeneralCliente,this,true,"inventarioBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_corrientesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_activos_corrientesBalanceGeneralCliente,iSizeTabla,this,true,"otros_activos_corrientesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_activos_corrientesBalanceGeneralCliente,this,true,"otros_activos_corrientesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES));

		if(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_corrientesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_activos_corrientesBalanceGeneralCliente,iSizeTabla,this,true,"total_activos_corrientesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_activos_corrientesBalanceGeneralCliente,this,true,"total_activos_corrientesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarbienes_inmueblesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarbienes_inmueblesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarbienes_inmueblesBalanceGeneralCliente,iSizeTabla,this,true,"bienes_inmueblesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarbienes_inmueblesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarbienes_inmueblesBalanceGeneralCliente,this,true,"bienes_inmueblesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarbienes_mueblesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarbienes_mueblesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarbienes_mueblesBalanceGeneralCliente,iSizeTabla,this,true,"bienes_mueblesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarbienes_mueblesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarbienes_mueblesBalanceGeneralCliente,this,true,"bienes_mueblesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_no_corrientesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_no_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_activos_no_corrientesBalanceGeneralCliente,iSizeTabla,this,true,"otros_activos_no_corrientesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_no_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_activos_no_corrientesBalanceGeneralCliente,this,true,"otros_activos_no_corrientesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES));

		if(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_no_corrientesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_no_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_activos_no_corrientesBalanceGeneralCliente,iSizeTabla,this,true,"total_activos_no_corrientesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_no_corrientesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_activos_no_corrientesBalanceGeneralCliente,this,true,"total_activos_no_corrientesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarventas_mensualesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarventas_mensualesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarventas_mensualesBalanceGeneralCliente,iSizeTabla,this,true,"ventas_mensualesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarventas_mensualesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarventas_mensualesBalanceGeneralCliente,this,true,"ventas_mensualesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarcosto_ventas_mensualesBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcosto_ventas_mensualesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcosto_ventas_mensualesBalanceGeneralCliente,iSizeTabla,this,true,"costo_ventas_mensualesBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcosto_ventas_mensualesBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcosto_ventas_mensualesBalanceGeneralCliente,this,true,"costo_ventas_mensualesBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA));

		if(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_brutaBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_brutaBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarutilidad_brutaBalanceGeneralCliente,iSizeTabla,this,true,"utilidad_brutaBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_brutaBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarutilidad_brutaBalanceGeneralCliente,this,true,"utilidad_brutaBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrargastos_operativosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltargastos_operativosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activargastos_operativosBalanceGeneralCliente,iSizeTabla,this,true,"gastos_operativosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltargastos_operativosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activargastos_operativosBalanceGeneralCliente,this,true,"gastos_operativosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrarsueldosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarsueldosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarsueldosBalanceGeneralCliente,iSizeTabla,this,true,"sueldosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarsueldosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarsueldosBalanceGeneralCliente,this,true,"sueldosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrarserviciosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarserviciosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarserviciosBalanceGeneralCliente,iSizeTabla,this,true,"serviciosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarserviciosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarserviciosBalanceGeneralCliente,this,true,"serviciosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrararriendosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltararriendosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activararriendosBalanceGeneralCliente,iSizeTabla,this,true,"arriendosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltararriendosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activararriendosBalanceGeneralCliente,this,true,"arriendosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrarimpuestosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarimpuestosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarimpuestosBalanceGeneralCliente,iSizeTabla,this,true,"impuestosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarimpuestosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarimpuestosBalanceGeneralCliente,this,true,"impuestosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA));

		if(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_operativaBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_operativaBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarutilidad_operativaBalanceGeneralCliente,iSizeTabla,this,true,"utilidad_operativaBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_operativaBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarutilidad_operativaBalanceGeneralCliente,this,true,"utilidad_operativaBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES));

		if(this.balancegeneralclienteConstantesFunciones.mostrargastos_familiaresBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltargastos_familiaresBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activargastos_familiaresBalanceGeneralCliente,iSizeTabla,this,true,"gastos_familiaresBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltargastos_familiaresBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activargastos_familiaresBalanceGeneralCliente,this,true,"gastos_familiaresBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS));

		if(this.balancegeneralclienteConstantesFunciones.mostrarexcedente_antes_dividendosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarexcedente_antes_dividendosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarexcedente_antes_dividendosBalanceGeneralCliente,iSizeTabla,this,true,"excedente_antes_dividendosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarexcedente_antes_dividendosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarexcedente_antes_dividendosBalanceGeneralCliente,this,true,"excedente_antes_dividendosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS));

		if(this.balancegeneralclienteConstantesFunciones.mostrardividendos_bancos_otrosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltardividendos_bancos_otrosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardividendos_bancos_otrosBalanceGeneralCliente,iSizeTabla,this,true,"dividendos_bancos_otrosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltardividendos_bancos_otrosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardividendos_bancos_otrosBalanceGeneralCliente,this,true,"dividendos_bancos_otrosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL));

		if(this.balancegeneralclienteConstantesFunciones.mostrarexedente_neto_mensualBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarexedente_neto_mensualBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarexedente_neto_mensualBalanceGeneralCliente,iSizeTabla,this,true,"exedente_neto_mensualBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarexedente_neto_mensualBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarexedente_neto_mensualBalanceGeneralCliente,this,true,"exedente_neto_mensualBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS));

		if(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancariasBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancariasBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardeudas_bancariasBalanceGeneralCliente,iSizeTabla,this,true,"deudas_bancariasBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancariasBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardeudas_bancariasBalanceGeneralCliente,this,true,"deudas_bancariasBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR));

		if(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_pagarBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_pagarBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcuentas_por_pagarBalanceGeneralCliente,iSizeTabla,this,true,"cuentas_por_pagarBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_pagarBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarcuentas_por_pagarBalanceGeneralCliente,this,true,"cuentas_por_pagarBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS));

		if(this.balancegeneralclienteConstantesFunciones.mostraranticipos_recibosBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltaranticipos_recibosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activaranticipos_recibosBalanceGeneralCliente,iSizeTabla,this,true,"anticipos_recibosBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltaranticipos_recibosBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activaranticipos_recibosBalanceGeneralCliente,this,true,"anticipos_recibosBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR));

		if(this.balancegeneralclienteConstantesFunciones.mostrarotras_cuentas_por_pagarBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotras_cuentas_por_pagarBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotras_cuentas_por_pagarBalanceGeneralCliente,iSizeTabla,this,true,"otras_cuentas_por_pagarBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotras_cuentas_por_pagarBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotras_cuentas_por_pagarBalanceGeneralCliente,this,true,"otras_cuentas_por_pagarBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES));

		if(this.balancegeneralclienteConstantesFunciones.mostrarotras_deudas_familiaresBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotras_deudas_familiaresBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotras_deudas_familiaresBalanceGeneralCliente,iSizeTabla,this,true,"otras_deudas_familiaresBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotras_deudas_familiaresBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotras_deudas_familiaresBalanceGeneralCliente,this,true,"otras_deudas_familiaresBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE));

		if(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_corrienteBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_corrienteBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_corrienteBalanceGeneralCliente,iSizeTabla,this,true,"total_pasivo_corrienteBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_corrienteBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_corrienteBalanceGeneralCliente,this,true,"total_pasivo_corrienteBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO));

		if(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancarias_largo_plazoBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancarias_largo_plazoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardeudas_bancarias_largo_plazoBalanceGeneralCliente,iSizeTabla,this,true,"deudas_bancarias_largo_plazoBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancarias_largo_plazoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardeudas_bancarias_largo_plazoBalanceGeneralCliente,this,true,"deudas_bancarias_largo_plazoBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO));

		if(this.balancegeneralclienteConstantesFunciones.mostrarotros_pasivos_largo_plazoBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_pasivos_largo_plazoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_pasivos_largo_plazoBalanceGeneralCliente,iSizeTabla,this,true,"otros_pasivos_largo_plazoBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarotros_pasivos_largo_plazoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarotros_pasivos_largo_plazoBalanceGeneralCliente,this,true,"otros_pasivos_largo_plazoBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE));

		if(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_no_corrienteBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_no_corrienteBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_no_corrienteBalanceGeneralCliente,iSizeTabla,this,true,"total_pasivo_no_corrienteBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_no_corrienteBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_no_corrienteBalanceGeneralCliente,this,true,"total_pasivo_no_corrienteBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO));

		if(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivoBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivoBalanceGeneralCliente,iSizeTabla,this,true,"total_pasivoBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivoBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activartotal_pasivoBalanceGeneralCliente,this,true,"total_pasivoBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO));

		if(this.balancegeneralclienteConstantesFunciones.mostrarpatrimonioBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.balancegeneralclienteConstantesFunciones.resaltarpatrimonioBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarpatrimonioBalanceGeneralCliente,iSizeTabla,this,true,"patrimonioBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltarpatrimonioBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activarpatrimonioBalanceGeneralCliente,this,true,"patrimonioBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION));

		if(this.balancegeneralclienteConstantesFunciones.mostrardescripcionBalanceGeneralCliente && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.balancegeneralclienteConstantesFunciones.resaltardescripcionBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardescripcionBalanceGeneralCliente,iSizeTabla,this,true,"descripcionBalanceGeneralCliente","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.balancegeneralclienteConstantesFunciones.resaltardescripcionBalanceGeneralCliente,this.balancegeneralclienteConstantesFunciones.activardescripcionBalanceGeneralCliente,this,true,"descripcionBalanceGeneralCliente","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BalanceGeneralClientePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosBalanceGeneralCliente.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosBalanceGeneralCliente.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosBalanceGeneralCliente.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosBalanceGeneralCliente.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosBalanceGeneralCliente.moveColumn(this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosBalanceGeneralCliente.moveColumn(this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosBalanceGeneralCliente.moveColumn(this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosBalanceGeneralCliente.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosBalanceGeneralCliente.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosBalanceGeneralCliente,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosBalanceGeneralCliente.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosBalanceGeneralCliente.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosBalanceGeneralCliente.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=balancegeneralclienteLogic.getBalanceGeneralClientes().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=balancegeneralclientes.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosBalanceGeneralCliente.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosBalanceGeneralCliente.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosBalanceGeneralCliente();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoBalanceGeneralCliente=false;
					
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
				if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosBalanceGeneralCliente.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosBalanceGeneralCliente.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.balancegeneralcliente.getsType().equals("DUPLICADO")
				   || this.balancegeneralcliente.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoBalanceGeneralCliente=true;
				
				} else {
					this.isEsNuevoBalanceGeneralCliente=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					if(this.balancegeneralcliente.getId()>=0 && !this.balancegeneralcliente.getIsNew()) {						
						this.isEsNuevoBalanceGeneralCliente=false;
						
					} else {
						this.isEsNuevoBalanceGeneralCliente=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoBalanceGeneralCliente(esRelaciones);						
				
				this.seleccionarBalanceGeneralCliente(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.balancegeneralcliente.getId()<0) {
					this.isEsNuevoBalanceGeneralCliente=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarBalanceGeneralCliente(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarBalanceGeneralCliente(evt,rowIndex);
				}	
				
				if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion BalanceGeneralCliente: " + this.dDif); 
					}
				}								
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarBalanceGeneralCliente(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.balancegeneralcliente)) {
					if(this.balancegeneralcliente.getId()>0) {
						this.balancegeneralcliente.setIsDeleted(true);
						
						this.balancegeneralclientesEliminados.add(this.balancegeneralcliente);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.balancegeneralclienteLogic.getBalanceGeneralClientes().remove(this.balancegeneralcliente);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.balancegeneralclientes.remove(this.balancegeneralcliente);				
					}
					
					
					((BalanceGeneralClienteModel) this.jTableDatosBalanceGeneralCliente.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarBalanceGeneralCliente(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoBalanceGeneralCliente) {
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosBalanceGeneralCliente.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosBalanceGeneralCliente.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralcliente);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.balancegeneralclienteConstantesFunciones.cargarid_empresaBalanceGeneralCliente || this.balancegeneralclienteConstantesFunciones.event_dependid_empresaBalanceGeneralCliente) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.balancegeneralcliente.getid_empresa());
									//this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(balancegeneralcliente.getEmpresa()!=null) {
							this.empresasForeignKey.add(balancegeneralcliente.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.balancegeneralcliente.getid_empresa(),false,"Formulario");

					//Cliente
					if(!this.balancegeneralclienteConstantesFunciones.cargarid_clienteBalanceGeneralCliente || this.balancegeneralclienteConstantesFunciones.event_dependid_clienteBalanceGeneralCliente) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.balancegeneralcliente.getid_cliente());
									//this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(balancegeneralcliente.getCliente()!=null) {
							this.clientesForeignKey.add(balancegeneralcliente.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.balancegeneralcliente.getid_cliente(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesBalanceGeneralCliente("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesBalanceGeneralCliente(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoBalanceGeneralCliente(balancegeneralcliente,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioBalanceGeneralCliente(balancegeneralcliente);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyBalanceGeneralCliente(balancegeneralcliente,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyBalanceGeneralCliente(balancegeneralcliente);
	}
	
	public void setVariablesObjetoActualToFormularioBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setText(balancegeneralcliente.getId().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setText(balancegeneralcliente.getcaja_bancos_disponible().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setText(balancegeneralcliente.getcuentas_por_cobrar_clientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setText(balancegeneralcliente.getinventario().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.getotros_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setText(balancegeneralcliente.getbienes_inmuebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setText(balancegeneralcliente.getbienes_muebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.getotros_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setText(balancegeneralcliente.getventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setText(balancegeneralcliente.getcosto_ventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setText(balancegeneralcliente.getutilidad_bruta().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setText(balancegeneralcliente.getgastos_operativos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setText(balancegeneralcliente.getsueldos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setText(balancegeneralcliente.getservicios().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setText(balancegeneralcliente.getarriendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setText(balancegeneralcliente.getimpuestos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setText(balancegeneralcliente.getutilidad_operativa().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setText(balancegeneralcliente.getgastos_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setText(balancegeneralcliente.getexcedente_antes_dividendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setText(balancegeneralcliente.getdividendos_bancos_otros().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setText(balancegeneralcliente.getexedente_neto_mensual().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setText(balancegeneralcliente.getdeudas_bancarias().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralcliente.getcuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setText(balancegeneralcliente.getanticipos_recibos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralcliente.getotras_cuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setText(balancegeneralcliente.getotras_deudas_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setText(balancegeneralcliente.getdeudas_bancarias_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setText(balancegeneralcliente.getotros_pasivos_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo_no_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setText(balancegeneralcliente.getpatrimonio().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setText(balancegeneralcliente.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,BalanceGeneralCliente balancegeneralclienteLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,balancegeneralclienteLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,BalanceGeneralCliente balancegeneralclienteLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				balancegeneralclienteLocal=this.balancegeneralcliente;
			} else {
				balancegeneralclienteLocal=this.balancegeneralclienteAnterior;
			}
		}
		
		if(this.permiteMantenimiento(balancegeneralclienteLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoBalanceGeneralCliente(balancegeneralclienteLocal,true);
					
					if(balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(balancegeneralclienteLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(balancegeneralclienteLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(balancegeneralcliente,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(balancegeneralcliente);
	}
	
	public void setVariablesFormularioToObjetoActualBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(balancegeneralcliente,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.getText()==null || this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.getText()=="" || this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.getText()=="Id") {
				this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setText("0");
			}

			if(conColumnasBase) {balancegeneralcliente.setId(Long.parseLong(this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelIdBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setcaja_bancos_disponible(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcaja_bancos_disponibleBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setcuentas_por_cobrar_clientes(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_cobrar_clientesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setinventario(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelinventarioBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setotros_activos_corrientes(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_corrientesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.settotal_activos_corrientes(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_corrientesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setbienes_inmuebles(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_inmueblesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setbienes_muebles(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelbienes_mueblesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setotros_activos_no_corrientes(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_activos_no_corrientesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.settotal_activos_no_corrientes(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_activos_no_corrientesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setventas_mensuales(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelventas_mensualesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setcosto_ventas_mensuales(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcosto_ventas_mensualesBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setutilidad_bruta(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_brutaBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setgastos_operativos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_operativosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setsueldos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelsueldosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setservicios(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelserviciosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setarriendos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelarriendosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setimpuestos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelimpuestosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setutilidad_operativa(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelutilidad_operativaBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setgastos_familiares(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelgastos_familiaresBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setexcedente_antes_dividendos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexcedente_antes_dividendosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setdividendos_bancos_otros(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldividendos_bancos_otrosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setexedente_neto_mensual(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelexedente_neto_mensualBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setdeudas_bancarias(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancariasBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setcuentas_por_pagar(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelcuentas_por_pagarBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setanticipos_recibos(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelanticipos_recibosBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setotras_cuentas_por_pagar(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_cuentas_por_pagarBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setotras_deudas_familiares(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotras_deudas_familiaresBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.settotal_pasivo_corriente(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_corrienteBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setdeudas_bancarias_largo_plazo(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldeudas_bancarias_largo_plazoBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setotros_pasivos_largo_plazo(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelotros_pasivos_largo_plazoBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.settotal_pasivo_no_corriente(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivo_no_corrienteBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.settotal_pasivo(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeltotal_pasivoBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setpatrimonio(Double.parseDouble(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelpatrimonioBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			balancegeneralcliente.setdescripcion(this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabeldescripcionBalanceGeneralCliente,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualBalanceGeneralCliente(BalanceGeneralCliente balancegeneralclienteBean,BalanceGeneralCliente balancegeneralcliente,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && balancegeneralclienteBean.getid_cliente()!=null && !balancegeneralclienteBean.getid_cliente().equals(-1L))) {balancegeneralcliente.setid_cliente(balancegeneralclienteBean.getid_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosBalanceGeneralCliente(BalanceGeneralCliente balancegeneralclienteOrigen,BalanceGeneralCliente balancegeneralcliente,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && balancegeneralclienteOrigen.getId()!=null && !balancegeneralclienteOrigen.getId().equals(0L))) {balancegeneralcliente.setId(balancegeneralclienteOrigen.getId());}}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getid_cliente()!=null && !balancegeneralclienteOrigen.getid_cliente().equals(-1L))) {balancegeneralcliente.setid_cliente(balancegeneralclienteOrigen.getid_cliente());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getcaja_bancos_disponible()!=null && !balancegeneralclienteOrigen.getcaja_bancos_disponible().equals(0.0))) {balancegeneralcliente.setcaja_bancos_disponible(balancegeneralclienteOrigen.getcaja_bancos_disponible());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getcuentas_por_cobrar_clientes()!=null && !balancegeneralclienteOrigen.getcuentas_por_cobrar_clientes().equals(0.0))) {balancegeneralcliente.setcuentas_por_cobrar_clientes(balancegeneralclienteOrigen.getcuentas_por_cobrar_clientes());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getinventario()!=null && !balancegeneralclienteOrigen.getinventario().equals(0.0))) {balancegeneralcliente.setinventario(balancegeneralclienteOrigen.getinventario());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getotros_activos_corrientes()!=null && !balancegeneralclienteOrigen.getotros_activos_corrientes().equals(0.0))) {balancegeneralcliente.setotros_activos_corrientes(balancegeneralclienteOrigen.getotros_activos_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.gettotal_activos_corrientes()!=null && !balancegeneralclienteOrigen.gettotal_activos_corrientes().equals(0.0))) {balancegeneralcliente.settotal_activos_corrientes(balancegeneralclienteOrigen.gettotal_activos_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getbienes_inmuebles()!=null && !balancegeneralclienteOrigen.getbienes_inmuebles().equals(0.0))) {balancegeneralcliente.setbienes_inmuebles(balancegeneralclienteOrigen.getbienes_inmuebles());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getbienes_muebles()!=null && !balancegeneralclienteOrigen.getbienes_muebles().equals(0.0))) {balancegeneralcliente.setbienes_muebles(balancegeneralclienteOrigen.getbienes_muebles());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getotros_activos_no_corrientes()!=null && !balancegeneralclienteOrigen.getotros_activos_no_corrientes().equals(0.0))) {balancegeneralcliente.setotros_activos_no_corrientes(balancegeneralclienteOrigen.getotros_activos_no_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.gettotal_activos_no_corrientes()!=null && !balancegeneralclienteOrigen.gettotal_activos_no_corrientes().equals(0.0))) {balancegeneralcliente.settotal_activos_no_corrientes(balancegeneralclienteOrigen.gettotal_activos_no_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getventas_mensuales()!=null && !balancegeneralclienteOrigen.getventas_mensuales().equals(0.0))) {balancegeneralcliente.setventas_mensuales(balancegeneralclienteOrigen.getventas_mensuales());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getcosto_ventas_mensuales()!=null && !balancegeneralclienteOrigen.getcosto_ventas_mensuales().equals(0.0))) {balancegeneralcliente.setcosto_ventas_mensuales(balancegeneralclienteOrigen.getcosto_ventas_mensuales());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getutilidad_bruta()!=null && !balancegeneralclienteOrigen.getutilidad_bruta().equals(0.0))) {balancegeneralcliente.setutilidad_bruta(balancegeneralclienteOrigen.getutilidad_bruta());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getgastos_operativos()!=null && !balancegeneralclienteOrigen.getgastos_operativos().equals(0.0))) {balancegeneralcliente.setgastos_operativos(balancegeneralclienteOrigen.getgastos_operativos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getsueldos()!=null && !balancegeneralclienteOrigen.getsueldos().equals(0.0))) {balancegeneralcliente.setsueldos(balancegeneralclienteOrigen.getsueldos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getservicios()!=null && !balancegeneralclienteOrigen.getservicios().equals(0.0))) {balancegeneralcliente.setservicios(balancegeneralclienteOrigen.getservicios());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getarriendos()!=null && !balancegeneralclienteOrigen.getarriendos().equals(0.0))) {balancegeneralcliente.setarriendos(balancegeneralclienteOrigen.getarriendos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getimpuestos()!=null && !balancegeneralclienteOrigen.getimpuestos().equals(0.0))) {balancegeneralcliente.setimpuestos(balancegeneralclienteOrigen.getimpuestos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getutilidad_operativa()!=null && !balancegeneralclienteOrigen.getutilidad_operativa().equals(0.0))) {balancegeneralcliente.setutilidad_operativa(balancegeneralclienteOrigen.getutilidad_operativa());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getgastos_familiares()!=null && !balancegeneralclienteOrigen.getgastos_familiares().equals(0.0))) {balancegeneralcliente.setgastos_familiares(balancegeneralclienteOrigen.getgastos_familiares());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getexcedente_antes_dividendos()!=null && !balancegeneralclienteOrigen.getexcedente_antes_dividendos().equals(0.0))) {balancegeneralcliente.setexcedente_antes_dividendos(balancegeneralclienteOrigen.getexcedente_antes_dividendos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getdividendos_bancos_otros()!=null && !balancegeneralclienteOrigen.getdividendos_bancos_otros().equals(0.0))) {balancegeneralcliente.setdividendos_bancos_otros(balancegeneralclienteOrigen.getdividendos_bancos_otros());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getexedente_neto_mensual()!=null && !balancegeneralclienteOrigen.getexedente_neto_mensual().equals(0.0))) {balancegeneralcliente.setexedente_neto_mensual(balancegeneralclienteOrigen.getexedente_neto_mensual());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getdeudas_bancarias()!=null && !balancegeneralclienteOrigen.getdeudas_bancarias().equals(0.0))) {balancegeneralcliente.setdeudas_bancarias(balancegeneralclienteOrigen.getdeudas_bancarias());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getcuentas_por_pagar()!=null && !balancegeneralclienteOrigen.getcuentas_por_pagar().equals(0.0))) {balancegeneralcliente.setcuentas_por_pagar(balancegeneralclienteOrigen.getcuentas_por_pagar());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getanticipos_recibos()!=null && !balancegeneralclienteOrigen.getanticipos_recibos().equals(0.0))) {balancegeneralcliente.setanticipos_recibos(balancegeneralclienteOrigen.getanticipos_recibos());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getotras_cuentas_por_pagar()!=null && !balancegeneralclienteOrigen.getotras_cuentas_por_pagar().equals(0.0))) {balancegeneralcliente.setotras_cuentas_por_pagar(balancegeneralclienteOrigen.getotras_cuentas_por_pagar());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getotras_deudas_familiares()!=null && !balancegeneralclienteOrigen.getotras_deudas_familiares().equals(0.0))) {balancegeneralcliente.setotras_deudas_familiares(balancegeneralclienteOrigen.getotras_deudas_familiares());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.gettotal_pasivo_corriente()!=null && !balancegeneralclienteOrigen.gettotal_pasivo_corriente().equals(0.0))) {balancegeneralcliente.settotal_pasivo_corriente(balancegeneralclienteOrigen.gettotal_pasivo_corriente());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getdeudas_bancarias_largo_plazo()!=null && !balancegeneralclienteOrigen.getdeudas_bancarias_largo_plazo().equals(0.0))) {balancegeneralcliente.setdeudas_bancarias_largo_plazo(balancegeneralclienteOrigen.getdeudas_bancarias_largo_plazo());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getotros_pasivos_largo_plazo()!=null && !balancegeneralclienteOrigen.getotros_pasivos_largo_plazo().equals(0.0))) {balancegeneralcliente.setotros_pasivos_largo_plazo(balancegeneralclienteOrigen.getotros_pasivos_largo_plazo());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.gettotal_pasivo_no_corriente()!=null && !balancegeneralclienteOrigen.gettotal_pasivo_no_corriente().equals(0.0))) {balancegeneralcliente.settotal_pasivo_no_corriente(balancegeneralclienteOrigen.gettotal_pasivo_no_corriente());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.gettotal_pasivo()!=null && !balancegeneralclienteOrigen.gettotal_pasivo().equals(0.0))) {balancegeneralcliente.settotal_pasivo(balancegeneralclienteOrigen.gettotal_pasivo());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getpatrimonio()!=null && !balancegeneralclienteOrigen.getpatrimonio().equals(0.0))) {balancegeneralcliente.setpatrimonio(balancegeneralclienteOrigen.getpatrimonio());}
			if(conDefault || (!conDefault && balancegeneralclienteOrigen.getdescripcion()!=null && !balancegeneralclienteOrigen.getdescripcion().equals(""))) {balancegeneralcliente.setdescripcion(balancegeneralclienteOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setText(balancegeneralcliente.getId().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setText(balancegeneralcliente.getcaja_bancos_disponible().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setText(balancegeneralcliente.getcuentas_por_cobrar_clientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setText(balancegeneralcliente.getinventario().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.getotros_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setText(balancegeneralcliente.getbienes_inmuebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setText(balancegeneralcliente.getbienes_muebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.getotros_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setText(balancegeneralcliente.getventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setText(balancegeneralcliente.getcosto_ventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setText(balancegeneralcliente.getutilidad_bruta().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setText(balancegeneralcliente.getgastos_operativos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setText(balancegeneralcliente.getsueldos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setText(balancegeneralcliente.getservicios().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setText(balancegeneralcliente.getarriendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setText(balancegeneralcliente.getimpuestos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setText(balancegeneralcliente.getutilidad_operativa().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setText(balancegeneralcliente.getgastos_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setText(balancegeneralcliente.getexcedente_antes_dividendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setText(balancegeneralcliente.getdividendos_bancos_otros().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setText(balancegeneralcliente.getexedente_neto_mensual().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setText(balancegeneralcliente.getdeudas_bancarias().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralcliente.getcuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setText(balancegeneralcliente.getanticipos_recibos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralcliente.getotras_cuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setText(balancegeneralcliente.getotras_deudas_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setText(balancegeneralcliente.getdeudas_bancarias_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setText(balancegeneralcliente.getotros_pasivos_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo_no_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setText(balancegeneralcliente.gettotal_pasivo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setText(balancegeneralcliente.getpatrimonio().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setText(balancegeneralcliente.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioBalanceGeneralCliente(BalanceGeneralClienteBean balancegeneralclienteBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setText(balancegeneralclienteBean.getId().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setText(balancegeneralclienteBean.getcaja_bancos_disponible().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setText(balancegeneralclienteBean.getcuentas_por_cobrar_clientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setText(balancegeneralclienteBean.getinventario().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setText(balancegeneralclienteBean.getotros_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setText(balancegeneralclienteBean.gettotal_activos_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setText(balancegeneralclienteBean.getbienes_inmuebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setText(balancegeneralclienteBean.getbienes_muebles().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralclienteBean.getotros_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setText(balancegeneralclienteBean.gettotal_activos_no_corrientes().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setText(balancegeneralclienteBean.getventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setText(balancegeneralclienteBean.getcosto_ventas_mensuales().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setText(balancegeneralclienteBean.getutilidad_bruta().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setText(balancegeneralclienteBean.getgastos_operativos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setText(balancegeneralclienteBean.getsueldos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setText(balancegeneralclienteBean.getservicios().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setText(balancegeneralclienteBean.getarriendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setText(balancegeneralclienteBean.getimpuestos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setText(balancegeneralclienteBean.getutilidad_operativa().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setText(balancegeneralclienteBean.getgastos_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setText(balancegeneralclienteBean.getexcedente_antes_dividendos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setText(balancegeneralclienteBean.getdividendos_bancos_otros().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setText(balancegeneralclienteBean.getexedente_neto_mensual().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setText(balancegeneralclienteBean.getdeudas_bancarias().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralclienteBean.getcuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setText(balancegeneralclienteBean.getanticipos_recibos().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setText(balancegeneralclienteBean.getotras_cuentas_por_pagar().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setText(balancegeneralclienteBean.getotras_deudas_familiares().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setText(balancegeneralclienteBean.gettotal_pasivo_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setText(balancegeneralclienteBean.getdeudas_bancarias_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setText(balancegeneralclienteBean.getotros_pasivos_largo_plazo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setText(balancegeneralclienteBean.gettotal_pasivo_no_corriente().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setText(balancegeneralclienteBean.gettotal_pasivo().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setText(balancegeneralclienteBean.getpatrimonio().toString());
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setText(balancegeneralclienteBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanBalanceGeneralCliente(BalanceGeneralClienteParameterReturnGeneral balancegeneralclienteReturnGeneral,BalanceGeneralClienteBean balancegeneralclienteBean,Boolean conDefault) throws Exception { 
		try {
			BalanceGeneralCliente balancegeneralclienteLocal=new BalanceGeneralCliente();
			
			balancegeneralclienteLocal=balancegeneralclienteReturnGeneral.getBalanceGeneralCliente();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && balancegeneralclienteLocal.getId()!=null && !balancegeneralclienteLocal.getId().equals(0L))) {balancegeneralclienteBean.setId(balancegeneralclienteLocal.getId());}}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getid_cliente()!=null && !balancegeneralclienteLocal.getid_cliente().equals(-1L))) {balancegeneralclienteBean.setid_cliente(balancegeneralclienteLocal.getid_cliente());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getcaja_bancos_disponible()!=null && !balancegeneralclienteLocal.getcaja_bancos_disponible().equals(0.0))) {balancegeneralclienteBean.setcaja_bancos_disponible(balancegeneralclienteLocal.getcaja_bancos_disponible());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getcuentas_por_cobrar_clientes()!=null && !balancegeneralclienteLocal.getcuentas_por_cobrar_clientes().equals(0.0))) {balancegeneralclienteBean.setcuentas_por_cobrar_clientes(balancegeneralclienteLocal.getcuentas_por_cobrar_clientes());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getinventario()!=null && !balancegeneralclienteLocal.getinventario().equals(0.0))) {balancegeneralclienteBean.setinventario(balancegeneralclienteLocal.getinventario());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getotros_activos_corrientes()!=null && !balancegeneralclienteLocal.getotros_activos_corrientes().equals(0.0))) {balancegeneralclienteBean.setotros_activos_corrientes(balancegeneralclienteLocal.getotros_activos_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.gettotal_activos_corrientes()!=null && !balancegeneralclienteLocal.gettotal_activos_corrientes().equals(0.0))) {balancegeneralclienteBean.settotal_activos_corrientes(balancegeneralclienteLocal.gettotal_activos_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getbienes_inmuebles()!=null && !balancegeneralclienteLocal.getbienes_inmuebles().equals(0.0))) {balancegeneralclienteBean.setbienes_inmuebles(balancegeneralclienteLocal.getbienes_inmuebles());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getbienes_muebles()!=null && !balancegeneralclienteLocal.getbienes_muebles().equals(0.0))) {balancegeneralclienteBean.setbienes_muebles(balancegeneralclienteLocal.getbienes_muebles());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getotros_activos_no_corrientes()!=null && !balancegeneralclienteLocal.getotros_activos_no_corrientes().equals(0.0))) {balancegeneralclienteBean.setotros_activos_no_corrientes(balancegeneralclienteLocal.getotros_activos_no_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.gettotal_activos_no_corrientes()!=null && !balancegeneralclienteLocal.gettotal_activos_no_corrientes().equals(0.0))) {balancegeneralclienteBean.settotal_activos_no_corrientes(balancegeneralclienteLocal.gettotal_activos_no_corrientes());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getventas_mensuales()!=null && !balancegeneralclienteLocal.getventas_mensuales().equals(0.0))) {balancegeneralclienteBean.setventas_mensuales(balancegeneralclienteLocal.getventas_mensuales());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getcosto_ventas_mensuales()!=null && !balancegeneralclienteLocal.getcosto_ventas_mensuales().equals(0.0))) {balancegeneralclienteBean.setcosto_ventas_mensuales(balancegeneralclienteLocal.getcosto_ventas_mensuales());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getutilidad_bruta()!=null && !balancegeneralclienteLocal.getutilidad_bruta().equals(0.0))) {balancegeneralclienteBean.setutilidad_bruta(balancegeneralclienteLocal.getutilidad_bruta());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getgastos_operativos()!=null && !balancegeneralclienteLocal.getgastos_operativos().equals(0.0))) {balancegeneralclienteBean.setgastos_operativos(balancegeneralclienteLocal.getgastos_operativos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getsueldos()!=null && !balancegeneralclienteLocal.getsueldos().equals(0.0))) {balancegeneralclienteBean.setsueldos(balancegeneralclienteLocal.getsueldos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getservicios()!=null && !balancegeneralclienteLocal.getservicios().equals(0.0))) {balancegeneralclienteBean.setservicios(balancegeneralclienteLocal.getservicios());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getarriendos()!=null && !balancegeneralclienteLocal.getarriendos().equals(0.0))) {balancegeneralclienteBean.setarriendos(balancegeneralclienteLocal.getarriendos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getimpuestos()!=null && !balancegeneralclienteLocal.getimpuestos().equals(0.0))) {balancegeneralclienteBean.setimpuestos(balancegeneralclienteLocal.getimpuestos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getutilidad_operativa()!=null && !balancegeneralclienteLocal.getutilidad_operativa().equals(0.0))) {balancegeneralclienteBean.setutilidad_operativa(balancegeneralclienteLocal.getutilidad_operativa());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getgastos_familiares()!=null && !balancegeneralclienteLocal.getgastos_familiares().equals(0.0))) {balancegeneralclienteBean.setgastos_familiares(balancegeneralclienteLocal.getgastos_familiares());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getexcedente_antes_dividendos()!=null && !balancegeneralclienteLocal.getexcedente_antes_dividendos().equals(0.0))) {balancegeneralclienteBean.setexcedente_antes_dividendos(balancegeneralclienteLocal.getexcedente_antes_dividendos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getdividendos_bancos_otros()!=null && !balancegeneralclienteLocal.getdividendos_bancos_otros().equals(0.0))) {balancegeneralclienteBean.setdividendos_bancos_otros(balancegeneralclienteLocal.getdividendos_bancos_otros());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getexedente_neto_mensual()!=null && !balancegeneralclienteLocal.getexedente_neto_mensual().equals(0.0))) {balancegeneralclienteBean.setexedente_neto_mensual(balancegeneralclienteLocal.getexedente_neto_mensual());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getdeudas_bancarias()!=null && !balancegeneralclienteLocal.getdeudas_bancarias().equals(0.0))) {balancegeneralclienteBean.setdeudas_bancarias(balancegeneralclienteLocal.getdeudas_bancarias());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getcuentas_por_pagar()!=null && !balancegeneralclienteLocal.getcuentas_por_pagar().equals(0.0))) {balancegeneralclienteBean.setcuentas_por_pagar(balancegeneralclienteLocal.getcuentas_por_pagar());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getanticipos_recibos()!=null && !balancegeneralclienteLocal.getanticipos_recibos().equals(0.0))) {balancegeneralclienteBean.setanticipos_recibos(balancegeneralclienteLocal.getanticipos_recibos());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getotras_cuentas_por_pagar()!=null && !balancegeneralclienteLocal.getotras_cuentas_por_pagar().equals(0.0))) {balancegeneralclienteBean.setotras_cuentas_por_pagar(balancegeneralclienteLocal.getotras_cuentas_por_pagar());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getotras_deudas_familiares()!=null && !balancegeneralclienteLocal.getotras_deudas_familiares().equals(0.0))) {balancegeneralclienteBean.setotras_deudas_familiares(balancegeneralclienteLocal.getotras_deudas_familiares());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.gettotal_pasivo_corriente()!=null && !balancegeneralclienteLocal.gettotal_pasivo_corriente().equals(0.0))) {balancegeneralclienteBean.settotal_pasivo_corriente(balancegeneralclienteLocal.gettotal_pasivo_corriente());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getdeudas_bancarias_largo_plazo()!=null && !balancegeneralclienteLocal.getdeudas_bancarias_largo_plazo().equals(0.0))) {balancegeneralclienteBean.setdeudas_bancarias_largo_plazo(balancegeneralclienteLocal.getdeudas_bancarias_largo_plazo());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getotros_pasivos_largo_plazo()!=null && !balancegeneralclienteLocal.getotros_pasivos_largo_plazo().equals(0.0))) {balancegeneralclienteBean.setotros_pasivos_largo_plazo(balancegeneralclienteLocal.getotros_pasivos_largo_plazo());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.gettotal_pasivo_no_corriente()!=null && !balancegeneralclienteLocal.gettotal_pasivo_no_corriente().equals(0.0))) {balancegeneralclienteBean.settotal_pasivo_no_corriente(balancegeneralclienteLocal.gettotal_pasivo_no_corriente());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.gettotal_pasivo()!=null && !balancegeneralclienteLocal.gettotal_pasivo().equals(0.0))) {balancegeneralclienteBean.settotal_pasivo(balancegeneralclienteLocal.gettotal_pasivo());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getpatrimonio()!=null && !balancegeneralclienteLocal.getpatrimonio().equals(0.0))) {balancegeneralclienteBean.setpatrimonio(balancegeneralclienteLocal.getpatrimonio());}
			if(conDefault || (!conDefault && balancegeneralclienteLocal.getdescripcion()!=null && !balancegeneralclienteLocal.getdescripcion().equals(""))) {balancegeneralclienteBean.setdescripcion(balancegeneralclienteLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxBalanceGeneralClienteGenerico(Long idBalanceGeneralClienteSeleccionado,JComboBox jComboBoxBalanceGeneralCliente,List<BalanceGeneralCliente> balancegeneralclientesLocal)throws Exception {
		try {
			BalanceGeneralCliente  balancegeneralclienteTemp=null;

			for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesLocal) {
				if(balancegeneralclienteAux.getId()!=null && balancegeneralclienteAux.getId().equals(idBalanceGeneralClienteSeleccionado)) {
					balancegeneralclienteTemp=balancegeneralclienteAux;
					break;
				}
			}

			jComboBoxBalanceGeneralCliente.setSelectedItem(balancegeneralclienteTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxBalanceGeneralClienteGenerico(JComboBox jComboBoxBalanceGeneralCliente,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxBalanceGeneralCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxBalanceGeneralCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxBalanceGeneralCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxBalanceGeneralCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxBalanceGeneralCliente.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxBalanceGeneralCliente.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxBalanceGeneralCliente.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxBalanceGeneralCliente.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxBalanceGeneralCliente.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxBalanceGeneralCliente.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			balancegeneralcliente=(BalanceGeneralCliente) balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			balancegeneralcliente =(BalanceGeneralCliente) balancegeneralclientes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!balancegeneralcliente.getIsNew() && !balancegeneralcliente.getIsChanged() && !balancegeneralcliente.getIsDeleted()) {
				sDescripcion=balancegeneralcliente.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=balancegeneralcliente.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!balancegeneralcliente.getIsNew() && !balancegeneralcliente.getIsChanged() && !balancegeneralcliente.getIsDeleted()) {
				sDescripcion=balancegeneralcliente.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=balancegeneralcliente.getcliente_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		BalanceGeneralCliente balancegeneralclienteRow=new BalanceGeneralCliente();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			balancegeneralclienteRow=(BalanceGeneralCliente) balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			balancegeneralclienteRow=(BalanceGeneralCliente) balancegeneralclientes.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualBalanceGeneralCliente(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));			
			this.jButtonDuplicarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaDuplicarBalanceGeneralCliente && this.isPermisoDuplicarBalanceGeneralCliente));			
			this.jButtonCopiarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaCopiarBalanceGeneralCliente && this.isPermisoCopiarBalanceGeneralCliente));
			this.jButtonVerFormBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaVerFormBalanceGeneralCliente && this.isPermisoVerFormBalanceGeneralCliente));
			
			this.jButtonAbrirOrderByBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));			
			
			this.jButtonNuevoRelacionesBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));			
			this.jButtonNuevoGuardarCambiosBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaModificarBalanceGeneralCliente && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaActualizarBalanceGeneralCliente && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaEliminarBalanceGeneralCliente && this.isPermisoEliminarBalanceGeneralCliente));
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.setVisible(this.isVisibilidadCeldaCancelarBalanceGeneralCliente);							
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));			
			
			}
						
			this.jButtonGuardarCambiosTablaBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));						
			this.jButtonDuplicarToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaDuplicarBalanceGeneralCliente && this.isPermisoDuplicarBalanceGeneralCliente));						
			this.jButtonCopiarToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaCopiarBalanceGeneralCliente && this.isPermisoCopiarBalanceGeneralCliente));			
			this.jButtonVerFormToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaVerFormBalanceGeneralCliente && this.isPermisoVerFormBalanceGeneralCliente));			
			this.jButtonAbrirOrderByToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));
			this.jButtonNuevoRelacionesToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));			
			this.jButtonNuevoGuardarCambiosToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));			
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaModificarBalanceGeneralCliente && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaActualizarBalanceGeneralCliente  && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaEliminarBalanceGeneralCliente && this.isPermisoEliminarBalanceGeneralCliente));
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarToolBarBalanceGeneralCliente.setVisible(this.isVisibilidadCeldaCancelarBalanceGeneralCliente);				
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));			
			this.jMenuItemDuplicarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaDuplicarBalanceGeneralCliente && this.isPermisoDuplicarBalanceGeneralCliente));			
			this.jMenuItemCopiarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaCopiarBalanceGeneralCliente && this.isPermisoCopiarBalanceGeneralCliente));			
			this.jMenuItemVerFormBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaVerFormBalanceGeneralCliente && this.isPermisoVerFormBalanceGeneralCliente));			
			this.jMenuItemAbrirOrderByBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));			
			//this.jMenuItemMostrarOcultarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));
			this.jMenuItemDetalleAbrirOrderByBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));			
			//this.jMenuItemDetalleMostrarOcultarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaOrdenBalanceGeneralCliente && this.isPermisoOrdenBalanceGeneralCliente));			
			this.jMenuItemNuevoRelacionesBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente));			
			this.jMenuItemNuevoGuardarCambiosBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaNuevoBalanceGeneralCliente && this.isPermisoNuevoBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));									
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemModificarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaModificarBalanceGeneralCliente && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemActualizarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaActualizarBalanceGeneralCliente && this.isPermisoActualizarBalanceGeneralCliente));	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemEliminarBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaEliminarBalanceGeneralCliente && this.isPermisoEliminarBalanceGeneralCliente));
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemCancelarBalanceGeneralCliente.setVisible(this.isVisibilidadCeldaCancelarBalanceGeneralCliente);				
			}
			
			this.jMenuItemGuardarCambiosBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));						
			this.jMenuItemGuardarCambiosTablaBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=this.jButtonNuevoBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaDuplicarBalanceGeneralCliente=this.jButtonDuplicarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaCopiarBalanceGeneralCliente=this.jButtonCopiarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaVerFormBalanceGeneralCliente=this.jButtonVerFormBalanceGeneralCliente.isVisible();
			
			this.isVisibilidadCeldaOrdenBalanceGeneralCliente=this.jButtonAbrirOrderByBalanceGeneralCliente.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=this.jButtonNuevoRelacionesBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=this.jButtonModificarBalanceGeneralCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaGuardarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=this.jButtonGuardarCambiosTablaBalanceGeneralCliente.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=this.jButtonNuevoToolBarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=this.jButtonNuevoRelacionesToolBarBalanceGeneralCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarToolBarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarToolBarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarToolBarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarToolBarBalanceGeneralCliente.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarBalanceGeneralCliente=this.jButtonGuardarCambiosToolBarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=this.jButtonGuardarCambiosTablaToolBarBalanceGeneralCliente.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=this.jMenuItemNuevoBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=this.jMenuItemNuevoRelacionesBalanceGeneralCliente.isVisible();
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemModificarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemActualizarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemEliminarBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemCancelarBalanceGeneralCliente.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarBalanceGeneralCliente=this.jMenuItemGuardarCambiosBalanceGeneralCliente.isVisible();
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=this.jMenuItemGuardarCambiosTablaBalanceGeneralCliente.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesBalanceGeneralCliente(Boolean esInicializar) {
		if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {			
			if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
				//if(this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesBalanceGeneralCliente();
			}
			
			this.inicializarActualizarBindingBotonesManualBalanceGeneralCliente(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualBalanceGeneralCliente() {
		this.jButtonNuevoBalanceGeneralCliente.setVisible(this.isPermisoNuevoBalanceGeneralCliente);			
		this.jButtonDuplicarBalanceGeneralCliente.setVisible(this.isPermisoDuplicarBalanceGeneralCliente);			
		this.jButtonCopiarBalanceGeneralCliente.setVisible(this.isPermisoCopiarBalanceGeneralCliente);			
		this.jButtonVerFormBalanceGeneralCliente.setVisible(this.isPermisoVerFormBalanceGeneralCliente);			
		
		this.jButtonAbrirOrderByBalanceGeneralCliente.setVisible(this.isPermisoOrdenBalanceGeneralCliente);					
		
		this.jButtonNuevoRelacionesBalanceGeneralCliente.setVisible(this.isPermisoNuevoBalanceGeneralCliente);			
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarBalanceGeneralCliente.setVisible(this.isPermisoActualizarBalanceGeneralCliente);	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.setVisible(this.isPermisoActualizarBalanceGeneralCliente);	
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.setVisible(this.isPermisoEliminarBalanceGeneralCliente);
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.setVisible(this.isVisibilidadCeldaCancelarBalanceGeneralCliente);						
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.setVisible(this.isPermisoGuardarCambiosBalanceGeneralCliente);							
		}
		
		this.jButtonGuardarCambiosTablaBalanceGeneralCliente.setVisible(this.isPermisoActualizarBalanceGeneralCliente);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleBalanceGeneralCliente() {
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarBalanceGeneralCliente.setVisible(this.isPermisoActualizarBalanceGeneralCliente);	
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.setVisible(this.isPermisoActualizarBalanceGeneralCliente);	
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.setVisible(this.isPermisoEliminarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.setVisible(this.isVisibilidadCeldaCancelarBalanceGeneralCliente);							
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.setVisible((this.isVisibilidadCeldaGuardarBalanceGeneralCliente && this.isPermisoGuardarCambiosBalanceGeneralCliente));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosBalanceGeneralCliente() {
		if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualBalanceGeneralCliente();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesBalanceGeneralCliente() {
	}
	
	public void jTableDatosBalanceGeneralClienteListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarBalanceGeneralCliente(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.balancegeneralcliente.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaBalanceGeneralClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebBalanceGeneralCliente(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBalanceGeneralCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.balancegeneralclienteLogic.getConnexion());

				if(this.balancegeneralcliente.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.balancegeneralcliente.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBalanceGeneralCliente=(TitledBorder)this.jScrollPanelDatosBalanceGeneralCliente.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderBalanceGeneralCliente.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.balancegeneralcliente.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteBalanceGeneralClienteActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBalanceGeneralCliente=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosBalanceGeneralCliente.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBalanceGeneralCliente=(TitledBorder)this.jScrollPanelDatosBalanceGeneralCliente.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderBalanceGeneralCliente.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteBalanceGeneralClienteUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebBalanceGeneralCliente(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBalanceGeneralCliente.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBalanceGeneralCliente.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.balancegeneralclienteLogic.getConnexion());

				if(this.balancegeneralcliente.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.balancegeneralcliente.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBalanceGeneralCliente=(TitledBorder)this.jScrollPanelDatosBalanceGeneralCliente.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderBalanceGeneralCliente.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.balancegeneralcliente.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncaja_bancos_disponibleBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getcaja_bancos_disponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where caja_bancos_disponible = "+this.balancegeneralcliente.getcaja_bancos_disponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getcuentas_por_cobrar_clientes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cuentas_por_cobrar_clientes = "+this.balancegeneralcliente.getcuentas_por_cobrar_clientes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoninventarioBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getinventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where inventario = "+this.balancegeneralcliente.getinventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotros_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getotros_activos_corrientes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros_activos_corrientes = "+this.balancegeneralcliente.getotros_activos_corrientes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.gettotal_activos_corrientes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_activos_corrientes = "+this.balancegeneralcliente.gettotal_activos_corrientes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbienes_inmueblesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getbienes_inmuebles()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where bienes_inmuebles = "+this.balancegeneralcliente.getbienes_inmuebles().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbienes_mueblesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getbienes_muebles()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where bienes_muebles = "+this.balancegeneralcliente.getbienes_muebles().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotros_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getotros_activos_no_corrientes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros_activos_no_corrientes = "+this.balancegeneralcliente.getotros_activos_no_corrientes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.gettotal_activos_no_corrientes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_activos_no_corrientes = "+this.balancegeneralcliente.gettotal_activos_no_corrientes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getventas_mensuales()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ventas_mensuales = "+this.balancegeneralcliente.getventas_mensuales().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_ventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getcosto_ventas_mensuales()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_ventas_mensuales = "+this.balancegeneralcliente.getcosto_ventas_mensuales().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonutilidad_brutaBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getutilidad_bruta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where utilidad_bruta = "+this.balancegeneralcliente.getutilidad_bruta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongastos_operativosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getgastos_operativos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gastos_operativos = "+this.balancegeneralcliente.getgastos_operativos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsueldosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getsueldos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sueldos = "+this.balancegeneralcliente.getsueldos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserviciosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getservicios()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where servicios = "+this.balancegeneralcliente.getservicios().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonarriendosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getarriendos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where arriendos = "+this.balancegeneralcliente.getarriendos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonimpuestosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getimpuestos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where impuestos = "+this.balancegeneralcliente.getimpuestos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonutilidad_operativaBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getutilidad_operativa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where utilidad_operativa = "+this.balancegeneralcliente.getutilidad_operativa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongastos_familiaresBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getgastos_familiares()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gastos_familiares = "+this.balancegeneralcliente.getgastos_familiares().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonexcedente_antes_dividendosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getexcedente_antes_dividendos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where excedente_antes_dividendos = "+this.balancegeneralcliente.getexcedente_antes_dividendos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondividendos_bancos_otrosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getdividendos_bancos_otros()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where dividendos_bancos_otros = "+this.balancegeneralcliente.getdividendos_bancos_otros().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonexedente_neto_mensualBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getexedente_neto_mensual()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where exedente_neto_mensual = "+this.balancegeneralcliente.getexedente_neto_mensual().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondeudas_bancariasBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getdeudas_bancarias()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where deudas_bancarias = "+this.balancegeneralcliente.getdeudas_bancarias().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getcuentas_por_pagar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cuentas_por_pagar = "+this.balancegeneralcliente.getcuentas_por_pagar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanticipos_recibosBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getanticipos_recibos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anticipos_recibos = "+this.balancegeneralcliente.getanticipos_recibos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getotras_cuentas_por_pagar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otras_cuentas_por_pagar = "+this.balancegeneralcliente.getotras_cuentas_por_pagar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotras_deudas_familiaresBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getotras_deudas_familiares()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otras_deudas_familiares = "+this.balancegeneralcliente.getotras_deudas_familiares().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_pasivo_corrienteBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.gettotal_pasivo_corriente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_pasivo_corriente = "+this.balancegeneralcliente.gettotal_pasivo_corriente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getdeudas_bancarias_largo_plazo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where deudas_bancarias_largo_plazo = "+this.balancegeneralcliente.getdeudas_bancarias_largo_plazo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getotros_pasivos_largo_plazo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros_pasivos_largo_plazo = "+this.balancegeneralcliente.getotros_pasivos_largo_plazo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.gettotal_pasivo_no_corriente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_pasivo_no_corriente = "+this.balancegeneralcliente.gettotal_pasivo_no_corriente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_pasivoBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.gettotal_pasivo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_pasivo = "+this.balancegeneralcliente.gettotal_pasivo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonpatrimonioBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getpatrimonio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where patrimonio = "+this.balancegeneralcliente.getpatrimonio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionBalanceGeneralClienteBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.getbalancegeneralcliente(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.balancegeneralcliente==null) {
						this.balancegeneralcliente = new BalanceGeneralCliente();
					}

					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);
				}

				if(this.balancegeneralcliente.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.balancegeneralcliente.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBalanceGeneralCliente(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdClienteBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);

			this.getBalanceGeneralClientesFK_IdCliente();

			this.inicializarActualizarBindingBalanceGeneralCliente(false);

			//if(BalanceGeneralClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaBalanceGeneralClienteActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);

			this.getBalanceGeneralClientesFK_IdEmpresa();

			this.inicializarActualizarBindingBalanceGeneralCliente(false);

			//if(BalanceGeneralClienteBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.balancegeneralclienteLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameBalanceGeneralCliente() {
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.setVisible(false);	    			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.dispose();
			this.jInternalFrameDetalleFormBalanceGeneralCliente=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
			this.jInternalFrameReporteDinamicoBalanceGeneralCliente.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoBalanceGeneralCliente.dispose();
			this.jInternalFrameReporteDinamicoBalanceGeneralCliente=null;
		}
		
		if(this.jInternalFrameImportacionBalanceGeneralCliente!=null) {
			this.jInternalFrameImportacionBalanceGeneralCliente.setVisible(false);	    			
			this.jInternalFrameImportacionBalanceGeneralCliente.dispose();
			this.jInternalFrameImportacionBalanceGeneralCliente=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessBalanceGeneralCliente();
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			
			if(sTipo.equals("NuevoBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarBalanceGeneralCliente")) {
				jButtonDuplicarBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarBalanceGeneralCliente")) {
				jButtonCopiarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("VerFormBalanceGeneralCliente")) {
				jButtonVerFormBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarBalanceGeneralCliente")) {
				jButtonDuplicarBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarBalanceGeneralCliente")) {
				jButtonDuplicarBalanceGeneralClienteActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarBalanceGeneralCliente")) {
				jButtonModificarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarBalanceGeneralCliente")) {
				jButtonModificarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarBalanceGeneralCliente")) {
				jButtonModificarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarBalanceGeneralCliente")) {
				jButtonActualizarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarBalanceGeneralCliente")) {
				jButtonActualizarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarBalanceGeneralCliente")) {
				jButtonActualizarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("EliminarBalanceGeneralCliente")) {
				jButtonEliminarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarBalanceGeneralCliente")) {
				jButtonEliminarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarBalanceGeneralCliente")) {
				jButtonEliminarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("CancelarBalanceGeneralCliente")) {
				jButtonCancelarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarBalanceGeneralCliente")) {
				jButtonCancelarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarBalanceGeneralCliente")) {
				jButtonCancelarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("CerrarBalanceGeneralCliente")) {
				jButtonCerrarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarBalanceGeneralCliente")) {
				jButtonCerrarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarBalanceGeneralCliente")) {
				jButtonCerrarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarBalanceGeneralCliente")) {
				jButtonMostrarOcultarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarBalanceGeneralCliente")) {
				jButtonCancelarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarBalanceGeneralCliente")) {
				jButtonCopiarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarBalanceGeneralCliente")) {
				jButtonVerFormBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarBalanceGeneralCliente")) {
				jButtonCopiarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormBalanceGeneralCliente")) {
				jButtonVerFormBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionBalanceGeneralCliente")) {
				jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarBalanceGeneralCliente")) {
				jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionBalanceGeneralCliente")) {
				jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresBalanceGeneralCliente")) {
				jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarBalanceGeneralCliente")) {
				jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreBalanceGeneralCliente")) {
				jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesBalanceGeneralCliente")) {
				jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarBalanceGeneralCliente")) {
				jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesBalanceGeneralCliente")) {
				jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByBalanceGeneralCliente") || sTipo.equals("MenuItemDetalleAbrirOrderByBalanceGeneralCliente")) {
				jButtonAbrirOrderByBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarBalanceGeneralCliente") || sTipo.equals("MenuItemDetalleMostrarOcultarBalanceGeneralCliente")) {
				jButtonMostrarOcultarBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosBalanceGeneralCliente")) {
				jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarBalanceGeneralCliente")) {
				jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosBalanceGeneralCliente")) {
				jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoBalanceGeneralCliente")) {
				jButtonCerrarReporteDinamicoBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoBalanceGeneralCliente")) {
				jButtonGenerarReporteDinamicoBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoBalanceGeneralCliente")) {
				
				jButtonGenerarExcelReporteDinamicoBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionBalanceGeneralCliente")) {
				jButtonCerrarImportacionBalanceGeneralClienteActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionBalanceGeneralCliente")) {
				
				jButtonGenerarImportacionBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionBalanceGeneralCliente")) {
				
				jButtonAbrirImportacionBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesBalanceGeneralCliente")) {
				jComboBoxTiposAccionesBalanceGeneralClienteActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesBalanceGeneralCliente")) {
				jComboBoxTiposRelacionesBalanceGeneralClienteActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioBalanceGeneralCliente")) {
				jComboBoxTiposAccionesBalanceGeneralClienteActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarBalanceGeneralCliente")) {
				
				jComboBoxTiposSeleccionarBalanceGeneralClienteActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralBalanceGeneralCliente")) {
				jTextFieldValorCampoGeneralBalanceGeneralClienteActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByBalanceGeneralCliente")) {
				jButtonAbrirOrderByBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarBalanceGeneralCliente")) {
				jButtonAbrirOrderByBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByBalanceGeneralCliente")) {
				jButtonCerrarOrderByBalanceGeneralClienteActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idBalanceGeneralClienteBusqueda")) {
				this.jButtonidBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaBalanceGeneralClienteUpdate")) {
				this.jButtonid_empresaBalanceGeneralClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaBalanceGeneralClienteBusqueda")) {
				this.jButtonid_empresaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralCliente")) {
				this.jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralClienteUpdate")) {
				this.jButtonid_clienteBalanceGeneralClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralClienteBusqueda")) {
				this.jButtonid_clienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("caja_bancos_disponibleBalanceGeneralClienteBusqueda")) {
				this.jButtoncaja_bancos_disponibleBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda")) {
				this.jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("inventarioBalanceGeneralClienteBusqueda")) {
				this.jButtoninventarioBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_activos_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_activos_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_inmueblesBalanceGeneralClienteBusqueda")) {
				this.jButtonbienes_inmueblesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_mueblesBalanceGeneralClienteBusqueda")) {
				this.jButtonbienes_mueblesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_activos_no_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_activos_no_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ventas_mensualesBalanceGeneralClienteBusqueda")) {
				this.jButtonventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ventas_mensualesBalanceGeneralClienteBusqueda")) {
				this.jButtoncosto_ventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidad_brutaBalanceGeneralClienteBusqueda")) {
				this.jButtonutilidad_brutaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gastos_operativosBalanceGeneralClienteBusqueda")) {
				this.jButtongastos_operativosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sueldosBalanceGeneralClienteBusqueda")) {
				this.jButtonsueldosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serviciosBalanceGeneralClienteBusqueda")) {
				this.jButtonserviciosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("arriendosBalanceGeneralClienteBusqueda")) {
				this.jButtonarriendosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestosBalanceGeneralClienteBusqueda")) {
				this.jButtonimpuestosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidad_operativaBalanceGeneralClienteBusqueda")) {
				this.jButtonutilidad_operativaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gastos_familiaresBalanceGeneralClienteBusqueda")) {
				this.jButtongastos_familiaresBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("excedente_antes_dividendosBalanceGeneralClienteBusqueda")) {
				this.jButtonexcedente_antes_dividendosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dividendos_bancos_otrosBalanceGeneralClienteBusqueda")) {
				this.jButtondividendos_bancos_otrosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("exedente_neto_mensualBalanceGeneralClienteBusqueda")) {
				this.jButtonexedente_neto_mensualBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("deudas_bancariasBalanceGeneralClienteBusqueda")) {
				this.jButtondeudas_bancariasBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cuentas_por_pagarBalanceGeneralClienteBusqueda")) {
				this.jButtoncuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anticipos_recibosBalanceGeneralClienteBusqueda")) {
				this.jButtonanticipos_recibosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otras_cuentas_por_pagarBalanceGeneralClienteBusqueda")) {
				this.jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otras_deudas_familiaresBalanceGeneralClienteBusqueda")) {
				this.jButtonotras_deudas_familiaresBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivo_corrienteBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivo_corrienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("deudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda")) {
				this.jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_pasivos_largo_plazoBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivo_no_corrienteBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivoBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("patrimonioBalanceGeneralClienteBusqueda")) {
				this.jButtonpatrimonioBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionBalanceGeneralClienteBusqueda")) {
				this.jButtondescripcionBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteBalanceGeneralCliente")) {
				this.jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdClienteBalanceGeneralCliente")) {
				this.jButtonFK_IdClienteBalanceGeneralClienteActionPerformed(evt);
			}
			
			;
			
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessBalanceGeneralCliente();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			BalanceGeneralCliente balancegeneralclienteLocal=null;
			
			if(!this.getEsControlTabla()) {
				balancegeneralclienteLocal=this.balancegeneralcliente;
			} else {
				balancegeneralclienteLocal=this.balancegeneralclienteAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
							
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
								
						
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
								
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
							
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
								
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
			
			this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosBalanceGeneralCliente")) {
					jCheckBoxSeleccionarTodosBalanceGeneralClienteItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosBalanceGeneralCliente")) {
					jCheckBoxSeleccionadosBalanceGeneralClienteItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarBalanceGeneralCliente")) {
					
				}
				
				


				
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
												
				
				


				
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.balancegeneralcliente);
				
				this.actualizarInformacion("INFO_PADRE",false,this.balancegeneralcliente);
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(BalanceGeneralCliente.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",BalanceGeneralCliente.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBalanceGeneralClienteActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.balancegeneralclienteAnterior =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarBalanceGeneralCliente")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosBalanceGeneralClienteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosBalanceGeneralCliente.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.balancegeneralcliente =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.balancegeneralcliente);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarBalanceGeneralCliente")) {
				
				}
				
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarBalanceGeneralCliente")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosBalanceGeneralCliente.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarBalanceGeneralCliente")) {
			
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessBalanceGeneralCliente();
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			if(sTipo.equals("NuevoBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarBalanceGeneralCliente")) {
				jButtonDuplicarBalanceGeneralClienteActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarBalanceGeneralCliente")) {
				jButtonCopiarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormBalanceGeneralCliente")) {
				jButtonVerFormBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesBalanceGeneralCliente")) {
				jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarBalanceGeneralCliente")) {
				jButtonModificarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarBalanceGeneralCliente")) {
				jButtonActualizarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarBalanceGeneralCliente")) {
				jButtonEliminarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarBalanceGeneralCliente")) {
				jButtonCancelarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarBalanceGeneralCliente")) {
				jButtonCerrarBalanceGeneralClienteActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosBalanceGeneralCliente")) {
				jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosBalanceGeneralCliente")) {
				jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByBalanceGeneralCliente")) {
				jButtonAbrirOrderByBalanceGeneralClienteActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionBalanceGeneralCliente")) {
				jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresBalanceGeneralCliente")) {
				jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesBalanceGeneralCliente")) {
				jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idBalanceGeneralClienteBusqueda")) {
				this.jButtonidBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaBalanceGeneralClienteUpdate")) {
				this.jButtonid_empresaBalanceGeneralClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaBalanceGeneralClienteBusqueda")) {
				this.jButtonid_empresaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralCliente")) {
				this.jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralClienteUpdate")) {
				this.jButtonid_clienteBalanceGeneralClienteUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteBalanceGeneralClienteBusqueda")) {
				this.jButtonid_clienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("caja_bancos_disponibleBalanceGeneralClienteBusqueda")) {
				this.jButtoncaja_bancos_disponibleBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda")) {
				this.jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("inventarioBalanceGeneralClienteBusqueda")) {
				this.jButtoninventarioBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_activos_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_activos_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_activos_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_inmueblesBalanceGeneralClienteBusqueda")) {
				this.jButtonbienes_inmueblesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_mueblesBalanceGeneralClienteBusqueda")) {
				this.jButtonbienes_mueblesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_activos_no_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_activos_no_corrientesBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_activos_no_corrientesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ventas_mensualesBalanceGeneralClienteBusqueda")) {
				this.jButtonventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ventas_mensualesBalanceGeneralClienteBusqueda")) {
				this.jButtoncosto_ventas_mensualesBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidad_brutaBalanceGeneralClienteBusqueda")) {
				this.jButtonutilidad_brutaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gastos_operativosBalanceGeneralClienteBusqueda")) {
				this.jButtongastos_operativosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sueldosBalanceGeneralClienteBusqueda")) {
				this.jButtonsueldosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serviciosBalanceGeneralClienteBusqueda")) {
				this.jButtonserviciosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("arriendosBalanceGeneralClienteBusqueda")) {
				this.jButtonarriendosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("impuestosBalanceGeneralClienteBusqueda")) {
				this.jButtonimpuestosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidad_operativaBalanceGeneralClienteBusqueda")) {
				this.jButtonutilidad_operativaBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gastos_familiaresBalanceGeneralClienteBusqueda")) {
				this.jButtongastos_familiaresBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("excedente_antes_dividendosBalanceGeneralClienteBusqueda")) {
				this.jButtonexcedente_antes_dividendosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dividendos_bancos_otrosBalanceGeneralClienteBusqueda")) {
				this.jButtondividendos_bancos_otrosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("exedente_neto_mensualBalanceGeneralClienteBusqueda")) {
				this.jButtonexedente_neto_mensualBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("deudas_bancariasBalanceGeneralClienteBusqueda")) {
				this.jButtondeudas_bancariasBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cuentas_por_pagarBalanceGeneralClienteBusqueda")) {
				this.jButtoncuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anticipos_recibosBalanceGeneralClienteBusqueda")) {
				this.jButtonanticipos_recibosBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otras_cuentas_por_pagarBalanceGeneralClienteBusqueda")) {
				this.jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otras_deudas_familiaresBalanceGeneralClienteBusqueda")) {
				this.jButtonotras_deudas_familiaresBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivo_corrienteBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivo_corrienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("deudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda")) {
				this.jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otros_pasivos_largo_plazoBalanceGeneralClienteBusqueda")) {
				this.jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivo_no_corrienteBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_pasivoBalanceGeneralClienteBusqueda")) {
				this.jButtontotal_pasivoBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("patrimonioBalanceGeneralClienteBusqueda")) {
				this.jButtonpatrimonioBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionBalanceGeneralClienteBusqueda")) {
				this.jButtondescripcionBalanceGeneralClienteBusquedaActionPerformed(evt);
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessBalanceGeneralCliente();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameBalanceGeneralCliente")) {
				closingInternalFrameBalanceGeneralCliente();
				
			} else if(sTipo.equals("jButtonCancelarBalanceGeneralCliente")) {
				JInternalFrameBase jInternalFrameDetalleFormBalanceGeneralCliente = (JInternalFrameBase)evt.getSource();
	            	
	            BalanceGeneralClienteBeanSwingJInternalFrame jInternalFrameParent=(BalanceGeneralClienteBeanSwingJInternalFrame)jInternalFrameDetalleFormBalanceGeneralCliente.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarBalanceGeneralClienteActionPerformed(null);
			}
			
			BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.balancegeneralcliente,new Object(),this.balancegeneralclienteParameterGeneral,this.balancegeneralclienteReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormBalanceGeneralCliente(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormBalanceGeneralCliente(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormBalanceGeneralCliente(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.balancegeneralcliente)) {
			if(!esControlTabla) {
				if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);			
				}
				
				if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.procesarEventosBalanceGeneralClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this.balancegeneralcliente,this.balancegeneralclienteParameterGeneral,this.isEsNuevoBalanceGeneralCliente,classes);//this.balancegeneralclienteLogic.getBalanceGeneralCliente()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral,this.balancegeneralclienteBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanBalanceGeneralCliente(classes,this.balancegeneralclienteReturnGeneral,this.balancegeneralclienteBean,false);
					}
						
					if(this.balancegeneralclienteReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente());	
					}
						
					if(this.balancegeneralclienteReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente(),classes);//this.balancegeneralclienteBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioBalanceGeneralCliente(this.balancegeneralcliente,classes);//this.balancegeneralclienteBean);									
				}
			
				if(BalanceGeneralClienteJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualBalanceGeneralCliente(this.balancegeneralcliente,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysBalanceGeneralCliente(this.balancegeneralcliente);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.balancegeneralclienteAnterior!=null) {
						this.balancegeneralcliente=this.balancegeneralclienteAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.procesarEventosBalanceGeneralClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this.balancegeneralcliente,this.balancegeneralclienteParameterGeneral,this.isEsNuevoBalanceGeneralCliente,classes);//this.balancegeneralclienteLogic.getBalanceGeneralCliente()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.balancegeneralclienteSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.balancegeneralclienteSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente(),balancegeneralclienteLogic.getBalanceGeneralClientes());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente(),this.balancegeneralclientes);
				}
				//ARCHITECTURE
				
				//this.jTableDatosBalanceGeneralCliente.repaint();
				
				//((AbstractTableModel) this.jTableDatosBalanceGeneralCliente.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosBalanceGeneralCliente();
			}
		}
	}
	
	public void actualizarVisualTableDatosBalanceGeneralCliente() throws Exception {
		
		BalanceGeneralClienteModel balancegeneralclienteModel=(BalanceGeneralClienteModel)this.jTableDatosBalanceGeneralCliente.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			balancegeneralclienteModel.balancegeneralclientes=this.balancegeneralclienteLogic.getBalanceGeneralClientes();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			balancegeneralclienteModel.balancegeneralclientes=this.balancegeneralclientes;
		}
		
		
		((BalanceGeneralClienteModel) this.jTableDatosBalanceGeneralCliente.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaBalanceGeneralCliente() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getbalancegeneralclienteAnterior(),this.balancegeneralclienteLogic.getBalanceGeneralClientes());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getbalancegeneralclienteAnterior(),this.balancegeneralclientes);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosBalanceGeneralCliente();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.balancegeneralcliente,new Object(),generalEntityParameterGeneral,this.balancegeneralclienteReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=BalanceGeneralClienteConstantesFunciones.getClassesRelationshipsOfBalanceGeneralCliente(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=BalanceGeneralClienteConstantesFunciones.getClassesRelationshipsFromStringsOfBalanceGeneralCliente(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormBalanceGeneralCliente(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				BalanceGeneralClienteBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.balancegeneralcliente,new Object(),generalEntityParameterGeneral,this.balancegeneralclienteReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioBalanceGeneralCliente(BalanceGeneralClienteBean balancegeneralclienteBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanBalanceGeneralCliente(ArrayList<Classe> classes,BalanceGeneralClienteReturnGeneral balancegeneralclienteReturnGeneral,BalanceGeneralClienteBean balancegeneralclienteBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.balancegeneralcliente)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente = new BalanceGeneralClienteDetalleFormJInternalFrame(jDesktopPane,this.balancegeneralclienteSessionBean.getConGuardarRelaciones(),this.balancegeneralclienteSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.setVisible(false);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.setSelected(false);						
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.balancegeneralclienteLogic=this.balancegeneralclienteLogic;
		
		this.cargarCombosFrameForeignKeyBalanceGeneralCliente("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleBalanceGeneralCliente();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleBalanceGeneralCliente();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyBalanceGeneralCliente("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyBalanceGeneralCliente();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarBalanceGeneralCliente"));
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ModificarBalanceGeneralCliente"));

		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ModificarToolBarBalanceGeneralCliente"));
					
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemModificarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"MenuItemModificarBalanceGeneralCliente"));		
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"ActualizarBalanceGeneralCliente"));
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ActualizarToolBarBalanceGeneralCliente"));
						
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemActualizarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemActualizarBalanceGeneralCliente"));		
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"EliminarBalanceGeneralCliente"));
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"EliminarToolBarBalanceGeneralCliente"));
								
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemEliminarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemEliminarBalanceGeneralCliente"));		
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CancelarBalanceGeneralCliente"));
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CancelarToolBarBalanceGeneralCliente"));
					
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemCancelarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemCancelarBalanceGeneralCliente"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemDetalleCerrarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarBalanceGeneralCliente"));		
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBalanceGeneralCliente"));
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBalanceGeneralCliente"));
		
		
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioBalanceGeneralCliente"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonidBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"idBalanceGeneralClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteBusqueda"));
		//jButtonid_clienteBalanceGeneralCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncaja_bancos_disponibleBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"caja_bancos_disponibleBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoninventarioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"inventarioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_inmueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_inmueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_mueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_mueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncosto_ventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"costo_ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_brutaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_brutaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_operativosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_operativosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonsueldosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"sueldosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonserviciosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"serviciosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonarriendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"arriendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonimpuestosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"impuestosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_operativaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_operativaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexcedente_antes_dividendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"excedente_antes_dividendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondividendos_bancos_otrosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"dividendos_bancos_otrosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexedente_neto_mensualBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"exedente_neto_mensualBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancariasBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancariasBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonanticipos_recibosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"anticipos_recibosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_deudas_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_deudas_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_pasivos_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_no_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonpatrimonioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"patrimonioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondescripcionBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBalanceGeneralClienteBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesBalanceGeneralCliente"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameBalanceGeneralCliente"));
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarBalanceGeneralCliente"));
		}
		
		this.jTableDatosBalanceGeneralCliente.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarBalanceGeneralCliente"));
		
		this.jTableDatosBalanceGeneralCliente.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarBalanceGeneralCliente"));
		
		this.jButtonNuevoBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"NuevoBalanceGeneralCliente"));
		
		this.jButtonDuplicarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"DuplicarBalanceGeneralCliente"));
		
		this.jButtonCopiarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"CopiarBalanceGeneralCliente"));
		
		this.jButtonVerFormBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"VerFormBalanceGeneralCliente"));
		
		
		this.jButtonNuevoToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"NuevoToolBarBalanceGeneralCliente"));
			
		this.jButtonDuplicarToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"DuplicarToolBarBalanceGeneralCliente"));
			
		this.jMenuItemNuevoBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemNuevoBalanceGeneralCliente"));
			
		this.jMenuItemDuplicarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarBalanceGeneralCliente"));		
		
		
		this.jButtonNuevoRelacionesBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"NuevoRelacionesBalanceGeneralCliente"));
		
		
		this.jButtonNuevoRelacionesToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarBalanceGeneralCliente"));
			
		this.jMenuItemNuevoRelacionesBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesBalanceGeneralCliente"));		
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ModificarBalanceGeneralCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonModificarToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ModificarToolBarBalanceGeneralCliente"));
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemModificarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"MenuItemModificarBalanceGeneralCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"ActualizarBalanceGeneralCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonActualizarToolBarBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"ActualizarToolBarBalanceGeneralCliente"));
				
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemActualizarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemActualizarBalanceGeneralCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"EliminarBalanceGeneralCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonEliminarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"EliminarToolBarBalanceGeneralCliente"));
						
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemEliminarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemEliminarBalanceGeneralCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CancelarBalanceGeneralCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonCancelarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CancelarToolBarBalanceGeneralCliente"));
			
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemCancelarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemCancelarBalanceGeneralCliente"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarBalanceGeneralCliente"));		
		
		
		this.jButtonCerrarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CerrarBalanceGeneralCliente"));
		
		
		this.jButtonCerrarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CerrarToolBarBalanceGeneralCliente"));
			
		this.jMenuItemCerrarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemCerrarBalanceGeneralCliente"));
			
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jMenuItemDetalleCerrarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarBalanceGeneralCliente"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosBalanceGeneralCliente"));
		}
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBalanceGeneralCliente"));
		}
		
		this.jButtonCopiarToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CopiarToolBarBalanceGeneralCliente"));
			
		this.jButtonVerFormToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"VerFormToolBarBalanceGeneralCliente"));
		
		this.jMenuItemGuardarCambiosBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosBalanceGeneralCliente"));
			
		this.jMenuItemCopiarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemCopiarBalanceGeneralCliente"));		
		
		this.jMenuItemVerFormBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemVerFormBalanceGeneralCliente"));		
		
		
		this.jButtonGuardarCambiosTablaBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaBalanceGeneralCliente"));
		
		
		this.jButtonGuardarCambiosTablaToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarBalanceGeneralCliente"));
			
		this.jMenuItemGuardarCambiosTablaBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaBalanceGeneralCliente"));		
		
		
		
		this.jButtonRecargarInformacionBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"RecargarInformacionBalanceGeneralCliente"));
					
		this.jButtonRecargarInformacionToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarBalanceGeneralCliente"));
		
		this.jMenuItemRecargarInformacionBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionBalanceGeneralCliente"));		
		
		
		
		this.jButtonAnterioresBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"AnterioresBalanceGeneralCliente"));
		
		
		this.jButtonAnterioresToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"AnterioresToolBarBalanceGeneralCliente"));
		
		this.jMenuItemAnterioresBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresBalanceGeneralCliente"));		
		
		
		this.jButtonSiguientesBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"SiguientesBalanceGeneralCliente"));
		
		
		this.jButtonSiguientesToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"SiguientesToolBarBalanceGeneralCliente"));
			
		this.jMenuItemSiguientesBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesBalanceGeneralCliente"));
			
		this.jMenuItemAbrirOrderByBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByBalanceGeneralCliente"));
			
		this.jMenuItemMostrarOcultarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarBalanceGeneralCliente"));
			
		this.jMenuItemDetalleAbrirOrderByBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByBalanceGeneralCliente"));
			
		this.jMenuItemDetalleMostarOcultarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarBalanceGeneralCliente"));		
		
		
		this.jButtonNuevoGuardarCambiosBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosBalanceGeneralCliente"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarBalanceGeneralCliente"));
			
		this.jMenuItemNuevoGuardarCambiosBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosBalanceGeneralCliente"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosBalanceGeneralCliente.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosBalanceGeneralCliente"));

		this.jCheckBoxSeleccionadosBalanceGeneralCliente.addItemListener(new CheckBoxItemListener(this,"SeleccionadosBalanceGeneralCliente"));
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioBalanceGeneralCliente"));
		}
		
		
		this.jComboBoxTiposRelacionesBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"TiposRelacionesBalanceGeneralCliente"));
			
		this.jComboBoxTiposAccionesBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"TiposAccionesBalanceGeneralCliente"));
					
		this.jComboBoxTiposSeleccionarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"TiposSeleccionarBalanceGeneralCliente"));
			
		this.jTextFieldValorCampoGeneralBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralBalanceGeneralCliente"));		
		
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonidBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"idBalanceGeneralClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteBusqueda"));
		//jButtonid_clienteBalanceGeneralCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncaja_bancos_disponibleBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"caja_bancos_disponibleBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoninventarioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"inventarioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_inmueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_inmueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_mueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_mueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncosto_ventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"costo_ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_brutaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_brutaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_operativosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_operativosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonsueldosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"sueldosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonserviciosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"serviciosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonarriendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"arriendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonimpuestosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"impuestosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_operativaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_operativaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexcedente_antes_dividendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"excedente_antes_dividendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondividendos_bancos_otrosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"dividendos_bancos_otrosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexedente_neto_mensualBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"exedente_neto_mensualBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancariasBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancariasBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonanticipos_recibosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"anticipos_recibosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_deudas_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_deudas_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_pasivos_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_no_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonpatrimonioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"patrimonioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondescripcionBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBalanceGeneralClienteBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdClienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"FK_IdClienteBalanceGeneralCliente"));

			this.jButtonBuscarFK_IdClienteid_clienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralCliente"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoBalanceGeneralCliente!=null) {
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBalanceGeneralCliente"));
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBalanceGeneralCliente"));
				this.jInternalFrameReporteDinamicoBalanceGeneralCliente.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBalanceGeneralCliente"));
			}
			
			//this.jButtonCerrarReporteDinamicoBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBalanceGeneralCliente"));				
			//this.jButtonGenerarReporteDinamicoBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBalanceGeneralCliente"));
			//this.jButtonGenerarExcelReporteDinamicoBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBalanceGeneralCliente"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionBalanceGeneralCliente!=null) {
				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionBalanceGeneralCliente"));
				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionBalanceGeneralCliente"));
				this.jInternalFrameImportacionBalanceGeneralCliente.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionBalanceGeneralCliente"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"AbrirOrderByBalanceGeneralCliente"));
			
			this.jButtonAbrirOrderByToolBarBalanceGeneralCliente.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarBalanceGeneralCliente"));			
			
			if(this.jInternalFrameOrderByBalanceGeneralCliente!=null) {
				this.jInternalFrameOrderByBalanceGeneralCliente.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByBalanceGeneralCliente"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jTabbedPaneRelacionesBalanceGeneralCliente.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesBalanceGeneralCliente"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameBalanceGeneralCliente();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormBalanceGeneralCliente = (JInternalFrameBase)event.getSource();
	            	
	            BalanceGeneralClienteBeanSwingJInternalFrame jInternalFrameParent=(BalanceGeneralClienteBeanSwingJInternalFrame)jInternalFrameDetalleFormBalanceGeneralCliente.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarBalanceGeneralClienteActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosBalanceGeneralCliente.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosBalanceGeneralClienteListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosBalanceGeneralCliente.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosBalanceGeneralCliente.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoBalanceGeneralCliente";
		inputMap = this.jButtonNuevoBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesBalanceGeneralCliente";
		inputMap = this.jButtonNuevoRelacionesBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoBalanceGeneralClienteActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarBalanceGeneralCliente";
		inputMap = this.jButtonModificarBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarBalanceGeneralCliente";
		inputMap = this.jButtonActualizarBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarBalanceGeneralCliente";
		inputMap = this.jButtonEliminarBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarBalanceGeneralCliente";
		inputMap = this.jButtonCancelarBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarBalanceGeneralCliente";
		inputMap = this.jButtonCerrarBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosBalanceGeneralCliente";
		inputMap = this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonGuardarCambiosBalanceGeneralCliente.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosBalanceGeneralClienteActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosBalanceGeneralCliente.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosBalanceGeneralClienteItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesBalanceGeneralCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesBalanceGeneralClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarBalanceGeneralCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarBalanceGeneralClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralBalanceGeneralCliente.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralBalanceGeneralClienteActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonidBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"idBalanceGeneralClienteBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_empresaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBalanceGeneralClienteBusqueda"));
		//jButtonid_clienteBalanceGeneralCliente.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteBalanceGeneralClienteActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralCliente"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteUpdate.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncaja_bancos_disponibleBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"caja_bancos_disponibleBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_cobrar_clientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoninventarioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"inventarioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_inmueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_inmueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonbienes_mueblesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"bienes_mueblesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_activos_no_corrientesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_activos_no_corrientesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncosto_ventas_mensualesBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"costo_ventas_mensualesBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_brutaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_brutaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_operativosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_operativosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonsueldosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"sueldosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonserviciosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"serviciosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonarriendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"arriendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonimpuestosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"impuestosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonutilidad_operativaBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"utilidad_operativaBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtongastos_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"gastos_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexcedente_antes_dividendosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"excedente_antes_dividendosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondividendos_bancos_otrosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"dividendos_bancos_otrosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonexedente_neto_mensualBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"exedente_neto_mensualBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancariasBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancariasBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtoncuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonanticipos_recibosBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"anticipos_recibosBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_cuentas_por_pagarBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_cuentas_por_pagarBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotras_deudas_familiaresBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otras_deudas_familiaresBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondeudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"deudas_bancarias_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonotros_pasivos_largo_plazoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"otros_pasivos_largo_plazoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivo_no_corrienteBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivo_no_corrienteBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtontotal_pasivoBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"total_pasivoBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonpatrimonioBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"patrimonioBalanceGeneralClienteBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtondescripcionBalanceGeneralClienteBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBalanceGeneralClienteBusqueda"));
		
		
		this.jButtonFK_IdClienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"FK_IdClienteBalanceGeneralCliente"));

		this.jButtonBuscarFK_IdClienteid_clienteBalanceGeneralCliente.addActionListener(new ButtonActionListener(this,"id_clienteBalanceGeneralCliente"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionBalanceGeneralCliente.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionBalanceGeneralClienteActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarBalanceGeneralClienteActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarBalanceGeneralCliente.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosBalanceGeneralCliente(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
					balancegeneralclienteAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientes) {
					balancegeneralclienteAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosBalanceGeneralClienteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
						balancegeneralclienteAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientes) {
						balancegeneralclienteAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientes) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosBalanceGeneralCliente.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosBalanceGeneralCliente.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosBalanceGeneralClienteItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosBalanceGeneralCliente.getSelectedRows();
			
			BalanceGeneralCliente balancegeneralclienteLocal=new BalanceGeneralCliente();
			
			//this.seleccionarTodosBalanceGeneralCliente(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					balancegeneralclienteLocal =(BalanceGeneralCliente) this.balancegeneralclienteLogic.getBalanceGeneralClientes().toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					balancegeneralclienteLocal =(BalanceGeneralCliente) this.balancegeneralclientes.toArray()[this.jTableDatosBalanceGeneralCliente.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				balancegeneralclienteLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
						balancegeneralclienteAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientes) {
						balancegeneralclienteAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosBalanceGeneralCliente.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosBalanceGeneralCliente.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosBalanceGeneralCliente,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualBalanceGeneralClienteItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarBalanceGeneralClienteParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralBalanceGeneralClienteActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralBalanceGeneralCliente.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclienteLogic.getBalanceGeneralClientes()) {
				
						if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE)) {
							existe=true;
							balancegeneralclienteAux.setcaja_bancos_disponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES)) {
							existe=true;
							balancegeneralclienteAux.setcuentas_por_cobrar_clientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO)) {
							existe=true;
							balancegeneralclienteAux.setinventario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.setotros_activos_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.settotal_activos_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES)) {
							existe=true;
							balancegeneralclienteAux.setbienes_inmuebles(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES)) {
							existe=true;
							balancegeneralclienteAux.setbienes_muebles(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.setotros_activos_no_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.settotal_activos_no_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES)) {
							existe=true;
							balancegeneralclienteAux.setventas_mensuales(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES)) {
							existe=true;
							balancegeneralclienteAux.setcosto_ventas_mensuales(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA)) {
							existe=true;
							balancegeneralclienteAux.setutilidad_bruta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS)) {
							existe=true;
							balancegeneralclienteAux.setgastos_operativos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS)) {
							existe=true;
							balancegeneralclienteAux.setsueldos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS)) {
							existe=true;
							balancegeneralclienteAux.setservicios(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS)) {
							existe=true;
							balancegeneralclienteAux.setarriendos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS)) {
							existe=true;
							balancegeneralclienteAux.setimpuestos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA)) {
							existe=true;
							balancegeneralclienteAux.setutilidad_operativa(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES)) {
							existe=true;
							balancegeneralclienteAux.setgastos_familiares(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS)) {
							existe=true;
							balancegeneralclienteAux.setexcedente_antes_dividendos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS)) {
							existe=true;
							balancegeneralclienteAux.setdividendos_bancos_otros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL)) {
							existe=true;
							balancegeneralclienteAux.setexedente_neto_mensual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS)) {
							existe=true;
							balancegeneralclienteAux.setdeudas_bancarias(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR)) {
							existe=true;
							balancegeneralclienteAux.setcuentas_por_pagar(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS)) {
							existe=true;
							balancegeneralclienteAux.setanticipos_recibos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR)) {
							existe=true;
							balancegeneralclienteAux.setotras_cuentas_por_pagar(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES)) {
							existe=true;
							balancegeneralclienteAux.setotras_deudas_familiares(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo_corriente(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO)) {
							existe=true;
							balancegeneralclienteAux.setdeudas_bancarias_largo_plazo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO)) {
							existe=true;
							balancegeneralclienteAux.setotros_pasivos_largo_plazo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo_no_corriente(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO)) {
							existe=true;
							balancegeneralclienteAux.setpatrimonio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							balancegeneralclienteAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientes) {
					
						if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE)) {
							existe=true;
							balancegeneralclienteAux.setcaja_bancos_disponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES)) {
							existe=true;
							balancegeneralclienteAux.setcuentas_por_cobrar_clientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO)) {
							existe=true;
							balancegeneralclienteAux.setinventario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.setotros_activos_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.settotal_activos_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES)) {
							existe=true;
							balancegeneralclienteAux.setbienes_inmuebles(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES)) {
							existe=true;
							balancegeneralclienteAux.setbienes_muebles(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.setotros_activos_no_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES)) {
							existe=true;
							balancegeneralclienteAux.settotal_activos_no_corrientes(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES)) {
							existe=true;
							balancegeneralclienteAux.setventas_mensuales(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES)) {
							existe=true;
							balancegeneralclienteAux.setcosto_ventas_mensuales(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA)) {
							existe=true;
							balancegeneralclienteAux.setutilidad_bruta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS)) {
							existe=true;
							balancegeneralclienteAux.setgastos_operativos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS)) {
							existe=true;
							balancegeneralclienteAux.setsueldos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS)) {
							existe=true;
							balancegeneralclienteAux.setservicios(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS)) {
							existe=true;
							balancegeneralclienteAux.setarriendos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS)) {
							existe=true;
							balancegeneralclienteAux.setimpuestos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA)) {
							existe=true;
							balancegeneralclienteAux.setutilidad_operativa(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES)) {
							existe=true;
							balancegeneralclienteAux.setgastos_familiares(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS)) {
							existe=true;
							balancegeneralclienteAux.setexcedente_antes_dividendos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS)) {
							existe=true;
							balancegeneralclienteAux.setdividendos_bancos_otros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL)) {
							existe=true;
							balancegeneralclienteAux.setexedente_neto_mensual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS)) {
							existe=true;
							balancegeneralclienteAux.setdeudas_bancarias(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR)) {
							existe=true;
							balancegeneralclienteAux.setcuentas_por_pagar(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS)) {
							existe=true;
							balancegeneralclienteAux.setanticipos_recibos(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR)) {
							existe=true;
							balancegeneralclienteAux.setotras_cuentas_por_pagar(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES)) {
							existe=true;
							balancegeneralclienteAux.setotras_deudas_familiares(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo_corriente(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO)) {
							existe=true;
							balancegeneralclienteAux.setdeudas_bancarias_largo_plazo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO)) {
							existe=true;
							balancegeneralclienteAux.setotros_pasivos_largo_plazo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo_no_corriente(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO)) {
							existe=true;
							balancegeneralclienteAux.settotal_pasivo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO)) {
							existe=true;
							balancegeneralclienteAux.setpatrimonio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							balancegeneralclienteAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesBalanceGeneralClienteActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioBalanceGeneralCliente=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesBalanceGeneralCliente.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteBalanceGeneralCliente) {				
					conSplash=true;//false;										
					
					//this.startProcessBalanceGeneralCliente(conSplash);
				
					this.generarReporteBalanceGeneralClientesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoBalanceGeneralClientesSeleccionados();
				//this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoBalanceGeneralClientesSeleccionados(false);
				//this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoBalanceGeneralClientesSeleccionados(true);
				//this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessBalanceGeneralCliente();
				
				this.exportarBalanceGeneralClientesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionBalanceGeneralClientes();
				//this.importarBalanceGeneralClientes();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessBalanceGeneralCliente();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelBalanceGeneralClientesSeleccionados();
				//this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Balance General Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessBalanceGeneralCliente();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoBalanceGeneralCliente)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyBalanceGeneralCliente(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
				}	
			} 			
			else if(BalanceGeneralClienteBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteBalanceGeneralCliente) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessBalanceGeneralCliente(conSplash);
					
						//this.actualizarParametrosGeneralBalanceGeneralCliente();
						
						this.generarReporteProcesoAccionBalanceGeneralClientesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(BalanceGeneralClienteBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Balance General ClienteS SELECCIONADOS?", "MANTENIMIENTO DE Balance General Cliente", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessBalanceGeneralCliente();
				
						this.actualizarParametrosGeneralBalanceGeneralCliente();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.balancegeneralclienteReturnGeneral=balancegeneralclienteLogic.procesarAccionBalanceGeneralClientesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.balancegeneralclienteLogic.getBalanceGeneralClientes(),this.balancegeneralclienteParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarBalanceGeneralClienteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralBalanceGeneralCliente();
					
					BalanceGeneralClienteBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarBalanceGeneralClienteReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesBalanceGeneralCliente.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxTiposAccionesFormularioBalanceGeneralCliente.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessBalanceGeneralCliente(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesBalanceGeneralClienteActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessBalanceGeneralCliente();
			
			if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
			BalanceGeneralCliente balancegeneralcliente=new BalanceGeneralCliente();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingBalanceGeneralCliente(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesBalanceGeneralCliente.getSelectedItem();
			
			
			
			
			balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
			//this.sTipoAccion;
			
			if(balancegeneralclientesSeleccionados.size()==1) {
				for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
					balancegeneralcliente=balancegeneralclienteAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessBalanceGeneralCliente();
			
      		//this.finishProcessBalanceGeneralCliente(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarBalanceGeneralClienteReturnGeneral() throws Exception {
		if(this.balancegeneralclienteReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.balancegeneralclienteReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.balancegeneralclienteReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.balancegeneralclienteReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.balancegeneralclienteReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.balancegeneralclienteReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
		}
		
		if(this.balancegeneralclienteReturnGeneral.getConRetornoLista() || this.balancegeneralclienteReturnGeneral.getConRetornoObjeto()) {
			if(this.balancegeneralclienteReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.balancegeneralclienteLogic.setBalanceGeneralClientes(this.balancegeneralclienteReturnGeneral.getBalanceGeneralClientes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.balancegeneralclienteReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.balancegeneralclienteLogic.setBalanceGeneralCliente(this.balancegeneralclienteReturnGeneral.getBalanceGeneralCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingBalanceGeneralCliente(false);
		}
	}
	
	public void actualizarParametrosGeneralBalanceGeneralCliente() throws Exception {
		
		
	}
	
	public ArrayList<BalanceGeneralCliente> getBalanceGeneralClientesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioBalanceGeneralCliente) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclienteLogic.getBalanceGeneralClientes()) {
					if(balancegeneralclienteAux.getIsSelected()) {
						balancegeneralclientesSeleccionados.add(balancegeneralclienteAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(BalanceGeneralCliente balancegeneralclienteAux:this.balancegeneralclientes) {
					if(balancegeneralclienteAux.getIsSelected()) {
						balancegeneralclientesSeleccionados.add(balancegeneralclienteAux);				
					}
				}
			}
			
			if(balancegeneralclientesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						balancegeneralclientesSeleccionados.addAll(this.balancegeneralclienteLogic.getBalanceGeneralClientes());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						balancegeneralclientesSeleccionados.addAll(this.balancegeneralclientes);				
					}
				}
			}
		} else {
			balancegeneralclientesSeleccionados.add(this.balancegeneralcliente);
		}
		
		return balancegeneralclientesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteBalanceGeneralClientesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalBalanceGeneralClientesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoBalanceGeneralClientesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoBalanceGeneralClientesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoBalanceGeneralClientesSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Balance General Cliente",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados);
		
	}	
	
	public void generarReporteNormalBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionBalanceGeneralClientesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		
		this.abrirInicializarFrameReporteDinamicoBalanceGeneralCliente();
		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoBalanceGeneralCliente();
		
		
		//this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados ,balancegeneralclienteImplementable,balancegeneralclienteImplementableHome);
	}
	
	public void mostrarImportacionBalanceGeneralClientes() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionBalanceGeneralCliente();
		
		this.abrirFrameImportacionBalanceGeneralCliente();		
		
			
		//this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados ,balancegeneralclienteImplementable,balancegeneralclienteImplementableHome);
	}
	
	public void importarBalanceGeneralClientes() throws Exception {		
	
	}
	
	public void exportarBalanceGeneralClientesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelBalanceGeneralClientesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoBalanceGeneralClientesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlBalanceGeneralClientesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Balance General Cliente",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarBalanceGeneralCliente(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarBalanceGeneralCliente(balancegeneralclienteAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//balancegeneralclienteAux.setsDetalleGeneralEntityReporte(balancegeneralclienteAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarBalanceGeneralCliente(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=balancegeneralcliente.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getcaja_bancos_disponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getcuentas_por_cobrar_clientes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getinventario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getotros_activos_corrientes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.gettotal_activos_corrientes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getbienes_inmuebles().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getbienes_muebles().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getotros_activos_no_corrientes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.gettotal_activos_no_corrientes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getventas_mensuales().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getcosto_ventas_mensuales().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getutilidad_bruta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getgastos_operativos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getsueldos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getservicios().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getarriendos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getimpuestos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getutilidad_operativa().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getgastos_familiares().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getexcedente_antes_dividendos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getdividendos_bancos_otros().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getexedente_neto_mensual().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getdeudas_bancarias().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getcuentas_por_pagar().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getanticipos_recibos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getotras_cuentas_por_pagar().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getotras_deudas_familiares().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.gettotal_pasivo_corriente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getdeudas_bancarias_largo_plazo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getotros_pasivos_largo_plazo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.gettotal_pasivo_no_corriente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.gettotal_pasivo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getpatrimonio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=balancegeneralcliente.getdescripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("BalanceGeneralClientes");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelBalanceGeneralCliente(row);				
				iRow++;
			}				
			
			for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelBalanceGeneralCliente(balancegeneralclienteAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlBalanceGeneralClientesSeleccionados() throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();		
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"balancegeneralcliente.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("balancegeneralclientes");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("balancegeneralcliente");
			//elementRoot.appendChild(element);
		
			for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
				element = document.createElement("balancegeneralcliente");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlBalanceGeneralCliente(balancegeneralclienteAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Balance General Cliente",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelBalanceGeneralCliente(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CAJABANCOSDISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORCOBRARCLIENTES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_INVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSCORRIENTES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSCORRIENTES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESINMUEBLES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_BIENESMUEBLES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSACTIVOSNOCORRIENTES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALACTIVOSNOCORRIENTES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_VENTASMENSUALES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_COSTOVENTASMENSUALES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADBRUTA);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSOPERATIVOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SUELDOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_SERVICIOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ARRIENDOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_IMPUESTOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_UTILIDADOPERATIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_GASTOSFAMILIARES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXCEDENTEANTESDIVIDENDOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DIVIDENDOSBANCOSOTROS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_EXEDENTENETOMENSUAL);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIAS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_CUENTASPORPAGAR);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_ANTICIPOSRECIBOS);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASCUENTASPORPAGAR);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTRASDEUDASFAMILIARES);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVOCORRIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DEUDASBANCARIASLARGOPLAZO);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_OTROSPASIVOSLARGOPLAZO);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVONOCORRIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_TOTALPASIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_PATRIMONIO);
		cell = row.createCell(iColumn++);cell.setCellValue(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getcaja_bancos_disponible());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getcuentas_por_cobrar_clientes());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getinventario());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getotros_activos_corrientes());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.gettotal_activos_corrientes());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getbienes_inmuebles());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getbienes_muebles());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getotros_activos_no_corrientes());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.gettotal_activos_no_corrientes());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getventas_mensuales());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getcosto_ventas_mensuales());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getutilidad_bruta());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getgastos_operativos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getsueldos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getservicios());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getarriendos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getimpuestos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getutilidad_operativa());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getgastos_familiares());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getexcedente_antes_dividendos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getdividendos_bancos_otros());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getexedente_neto_mensual());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getdeudas_bancarias());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getcuentas_por_pagar());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getanticipos_recibos());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getotras_cuentas_por_pagar());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getotras_deudas_familiares());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.gettotal_pasivo_corriente());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getdeudas_bancarias_largo_plazo());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getotros_pasivos_largo_plazo());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.gettotal_pasivo_no_corriente());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.gettotal_pasivo());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getpatrimonio());
		cell = row.createCell(iColumn++);cell.setCellValue(balancegeneralcliente.getdescripcion());				
	}
	
	public void setFilaDatosExportarXmlBalanceGeneralCliente(BalanceGeneralCliente balancegeneralcliente,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(BalanceGeneralClienteConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(balancegeneralcliente.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(BalanceGeneralClienteConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(balancegeneralcliente.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(BalanceGeneralClienteConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(balancegeneralcliente.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementcliente_descripcion = document.createElement(BalanceGeneralClienteConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(balancegeneralcliente.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementcaja_bancos_disponible = document.createElement(BalanceGeneralClienteConstantesFunciones.CAJABANCOSDISPONIBLE);
		elementcaja_bancos_disponible.appendChild(document.createTextNode(balancegeneralcliente.getcaja_bancos_disponible().toString().trim()));
		element.appendChild(elementcaja_bancos_disponible);

		Element elementcuentas_por_cobrar_clientes = document.createElement(BalanceGeneralClienteConstantesFunciones.CUENTASPORCOBRARCLIENTES);
		elementcuentas_por_cobrar_clientes.appendChild(document.createTextNode(balancegeneralcliente.getcuentas_por_cobrar_clientes().toString().trim()));
		element.appendChild(elementcuentas_por_cobrar_clientes);

		Element elementinventario = document.createElement(BalanceGeneralClienteConstantesFunciones.INVENTARIO);
		elementinventario.appendChild(document.createTextNode(balancegeneralcliente.getinventario().toString().trim()));
		element.appendChild(elementinventario);

		Element elementotros_activos_corrientes = document.createElement(BalanceGeneralClienteConstantesFunciones.OTROSACTIVOSCORRIENTES);
		elementotros_activos_corrientes.appendChild(document.createTextNode(balancegeneralcliente.getotros_activos_corrientes().toString().trim()));
		element.appendChild(elementotros_activos_corrientes);

		Element elementtotal_activos_corrientes = document.createElement(BalanceGeneralClienteConstantesFunciones.TOTALACTIVOSCORRIENTES);
		elementtotal_activos_corrientes.appendChild(document.createTextNode(balancegeneralcliente.gettotal_activos_corrientes().toString().trim()));
		element.appendChild(elementtotal_activos_corrientes);

		Element elementbienes_inmuebles = document.createElement(BalanceGeneralClienteConstantesFunciones.BIENESINMUEBLES);
		elementbienes_inmuebles.appendChild(document.createTextNode(balancegeneralcliente.getbienes_inmuebles().toString().trim()));
		element.appendChild(elementbienes_inmuebles);

		Element elementbienes_muebles = document.createElement(BalanceGeneralClienteConstantesFunciones.BIENESMUEBLES);
		elementbienes_muebles.appendChild(document.createTextNode(balancegeneralcliente.getbienes_muebles().toString().trim()));
		element.appendChild(elementbienes_muebles);

		Element elementotros_activos_no_corrientes = document.createElement(BalanceGeneralClienteConstantesFunciones.OTROSACTIVOSNOCORRIENTES);
		elementotros_activos_no_corrientes.appendChild(document.createTextNode(balancegeneralcliente.getotros_activos_no_corrientes().toString().trim()));
		element.appendChild(elementotros_activos_no_corrientes);

		Element elementtotal_activos_no_corrientes = document.createElement(BalanceGeneralClienteConstantesFunciones.TOTALACTIVOSNOCORRIENTES);
		elementtotal_activos_no_corrientes.appendChild(document.createTextNode(balancegeneralcliente.gettotal_activos_no_corrientes().toString().trim()));
		element.appendChild(elementtotal_activos_no_corrientes);

		Element elementventas_mensuales = document.createElement(BalanceGeneralClienteConstantesFunciones.VENTASMENSUALES);
		elementventas_mensuales.appendChild(document.createTextNode(balancegeneralcliente.getventas_mensuales().toString().trim()));
		element.appendChild(elementventas_mensuales);

		Element elementcosto_ventas_mensuales = document.createElement(BalanceGeneralClienteConstantesFunciones.COSTOVENTASMENSUALES);
		elementcosto_ventas_mensuales.appendChild(document.createTextNode(balancegeneralcliente.getcosto_ventas_mensuales().toString().trim()));
		element.appendChild(elementcosto_ventas_mensuales);

		Element elementutilidad_bruta = document.createElement(BalanceGeneralClienteConstantesFunciones.UTILIDADBRUTA);
		elementutilidad_bruta.appendChild(document.createTextNode(balancegeneralcliente.getutilidad_bruta().toString().trim()));
		element.appendChild(elementutilidad_bruta);

		Element elementgastos_operativos = document.createElement(BalanceGeneralClienteConstantesFunciones.GASTOSOPERATIVOS);
		elementgastos_operativos.appendChild(document.createTextNode(balancegeneralcliente.getgastos_operativos().toString().trim()));
		element.appendChild(elementgastos_operativos);

		Element elementsueldos = document.createElement(BalanceGeneralClienteConstantesFunciones.SUELDOS);
		elementsueldos.appendChild(document.createTextNode(balancegeneralcliente.getsueldos().toString().trim()));
		element.appendChild(elementsueldos);

		Element elementservicios = document.createElement(BalanceGeneralClienteConstantesFunciones.SERVICIOS);
		elementservicios.appendChild(document.createTextNode(balancegeneralcliente.getservicios().toString().trim()));
		element.appendChild(elementservicios);

		Element elementarriendos = document.createElement(BalanceGeneralClienteConstantesFunciones.ARRIENDOS);
		elementarriendos.appendChild(document.createTextNode(balancegeneralcliente.getarriendos().toString().trim()));
		element.appendChild(elementarriendos);

		Element elementimpuestos = document.createElement(BalanceGeneralClienteConstantesFunciones.IMPUESTOS);
		elementimpuestos.appendChild(document.createTextNode(balancegeneralcliente.getimpuestos().toString().trim()));
		element.appendChild(elementimpuestos);

		Element elementutilidad_operativa = document.createElement(BalanceGeneralClienteConstantesFunciones.UTILIDADOPERATIVA);
		elementutilidad_operativa.appendChild(document.createTextNode(balancegeneralcliente.getutilidad_operativa().toString().trim()));
		element.appendChild(elementutilidad_operativa);

		Element elementgastos_familiares = document.createElement(BalanceGeneralClienteConstantesFunciones.GASTOSFAMILIARES);
		elementgastos_familiares.appendChild(document.createTextNode(balancegeneralcliente.getgastos_familiares().toString().trim()));
		element.appendChild(elementgastos_familiares);

		Element elementexcedente_antes_dividendos = document.createElement(BalanceGeneralClienteConstantesFunciones.EXCEDENTEANTESDIVIDENDOS);
		elementexcedente_antes_dividendos.appendChild(document.createTextNode(balancegeneralcliente.getexcedente_antes_dividendos().toString().trim()));
		element.appendChild(elementexcedente_antes_dividendos);

		Element elementdividendos_bancos_otros = document.createElement(BalanceGeneralClienteConstantesFunciones.DIVIDENDOSBANCOSOTROS);
		elementdividendos_bancos_otros.appendChild(document.createTextNode(balancegeneralcliente.getdividendos_bancos_otros().toString().trim()));
		element.appendChild(elementdividendos_bancos_otros);

		Element elementexedente_neto_mensual = document.createElement(BalanceGeneralClienteConstantesFunciones.EXEDENTENETOMENSUAL);
		elementexedente_neto_mensual.appendChild(document.createTextNode(balancegeneralcliente.getexedente_neto_mensual().toString().trim()));
		element.appendChild(elementexedente_neto_mensual);

		Element elementdeudas_bancarias = document.createElement(BalanceGeneralClienteConstantesFunciones.DEUDASBANCARIAS);
		elementdeudas_bancarias.appendChild(document.createTextNode(balancegeneralcliente.getdeudas_bancarias().toString().trim()));
		element.appendChild(elementdeudas_bancarias);

		Element elementcuentas_por_pagar = document.createElement(BalanceGeneralClienteConstantesFunciones.CUENTASPORPAGAR);
		elementcuentas_por_pagar.appendChild(document.createTextNode(balancegeneralcliente.getcuentas_por_pagar().toString().trim()));
		element.appendChild(elementcuentas_por_pagar);

		Element elementanticipos_recibos = document.createElement(BalanceGeneralClienteConstantesFunciones.ANTICIPOSRECIBOS);
		elementanticipos_recibos.appendChild(document.createTextNode(balancegeneralcliente.getanticipos_recibos().toString().trim()));
		element.appendChild(elementanticipos_recibos);

		Element elementotras_cuentas_por_pagar = document.createElement(BalanceGeneralClienteConstantesFunciones.OTRASCUENTASPORPAGAR);
		elementotras_cuentas_por_pagar.appendChild(document.createTextNode(balancegeneralcliente.getotras_cuentas_por_pagar().toString().trim()));
		element.appendChild(elementotras_cuentas_por_pagar);

		Element elementotras_deudas_familiares = document.createElement(BalanceGeneralClienteConstantesFunciones.OTRASDEUDASFAMILIARES);
		elementotras_deudas_familiares.appendChild(document.createTextNode(balancegeneralcliente.getotras_deudas_familiares().toString().trim()));
		element.appendChild(elementotras_deudas_familiares);

		Element elementtotal_pasivo_corriente = document.createElement(BalanceGeneralClienteConstantesFunciones.TOTALPASIVOCORRIENTE);
		elementtotal_pasivo_corriente.appendChild(document.createTextNode(balancegeneralcliente.gettotal_pasivo_corriente().toString().trim()));
		element.appendChild(elementtotal_pasivo_corriente);

		Element elementdeudas_bancarias_largo_plazo = document.createElement(BalanceGeneralClienteConstantesFunciones.DEUDASBANCARIASLARGOPLAZO);
		elementdeudas_bancarias_largo_plazo.appendChild(document.createTextNode(balancegeneralcliente.getdeudas_bancarias_largo_plazo().toString().trim()));
		element.appendChild(elementdeudas_bancarias_largo_plazo);

		Element elementotros_pasivos_largo_plazo = document.createElement(BalanceGeneralClienteConstantesFunciones.OTROSPASIVOSLARGOPLAZO);
		elementotros_pasivos_largo_plazo.appendChild(document.createTextNode(balancegeneralcliente.getotros_pasivos_largo_plazo().toString().trim()));
		element.appendChild(elementotros_pasivos_largo_plazo);

		Element elementtotal_pasivo_no_corriente = document.createElement(BalanceGeneralClienteConstantesFunciones.TOTALPASIVONOCORRIENTE);
		elementtotal_pasivo_no_corriente.appendChild(document.createTextNode(balancegeneralcliente.gettotal_pasivo_no_corriente().toString().trim()));
		element.appendChild(elementtotal_pasivo_no_corriente);

		Element elementtotal_pasivo = document.createElement(BalanceGeneralClienteConstantesFunciones.TOTALPASIVO);
		elementtotal_pasivo.appendChild(document.createTextNode(balancegeneralcliente.gettotal_pasivo().toString().trim()));
		element.appendChild(elementtotal_pasivo);

		Element elementpatrimonio = document.createElement(BalanceGeneralClienteConstantesFunciones.PATRIMONIO);
		elementpatrimonio.appendChild(document.createTextNode(balancegeneralcliente.getpatrimonio().toString().trim()));
		element.appendChild(elementpatrimonio);

		Element elementdescripcion = document.createElement(BalanceGeneralClienteConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(balancegeneralcliente.getdescripcion().trim()));
		element.appendChild(elementdescripcion);
	}
	
	public void generarReporteGroupGenericoBalanceGeneralClientesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados=new ArrayList<BalanceGeneralCliente>();
		
		balancegeneralclientesSeleccionados=this.getBalanceGeneralClientesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoBalanceGeneralCliente(balancegeneralclientesSeleccionados);
		
		this.generarReporteBalanceGeneralClientes("Todos",balancegeneralclientesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoBalanceGeneralCliente(ArrayList<BalanceGeneralCliente> balancegeneralclientesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(BalanceGeneralCliente balancegeneralclienteAux:balancegeneralclientesSeleccionados) {
				balancegeneralclienteAux.setsDetalleGeneralEntityReporte(balancegeneralclienteAux.toString());
			
				if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					balancegeneralclienteAux.setsDescripcionGeneralEntityReporte1(balancegeneralclienteAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					balancegeneralclienteAux.setsDescripcionGeneralEntityReporte1(balancegeneralclienteAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BalanceGeneralClienteConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					balancegeneralclienteAux.setsDescripcionGeneralEntityReporte1(balancegeneralclienteAux.getdescripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BalanceGeneralClienteConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesBalanceGeneralCliente(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoBalanceGeneralCliente=true;
				this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=true;
				this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=true;
			}
			
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=true;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=true;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=true;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
			this.isVisibilidadCeldaModificarBalanceGeneralCliente=true;
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaCancelarBalanceGeneralCliente=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				} else {
					this.isVisibilidadCeldaGuardarBalanceGeneralCliente=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(BalanceGeneralClienteJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=true;
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=true;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=true;
		} else {
			this.actualizarEstadoPanelsBalanceGeneralCliente(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarBalanceGeneralCliente=false;
			//this.isVisibilidadCeldaVerFormBalanceGeneralCliente=false;
			this.isVisibilidadCeldaDuplicarBalanceGeneralCliente=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!balancegeneralclienteSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
		} else {
			this.isVisibilidadCeldaNuevoBalanceGeneralCliente=false;
			this.isVisibilidadCeldaGuardarCambiosBalanceGeneralCliente=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			if(!balancegeneralclienteSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;												
			}
			
			this.jButtonCerrarBalanceGeneralCliente.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesBalanceGeneralCliente=false;
		}
		
		if(!this.permiteMantenimiento(this.balancegeneralcliente)) {
			this.isVisibilidadCeldaActualizarBalanceGeneralCliente=false;
			this.isVisibilidadCeldaEliminarBalanceGeneralCliente=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesBalanceGeneralCliente() {
	}
	
	public void actualizarEstadoPanelsBalanceGeneralCliente(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosEdicionBalanceGeneralCliente.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBalanceGeneralCliente!=null) {
				this.jScrollPanelDatosBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelPaginacionBalanceGeneralCliente!=null) {
				this.jPanelPaginacionBalanceGeneralCliente.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
					this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.balancegeneralclienteSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBalanceGeneralCliente!=null) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesBalanceGeneralCliente!=null) {
				this.jPanelParametrosReportesBalanceGeneralCliente.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasBalanceGeneralCliente.remove(jPanelFK_IdClienteBalanceGeneralCliente);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasBalanceGeneralCliente.remove(jPanelFK_IdClienteBalanceGeneralCliente);}
		}
		
	}
	
	
	
	

	public String registrarSesionBalanceGeneralClienteParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(balancegeneralclienteSessionBean==null) {
				balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(balancegeneralclienteSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.balancegeneralclienteFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(BalanceGeneralClienteConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionBalanceGeneralCliente(true);
			//clienteSessionBean.setlidBalanceGeneralClienteActual(this.idBalanceGeneralClienteActual);

			balancegeneralclienteSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBalanceGeneralCliente(true);
			balancegeneralclienteSessionBean.setlIdBalanceGeneralClienteActualForeignKey(this.idBalanceGeneralClienteActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//BalanceGeneralClienteSessionBean balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
		
		if(this.balancegeneralclienteSessionBean==null) {
			this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
		}
		
		this.balancegeneralclienteSessionBean.setsUltimaBusquedaBalanceGeneralCliente(this.getsAccionBusqueda());
		this.balancegeneralclienteSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.balancegeneralclienteSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			balancegeneralclienteSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			balancegeneralclienteSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//BalanceGeneralClienteSessionBean balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
		
		if(this.balancegeneralclienteSessionBean==null) {
			this.balancegeneralclienteSessionBean=new BalanceGeneralClienteSessionBean();
		}
		
		if(this.balancegeneralclienteSessionBean.getsUltimaBusquedaBalanceGeneralCliente()!=null&&!this.balancegeneralclienteSessionBean.getsUltimaBusquedaBalanceGeneralCliente().equals("")) {
			this.setsAccionBusqueda(balancegeneralclienteSessionBean.getsUltimaBusquedaBalanceGeneralCliente());
			this.setiNumeroPaginacion(balancegeneralclienteSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(balancegeneralclienteSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(balancegeneralclienteSessionBean.getid_cliente());
				balancegeneralclienteSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(balancegeneralclienteSessionBean.getid_empresa());
				balancegeneralclienteSessionBean.setid_empresa(-1L);
			}
		}
		
		this.balancegeneralclienteSessionBean.setsUltimaBusquedaBalanceGeneralCliente("");
		this.balancegeneralclienteSessionBean.setiNumeroPaginacion(BalanceGeneralClienteConstantesFunciones.INUMEROPAGINACION);
		this.balancegeneralclienteSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaBalanceGeneralCliente(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioBalanceGeneralCliente() {
		this.updateBorderResaltarBusquedasFormularioBalanceGeneralCliente();
		this.updateVisibilidadBusquedasFormularioBalanceGeneralCliente();
		this.updateHabilitarBusquedasFormularioBalanceGeneralCliente();
	}
	
	public void updateBorderResaltarBusquedasFormularioBalanceGeneralCliente() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponents().length>0) {
	

		if(this.balancegeneralclienteConstantesFunciones.resaltarFK_IdClienteBalanceGeneralCliente!=null) {
			index= this.jTabbedPaneBusquedasBalanceGeneralCliente.indexOfComponent(this.jPanelFK_IdClienteBalanceGeneralCliente);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponent(index);
				jPanel.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarFK_IdClienteBalanceGeneralCliente);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioBalanceGeneralCliente() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasBalanceGeneralCliente.indexOfComponent(this.jPanelFK_IdClienteBalanceGeneralCliente);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarFK_IdClienteBalanceGeneralCliente);
			if(!this.balancegeneralclienteConstantesFunciones.mostrarFK_IdClienteBalanceGeneralCliente && index>-1) {
				this.jTabbedPaneBusquedasBalanceGeneralCliente.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioBalanceGeneralCliente() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasBalanceGeneralCliente.indexOfComponent(this.jPanelFK_IdClienteBalanceGeneralCliente);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.balancegeneralclienteConstantesFunciones.activarFK_IdClienteBalanceGeneralCliente);
				this.jTabbedPaneBusquedasBalanceGeneralCliente.setEnabledAt(index,this.balancegeneralclienteConstantesFunciones.activarFK_IdClienteBalanceGeneralCliente);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaBalanceGeneralCliente(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasBalanceGeneralCliente.indexOfComponent(this.jPanelFK_IdClienteBalanceGeneralCliente);

			this.jTabbedPaneBusquedasBalanceGeneralCliente.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBalanceGeneralCliente.getComponent(index);

			this.balancegeneralclienteConstantesFunciones.setResaltarFK_IdClienteBalanceGeneralCliente(resaltar);

			jPanel.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarFK_IdClienteBalanceGeneralCliente);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarBalanceGeneralCliente.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioBalanceGeneralCliente() throws Exception {

		if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioBalanceGeneralCliente();
		this.updateVisibilidadResaltarControlesFormularioBalanceGeneralCliente();
		this.updateHabilitarResaltarControlesFormularioBalanceGeneralCliente();
		
	}
	
	public void updateBorderResaltarControlesFormularioBalanceGeneralCliente() throws Exception {
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.balancegeneralclienteConstantesFunciones.resaltaridBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltaridBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarid_empresaBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarid_empresaBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarid_clienteBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarid_clienteBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarcaja_bancos_disponibleBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarcaja_bancos_disponibleBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_cobrar_clientesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_cobrar_clientesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarinventarioBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarinventarioBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_corrientesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_corrientesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_corrientesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_corrientesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarbienes_inmueblesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarbienes_inmueblesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarbienes_mueblesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarbienes_mueblesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_no_corrientesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarotros_activos_no_corrientesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_no_corrientesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltartotal_activos_no_corrientesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarventas_mensualesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarventas_mensualesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarcosto_ventas_mensualesBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarcosto_ventas_mensualesBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_brutaBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_brutaBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltargastos_operativosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltargastos_operativosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarsueldosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarsueldosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarserviciosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarserviciosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltararriendosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltararriendosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarimpuestosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarimpuestosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_operativaBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarutilidad_operativaBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltargastos_familiaresBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltargastos_familiaresBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarexcedente_antes_dividendosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarexcedente_antes_dividendosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltardividendos_bancos_otrosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltardividendos_bancos_otrosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarexedente_neto_mensualBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarexedente_neto_mensualBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancariasBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancariasBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_pagarBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarcuentas_por_pagarBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltaranticipos_recibosBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltaranticipos_recibosBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarotras_cuentas_por_pagarBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarotras_cuentas_por_pagarBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarotras_deudas_familiaresBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarotras_deudas_familiaresBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_corrienteBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_corrienteBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancarias_largo_plazoBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltardeudas_bancarias_largo_plazoBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarotros_pasivos_largo_plazoBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarotros_pasivos_largo_plazoBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_no_corrienteBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivo_no_corrienteBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivoBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltartotal_pasivoBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltarpatrimonioBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltarpatrimonioBalanceGeneralCliente);}
		if(this.balancegeneralclienteConstantesFunciones.resaltardescripcionBalanceGeneralCliente!=null && this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setBorder(this.balancegeneralclienteConstantesFunciones.resaltardescripcionBalanceGeneralCliente);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioBalanceGeneralCliente() throws Exception {		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
	
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostraridBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelidBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostraridBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarid_empresaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelid_empresaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarid_empresaBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarid_clienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelid_clienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarid_clienteBalanceGeneralCliente);
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarid_clienteBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcaja_bancos_disponibleBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelcaja_bancos_disponibleBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcaja_bancos_disponibleBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_cobrar_clientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelcuentas_por_cobrar_clientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_cobrar_clientesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarinventarioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelinventarioBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarinventarioBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelotros_activos_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_corrientesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneltotal_activos_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_corrientesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarbienes_inmueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelbienes_inmueblesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarbienes_inmueblesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarbienes_mueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelbienes_mueblesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarbienes_mueblesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelotros_activos_no_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_activos_no_corrientesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneltotal_activos_no_corrientesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_activos_no_corrientesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelventas_mensualesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarventas_mensualesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcosto_ventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelcosto_ventas_mensualesBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcosto_ventas_mensualesBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_brutaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelutilidad_brutaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_brutaBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrargastos_operativosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelgastos_operativosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrargastos_operativosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarsueldosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelsueldosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarsueldosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarserviciosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelserviciosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarserviciosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrararriendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelarriendosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrararriendosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarimpuestosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelimpuestosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarimpuestosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_operativaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelutilidad_operativaBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarutilidad_operativaBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrargastos_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelgastos_familiaresBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrargastos_familiaresBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarexcedente_antes_dividendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelexcedente_antes_dividendosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarexcedente_antes_dividendosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardividendos_bancos_otrosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneldividendos_bancos_otrosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardividendos_bancos_otrosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarexedente_neto_mensualBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelexedente_neto_mensualBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarexedente_neto_mensualBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancariasBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneldeudas_bancariasBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancariasBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelcuentas_por_pagarBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarcuentas_por_pagarBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostraranticipos_recibosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelanticipos_recibosBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostraranticipos_recibosBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotras_cuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelotras_cuentas_por_pagarBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotras_cuentas_por_pagarBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotras_deudas_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelotras_deudas_familiaresBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotras_deudas_familiaresBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneltotal_pasivo_corrienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_corrienteBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancarias_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneldeudas_bancarias_largo_plazoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardeudas_bancarias_largo_plazoBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_pasivos_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelotros_pasivos_largo_plazoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarotros_pasivos_largo_plazoBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_no_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneltotal_pasivo_no_corrienteBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivo_no_corrienteBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneltotal_pasivoBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrartotal_pasivoBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarpatrimonioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPanelpatrimonioBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrarpatrimonioBalanceGeneralCliente);
		//this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardescripcionBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jPaneldescripcionBalanceGeneralCliente.setVisible(this.balancegeneralclienteConstantesFunciones.mostrardescripcionBalanceGeneralCliente);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioBalanceGeneralCliente() throws Exception {
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormBalanceGeneralCliente!=null) {
	
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jLabelidBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activaridBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_empresaBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarid_empresaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jComboBoxid_clienteBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarid_clienteBalanceGeneralCliente);
			this.jInternalFrameDetalleFormBalanceGeneralCliente.jButtonid_clienteBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarid_clienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcaja_bancos_disponibleBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarcaja_bancos_disponibleBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_cobrar_clientesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarcuentas_por_cobrar_clientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldinventarioBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarinventarioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_corrientesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarotros_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_corrientesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activartotal_activos_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_inmueblesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarbienes_inmueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldbienes_mueblesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarbienes_mueblesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_activos_no_corrientesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarotros_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_activos_no_corrientesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activartotal_activos_no_corrientesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldventas_mensualesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcosto_ventas_mensualesBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarcosto_ventas_mensualesBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_brutaBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarutilidad_brutaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_operativosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activargastos_operativosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldsueldosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarsueldosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldserviciosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarserviciosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldarriendosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activararriendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldimpuestosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarimpuestosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldutilidad_operativaBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarutilidad_operativaBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldgastos_familiaresBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activargastos_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexcedente_antes_dividendosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarexcedente_antes_dividendosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddividendos_bancos_otrosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activardividendos_bancos_otrosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldexedente_neto_mensualBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarexedente_neto_mensualBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancariasBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activardeudas_bancariasBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldcuentas_por_pagarBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarcuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldanticipos_recibosBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activaranticipos_recibosBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_cuentas_por_pagarBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarotras_cuentas_por_pagarBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotras_deudas_familiaresBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarotras_deudas_familiaresBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_corrienteBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFielddeudas_bancarias_largo_plazoBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activardeudas_bancarias_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldotros_pasivos_largo_plazoBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarotros_pasivos_largo_plazoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivo_no_corrienteBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activartotal_pasivo_no_corrienteBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldtotal_pasivoBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activartotal_pasivoBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextFieldpatrimonioBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activarpatrimonioBalanceGeneralCliente);
		this.jInternalFrameDetalleFormBalanceGeneralCliente.jTextAreadescripcionBalanceGeneralCliente.setEnabled(this.balancegeneralclienteConstantesFunciones.activardescripcionBalanceGeneralCliente);
		}
	}
	
		
}