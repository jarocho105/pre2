/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.cartera.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.cartera.util.DetalleProveConstantesFunciones;
import com.bydan.erp.cartera.util.DetalleProveParameterReturnGeneral;
//import com.bydan.erp.cartera.util.DetalleProveParameterGeneral;
//import com.bydan.erp.cartera.presentation.report.source.DetalleProveBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.cartera.resources.reportes.AuxiliarReportes;


import com.bydan.erp.cartera.util.*;
import com.bydan.erp.cartera.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.cartera.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleProveBeanSwingJInternalFrame extends DetalleProveJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleProveBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleProve> detalleproveValidator = new ClassValidator<DetalleProve>(DetalleProve.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleProve detalleprove;	
	public DetalleProve detalleproveAux;
	public DetalleProve detalleproveAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleProve detalleproveTotales;
	public Long idDetalleProveActual;
	public Long iIdNuevoDetalleProve=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboSucursalMovimiento="";

	public List<Sucursal> sucursalmovimientosForeignKey;

	public List<Sucursal> getsucursalmovimientosForeignKey() {
		return sucursalmovimientosForeignKey;
	}

	public void setsucursalmovimientosForeignKey(List<Sucursal> sucursalmovimientosForeignKey) {
		this.sucursalmovimientosForeignKey = sucursalmovimientosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalmovimientoForeignKey;

	public Sucursal getsucursalmovimientoForeignKey() {
		return sucursalmovimientoForeignKey;
	}

	public void setsucursalmovimientoForeignKey(Sucursal sucursalmovimientoForeignKey) {
		this.sucursalmovimientoForeignKey = sucursalmovimientoForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboOrdenCompra="";

	public List<OrdenCompra> ordencomprasForeignKey;

	public List<OrdenCompra> getordencomprasForeignKey() {
		return ordencomprasForeignKey;
	}

	public void setordencomprasForeignKey(List<OrdenCompra> ordencomprasForeignKey) {
		this.ordencomprasForeignKey = ordencomprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public OrdenCompra ordencompraForeignKey;

	public OrdenCompra getordencompraForeignKey() {
		return ordencompraForeignKey;
	}

	public void setordencompraForeignKey(OrdenCompra ordencompraForeignKey) {
		this.ordencompraForeignKey = ordencompraForeignKey;
	}

	public String sFinalQueryComboEstadoDetalleCliente="";

	public List<EstadoDetalleCliente> estadodetalleclientesForeignKey;

	public List<EstadoDetalleCliente> getestadodetalleclientesForeignKey() {
		return estadodetalleclientesForeignKey;
	}

	public void setestadodetalleclientesForeignKey(List<EstadoDetalleCliente> estadodetalleclientesForeignKey) {
		this.estadodetalleclientesForeignKey = estadodetalleclientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoDetalleCliente estadodetalleclienteForeignKey;

	public EstadoDetalleCliente getestadodetalleclienteForeignKey() {
		return estadodetalleclienteForeignKey;
	}

	public void setestadodetalleclienteForeignKey(EstadoDetalleCliente estadodetalleclienteForeignKey) {
		this.estadodetalleclienteForeignKey = estadodetalleclienteForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	
	

	public Boolean isTienePermisosPagoAuto=false;

	public Boolean getIsTienePermisosPagoAuto() {
		return isTienePermisosPagoAuto;
	}

	public void setIsTienePermisosPagoAuto(Boolean isTienePermisosPagoAuto) {
		this.isTienePermisosPagoAuto= isTienePermisosPagoAuto;
	}


	public Boolean isTienePermisosAutoriPago=false;

	public Boolean getIsTienePermisosAutoriPago() {
		return isTienePermisosAutoriPago;
	}

	public void setIsTienePermisosAutoriPago(Boolean isTienePermisosAutoriPago) {
		this.isTienePermisosAutoriPago= isTienePermisosAutoriPago;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleProve;
	public Boolean isPermisoNuevoDetalleProve;
	public Boolean isPermisoActualizarDetalleProve;
	public Boolean isPermisoActualizarOriginalDetalleProve;
	public Boolean isPermisoEliminarDetalleProve;
	public Boolean isPermisoGuardarCambiosDetalleProve;
	public Boolean isPermisoConsultaDetalleProve;
	public Boolean isPermisoBusquedaDetalleProve;
	public Boolean isPermisoReporteDetalleProve;
	public Boolean isPermisoPaginacionMedioDetalleProve;
	public Boolean isPermisoPaginacionAltoDetalleProve;
	public Boolean isPermisoPaginacionTodoDetalleProve;
	public Boolean isPermisoCopiarDetalleProve;
	public Boolean isPermisoVerFormDetalleProve;
	public Boolean isPermisoDuplicarDetalleProve;
	public Boolean isPermisoOrdenDetalleProve;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleProveParameterReturnGeneral detalleproveReturnGeneral;
	public DetalleProveParameterReturnGeneral detalleproveParameterGeneral;
	
	

	public PagoAutoLogic pagoautoLogic=null;

	public PagoAutoLogic getPagoAutoLogic() {
		return pagoautoLogic;
	}

	public void setPagoAutoLogic(PagoAutoLogic pagoautoLogic) {
		this.pagoautoLogic = pagoautoLogic;
	}


	public AutoriPagoLogic autoripagoLogic=null;

	public AutoriPagoLogic getAutoriPagoLogic() {
		return autoripagoLogic;
	}

	public void setAutoriPagoLogic(AutoriPagoLogic autoripagoLogic) {
		this.autoripagoLogic = autoripagoLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleProve=false;
	public Boolean esParaAccionDesdeFormularioDetalleProve=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleProveSessionBeanAdditional detalleproveSessionBeanAdditional=null;
	
	public DetalleProveSessionBeanAdditional getDetalleProveSessionBeanAdditional() {
		return this.detalleproveSessionBeanAdditional;
	}
	
	public void setDetalleProveSessionBeanAdditional(DetalleProveSessionBeanAdditional detalleproveSessionBeanAdditional) {
		try {
			this.detalleproveSessionBeanAdditional=detalleproveSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleProveBeanSwingJInternalFrameAdditional detalleproveBeanSwingJInternalFrameAdditional=null;
	//public class DetalleProveBeanSwingJInternalFrame
	
	public DetalleProveBeanSwingJInternalFrameAdditional getDetalleProveBeanSwingJInternalFrameAdditional() {
		return this.detalleproveBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleProveBeanSwingJInternalFrameAdditional(DetalleProveBeanSwingJInternalFrameAdditional detalleproveBeanSwingJInternalFrameAdditional) {
		try {
			this.detalleproveBeanSwingJInternalFrameAdditional=detalleproveBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleProveLogic detalleproveLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleProve detalleproveBean;
	public DetalleProveConstantesFunciones detalleproveConstantesFunciones;
	//public DetalleProveParameterReturnGeneral detalleproveReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public SucursalLogic sucursalmovimientoLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public ModuloLogic moduloLogic;
	public MonedaLogic monedaLogic;
	public ClienteLogic clienteLogic;
	public TransaccionLogic transaccionLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	public AsientoContableLogic asientocontableLogic;
	public FacturaLogic facturaLogic;
	public OrdenCompraLogic ordencompraLogic;
	public EstadoDetalleClienteLogic estadodetalleclienteLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleProve> detalleproves;	
	//public List<DetalleProve> detalleprovesEliminados;
	//public List<DetalleProve> detalleprovesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleProve=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleProve=true;
	public Boolean isVisibilidadCeldaCopiarDetalleProve=true;
	public Boolean isVisibilidadCeldaVerFormDetalleProve=true;
	public Boolean isVisibilidadCeldaOrdenDetalleProve=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
	public Boolean isVisibilidadCeldaModificarDetalleProve=false;
	public Boolean isVisibilidadCeldaActualizarDetalleProve=false;
	public Boolean isVisibilidadCeldaEliminarDetalleProve=false;
	public Boolean isVisibilidadCeldaCancelarDetalleProve=false;
	public Boolean isVisibilidadCeldaGuardarDetalleProve=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleProve=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdDetalleProve=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoDetalleCliente=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdOrdenCompra=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	
	public Long getiIdNuevoDetalleProve() {
		return this.iIdNuevoDetalleProve;
	}

	public void setiIdNuevoDetalleProve(Long iIdNuevoDetalleProve) {
		this.iIdNuevoDetalleProve = iIdNuevoDetalleProve;
	}
	
	public Long getidDetalleProveActual() {
		return this.idDetalleProveActual;
	}

	public void setidDetalleProveActual(Long idDetalleProveActual) {
		this.idDetalleProveActual = idDetalleProveActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleProve getdetalleprove() {
		return this.detalleprove;
	}

	public void setdetalleprove(DetalleProve detalleprove) {
		this.detalleprove = detalleprove;
	}
	
	public DetalleProve getdetalleproveAux() {
		return this.detalleproveAux;
	}

	public void setdetalleproveAux(DetalleProve detalleproveAux) {
		this.detalleproveAux = detalleproveAux;
	}				
	
	public DetalleProve getdetalleproveAnterior() {
		return this.detalleproveAnterior;
	}

	public void setdetalleproveAnterior(DetalleProve detalleproveAnterior) {
		this.detalleproveAnterior = detalleproveAnterior;
	}	
	
	public DetalleProve getdetalleproveTotales() {
		return this.detalleproveTotales;
	}

	public void setdetalleproveTotales(DetalleProve detalleproveTotales) {
		this.detalleproveTotales = detalleproveTotales;
	}	
	
	public DetalleProve getdetalleproveBean() {
		return this.detalleproveBean;
	}

	public void setdetalleproveBean(DetalleProve detalleproveBean) {
		this.detalleproveBean = detalleproveBean;
	}	
	
	public DetalleProveParameterReturnGeneral getdetalleproveReturnGeneral() {
		return this.detalleproveReturnGeneral;
	}

	public void setdetalleproveReturnGeneral(DetalleProveParameterReturnGeneral detalleproveReturnGeneral) {
		this.detalleproveReturnGeneral = detalleproveReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_sucursal_movimientoFK_IdDetalleProve=-1L;

	public Long getid_sucursal_movimientoFK_IdDetalleProve() {
		return this.id_sucursal_movimientoFK_IdDetalleProve;
	}

	public void setid_sucursal_movimientoFK_IdDetalleProve(Long id_sucursal_movimientoFK_IdDetalleProve) {
		this.id_sucursal_movimientoFK_IdDetalleProve = id_sucursal_movimientoFK_IdDetalleProve;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_detalle_clienteFK_IdEstadoDetalleCliente=-1L;

	public Long getid_estado_detalle_clienteFK_IdEstadoDetalleCliente() {
		return this.id_estado_detalle_clienteFK_IdEstadoDetalleCliente;
	}

	public void setid_estado_detalle_clienteFK_IdEstadoDetalleCliente(Long id_estado_detalle_clienteFK_IdEstadoDetalleCliente) {
		this.id_estado_detalle_clienteFK_IdEstadoDetalleCliente = id_estado_detalle_clienteFK_IdEstadoDetalleCliente;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_orden_compraFK_IdOrdenCompra=null;

	public Long getid_orden_compraFK_IdOrdenCompra() {
		return this.id_orden_compraFK_IdOrdenCompra;
	}

	public void setid_orden_compraFK_IdOrdenCompra(Long id_orden_compraFK_IdOrdenCompra) {
		this.id_orden_compraFK_IdOrdenCompra = id_orden_compraFK_IdOrdenCompra;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleProveLogic getDetalleProveLogic()	{		
		return detalleproveLogic;
	}

	public void setDetalleProveLogic(DetalleProveLogic detalleproveLogic) {
		this.detalleproveLogic = detalleproveLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleProve() {
		return isEsNuevoDetalleProve;
	}

	public void setIsEsNuevoDetalleProve(Boolean isEsNuevoDetalleProve) {
		this.isEsNuevoDetalleProve = isEsNuevoDetalleProve;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleProve() {
		return esParaAccionDesdeFormularioDetalleProve;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleProve(Boolean esParaAccionDesdeFormularioDetalleProve) {
		this.esParaAccionDesdeFormularioDetalleProve = esParaAccionDesdeFormularioDetalleProve;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detalleproveSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detalleproveSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalMovimientosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalmovimientosForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursalMovimiento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalmovimientoLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalmovimientosForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursalMovimiento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detalleproveSessionBean.getlidSucursalMovimientoActual());
					this.sucursalmovimientosForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detalleproveSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detalleproveSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(detalleproveSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(detalleproveSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(detalleproveSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(detalleproveSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(detalleproveSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(detalleproveSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(detalleproveSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosOrdenComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ordencomprasForeignKey=new ArrayList<OrdenCompra>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			OrdenCompraLogic ordencompraLogic=new OrdenCompraLogic();

			//ordencompraLogic.getOrdenCompraDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionOrdenCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ordencompraLogic.getOrdenCompraDataAccess().setIsForForeingKeyData(true);

					ordencompraLogic.getTodosOrdenComprasWithConnection(sFinalQuery,new Pagination());

					this.ordencomprasForeignKey=ordencompraLogic.getOrdenCompras();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaOrdenCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ordencompraLogic.getEntityWithConnection(detalleproveSessionBean.getlidOrdenCompraActual());
					this.ordencomprasForeignKey.add(ordencompraLogic.getOrdenCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoDetalleClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadodetalleclientesForeignKey=new ArrayList<EstadoDetalleCliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoDetalleClienteLogic estadodetalleclienteLogic=new EstadoDetalleClienteLogic();

			//estadodetalleclienteLogic.getEstadoDetalleClienteDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadodetalleclienteLogic.getEstadoDetalleClienteDataAccess().setIsForForeingKeyData(true);

					estadodetalleclienteLogic.getTodosEstadoDetalleClientesWithConnection(sFinalQuery,new Pagination());

					this.estadodetalleclientesForeignKey=estadodetalleclienteLogic.getEstadoDetalleClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoDetalleCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadodetalleclienteLogic.getEntityWithConnection(detalleproveSessionBean.getlidEstadoDetalleClienteActual());
					this.estadodetalleclientesForeignKey.add(estadodetalleclienteLogic.getEstadoDetalleCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detalleproveSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detalleproveSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleProve.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleProveGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleProveGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleProveGenerico!=null && jComboBoxid_empresaDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleProve.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleProveGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleProveGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleProveGenerico!=null && jComboBoxid_sucursalDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalMovimientoForeignKey(Long idSucursalMovimientoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalmovimientoTemp=null;

			for(Sucursal sucursalmovimientoAux:sucursalmovimientosForeignKey) {
				if(sucursalmovimientoAux.getId()!=null && sucursalmovimientoAux.getId().equals(idSucursalMovimientoSeleccionado)) {
					sucursalmovimientoTemp=sucursalmovimientoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalmovimientoTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setSucursalMovimiento(sucursalmovimientoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setSelectedItem(sucursalmovimientoTemp);
					}
				} else {
					//jComboBoxid_sucursal_movimientoDetalleProve.setSelectedItem(sucursalmovimientoTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdDetalleProve") || sFormularioTipoBusqueda.equals("Todos")){
					if(sucursalmovimientoTemp!=null && jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve!=null) {
						jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.setSelectedItem(sucursalmovimientoTemp);
					} else {
						if(jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve!=null) {
							//jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.setSelectedItem(sucursalmovimientoTemp);
							if(jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.getItemCount()>0) {
								jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalMovimientoForeignKeyDescripcion(Long idSucursalMovimientoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalmovimientoTemp=null;

			for(Sucursal sucursalmovimientoAux:sucursalmovimientosForeignKey) {
				if(sucursalmovimientoAux.getId()!=null && sucursalmovimientoAux.getId().equals(idSucursalMovimientoSeleccionado)) {
					sucursalmovimientoTemp=sucursalmovimientoAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalmovimientoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalMovimientoForeignKeyGenerico(Long idSucursalMovimientoSeleccionado,JComboBox jComboBoxid_sucursal_movimientoDetalleProveGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalmovimientoTemp=null;

			for(Sucursal sucursalmovimientoAux:sucursalmovimientosForeignKey) {
				if(sucursalmovimientoAux.getId()!=null && sucursalmovimientoAux.getId().equals(idSucursalMovimientoSeleccionado)) {
					sucursalmovimientoTemp=sucursalmovimientoAux;
					break;
				}
			}

			if(sucursalmovimientoTemp!=null) {
				jComboBoxid_sucursal_movimientoDetalleProveGenerico.setSelectedItem(sucursalmovimientoTemp);
			} else {
				if(jComboBoxid_sucursal_movimientoDetalleProveGenerico!=null && jComboBoxid_sucursal_movimientoDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_sucursal_movimientoDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleProve.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleProveGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleProveGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleProveGenerico!=null && jComboBoxid_ejercicioDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleProve.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleProveGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleProveGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleProveGenerico!=null && jComboBoxid_periodoDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloDetalleProve.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloDetalleProveGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloDetalleProveGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloDetalleProveGenerico!=null && jComboBoxid_moduloDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_moduloDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaDetalleProve.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaDetalleProveGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaDetalleProveGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaDetalleProveGenerico!=null && jComboBoxid_monedaDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_monedaDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteDetalleProve.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteDetalleProve!=null) {
						jComboBoxid_clienteFK_IdClienteDetalleProve.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteDetalleProve!=null) {
							//jComboBoxid_clienteFK_IdClienteDetalleProve.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteDetalleProve.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteDetalleProveGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteDetalleProveGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteDetalleProveGenerico!=null && jComboBoxid_clienteDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_clienteDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionDetalleProve.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionDetalleProve!=null) {
						jComboBoxid_transaccionFK_IdTransaccionDetalleProve.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionDetalleProve!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionDetalleProve.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionDetalleProve.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionDetalleProveGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionDetalleProveGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionDetalleProveGenerico!=null && jComboBoxid_transaccionDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_transaccionDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico!=null && jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableDetalleProve.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableDetalleProveGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableDetalleProveGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableDetalleProveGenerico!=null && jComboBoxid_asiento_contableDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaDetalleProve.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaDetalleProve!=null) {
						jComboBoxid_facturaFK_IdFacturaDetalleProve.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaDetalleProve!=null) {
							//jComboBoxid_facturaFK_IdFacturaDetalleProve.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaDetalleProve.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaDetalleProveGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaDetalleProveGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaDetalleProveGenerico!=null && jComboBoxid_facturaDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_facturaDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualOrdenCompraForeignKey(Long idOrdenCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			OrdenCompra  ordencompraTemp=null;

			for(OrdenCompra ordencompraAux:ordencomprasForeignKey) {
				if(ordencompraAux.getId()!=null && ordencompraAux.getId().equals(idOrdenCompraSeleccionado)) {
					ordencompraTemp=ordencompraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ordencompraTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setOrdenCompra(ordencompraTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setSelectedItem(ordencompraTemp);
					}
				} else {
					//jComboBoxid_orden_compraDetalleProve.setSelectedItem(ordencompraTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(ordencompraTemp!=null && jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve!=null) {
						jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.setSelectedItem(ordencompraTemp);
					} else {
						if(jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve!=null) {
							//jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.setSelectedItem(ordencompraTemp);
							if(jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.getItemCount()>0) {
								jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualOrdenCompraForeignKeyDescripcion(Long idOrdenCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			OrdenCompra  ordencompraTemp=null;

			for(OrdenCompra ordencompraAux:ordencomprasForeignKey) {
				if(ordencompraAux.getId()!=null && ordencompraAux.getId().equals(idOrdenCompraSeleccionado)) {
					ordencompraTemp=ordencompraAux;
					break;
				}
			}


			sDescripcion=OrdenCompraConstantesFunciones.getOrdenCompraDescripcion(ordencompraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualOrdenCompraForeignKeyGenerico(Long idOrdenCompraSeleccionado,JComboBox jComboBoxid_orden_compraDetalleProveGenerico)throws Exception
	{
		try
		{
			OrdenCompra  ordencompraTemp=null;

			for(OrdenCompra ordencompraAux:ordencomprasForeignKey) {
				if(ordencompraAux.getId()!=null && ordencompraAux.getId().equals(idOrdenCompraSeleccionado)) {
					ordencompraTemp=ordencompraAux;
					break;
				}
			}

			if(ordencompraTemp!=null) {
				jComboBoxid_orden_compraDetalleProveGenerico.setSelectedItem(ordencompraTemp);
			} else {
				if(jComboBoxid_orden_compraDetalleProveGenerico!=null && jComboBoxid_orden_compraDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_orden_compraDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoDetalleClienteForeignKey(Long idEstadoDetalleClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoDetalleCliente  estadodetalleclienteTemp=null;

			for(EstadoDetalleCliente estadodetalleclienteAux:estadodetalleclientesForeignKey) {
				if(estadodetalleclienteAux.getId()!=null && estadodetalleclienteAux.getId().equals(idEstadoDetalleClienteSeleccionado)) {
					estadodetalleclienteTemp=estadodetalleclienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadodetalleclienteTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setEstadoDetalleCliente(estadodetalleclienteTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedItem(estadodetalleclienteTemp);
					}
				} else {
					//jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedItem(estadodetalleclienteTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadodetalleclienteTemp!=null && jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve!=null) {
						jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.setSelectedItem(estadodetalleclienteTemp);
					} else {
						if(jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve!=null) {
							//jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.setSelectedItem(estadodetalleclienteTemp);
							if(jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.getItemCount()>0) {
								jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoDetalleClienteForeignKeyDescripcion(Long idEstadoDetalleClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoDetalleCliente  estadodetalleclienteTemp=null;

			for(EstadoDetalleCliente estadodetalleclienteAux:estadodetalleclientesForeignKey) {
				if(estadodetalleclienteAux.getId()!=null && estadodetalleclienteAux.getId().equals(idEstadoDetalleClienteSeleccionado)) {
					estadodetalleclienteTemp=estadodetalleclienteAux;
					break;
				}
			}


			sDescripcion=EstadoDetalleClienteConstantesFunciones.getEstadoDetalleClienteDescripcion(estadodetalleclienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoDetalleClienteForeignKeyGenerico(Long idEstadoDetalleClienteSeleccionado,JComboBox jComboBoxid_estado_detalle_clienteDetalleProveGenerico)throws Exception
	{
		try
		{
			EstadoDetalleCliente  estadodetalleclienteTemp=null;

			for(EstadoDetalleCliente estadodetalleclienteAux:estadodetalleclientesForeignKey) {
				if(estadodetalleclienteAux.getId()!=null && estadodetalleclienteAux.getId().equals(idEstadoDetalleClienteSeleccionado)) {
					estadodetalleclienteTemp=estadodetalleclienteAux;
					break;
				}
			}

			if(estadodetalleclienteTemp!=null) {
				jComboBoxid_estado_detalle_clienteDetalleProveGenerico.setSelectedItem(estadodetalleclienteTemp);
			} else {
				if(jComboBoxid_estado_detalle_clienteDetalleProveGenerico!=null && jComboBoxid_estado_detalle_clienteDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_estado_detalle_clienteDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleProve.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleProveGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleProveGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleProveGenerico!=null && jComboBoxid_anioDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detalleprove!=null) {
						this.detalleprove.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleProve.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleProve!=null) {
						if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleProveGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleProveGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleProveGenerico!=null && jComboBoxid_mesDetalleProveGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleProveGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_empresaDetalleProveGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleProveGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleProveGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detalleprove.setid_empresa(empresaAux.getId());
				detalleprove.setempresa_descripcion(DetalleProveConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detalleprove.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_sucursalDetalleProveGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleProveGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleProveGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detalleprove.setid_sucursal(sucursalAux.getId());
				detalleprove.setsucursal_descripcion(DetalleProveConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detalleprove.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalMovimientoForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_sucursal_movimientoDetalleProveGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursal_movimientoDetalleProveGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursal_movimientoDetalleProveGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detalleprove.setid_sucursal_movimiento(sucursalAux.getId());
				detalleprove.setsucursalmovimiento_descripcion(DetalleProveConstantesFunciones.getSucursalMovimientoDescripcion(sucursalAux));
				detalleprove.setSucursalMovimiento(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_ejercicioDetalleProveGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleProveGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleProveGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detalleprove.setid_ejercicio(ejercicioAux.getId());
				detalleprove.setejercicio_descripcion(DetalleProveConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detalleprove.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_periodoDetalleProveGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleProveGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleProveGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detalleprove.setid_periodo(periodoAux.getId());
				detalleprove.setperiodo_descripcion(DetalleProveConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detalleprove.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_moduloDetalleProveGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloDetalleProveGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloDetalleProveGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				detalleprove.setid_modulo(moduloAux.getId());
				detalleprove.setmodulo_descripcion(DetalleProveConstantesFunciones.getModuloDescripcion(moduloAux));
				detalleprove.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_monedaDetalleProveGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaDetalleProveGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaDetalleProveGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				detalleprove.setid_moneda(monedaAux.getId());
				detalleprove.setmoneda_descripcion(DetalleProveConstantesFunciones.getMonedaDescripcion(monedaAux));
				detalleprove.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_clienteDetalleProveGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteDetalleProveGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteDetalleProveGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				detalleprove.setid_cliente(clienteAux.getId());
				detalleprove.setcliente_descripcion(DetalleProveConstantesFunciones.getClienteDescripcion(clienteAux));
				detalleprove.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_transaccionDetalleProveGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionDetalleProveGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionDetalleProveGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				detalleprove.setid_transaccion(transaccionAux.getId());
				detalleprove.settransaccion_descripcion(DetalleProveConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				detalleprove.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloDetalleProveGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				detalleprove.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				detalleprove.settipotransaccionmodulo_descripcion(DetalleProveConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				detalleprove.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_asiento_contableDetalleProveGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableDetalleProveGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableDetalleProveGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				detalleprove.setid_asiento_contable(asientocontableAux.getId());
				detalleprove.setasientocontable_descripcion(DetalleProveConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				detalleprove.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_facturaDetalleProveGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaDetalleProveGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaDetalleProveGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				detalleprove.setid_factura(facturaAux.getId());
				detalleprove.setfactura_descripcion(DetalleProveConstantesFunciones.getFacturaDescripcion(facturaAux));
				detalleprove.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarOrdenCompraForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_orden_compraDetalleProveGenerico)throws Exception
	{
		try
		{
			OrdenCompra  ordencompraAux=new OrdenCompra();

			if(jComboBoxid_orden_compraDetalleProveGenerico==null) {
				ordencompraAux=(OrdenCompra)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.getSelectedItem();
			} else {
				ordencompraAux=(OrdenCompra)jComboBoxid_orden_compraDetalleProveGenerico.getSelectedItem();
			}

			if(ordencompraAux!=null) {
				detalleprove.setid_orden_compra(ordencompraAux.getId());
				detalleprove.setordencompra_descripcion(DetalleProveConstantesFunciones.getOrdenCompraDescripcion(ordencompraAux));
				detalleprove.setOrdenCompra(ordencompraAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoDetalleClienteForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_estado_detalle_clienteDetalleProveGenerico)throws Exception
	{
		try
		{
			EstadoDetalleCliente  estadodetalleclienteAux=new EstadoDetalleCliente();

			if(jComboBoxid_estado_detalle_clienteDetalleProveGenerico==null) {
				estadodetalleclienteAux=(EstadoDetalleCliente)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.getSelectedItem();
			} else {
				estadodetalleclienteAux=(EstadoDetalleCliente)jComboBoxid_estado_detalle_clienteDetalleProveGenerico.getSelectedItem();
			}

			if(estadodetalleclienteAux!=null && estadodetalleclienteAux.getId()!=null) {
				detalleprove.setid_estado_detalle_cliente(estadodetalleclienteAux.getId());
				detalleprove.setestadodetallecliente_descripcion(DetalleProveConstantesFunciones.getEstadoDetalleClienteDescripcion(estadodetalleclienteAux));
				detalleprove.setEstadoDetalleCliente(estadodetalleclienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_anioDetalleProveGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleProveGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleProveGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detalleprove.setid_anio(anioAux.getId());
				detalleprove.setanio_descripcion(DetalleProveConstantesFunciones.getAnioDescripcion(anioAux));
				detalleprove.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleProve detalleprove,JComboBox jComboBoxid_mesDetalleProveGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleProveGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleProveGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detalleprove.setid_mes(mesAux.getId());
				detalleprove.setmes_descripcion(DetalleProveConstantesFunciones.getMesDescripcion(mesAux));
				detalleprove.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalMovimientosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.removeAllItems();

							for(Sucursal sucursalmovimiento:this.sucursalmovimientosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.addItem(sucursalmovimiento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdDetalleProve") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.removeAllItems();

							for(Sucursal sucursalmovimiento:this.sucursalmovimientosForeignKey) {
								this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.addItem(sucursalmovimiento);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteDetalleProve.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteDetalleProve.addItem(cliente);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.addItem(transaccion);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.addItem(tipotransaccionmodulo);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.addItem(asientocontable);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaDetalleProve.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaDetalleProve.addItem(factura);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameOrdenComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingOrdenCompra=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.removeAllItems();

							for(OrdenCompra ordencompra:this.ordencomprasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.addItem(ordencompra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.removeAllItems();

							for(OrdenCompra ordencompra:this.ordencomprasForeignKey) {
								this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.addItem(ordencompra);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoDetalleClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoDetalleCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.removeAllItems();

							for(EstadoDetalleCliente estadodetallecliente:this.estadodetalleclientesForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.addItem(estadodetallecliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.removeAllItems();

							for(EstadoDetalleCliente estadodetallecliente:this.estadodetalleclientesForeignKey) {
								this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.addItem(estadodetallecliente);
							}
						}

						if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProve!=null) { 
					}

					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalMovimientoForeignKey(Sucursal sucursalmovimiento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setSelectedItem(sucursalmovimiento);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.setSelectedItem(sucursalmovimiento);
						} else {
							this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteDetalleProve.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaDetalleProve.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameOrdenCompraForeignKey(OrdenCompra ordencompra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setSelectedItem(ordencompra);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.setSelectedItem(ordencompra);
						} else {
							this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoDetalleClienteForeignKey(EstadoDetalleCliente estadodetallecliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedItem(estadodetallecliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.setSelectedItem(estadodetallecliente);
						} else {
							this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProve!=null) {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleProve() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleProveConstantesFunciones.refrescarForeignKeysDescripcionesDetalleProve(this.detalleproveLogic.getDetalleProves());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleProveConstantesFunciones.refrescarForeignKeysDescripcionesDetalleProve(this.detalleproves);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(OrdenCompra.class));
		classes.add(new Classe(EstadoDetalleCliente.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detalleproveLogic.setDetalleProves(this.detalleproves);
			detalleproveLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleProveParameterReturnGeneral getDetalleProveParameterGeneral() {
		return this.detalleproveParameterGeneral;
	}
	
	public void setDetalleProveParameterGeneral(DetalleProveParameterReturnGeneral detalleproveParameterGeneral) {
		this.detalleproveParameterGeneral = detalleproveParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleProve() {
		return isPermisoTodoDetalleProve;
	}

	public void setIsPermisoTodoDetalleProve(Boolean isPermisoTodoDetalleProve) {
		this.isPermisoTodoDetalleProve = isPermisoTodoDetalleProve;
	}

	public Boolean getIsPermisoNuevoDetalleProve() {
		return isPermisoNuevoDetalleProve;
	}

	public void setIsPermisoNuevoDetalleProve(Boolean isPermisoNuevoDetalleProve) {
		this.isPermisoNuevoDetalleProve = isPermisoNuevoDetalleProve;
	}

	public Boolean getIsPermisoActualizarDetalleProve() {
		return isPermisoActualizarDetalleProve;
	}

	public void setIsPermisoActualizarDetalleProve(Boolean isPermisoActualizarDetalleProve) {
		this.isPermisoActualizarDetalleProve = isPermisoActualizarDetalleProve;
	}

	public Boolean getIsPermisoEliminarDetalleProve() {
		return isPermisoEliminarDetalleProve;
	}

	public void setIsPermisoEliminarDetalleProve(Boolean isPermisoEliminarDetalleProve) {
		this.isPermisoEliminarDetalleProve = isPermisoEliminarDetalleProve;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleProve() {
		return isPermisoGuardarCambiosDetalleProve;
	}

	public void setIsPermisoGuardarCambiosDetalleProve(Boolean isPermisoGuardarCambiosDetalleProve) {
		this.isPermisoGuardarCambiosDetalleProve = isPermisoGuardarCambiosDetalleProve;
	}
	
	public Boolean getIsPermisoConsultaDetalleProve() {
		return isPermisoConsultaDetalleProve;
	}

	public void setIsPermisoConsultaDetalleProve(Boolean isPermisoConsultaDetalleProve) {
		this.isPermisoConsultaDetalleProve = isPermisoConsultaDetalleProve;
	}

	public Boolean getIsPermisoBusquedaDetalleProve() {
		return isPermisoBusquedaDetalleProve;
	}

	public void setIsPermisoBusquedaDetalleProve(Boolean isPermisoBusquedaDetalleProve) {
		this.isPermisoBusquedaDetalleProve = isPermisoBusquedaDetalleProve;
	}

	public Boolean getIsPermisoReporteDetalleProve() {
		return isPermisoReporteDetalleProve;
	}

	public void setIsPermisoReporteDetalleProve(Boolean isPermisoReporteDetalleProve) {
		this.isPermisoReporteDetalleProve = isPermisoReporteDetalleProve;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleProve() {
		return isPermisoPaginacionMedioDetalleProve;
	}

	public void setIsPermisoPaginacionMedioDetalleProve(Boolean isPermisoPaginacionMedioDetalleProve) {
		this.isPermisoPaginacionMedioDetalleProve = isPermisoPaginacionMedioDetalleProve;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleProve() {
		return isPermisoPaginacionTodoDetalleProve;
	}

	public void setIsPermisoPaginacionTodoDetalleProve(Boolean isPermisoPaginacionTodoDetalleProve) {
		this.isPermisoPaginacionTodoDetalleProve = isPermisoPaginacionTodoDetalleProve;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleProve() {
		return isPermisoPaginacionAltoDetalleProve;
	}

	public void setIsPermisoPaginacionAltoDetalleProve(Boolean isPermisoPaginacionAltoDetalleProve) {
		this.isPermisoPaginacionAltoDetalleProve = isPermisoPaginacionAltoDetalleProve;
	}
	
	public Boolean getIsPermisoCopiarDetalleProve() {
		return isPermisoCopiarDetalleProve;
	}

	public void setIsPermisoCopiarDetalleProve(Boolean isPermisoCopiarDetalleProve) {
		this.isPermisoCopiarDetalleProve = isPermisoCopiarDetalleProve;
	}
	
	public Boolean getIsPermisoVerFormDetalleProve() {
		return isPermisoVerFormDetalleProve;
	}

	public void setIsPermisoVerFormDetalleProve(Boolean isPermisoVerFormDetalleProve) {
		this.isPermisoVerFormDetalleProve = isPermisoVerFormDetalleProve;
	}
	
	public Boolean getIsPermisoDuplicarDetalleProve() {
		return isPermisoDuplicarDetalleProve;
	}

	public void setIsPermisoDuplicarDetalleProve(Boolean isPermisoDuplicarDetalleProve) {
		this.isPermisoDuplicarDetalleProve = isPermisoDuplicarDetalleProve;
	}
	
	public Boolean getIsPermisoOrdenDetalleProve() {
		return isPermisoOrdenDetalleProve;
	}

	public void setIsPermisoOrdenDetalleProve(Boolean isPermisoOrdenDetalleProve) {
		this.isPermisoOrdenDetalleProve = isPermisoOrdenDetalleProve;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleProve() {
		return isVisibilidadCeldaNuevoDetalleProve;
	}

	public void setIsVisibilidadCeldaNuevoDetalleProve(Boolean isVisibilidadCeldaNuevoDetalleProve) {
		this.isVisibilidadCeldaNuevoDetalleProve = isVisibilidadCeldaNuevoDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleProve() {
		return isVisibilidadCeldaDuplicarDetalleProve;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleProve(Boolean isVisibilidadCeldaDuplicarDetalleProve) {
		this.isVisibilidadCeldaDuplicarDetalleProve = isVisibilidadCeldaDuplicarDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleProve() {
		return isVisibilidadCeldaCopiarDetalleProve;
	}

	public void setIsVisibilidadCeldaCopiarDetalleProve(Boolean isVisibilidadCeldaCopiarDetalleProve) {
		this.isVisibilidadCeldaCopiarDetalleProve = isVisibilidadCeldaCopiarDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleProve() {
		return isVisibilidadCeldaVerFormDetalleProve;
	}

	public void setIsVisibilidadCeldaVerFormDetalleProve(Boolean isVisibilidadCeldaVerFormDetalleProve) {
		this.isVisibilidadCeldaVerFormDetalleProve = isVisibilidadCeldaVerFormDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleProve() {
		return isVisibilidadCeldaOrdenDetalleProve;
	}

	public void setIsVisibilidadCeldaOrdenDetalleProve(Boolean isVisibilidadCeldaOrdenDetalleProve) {
		this.isVisibilidadCeldaOrdenDetalleProve = isVisibilidadCeldaOrdenDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleProve() {
		return isVisibilidadCeldaNuevoRelacionesDetalleProve;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleProve(Boolean isVisibilidadCeldaNuevoRelacionesDetalleProve) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleProve = isVisibilidadCeldaNuevoRelacionesDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleProve() {
		return isVisibilidadCeldaModificarDetalleProve;
	}

	public void setIsVisibilidadCeldaModificarDetalleProve(Boolean isVisibilidadCeldaModificarDetalleProve) {
		this.isVisibilidadCeldaModificarDetalleProve = isVisibilidadCeldaModificarDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleProve() {
		return isVisibilidadCeldaActualizarDetalleProve;
	}

	public void setIsVisibilidadCeldaActualizarDetalleProve(Boolean isVisibilidadCeldaActualizarDetalleProve) {
		this.isVisibilidadCeldaActualizarDetalleProve = isVisibilidadCeldaActualizarDetalleProve;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleProve() {
		return isVisibilidadCeldaEliminarDetalleProve;
	}

	public void setIsVisibilidadCeldaEliminarDetalleProve(Boolean isVisibilidadCeldaEliminarDetalleProve) {
		this.isVisibilidadCeldaEliminarDetalleProve = isVisibilidadCeldaEliminarDetalleProve;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleProve() {
		return isVisibilidadCeldaCancelarDetalleProve;
	}

	public void setIsVisibilidadCeldaCancelarDetalleProve(Boolean isVisibilidadCeldaCancelarDetalleProve) {
		this.isVisibilidadCeldaCancelarDetalleProve = isVisibilidadCeldaCancelarDetalleProve;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleProve() {
		return isVisibilidadCeldaGuardarDetalleProve;
	}

	public void setIsVisibilidadCeldaGuardarDetalleProve(Boolean isVisibilidadCeldaGuardarDetalleProve) {
		this.isVisibilidadCeldaGuardarDetalleProve = isVisibilidadCeldaGuardarDetalleProve;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleProve() {
		return isVisibilidadCeldaGuardarCambiosDetalleProve;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleProve(Boolean isVisibilidadCeldaGuardarCambiosDetalleProve) {
		this.isVisibilidadCeldaGuardarCambiosDetalleProve = isVisibilidadCeldaGuardarCambiosDetalleProve;
	}
		
	public DetalleProveSessionBean getdetalleproveSessionBean() {
		return this.detalleproveSessionBean;
	}
	
	public void setdetalleproveSessionBean(DetalleProveSessionBean detalleproveSessionBean) {
		this.detalleproveSessionBean=detalleproveSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdDetalleProve() {
		return this.isVisibilidadFK_IdDetalleProve;
	}

	public void setisVisibilidadFK_IdDetalleProve(Boolean isVisibilidadFK_IdDetalleProve) {
		this.isVisibilidadFK_IdDetalleProve=isVisibilidadFK_IdDetalleProve;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoDetalleCliente() {
		return this.isVisibilidadFK_IdEstadoDetalleCliente;
	}

	public void setisVisibilidadFK_IdEstadoDetalleCliente(Boolean isVisibilidadFK_IdEstadoDetalleCliente) {
		this.isVisibilidadFK_IdEstadoDetalleCliente=isVisibilidadFK_IdEstadoDetalleCliente;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdOrdenCompra() {
		return this.isVisibilidadFK_IdOrdenCompra;
	}

	public void setisVisibilidadFK_IdOrdenCompra(Boolean isVisibilidadFK_IdOrdenCompra) {
		this.isVisibilidadFK_IdOrdenCompra=isVisibilidadFK_IdOrdenCompra;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleProve(DetalleProve detalleprove)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(detalleprove,null);
				this.setActualParaGuardarSucursalForeignKey(detalleprove,null);
				this.setActualParaGuardarSucursalMovimientoForeignKey(detalleprove,null);
				this.setActualParaGuardarEjercicioForeignKey(detalleprove,null);
				this.setActualParaGuardarPeriodoForeignKey(detalleprove,null);
				this.setActualParaGuardarModuloForeignKey(detalleprove,null);
				this.setActualParaGuardarMonedaForeignKey(detalleprove,null);
				this.setActualParaGuardarClienteForeignKey(detalleprove,null);
				this.setActualParaGuardarTransaccionForeignKey(detalleprove,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(detalleprove,null);
				this.setActualParaGuardarAsientoContableForeignKey(detalleprove,null);
				this.setActualParaGuardarFacturaForeignKey(detalleprove,null);
				this.setActualParaGuardarOrdenCompraForeignKey(detalleprove,null);
				this.setActualParaGuardarEstadoDetalleClienteForeignKey(detalleprove,null);
				this.setActualParaGuardarAnioForeignKey(detalleprove,null);
				this.setActualParaGuardarMesForeignKey(detalleprove,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetalleProve detalleprove,DetalleProve detalleproveAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleProve(detalleprove);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detalleproveAux.setId(detalleprove.getId());
		detalleproveAux.setVersionRow(detalleprove.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleProve();
		
			int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detalleproveValidator.getInvalidValues(this.detalleprove);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detalleproveLogic.setDatosCliente(datosCliente);
			detalleproveLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detalleproveAux=new  DetalleProve();
				
				detalleproveAux.setIsNew(true);
				detalleproveAux.setIsChanged(true);
				
				detalleproveAux.setDetalleProveOriginal(this.detalleprove);
				
				detalleproveAux.setId(this.detalleprove.getId());	
				detalleproveAux.setVersionRow(this.detalleprove.getVersionRow());	
				detalleproveAux.setid_empresa(this.detalleprove.getid_empresa());	
				detalleproveAux.setid_sucursal(this.detalleprove.getid_sucursal());	
				detalleproveAux.setid_sucursal_movimiento(this.detalleprove.getid_sucursal_movimiento());	
				detalleproveAux.setid_ejercicio(this.detalleprove.getid_ejercicio());	
				detalleproveAux.setid_periodo(this.detalleprove.getid_periodo());	
				detalleproveAux.setid_modulo(this.detalleprove.getid_modulo());	
				detalleproveAux.setid_moneda(this.detalleprove.getid_moneda());	
				detalleproveAux.setid_cliente(this.detalleprove.getid_cliente());	
				detalleproveAux.setid_transaccion(this.detalleprove.getid_transaccion());	
				detalleproveAux.setid_tipo_transaccion_modulo(this.detalleprove.getid_tipo_transaccion_modulo());	
				detalleproveAux.setid_asiento_contable(this.detalleprove.getid_asiento_contable());	
				detalleproveAux.setid_factura(this.detalleprove.getid_factura());	
				detalleproveAux.setid_orden_compra(this.detalleprove.getid_orden_compra());	
				detalleproveAux.setid_estado_detalle_cliente(this.detalleprove.getid_estado_detalle_cliente());	
				detalleproveAux.setfecha_venta(this.detalleprove.getfecha_venta());	
				detalleproveAux.setfecha_emision(this.detalleprove.getfecha_emision());	
				detalleproveAux.setfecha_pago(this.detalleprove.getfecha_pago());	
				detalleproveAux.setfecha_vencimiento(this.detalleprove.getfecha_vencimiento());	
				detalleproveAux.setmonto_mone_local(this.detalleprove.getmonto_mone_local());	
				detalleproveAux.setmonto_mone_extra(this.detalleprove.getmonto_mone_extra());	
				detalleproveAux.setnumero_comprobante(this.detalleprove.getnumero_comprobante());	
				detalleproveAux.setnumero_factura(this.detalleprove.getnumero_factura());	
				detalleproveAux.setdebito_mone_local(this.detalleprove.getdebito_mone_local());	
				detalleproveAux.setcredito_mone_local(this.detalleprove.getcredito_mone_local());	
				detalleproveAux.setdebito_mone_extra(this.detalleprove.getdebito_mone_extra());	
				detalleproveAux.setcredito_mone_extra(this.detalleprove.getcredito_mone_extra());	
				detalleproveAux.setdescripcion(this.detalleprove.getdescripcion());	
				detalleproveAux.setid_anio(this.detalleprove.getid_anio());	
				detalleproveAux.setid_mes(this.detalleprove.getid_mes());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleproveSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproveAux,detalleproves);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproveSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.saveDetalleProves();//WithConnection
						//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);
					
					this.refrescarForeignKeysDescripcionesDetalleProve();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproveLogic.saveDetalleProveRelaciones(detalleproveAux,this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleproveSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleproveAux,detalleproves);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detalleproveAux=new  DetalleProve();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detalleproveSessionBean.getEsGuardarRelacionado() 
					|| (this.detalleproveSessionBean.getEsGuardarRelacionado() && this.detalleprove.getId()>=0)) {
						
					detalleproveAux.setIsNew(false);
				}
				
				detalleproveAux.setIsDeleted(false);
			
				detalleproveAux.setId(this.detalleprove.getId());	
				detalleproveAux.setVersionRow(this.detalleprove.getVersionRow());	
				detalleproveAux.setid_empresa(this.detalleprove.getid_empresa());	
				detalleproveAux.setid_sucursal(this.detalleprove.getid_sucursal());	
				detalleproveAux.setid_sucursal_movimiento(this.detalleprove.getid_sucursal_movimiento());	
				detalleproveAux.setid_ejercicio(this.detalleprove.getid_ejercicio());	
				detalleproveAux.setid_periodo(this.detalleprove.getid_periodo());	
				detalleproveAux.setid_modulo(this.detalleprove.getid_modulo());	
				detalleproveAux.setid_moneda(this.detalleprove.getid_moneda());	
				detalleproveAux.setid_cliente(this.detalleprove.getid_cliente());	
				detalleproveAux.setid_transaccion(this.detalleprove.getid_transaccion());	
				detalleproveAux.setid_tipo_transaccion_modulo(this.detalleprove.getid_tipo_transaccion_modulo());	
				detalleproveAux.setid_asiento_contable(this.detalleprove.getid_asiento_contable());	
				detalleproveAux.setid_factura(this.detalleprove.getid_factura());	
				detalleproveAux.setid_orden_compra(this.detalleprove.getid_orden_compra());	
				detalleproveAux.setid_estado_detalle_cliente(this.detalleprove.getid_estado_detalle_cliente());	
				detalleproveAux.setfecha_venta(this.detalleprove.getfecha_venta());	
				detalleproveAux.setfecha_emision(this.detalleprove.getfecha_emision());	
				detalleproveAux.setfecha_pago(this.detalleprove.getfecha_pago());	
				detalleproveAux.setfecha_vencimiento(this.detalleprove.getfecha_vencimiento());	
				detalleproveAux.setmonto_mone_local(this.detalleprove.getmonto_mone_local());	
				detalleproveAux.setmonto_mone_extra(this.detalleprove.getmonto_mone_extra());	
				detalleproveAux.setnumero_comprobante(this.detalleprove.getnumero_comprobante());	
				detalleproveAux.setnumero_factura(this.detalleprove.getnumero_factura());	
				detalleproveAux.setdebito_mone_local(this.detalleprove.getdebito_mone_local());	
				detalleproveAux.setcredito_mone_local(this.detalleprove.getcredito_mone_local());	
				detalleproveAux.setdebito_mone_extra(this.detalleprove.getdebito_mone_extra());	
				detalleproveAux.setcredito_mone_extra(this.detalleprove.getcredito_mone_extra());	
				detalleproveAux.setdescripcion(this.detalleprove.getdescripcion());	
				detalleproveAux.setid_anio(this.detalleprove.getid_anio());	
				detalleproveAux.setid_mes(this.detalleprove.getid_mes());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproveAux,detalleproves);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproveSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.saveDetalleProves();//WithConnection
						//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);
					
					this.refrescarForeignKeysDescripcionesDetalleProve();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE
						
						if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproveLogic.saveDetalleProveRelaciones(detalleproveAux,this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleproveSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleproveAux,detalleproves);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleprove,detalleproveAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detalleproveAux=new  DetalleProve();
				
				detalleproveAux.setIsNew(false);
				detalleproveAux.setIsChanged(false);
				
				detalleproveAux.setIsDeleted(true);
				
				detalleproveAux.setId(this.detalleprove.getId());	
				detalleproveAux.setVersionRow(this.detalleprove.getVersionRow());	
				detalleproveAux.setid_empresa(this.detalleprove.getid_empresa());	
				detalleproveAux.setid_sucursal(this.detalleprove.getid_sucursal());	
				detalleproveAux.setid_sucursal_movimiento(this.detalleprove.getid_sucursal_movimiento());	
				detalleproveAux.setid_ejercicio(this.detalleprove.getid_ejercicio());	
				detalleproveAux.setid_periodo(this.detalleprove.getid_periodo());	
				detalleproveAux.setid_modulo(this.detalleprove.getid_modulo());	
				detalleproveAux.setid_moneda(this.detalleprove.getid_moneda());	
				detalleproveAux.setid_cliente(this.detalleprove.getid_cliente());	
				detalleproveAux.setid_transaccion(this.detalleprove.getid_transaccion());	
				detalleproveAux.setid_tipo_transaccion_modulo(this.detalleprove.getid_tipo_transaccion_modulo());	
				detalleproveAux.setid_asiento_contable(this.detalleprove.getid_asiento_contable());	
				detalleproveAux.setid_factura(this.detalleprove.getid_factura());	
				detalleproveAux.setid_orden_compra(this.detalleprove.getid_orden_compra());	
				detalleproveAux.setid_estado_detalle_cliente(this.detalleprove.getid_estado_detalle_cliente());	
				detalleproveAux.setfecha_venta(this.detalleprove.getfecha_venta());	
				detalleproveAux.setfecha_emision(this.detalleprove.getfecha_emision());	
				detalleproveAux.setfecha_pago(this.detalleprove.getfecha_pago());	
				detalleproveAux.setfecha_vencimiento(this.detalleprove.getfecha_vencimiento());	
				detalleproveAux.setmonto_mone_local(this.detalleprove.getmonto_mone_local());	
				detalleproveAux.setmonto_mone_extra(this.detalleprove.getmonto_mone_extra());	
				detalleproveAux.setnumero_comprobante(this.detalleprove.getnumero_comprobante());	
				detalleproveAux.setnumero_factura(this.detalleprove.getnumero_factura());	
				detalleproveAux.setdebito_mone_local(this.detalleprove.getdebito_mone_local());	
				detalleproveAux.setcredito_mone_local(this.detalleprove.getcredito_mone_local());	
				detalleproveAux.setdebito_mone_extra(this.detalleprove.getdebito_mone_extra());	
				detalleproveAux.setcredito_mone_extra(this.detalleprove.getcredito_mone_extra());	
				detalleproveAux.setdescripcion(this.detalleprove.getdescripcion());	
				detalleproveAux.setid_anio(this.detalleprove.getid_anio());	
				detalleproveAux.setid_mes(this.detalleprove.getid_mes());	
				
				if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detalleproveAux.getId()>=0) {	
						this.detalleprovesEliminados.add(detalleproveAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproveAux,detalleproves);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproveSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.saveDetalleProves();//WithConnection
						//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproveLogic.saveDetalleProveRelaciones(detalleproveAux,this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							detalleproveAux.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detalleproveSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detalleproveAux,detalleproveLogic.getDetalleProves());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detalleproveAux,detalleproves);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getDetalleProves().addAll(this.detalleprovesEliminados);
					
					detalleproveLogic.saveDetalleProves();//WithConnection
					//detalleproveLogic.getSetVersionRowDetalleProves();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleProve();
				
				this.detalleprovesEliminados= new ArrayList<DetalleProve>();		
			}
			
			if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Prove GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detalleprove=detalleproveAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleProve();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleProve detalleproveLocal) throws Exception {
		
		if(this.detalleproveSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				detalleproveLocal.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());
				detalleproveLocal.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
			
			} else {
			
				detalleproveLocal.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautos);
				detalleproveLocal.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagos);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleProve detalleproveLocal) throws Exception {	
		if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detalleproveLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detalleproveLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalmovimientoBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalmovimientoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalmovimientoBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalmovimientoBeanSwingJInternalFrameLocal.actualizarLista(sucursalmovimientoBeanSwingJInternalFrameLocal.sucursal,this.sucursalmovimientosForeignKey);

				sucursalmovimientoBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalmovimientoBeanSwingJInternalFrameLocal.sucursal);

				detalleproveLocal.setSucursalMovimiento(sucursalmovimientoBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursalMovimiento();
				this.cargarCombosFrameSucursalMovimientosForeignKey("Formulario");
				this.setActualSucursalMovimientoForeignKey(sucursalmovimientoBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detalleproveLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detalleproveLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				detalleproveLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				detalleproveLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				detalleproveLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				detalleproveLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				detalleproveLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				detalleproveLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				detalleproveLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(OrdenCompraDetalleFormJInternalFrame.class)) {
				OrdenCompraBeanSwingJInternalFrame ordencompraBeanSwingJInternalFrameLocal=(OrdenCompraBeanSwingJInternalFrame) ((OrdenCompraDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ordencompraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoOrdenCompra(ordencompraBeanSwingJInternalFrameLocal.getordencompra(),true);
				ordencompraBeanSwingJInternalFrameLocal.actualizarLista(ordencompraBeanSwingJInternalFrameLocal.ordencompra,this.ordencomprasForeignKey);

				ordencompraBeanSwingJInternalFrameLocal.actualizarRelaciones(ordencompraBeanSwingJInternalFrameLocal.ordencompra);

				detalleproveLocal.setOrdenCompra(ordencompraBeanSwingJInternalFrameLocal.ordencompra);

				this.addItemDefectoCombosForeignKeyOrdenCompra();
				this.cargarCombosFrameOrdenComprasForeignKey("Formulario");
				this.setActualOrdenCompraForeignKey(ordencompraBeanSwingJInternalFrameLocal.ordencompra.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoDetalleClienteDetalleFormJInternalFrame.class)) {
				EstadoDetalleClienteBeanSwingJInternalFrame estadodetalleclienteBeanSwingJInternalFrameLocal=(EstadoDetalleClienteBeanSwingJInternalFrame) ((EstadoDetalleClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadodetalleclienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoDetalleCliente(estadodetalleclienteBeanSwingJInternalFrameLocal.getestadodetallecliente(),true);
				estadodetalleclienteBeanSwingJInternalFrameLocal.actualizarLista(estadodetalleclienteBeanSwingJInternalFrameLocal.estadodetallecliente,this.estadodetalleclientesForeignKey);

				estadodetalleclienteBeanSwingJInternalFrameLocal.actualizarRelaciones(estadodetalleclienteBeanSwingJInternalFrameLocal.estadodetallecliente);

				detalleproveLocal.setEstadoDetalleCliente(estadodetalleclienteBeanSwingJInternalFrameLocal.estadodetallecliente);

				this.addItemDefectoCombosForeignKeyEstadoDetalleCliente();
				this.cargarCombosFrameEstadoDetalleClientesForeignKey("Formulario");
				this.setActualEstadoDetalleClienteForeignKey(estadodetalleclienteBeanSwingJInternalFrameLocal.estadodetallecliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detalleproveLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detalleproveLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleProveActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detalleproveValidator.getInvalidValues(this.detalleprove);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleProve detalleprove,List<DetalleProve> detalleproves) throws Exception {
		try	{		
			DetalleProveConstantesFunciones.actualizarLista(detalleprove,detalleproves,this.detalleproveSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleProve detalleprove,List<DetalleProve> detalleproves) throws Exception {
		try	{			
			DetalleProveConstantesFunciones.actualizarSelectedLista(detalleprove,detalleproves);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleProve> detalleprovesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detalleprovesLocal=this.detalleproveLogic.getDetalleProves();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detalleprovesLocal=this.detalleproves;
			}
			//ARCHITECTURE
		
			for(DetalleProve detalleproveLocal:detalleprovesLocal) {
				if(this.permiteMantenimiento(detalleproveLocal) && detalleproveLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleProveConstantesFunciones.getDetalleProveLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_empresaDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_sucursalDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDSUCURSALMOVIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_sucursal_movimientoDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_ejercicioDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_periodoDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_moduloDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_monedaDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_clienteDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_transaccionDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_tipo_transaccion_moduloDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_asiento_contableDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_facturaDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDORDENCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_orden_compraDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDESTADODETALLECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_estado_detalle_clienteDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.FECHAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_ventaDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_emisionDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.FECHAPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_pagoDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_vencimientoDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.MONTOMONELOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_localDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.MONTOMONEEXTRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_extraDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_comprobanteDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.NUMEROFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_facturaDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.DEBITOMONELOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_localDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.CREDITOMONELOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_localDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.DEBITOMONEEXTRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_extraDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.CREDITOMONEEXTRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_extraDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldescripcionDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_anioDetalleProve,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProveConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelid_mesDetalleProve,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_empresaDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_sucursalDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_sucursal_movimientoDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_ejercicioDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_periodoDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_moduloDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_monedaDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_clienteDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_transaccionDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_tipo_transaccion_moduloDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_asiento_contableDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_facturaDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_orden_compraDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_estado_detalle_clienteDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_ventaDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_emisionDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_pagoDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_vencimientoDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_localDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_extraDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_comprobanteDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_facturaDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_localDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_localDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_extraDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_extraDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabeldescripcionDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_anioDetalleProve,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProve.jLabelid_mesDetalleProve,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("PagoAuto")) {
			if(this.detalleprove==null) {
				this.detalleprove= new DetalleProve();
			}

			if(this.detalleproveSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoDetalleProve
				this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.getpagoauto().setDetalleProve(this.detalleprove);
			}

			return;
		}
		 else  if(sTipo.equals("AutoriPago")) {
			if(this.detalleprove==null) {
				this.detalleprove= new DetalleProve();
			}

			if(this.detalleproveSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoDetalleProve
				this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.getautoripago().setDetalleProve(this.detalleprove);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleProve--;	
		
		
		this.detalleproveAux=new DetalleProve();
		
		this.detalleproveAux.setId(this.iIdNuevoDetalleProve);
		this.detalleproveAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleproveLogic.getDetalleProves().add(this.detalleproveAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detalleproves.add(this.detalleproveAux);
		}
		//ARCHITECTURE
		
		this.detalleprove=this.detalleproveAux;
		
		if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleProve(this.detalleprove);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleProve(this.detalleprove);
		}
				
		//this.setDefaultControlesDetalleProve();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleProve();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleProve();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProve();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleProve(this.detalleproveBean,this.detalleprove,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleProveConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
			classes=DetalleProveConstantesFunciones.getClassesRelationshipsOfDetalleProve(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detalleproveReturnGeneral=detalleproveLogic.procesarEventosDetalleProvesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleproveLogic.getDetalleProves(),this.detalleprove,this.detalleproveParameterGeneral,this.isEsNuevoDetalleProve,classes);//this.detalleproveLogic.getDetalleProve()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleProve(this.detalleproveReturnGeneral,this.detalleproveBean,false);
		
		if(this.detalleproveReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleProve(this.detalleproveReturnGeneral.getDetalleProve());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleProve(this.detalleproveReturnGeneral.getDetalleProve());
		}
		
		if(this.detalleproveReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleProve(this.detalleproveReturnGeneral.getDetalleProve(),classes);//this.detalleproveBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleProve();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleProve();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleProveBeanSwingJInternalFrameAdditional.RecargarFormDetalleProve(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleProve(false);
						
			if(detalleproveSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado() && PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPagoAutoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado() && AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProve();
			}
			
			this.actualizarVisualTableDatosDetalleProve();
			
			this.jTableDatosDetalleProve.setRowSelectionInterval(this.getIndiceNuevoDetalleProve(), this.getIndiceNuevoDetalleProve());
			
			this.seleccionarFilaTablaDetalleProveActual();
						
			this.actualizarEstadoCeldasBotonesDetalleProve("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleProve(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarfecha_ventaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarfecha_emisionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarfecha_pagoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarfecha_vencimientoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarmonto_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarmonto_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarnumero_comprobanteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarnumero_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activardebito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarcredito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activardebito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarcredito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activardescripcionDetalleProve);	
		//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_empresaDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_sucursalDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_sucursal_movimientoDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_ejercicioDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_periodoDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_moduloDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_monedaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_clienteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_transaccionDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_tipo_transaccion_moduloDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_asiento_contableDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_orden_compraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_estado_detalle_clienteDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_anioDetalleProve);//
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setEnabled(isHabilitar && this.detalleproveConstantesFunciones.activarid_mesDetalleProve);
	};
	
	public void setDefaultControlesDetalleProve() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleProve(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detalleproveSessionBean.setConGuardarRelaciones(true);			
			this.detalleproveSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.detalleproveSessionBean.setConGuardarRelaciones(false);			
			this.detalleproveSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoDetalleProve() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
				if(detalleproveAux.getId().equals(this.iIdNuevoDetalleProve)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProve detalleproveAux:this.detalleproves) {
				if(detalleproveAux.getId().equals(this.iIdNuevoDetalleProve)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleProve(DetalleProve detalleprove,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
				if(detalleproveAux.getId().equals(detalleprove.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProve detalleproveAux:this.detalleproves) {
				if(detalleproveAux.getId().equals(detalleprove.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleProve(DetalleProve detalleproveOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
				if(detalleproveAux.getDetalleProveOriginal().getId().equals(detalleproveOriginal.getId())) {
					existe=true;
					detalleproveOriginal.setId(detalleproveAux.getId());
					detalleproveOriginal.setVersionRow(detalleproveAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProve detalleproveAux:this.detalleproves) {
				if(detalleproveAux.getDetalleProveOriginal().getId().equals(detalleproveOriginal.getId())) {
					existe=true;
					detalleproveOriginal.setId(detalleproveAux.getId());
					detalleproveOriginal.setVersionRow(detalleproveAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleProve(Boolean esParaCancelar) throws Exception {
		detalleprovesAux=new ArrayList<DetalleProve>();
		detalleproveAux=new DetalleProve();
		
		if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
					if(detalleproveAux.getId()<0) {
						detalleprovesAux.add(detalleproveAux);
					}		
				}
				this.iIdNuevoDetalleProve=0L;
				this.detalleproveLogic.getDetalleProves().removeAll(detalleprovesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProve detalleproveAux:this.detalleproves) {
					if(detalleproveAux.getId()<0) {
						detalleprovesAux.add(detalleproveAux);
					}		
				}
				this.iIdNuevoDetalleProve=0L;
				this.detalleproves.removeAll(detalleprovesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleProve 
					&& this.detalleproveLogic.getDetalleProves().size()>0
					) {
					detalleproveAux=this.detalleproveLogic.getDetalleProves().get(this.detalleproveLogic.getDetalleProves().size() - 1);
				
					if(detalleproveAux.getId()<0) {
						this.detalleproveLogic.getDetalleProves().remove(detalleproveAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleProve && this.detalleproves.size()>0) {
					detalleproveAux=this.detalleproves.get(this.detalleproves.size() - 1);
				
					if(detalleproveAux.getId()<0) {
						this.detalleproves.remove(detalleproveAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleProve(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detalleprove.getId()<0) {
				this.detalleproveLogic.getDetalleProves().remove(this.detalleprove);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detalleprove.getId()<0) {
				this.detalleproves.remove(this.detalleprove);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleProve(List<DetalleProve> detalleprovesAux) throws Exception {
		DetalleProveConstantesFunciones.setEstadosInicialesDetalleProve(detalleprovesAux);
	}
	
	public void setEstadosInicialesDetalleProve(DetalleProve detalleproveAux) throws Exception {
		DetalleProveConstantesFunciones.setEstadosInicialesDetalleProve(detalleproveAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleProveActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleProveActual()) {
				if(!this.isEsNuevoDetalleProve) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleProve=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleProveActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Prove ?", "MANTENIMIENTO DE Detalle Prove", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleProve detalleprove) throws Exception {
		DetalleProveConstantesFunciones.seleccionarAsignar(this.detalleprove,detalleprove);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleProve=this.isPermisoActualizarOriginalDetalleProve;
			
			
			this.seleccionarAsignar(detalleprove);
			
			

			idClienteActual=detalleprove.getid_cliente();
			this.seleccionarClienteActual();

			idAsientoContableActual=detalleprove.getid_asiento_contable();
			this.seleccionarAsientoContableActual();

			idFacturaActual=detalleprove.getid_factura();
			this.seleccionarFacturaActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleProveConstantesFunciones.quitarEspaciosDetalleProve(this.detalleprove,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleProve("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detalleproveSessionBean.setsFuncionBusquedaRapida(this.detalleproveSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleProve) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleProve(esParaCancelar);				
				this.cancelarNuevoDetalleProve(esParaCancelar);								
			}
			
			this.detalleprove=new DetalleProve();
			
			this.inicializarDetalleProve();
			
			this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleProve() throws Exception {
		try {
			DetalleProveConstantesFunciones.inicializarDetalleProve(this.detalleprove);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detalleproveLogic.getDetalleProves().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleProves(String sAccionBusqueda,List<DetalleProve> detalleprovesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleProve"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleProveMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleProveMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleProve"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Proves");		
		parameters.put("busquedapor", DetalleProveConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(PagoAuto.class));
			classes.add(new Classe(AutoriPago.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					DetalleProveLogic detalleproveLogicAuxiliar=new DetalleProveLogic();
					detalleproveLogicAuxiliar.setDatosCliente(detalleproveLogic.getDatosCliente());				
					detalleproveLogicAuxiliar.setDetalleProves(detalleprovesParaReportes);
					
					detalleproveLogicAuxiliar.cargarRelacionesLoteForeignKeyDetalleProveWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					detalleprovesParaReportes=detalleproveLogicAuxiliar.getDetalleProves();
					
					//detalleproveLogic.getNewConnexionToDeep();
					
					//for (DetalleProve detalleprove:detalleprovesParaReportes) {
					//	detalleproveLogic.deepLoad(detalleprove, false, DeepLoadType.INCLUDE, classes);
					//}						
					//detalleproveLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//detalleproveLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFilePagoAuto = AuxiliarReportes.class.getResourceAsStream("PagoAutoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_pagoauto", reportFilePagoAuto);

			InputStream reportFileAutoriPago = AuxiliarReportes.class.getResourceAsStream("AutoriPagoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_autoripago", reportFileAutoriPago);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleProve=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleProveConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleProveConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleProve=new JRBeanArrayDataSource(DetalleProveJInternalFrame.TraerDetalleProveBeans(detalleprovesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleProve);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleProveConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleProveConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleProveBean.TraerDetalleProveBeans(detalleprovesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetalleProveActionPerformed(null);
					//this.generarExcelReporteDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleProves(sAccionBusqueda,sTipoArchivoReporte,detalleprovesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleProves(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProve> detalleprovesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProves");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleProve("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleProve detalleprove : detalleprovesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleProveConstantesFunciones.generarExcelReporteDataDetalleProve("NORMAL",row,workbook,detalleprove,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleProve(String sTipo,Row row,Workbook workbook) {
		
		DetalleProveConstantesFunciones.generarExcelReporteHeaderDetalleProve(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleProves(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProve> detalleprovesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProves");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleProve detalleprove : detalleprovesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleProveConstantesFunciones.getDetalleProveDescripcion(detalleprove));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getsucursalmovimiento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.gettipotransaccionmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getordencompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getestadodetallecliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_FECHAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getfecha_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_FECHAPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getfecha_pago());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getmonto_mone_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getmonto_mone_extra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getnumero_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getdebito_mone_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getcredito_mone_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getdebito_mone_extra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getcredito_mone_extra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProveConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleprove.getmes_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleProves(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProve> detalleprovesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleProve> detalleprovesRespaldo=null;
		
		classes=DetalleProveConstantesFunciones.getClassesRelationshipsOfDetalleProve(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detalleproveLogic.setDatosCliente(this.datosCliente);
		this.detalleproveLogic.setDatosDeep(this.datosDeep);
		this.detalleproveLogic.setIsConDeep(true);
		
		detalleprovesRespaldo=this.detalleproveLogic.getDetalleProves();
		
		this.detalleproveLogic.setDetalleProves(detalleprovesParaReportes);	
		this.detalleproveLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detalleprovesParaReportes=this.detalleproveLogic.getDetalleProves();
		this.detalleproveLogic.setDetalleProves(detalleprovesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProves");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleProve("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleProve detalleprove : detalleprovesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleProve("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleProveConstantesFunciones.generarExcelReporteDataDetalleProve("NORMAL",row,workbook,detalleprove,cellStyleDataAux);
		
			
			


				//PagoAuto
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PagoAutoConstantesFunciones.SCLASSWEBTITULO))) {

				if(detalleprove.getPagoAutos()!=null && detalleprove.getPagoAutos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PagoAutoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PagoAutoConstantesFunciones.generarExcelReporteHeaderPagoAuto("RELACIONADO",row,workbook);
				}

				if(detalleprove.getPagoAutos()!=null) {
					i2=0;
					for(PagoAuto pagoauto : detalleprove.getPagoAutos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PagoAutoConstantesFunciones.generarExcelReporteDataPagoAuto("RELACIONADO",row,workbook,pagoauto,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//AutoriPago
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(AutoriPagoConstantesFunciones.SCLASSWEBTITULO))) {

				if(detalleprove.getAutoriPagos()!=null && detalleprove.getAutoriPagos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					AutoriPagoConstantesFunciones.generarExcelReporteHeaderAutoriPago("RELACIONADO",row,workbook);
				}

				if(detalleprove.getAutoriPagos()!=null) {
					i2=0;
					for(AutoriPago autoripago : detalleprove.getAutoriPagos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						AutoriPagoConstantesFunciones.generarExcelReporteDataAutoriPago("RELACIONADO",row,workbook,autoripago,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleProveConstantesFunciones.getDetalleProveDescripcion(detalleprove));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProve.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetalleProve() throws Exception {		
		this.startProcessDetalleProve(true);
	}
	
	public void startProcessDetalleProve(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleProve ,this.jPanelParametrosReportesDetalleProve, this.jScrollPanelDatosDetalleProve,this.jPanelPaginacionDetalleProve, this.jScrollPanelDatosEdicionDetalleProve, this.jPanelAccionesDetalleProve,this.jPanelAccionesFormularioDetalleProve,this.jmenuBarDetalleProve,this.jmenuBarDetalleDetalleProve,this.jTtoolBarDetalleProve,this.jTtoolBarDetalleDetalleProve);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleProve=this.jTabbedPaneBusquedasDetalleProve; 
		
		final JPanel jPanelParametrosReportesDetalleProve=this.jPanelParametrosReportesDetalleProve;
		//final JScrollPane jScrollPanelDatosDetalleProve=this.jScrollPanelDatosDetalleProve;
		final JTable jTableDatosDetalleProve=this.jTableDatosDetalleProve;		
		final JPanel jPanelPaginacionDetalleProve=this.jPanelPaginacionDetalleProve;
		//final JScrollPane jScrollPanelDatosEdicionDetalleProve=this.jScrollPanelDatosEdicionDetalleProve;
		final JPanel jPanelAccionesDetalleProve=this.jPanelAccionesDetalleProve;
		
		JPanel jPanelCamposAuxiliarDetalleProve=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleProve=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			jPanelCamposAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jPanelCamposDetalleProve;
			jPanelAccionesFormularioAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jPanelAccionesFormularioDetalleProve;
		}
		
		final JPanel jPanelCamposDetalleProve=jPanelCamposAuxiliarDetalleProve;
		final JPanel jPanelAccionesFormularioDetalleProve=jPanelAccionesFormularioAuxiliarDetalleProve;
		
		
		final JMenuBar jmenuBarDetalleProve=this.jmenuBarDetalleProve;
		final JToolBar jTtoolBarDetalleProve=this.jTtoolBarDetalleProve;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetalleProve=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleProve=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			jmenuBarDetalleAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jmenuBarDetalleDetalleProve;
			jTtoolBarDetalleAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jTtoolBarDetalleDetalleProve;
		}
		
		final JMenuBar jmenuBarDetalleDetalleProve=jmenuBarDetalleAuxiliarDetalleProve;
		final JToolBar jTtoolBarDetalleDetalleProve=jTtoolBarDetalleAuxiliarDetalleProve;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleProve;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleProve;
			processRunnable.jTableDatos=jTableDatosDetalleProve;
			processRunnable.jPanelCampos=jPanelCamposDetalleProve;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleProve;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleProve;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleProve;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleProve;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleProve;
			processRunnable.jTtoolBar=jTtoolBarDetalleProve;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleProve;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleProve ,jPanelParametrosReportesDetalleProve,jTableDatosDetalleProve, /*jScrollPanelDatosDetalleProve,*/jPanelCamposDetalleProve,jPanelPaginacionDetalleProve, /*jScrollPanelDatosEdicionDetalleProve,*/ jPanelAccionesDetalleProve,jPanelAccionesFormularioDetalleProve,jmenuBarDetalleProve,jmenuBarDetalleDetalleProve,jTtoolBarDetalleProve,jTtoolBarDetalleDetalleProve);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleProve ,jPanelParametrosReportesDetalleProve, jScrollPanelDatosDetalleProve,jPanelPaginacionDetalleProve, jScrollPanelDatosEdicionDetalleProve, jPanelAccionesDetalleProve,jPanelAccionesFormularioDetalleProve,jmenuBarDetalleProve,jmenuBarDetalleDetalleProve,jTtoolBarDetalleProve,jTtoolBarDetalleDetalleProve);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleProve() {// throws Exception 
		this.finishProcessDetalleProve(true);
	}
	
	public void finishProcessDetalleProve(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleProve ,this.jPanelParametrosReportesDetalleProve, this.jScrollPanelDatosDetalleProve,this.jPanelPaginacionDetalleProve, this.jScrollPanelDatosEdicionDetalleProve, this.jPanelAccionesDetalleProve,this.jPanelAccionesFormularioDetalleProve,this.jmenuBarDetalleProve,this.jmenuBarDetalleDetalleProve,this.jTtoolBarDetalleProve,this.jTtoolBarDetalleDetalleProve);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleProve=this.jTabbedPaneBusquedasDetalleProve; 
		
		final JPanel jPanelParametrosReportesDetalleProve=this.jPanelParametrosReportesDetalleProve;
		//final JScrollPane jScrollPanelDatosDetalleProve=this.jScrollPanelDatosDetalleProve;
		final JTable jTableDatosDetalleProve=this.jTableDatosDetalleProve;		
		final JPanel jPanelPaginacionDetalleProve=this.jPanelPaginacionDetalleProve;
		//final JScrollPane jScrollPanelDatosEdicionDetalleProve=this.jScrollPanelDatosEdicionDetalleProve;
		final JPanel jPanelAccionesDetalleProve=this.jPanelAccionesDetalleProve;
		
		JPanel jPanelCamposAuxiliarDetalleProve=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleProve=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			jPanelCamposAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jPanelCamposDetalleProve;
			jPanelAccionesFormularioAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jPanelAccionesFormularioDetalleProve;
		}
		
		final JPanel jPanelCamposDetalleProve=jPanelCamposAuxiliarDetalleProve;
		final JPanel jPanelAccionesFormularioDetalleProve=jPanelAccionesFormularioAuxiliarDetalleProve;
		
		
		final JMenuBar jmenuBarDetalleProve=this.jmenuBarDetalleProve;		
		final JToolBar jTtoolBarDetalleProve=this.jTtoolBarDetalleProve;
				
		JMenuBar jmenuBarDetalleAuxiliarDetalleProve=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleProve=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			jmenuBarDetalleAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jmenuBarDetalleDetalleProve;
			jTtoolBarDetalleAuxiliarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jTtoolBarDetalleDetalleProve;		
		}
		
		final JMenuBar jmenuBarDetalleDetalleProve=jmenuBarDetalleAuxiliarDetalleProve;
		final JToolBar jTtoolBarDetalleDetalleProve=jTtoolBarDetalleAuxiliarDetalleProve;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleProve;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleProve;
			processRunnable.jTableDatos=jTableDatosDetalleProve;
			processRunnable.jPanelCampos=jPanelCamposDetalleProve;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleProve;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleProve;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleProve;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleProve;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleProve;
			processRunnable.jTtoolBar=jTtoolBarDetalleProve;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleProve;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleProve ,jPanelParametrosReportesDetalleProve, jTableDatosDetalleProve,/*jScrollPanelDatosDetalleProve,*/jPanelCamposDetalleProve,jPanelPaginacionDetalleProve, /*jScrollPanelDatosEdicionDetalleProve,*/ jPanelAccionesDetalleProve,jPanelAccionesFormularioDetalleProve,jmenuBarDetalleProve,jmenuBarDetalleDetalleProve,jTtoolBarDetalleProve,jTtoolBarDetalleDetalleProve));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleProve(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleProve(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleProve(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleProve(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleProve,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleProve,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleProve(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleProve,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleProve,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detalleproveConstantesFunciones.getsFinalQueryDetalleProve();
		String  finalQueryPaginacionTodos=this.detalleproveConstantesFunciones.getsFinalQueryDetalleProve();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleProveConstantesFunciones.getArrayColumnasGlobalesNoDetalleProve(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleProveConstantesFunciones.getArrayColumnasGlobalesDetalleProve(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleProveConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detalleprovesEliminados= new ArrayList<DetalleProve>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleProve();
		
				///*DetalleProveSessionBean*/this.detalleproveSessionBean=new DetalleProveSessionBean();
			
			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleProveConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleProveConstantesFunciones.getClassesForeignKeysOfDetalleProve(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detalleprove."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detalleprovesAux= new ArrayList<DetalleProve>();
			
				
			detalleproveLogic.setDatosCliente(this.datosCliente);
			detalleproveLogic.setDatosDeep(this.datosDeep);
			detalleproveLogic.setIsConDeep(true);
			
			
			detalleproveLogic.getDetalleProveDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detalleproveLogic.getTodosDetalleProves(finalQueryGlobal,pagination);
					
					//detalleproveLogic.getTodosDetalleProvesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detalleproveLogic.getDetalleProves()==null|| detalleproveLogic.getDetalleProves().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleprovesAux= new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux= new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleproveLogic.getTodosDetalleProves(finalQueryGlobal+"",this.pagination);												
							
							//detalleproveLogic.getTodosDetalleProvesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleProves("Todos",detalleproveLogic.getDetalleProves() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());					
							detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleProve=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleProve=this.idActual;
				
				} else if(this.idDetalleProveActual!=null && this.idDetalleProveActual!=0L) {
					idDetalleProve=idDetalleProveActual;
				}
				
					
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndicePorId(idDetalleProve);
				
				this.detalleproves=new ArrayList<DetalleProve>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detalleproveLogic.getEntity(idDetalleProve);
					
					//detalleproveLogic.getEntityWithConnection(idDetalleProve);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
					detalleproveLogic.getDetalleProves().add(detalleproveLogic.getDetalleProve());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproves=new ArrayList<DetalleProve>();
					this.detalleproves.add(detalleprove);
				}
				
				if(detalleproveLogic.getDetalleProve()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdAsientoContable",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdAsientoContable",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdCliente",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdCliente",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdDetalleProve")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_sucursal_movimientoFK_IdDetalleProve);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdDetalleProve(finalQueryGlobal,pagination,id_sucursal_movimientoFK_IdDetalleProve);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_sucursal_movimientoFK_IdDetalleProve);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_sucursal_movimientoFK_IdDetalleProve);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdDetalleProve(finalQueryGlobal,pagination,id_sucursal_movimientoFK_IdDetalleProve);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_sucursal_movimientoFK_IdDetalleProve);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_sucursal_movimientoFK_IdDetalleProve);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdDetalleProve",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdDetalleProve",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdEjercicio",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdEjercicio",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdEmpresa",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdEmpresa",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoDetalleCliente")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleCliente(id_estado_detalle_clienteFK_IdEstadoDetalleCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdEstadoDetalleCliente(finalQueryGlobal,pagination,id_estado_detalle_clienteFK_IdEstadoDetalleCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleCliente(id_estado_detalle_clienteFK_IdEstadoDetalleCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleCliente(id_estado_detalle_clienteFK_IdEstadoDetalleCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdEstadoDetalleCliente(finalQueryGlobal,pagination,id_estado_detalle_clienteFK_IdEstadoDetalleCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleCliente(id_estado_detalle_clienteFK_IdEstadoDetalleCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleCliente(id_estado_detalle_clienteFK_IdEstadoDetalleCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdEstadoDetalleCliente",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdEstadoDetalleCliente",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdFactura",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdFactura",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdModulo",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdModulo",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMoneda")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdMoneda",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdMoneda",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdOrdenCompra")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdOrdenCompra(id_orden_compraFK_IdOrdenCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdOrdenCompra(finalQueryGlobal,pagination,id_orden_compraFK_IdOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdOrdenCompra(id_orden_compraFK_IdOrdenCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdOrdenCompra(id_orden_compraFK_IdOrdenCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdOrdenCompra(finalQueryGlobal,pagination,id_orden_compraFK_IdOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdOrdenCompra(id_orden_compraFK_IdOrdenCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdOrdenCompra(id_orden_compraFK_IdOrdenCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdOrdenCompra",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdOrdenCompra",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdPeriodo",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdPeriodo",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdSucursal",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdSucursal",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdTipoTransaccionModulo",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdTipoTransaccionModulo",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproveLogic.getDetalleProvesFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproveLogic.getDetalleProves()==null||detalleproveLogic.getDetalleProves().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproves==null|| detalleproves.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleprovesAux=new ArrayList<DetalleProve>();
						detalleprovesAux.addAll(detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleprovesAux=new ArrayList<DetalleProve>();
							detalleprovesAux.addAll(detalleproves);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproveLogic.getDetalleProvesFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProveConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProves("FK_IdTransaccion",detalleproveLogic.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProves("FK_IdTransaccion",detalleproves);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveLogic.setDetalleProves(new ArrayList<DetalleProve>());
						detalleproveLogic.getDetalleProves().addAll(detalleprovesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproves=new ArrayList<DetalleProve>();
							detalleproves.addAll(detalleprovesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleProve();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleProve();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleproveLogic.getDetalleProves().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleproves.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleproveLogic.getDetalleProves().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleproves.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleProve detalleprove) {
		Boolean permite=true;
		
		if(this.detalleprove.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleProveConstantesFunciones.getOrderByListaDetalleProve();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleProveConstantesFunciones.getOrderByListaDetalleProve();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProve detalleprove:detalleproveLogic.getDetalleProves()) {
				if(detalleprove.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproveTotales=detalleprove;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProve detalleprove:this.detalleproves) {
				if(detalleprove.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproveTotales=detalleprove;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detalleproveAux=new DetalleProve();
			this.detalleproveAux.setsType(Constantes2.S_TOTALES);
			this.detalleproveAux.setIsNew(false);
			this.detalleproveAux.setIsChanged(false);
			this.detalleproveAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleProveConstantesFunciones.TotalizarValoresFilaDetalleProve(this.detalleproveLogic.getDetalleProves(),this.detalleproveAux);
				
				this.detalleproveLogic.getDetalleProves().add(this.detalleproveAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleProveConstantesFunciones.TotalizarValoresFilaDetalleProve(this.detalleproves,this.detalleproveAux);
				
				this.detalleproves.add(this.detalleproveAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detalleproveTotales=new DetalleProve();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleproveLogic.getDetalleProves().remove(detalleproveTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleproves.remove(detalleproveTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detalleproveTotales=new DetalleProve();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProve detalleprove:detalleproveLogic.getDetalleProves()) {
				if(detalleprove.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproveTotales=detalleprove;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleProveConstantesFunciones.TotalizarValoresFilaDetalleProve(this.detalleproveLogic.getDetalleProves(),detalleproveTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProve detalleprove:this.detalleproves) {
				if(detalleprove.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproveTotales=detalleprove;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleProveConstantesFunciones.TotalizarValoresFilaDetalleProve(this.detalleproves,detalleproveTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetalleProvesFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdDetalleProve()throws Exception {
		try {
			sAccionBusqueda="FK_IdDetalleProve";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdEstadoDetalleCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoDetalleCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdOrdenCompra()throws Exception {
		try {
			sAccionBusqueda="FK_IdOrdenCompra";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProvesFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetalleProvesFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdDetalleProve(String sFinalQuery,Long id_sucursal_movimiento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdDetalleProve(sFinalQuery,this.pagination,id_sucursal_movimiento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdEstadoDetalleCliente(String sFinalQuery,Long id_estado_detalle_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdEstadoDetalleCliente(sFinalQuery,this.pagination,id_estado_detalle_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdOrdenCompra(String sFinalQuery,Long id_orden_compra)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdOrdenCompra(sFinalQuery,this.pagination,id_orden_compra);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProvesFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getDetalleProvesFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleProve() {
		this.isPermisoTodoDetalleProve=false;
		this.isPermisoNuevoDetalleProve=false;
		this.isPermisoActualizarDetalleProve=false;
		this.isPermisoActualizarOriginalDetalleProve=false;
		this.isPermisoEliminarDetalleProve=false;
		this.isPermisoGuardarCambiosDetalleProve=false;
		this.isPermisoConsultaDetalleProve=false;
		this.isPermisoBusquedaDetalleProve=false;
		this.isPermisoReporteDetalleProve=false;		
		this.isPermisoOrdenDetalleProve=false;		
		this.isPermisoPaginacionMedioDetalleProve=false;		
		this.isPermisoPaginacionAltoDetalleProve=false;
		this.isPermisoPaginacionTodoDetalleProve=false;
		this.isPermisoCopiarDetalleProve=false;		
		this.isPermisoVerFormDetalleProve=false;		
		this.isPermisoDuplicarDetalleProve=false;		
		this.isPermisoOrdenDetalleProve=false;		
	}
	
	public void setPermisosUsuarioDetalleProve(Boolean isPermiso) {
		this.isPermisoTodoDetalleProve=isPermiso;
		this.isPermisoNuevoDetalleProve=isPermiso;
		this.isPermisoActualizarDetalleProve=isPermiso;
		this.isPermisoActualizarOriginalDetalleProve=isPermiso;
		this.isPermisoEliminarDetalleProve=isPermiso;
		this.isPermisoGuardarCambiosDetalleProve=isPermiso;
		this.isPermisoConsultaDetalleProve=isPermiso;
		this.isPermisoBusquedaDetalleProve=isPermiso;
		this.isPermisoReporteDetalleProve=isPermiso;
		this.isPermisoOrdenDetalleProve=isPermiso;		
		this.isPermisoPaginacionMedioDetalleProve=isPermiso;		
		this.isPermisoPaginacionAltoDetalleProve=isPermiso;		
		this.isPermisoPaginacionTodoDetalleProve=isPermiso;		
		this.isPermisoCopiarDetalleProve=isPermiso;		
		this.isPermisoVerFormDetalleProve=isPermiso;		
		this.isPermisoDuplicarDetalleProve=isPermiso;
		this.isPermisoOrdenDetalleProve=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleProve(Boolean isPermiso) {
		//this.isPermisoTodoDetalleProve=isPermiso;
		this.isPermisoNuevoDetalleProve=isPermiso;
		this.isPermisoActualizarDetalleProve=isPermiso;
		this.isPermisoActualizarOriginalDetalleProve=isPermiso;
		this.isPermisoEliminarDetalleProve=isPermiso;
		this.isPermisoGuardarCambiosDetalleProve=isPermiso;
		//this.isPermisoConsultaDetalleProve=isPermiso;
		//this.isPermisoBusquedaDetalleProve=isPermiso;
		//this.isPermisoReporteDetalleProve=isPermiso;
		//this.isPermisoOrdenDetalleProve=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleProve=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleProve=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleProve=isPermiso;		
		//this.isPermisoCopiarDetalleProve=isPermiso;		
		//this.isPermisoDuplicarDetalleProve=isPermiso;
		//this.isPermisoOrdenDetalleProve=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleProveClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(PagoAutoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
		if(DetalleProveJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosPagoAuto=false;
		this.isTienePermisosPagoAuto=this.verificarGetPermisosUsuarioOpcionDetalleProveClaseRelacionada(this.opcionsRelacionadas,PagoAutoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosAutoriPago=false;
		this.isTienePermisosAutoriPago=this.verificarGetPermisosUsuarioOpcionDetalleProveClaseRelacionada(this.opcionsRelacionadas,AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleProve(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleProveClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosPagoAuto=conPermiso;
		this.isTienePermisosAutoriPago=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleProveClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleProveClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleProveClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosPagoAuto && this.jInternalFrameDetalleFormDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.remove(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosAutoriPago && this.jInternalFrameDetalleFormDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.remove(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioDetalleProve() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleProveJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleProveConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleProve=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleProve=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleProve=this.isPermisoActualizarDetalleProve;
			this.isPermisoEliminarDetalleProve=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleProve=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleProve=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleProve=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleProve=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleProve=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleProve=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleProve=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleProve=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleProve=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleProve=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleProve=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleProve=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleProve=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleProve.setToolTipText(this.jTableDatosDetalleProve.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleProve(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleProve(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleProveJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleProveJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleProve() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosPagoAuto && this.detalleproveConstantesFunciones.mostrarPagoAutoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Pago Auto");
			reporte.setsDescripcion("Pago Auto");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosAutoriPago && this.detalleproveConstantesFunciones.mostrarAutoriPagoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Autori Pago");
			reporte.setsDescripcion("Autori Pago");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleProveListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.sucursalmovimientosForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.ordencomprasForeignKey=new ArrayList();
				this.estadodetalleclientesForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleProveListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleProveJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleProveListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoDetalleClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalMovimientoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalmovimientosForeignKey==null||this.sucursalmovimientosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalMovimientosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyOrdenCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ordencomprasForeignKey==null||this.ordencomprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=OrdenCompraConstantesFunciones.getArrayColumnasGlobalesOrdenCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,OrdenCompraConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=OrdenCompraConstantesFunciones.SFINALQUERY;

				this.cargarCombosOrdenComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadodetalleclientesForeignKey==null||this.estadodetalleclientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoDetalleClienteConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoDetalleClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoDetalleClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleProveListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleProveParameterReturnGeneral detalleproveReturnGeneral=new DetalleProveParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_empresaDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_empresaDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_sucursalDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_sucursalDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalSucursalMovimiento="";

				if(((this.sucursalmovimientosForeignKey==null||this.sucursalmovimientosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_sucursal_movimientoDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_sucursal_movimientoDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursalMovimiento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursalMovimiento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursalMovimiento=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursalMovimiento, "");
						finalQueryGlobalSucursalMovimiento+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalMovimientosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursalMovimiento=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidSucursalMovimientoActual();
					}
				} else {
					finalQueryGlobalSucursalMovimiento="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_ejercicioDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_ejercicioDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_periodoDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_periodoDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_moduloDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_moduloDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_monedaDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_monedaDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_clienteDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_clienteDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_transaccionDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_transaccionDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_tipo_transaccion_moduloDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_tipo_transaccion_moduloDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_asiento_contableDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_asiento_contableDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_facturaDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_facturaDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalOrdenCompra="";

				if(((this.ordencomprasForeignKey==null||this.ordencomprasForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_orden_compraDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_orden_compraDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionOrdenCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=OrdenCompraConstantesFunciones.getArrayColumnasGlobalesOrdenCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalOrdenCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,OrdenCompraConstantesFunciones.TABLENAME);

						finalQueryGlobalOrdenCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalOrdenCompra, "");
						finalQueryGlobalOrdenCompra+=OrdenCompraConstantesFunciones.SFINALQUERY;

						//this.cargarCombosOrdenComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalOrdenCompra=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidOrdenCompraActual();
					}
				} else {
					finalQueryGlobalOrdenCompra="NONE";
				}


				String finalQueryGlobalEstadoDetalleCliente="";

				if(((this.estadodetalleclientesForeignKey==null||this.estadodetalleclientesForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_estado_detalle_clienteDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_estado_detalle_clienteDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoDetalleClienteConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoDetalleCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoDetalleCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoDetalleCliente, "");
						finalQueryGlobalEstadoDetalleCliente+=EstadoDetalleClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoDetalleClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoDetalleCliente=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidEstadoDetalleClienteActual();
					}
				} else {
					finalQueryGlobalEstadoDetalleCliente="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_anioDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_anioDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detalleproveConstantesFunciones.cargarid_mesDetalleProve)
					 || (this.esRecargarFks && this.detalleproveConstantesFunciones.cargarid_mesDetalleProve)) {

					if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detalleproveSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detalleproveReturnGeneral=detalleproveLogic.cargarCombosLoteForeignKeyDetalleProve(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalSucursalMovimiento,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalModulo,finalQueryGlobalMoneda,finalQueryGlobalCliente,finalQueryGlobalTransaccion,finalQueryGlobalTipoTransaccionModulo,finalQueryGlobalAsientoContable,finalQueryGlobalFactura,finalQueryGlobalOrdenCompra,finalQueryGlobalEstadoDetalleCliente,finalQueryGlobalAnio,finalQueryGlobalMes);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detalleproveReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detalleproveReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalSucursalMovimiento.equals("NONE")) {
				this.sucursalmovimientosForeignKey=detalleproveReturnGeneral.getsucursalmovimientosForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detalleproveReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detalleproveReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=detalleproveReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=detalleproveReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=detalleproveReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=detalleproveReturnGeneral.gettransaccionsForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=detalleproveReturnGeneral.gettipotransaccionmodulosForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=detalleproveReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=detalleproveReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalOrdenCompra.equals("NONE")) {
				this.ordencomprasForeignKey=detalleproveReturnGeneral.getordencomprasForeignKey();
			}

			if(!finalQueryGlobalEstadoDetalleCliente.equals("NONE")) {
				this.estadodetalleclientesForeignKey=detalleproveReturnGeneral.getestadodetalleclientesForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detalleproveReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detalleproveReturnGeneral.getmessForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleProve()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeySucursalMovimiento();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTransaccion();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyOrdenCompra();
			this.addItemDefectoCombosForeignKeyEstadoDetalleCliente();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursalMovimiento()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionSucursalMovimiento()) {
				Sucursal sucursalmovimiento=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursalmovimiento,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursalmovimiento.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalmovimientosForeignKey,sucursalmovimiento,true)) {

					this.sucursalmovimientosForeignKey.add(0,sucursalmovimiento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyOrdenCompra()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionOrdenCompra()) {
				OrdenCompra ordencompra=new OrdenCompra();
				OrdenCompraConstantesFunciones.setOrdenCompraDescripcion(ordencompra,Constantes.SMENSAJE_ESCOJA_OPCION);
				ordencompra.setId(null);

				if(!OrdenCompraConstantesFunciones.ExisteEnLista(this.ordencomprasForeignKey,ordencompra,true)) {

					this.ordencomprasForeignKey.add(0,ordencompra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoDetalleCliente()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleCliente()) {
				EstadoDetalleCliente estadodetallecliente=new EstadoDetalleCliente();
				EstadoDetalleClienteConstantesFunciones.setEstadoDetalleClienteDescripcion(estadodetallecliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadodetallecliente.setId(null);

				if(!EstadoDetalleClienteConstantesFunciones.ExisteEnLista(this.estadodetalleclientesForeignKey,estadodetallecliente,true)) {

					this.estadodetalleclientesForeignKey.add(0,estadodetallecliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detalleproveSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleProve()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleProve(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyDetalleProve()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.detalleprove.setfecha_venta(this.parametroGeneralUsuario.getfecha_sistema());
				this.detalleprove.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.detalleprove.setfecha_pago(this.parametroGeneralUsuario.getfecha_sistema());
				this.detalleprove.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProve();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleProve(DetalleProve detalleprove)throws Exception {	
		try {
			
			this.setActualSucursalMovimientoForeignKey(detalleprove.getid_sucursal_movimiento(),false,"Formulario");
			this.setActualClienteForeignKey(detalleprove.getid_cliente(),false,"Formulario");
			this.setActualTransaccionForeignKey(detalleprove.getid_transaccion(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(detalleprove.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualAsientoContableForeignKey(detalleprove.getid_asiento_contable(),false,"Formulario");
			this.setActualFacturaForeignKey(detalleprove.getid_factura(),false,"Formulario");
			this.setActualOrdenCompraForeignKey(detalleprove.getid_orden_compra(),false,"Formulario");
			this.setActualEstadoDetalleClienteForeignKey(detalleprove.getid_estado_detalle_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleProve(DetalleProve detalleprove,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detalleprove.getCliente()!=null && !sTipoEvento.equals("id_clienteDetalleProve")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(detalleprove.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(detalleprove.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableDetalleProve")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(detalleprove.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				if(detalleprove.getFactura()!=null && !sTipoEvento.equals("id_facturaDetalleProve")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(detalleprove.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleProve()throws Exception {	
		try {
			
			this.setActualSucursalMovimientoForeignKey(this.detalleproveConstantesFunciones.getid_sucursal_movimiento(),false,"Formulario");
			this.setActualClienteForeignKey(this.detalleproveConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTransaccionForeignKey(this.detalleproveConstantesFunciones.getid_transaccion(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.detalleproveConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.detalleproveConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualFacturaForeignKey(this.detalleproveConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualOrdenCompraForeignKey(this.detalleproveConstantesFunciones.getid_orden_compra(),false,"Formulario");
			this.setActualEstadoDetalleClienteForeignKey(this.detalleproveConstantesFunciones.getid_estado_detalle_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProve()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleProve!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleProve!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleProve()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleProve()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleProve()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleProve()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameSucursalMovimientosForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameOrdenComprasForeignKey("Todos");
			this.cargarCombosFrameEstadoDetalleClientesForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleProve(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalMovimientosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameOrdenComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoDetalleClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleProve()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
































	
	

	public DetalleProveBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleProveBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleProveBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detalleproveSessionBean=new DetalleProveSessionBean(); 
		this.detalleproveConstantesFunciones=new DetalleProveConstantesFunciones(); 
		this.detalleproveBean=new DetalleProve();//(this.detalleproveConstantesFunciones); 		
		this.detalleproveReturnGeneral=new DetalleProveParameterReturnGeneral(); 
		
		this.detalleproveSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detalleproveSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleProveBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleProveBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleProveBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleProve(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detalleproveConstantesFunciones=new DetalleProveConstantesFunciones(); 
			this.detalleproveBean=new DetalleProve();//this.detalleproveConstantesFunciones); 			
			this.detalleproveReturnGeneral=new DetalleProveParameterReturnGeneral(); 
		
			DetalleProveBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Prove Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detalleprove=new DetalleProve();
			this.detalleproves = new ArrayList<DetalleProve>();
			this.detalleprovesAux = new ArrayList<DetalleProve>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic=new DetalleProveLogic();
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			//this.detalleproveSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detalleproveSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleProve);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleProve);	
					}
					
					if(this.jInternalFrameImportacionDetalleProve!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleProve);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetalleProve!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleProve);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleProve!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleProve);
				this.jInternalFrameDetalleFormDetalleProve.setVisible(false);
				this.jInternalFrameDetalleFormDetalleProve.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleProve);
					this.jInternalFrameReporteDinamicoDetalleProve.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleProve.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleProve!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleProve);
					this.jInternalFrameImportacionDetalleProve.setVisible(false);
					this.jInternalFrameImportacionDetalleProve.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetalleProve!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleProve);
					this.jInternalFrameOrderByDetalleProve.setVisible(false);
					this.jInternalFrameOrderByDetalleProve.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleProveActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleProveConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detalleproveReturnGeneral=new DetalleProveParameterReturnGeneral();
			
			this.detalleproveParameterGeneral=new DetalleProveParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detalleproveLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleProveJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(PagoAutoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleProveConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleproveSessionBean.getEsGuardarRelacionado(),this.detalleproveSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleProveConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleproveSessionBean.getEsGuardarRelacionado(),this.detalleproveSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaDuplicarDetalleProve=true;
			this.isVisibilidadCeldaCopiarDetalleProve=true;
			this.isVisibilidadCeldaVerFormDetalleProve=true;
			this.isVisibilidadCeldaOrdenDetalleProve=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=false;
			this.isVisibilidadCeldaGuardarDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdDetalleProve=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoDetalleCliente=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdOrdenCompra=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTransaccion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleProve();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleProve(false);
			
			this.setPermisosUsuarioDetalleProve();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproveSessionBean.getEsGuardarRelacionado() 
				|| (this.detalleproveSessionBean.getEsGuardarRelacionado() && this.detalleproveSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleProveClasesRelacionadas();
			}
			
			if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleProveClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleProve();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleProve();
			}
			
			if(!this.isPermisoBusquedaDetalleProve) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetalleProve.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleProve,this.isPermisoPaginacionMedioDetalleProve,this.isPermisoPaginacionTodoDetalleProve);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleProveConstantesFunciones.getTiposSeleccionarDetalleProve());
				
				this.tiposColumnasSelect=DetalleProveConstantesFunciones.getTiposSeleccionarDetalleProve(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectDetalleProve();				
				//this.tiposRelacionesSelect=DetalleProveConstantesFunciones.getTiposRelacionesDetalleProve(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleProve();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleProve(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleProve(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProve() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.pagoautoLogic=new PagoAutoLogic();
			this.autoripagoLogic=new AutoriPagoLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.sucursalmovimientoLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.moduloLogic=new ModuloLogic();
			this.monedaLogic=new MonedaLogic();
			this.clienteLogic=new ClienteLogic();
			this.transaccionLogic=new TransaccionLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.facturaLogic=new FacturaLogic();
			this.ordencompraLogic=new OrdenCompraLogic();
			this.estadodetalleclienteLogic=new EstadoDetalleClienteLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detalleproveImplementable= (DetalleProveImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleProveConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detalleproveImplementableHome= (DetalleProveImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleProveConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detalleproves= new ArrayList<DetalleProve>();
			this.detalleprovesEliminados= new ArrayList<DetalleProve>();
						
			this.isEsNuevoDetalleProve=false;
			this.esParaAccionDesdeFormularioDetalleProve=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			this.idAsientoContableActual=0L;
			this.idFacturaActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.sucursalmovimientosForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.ordencomprasForeignKey=new ArrayList<OrdenCompra>() ;
			this.estadodetalleclientesForeignKey=new ArrayList<EstadoDetalleCliente>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleProve(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleProve();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleProveBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleProveConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleProve("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleProve(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleProve();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleProve();
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleProve.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleProve(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleProve: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleProve() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(PagoAutoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PagoAutoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleProve")) {
				iIndex=this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();	
				
				

				if(sTitle.equals("Autori Pagos")) {
					if(!AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessDetalleProve();

						this.cargarParteTabPanelRelacionadaAutoriPago(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Pago Autos")) {
					if(!PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessDetalleProve();

						this.cargarParteTabPanelRelacionadaPagoAuto(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleProve();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaAutoriPago(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormDetalleProve.cargarSessionConBeanSwingJInternalFrameAutoriPago(false,true,iIndex);
		this.jButtonAutoriPagoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaAutoriPago();

		//this.jTabbedPaneRelacionesDetalleProve.updateUI();
		//this.jTabbedPaneRelacionesDetalleProve.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesDetalleProve.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPagoAuto(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormDetalleProve.cargarSessionConBeanSwingJInternalFramePagoAuto(false,true,iIndex);
		this.jButtonPagoAutoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPagoAuto();

		//this.jTabbedPaneRelacionesDetalleProve.updateUI();
		//this.jTabbedPaneRelacionesDetalleProve.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesDetalleProve.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("PagoAuto")) {
				int row=this.jTableDatosDetalleProve.getSelectedRow();
				jButtonPagoAutoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("AutoriPago")) {
				int row=this.jTableDatosDetalleProve.getSelectedRow();
				jButtonAutoriPagoActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Pago Auto")) {

					if(this.isTienePermisosPagoAuto && this.detalleproveConstantesFunciones.mostrarPagoAutoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Pago Autos"+"("+PagoAutoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Pago Autos");

						if(detalleproveConstantesFunciones.resaltarPagoAutoDetalleProve!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(detalleproveConstantesFunciones.resaltarPagoAutoDetalleProve);
						}

						jmenuItem.setEnabled(this.detalleproveConstantesFunciones.activarPagoAutoDetalleProve);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PagoAuto"));

						

						this.jInternalFrameDetalleFormDetalleProve.jmenuDetalleDetalleProve.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Autori Pago")) {

					if(this.isTienePermisosAutoriPago && this.detalleproveConstantesFunciones.mostrarAutoriPagoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Autori Pagos"+"("+AutoriPagoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Autori Pagos");

						if(detalleproveConstantesFunciones.resaltarAutoriPagoDetalleProve!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(detalleproveConstantesFunciones.resaltarAutoriPagoDetalleProve);
						}

						jmenuItem.setEnabled(this.detalleproveConstantesFunciones.activarAutoriPagoDetalleProve);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"AutoriPago"));

						

						this.jInternalFrameDetalleFormDetalleProve.jmenuDetalleDetalleProve.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyDetalleProve(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleProve(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleProve(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleProveListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleProve();
		
		this.cargarCombosFrameForeignKeyDetalleProve();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleProve();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleProve();
		}
	}
	
	

	public void cargarCombosForeignKeySucursalMovimiento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySucursalMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySucursalMovimiento();
				this.cargarCombosFrameSucursalMovimientosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSucursalMovimiento(this.sucursalmovimientosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyOrdenCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyOrdenCompra();
				this.cargarCombosFrameOrdenComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaOrdenCompra(this.ordencomprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoDetalleClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoDetalleCliente();
				this.cargarCombosFrameEstadoDetalleClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoDetalleCliente(this.estadodetalleclientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleProveActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			
			if(jTableDatosDetalleProve.getRowCount()>=1) {
				jTableDatosDetalleProve.removeRowSelectionInterval(0, jTableDatosDetalleProve.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleProve=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleProve(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleProve(true);			
			//this.detalleprove=new DetalleProve();
			//this.detalleprove.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProve(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProve() ;
			
			if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProve(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detalleprove);	
			this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);				
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleProve: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleProveActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleProve.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleProve.getSelectedRows().length;			
			}
			
			detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleProve--;			
				//DetalleProve detalleproveAux= new DetalleProve();			
				//detalleproveAux.setId(this.iIdNuevoDetalleProve);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleProve detalleproveOrigen=new DetalleProve();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleProve detalleproveOrigen : detalleprovesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detalleproveOrigen =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproveOrigen =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleProve();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detalleprove.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleProve(detalleproveOrigen,this.detalleprove,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleproveLogic.getDetalleProves().add(this.detalleproveAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleproves.add(this.detalleproveAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleProve(false);
				
				this.jTableDatosDetalleProve.setRowSelectionInterval(this.getIndiceNuevoDetalleProve(), this.getIndiceNuevoDetalleProve());
				
				int iLastRow =  this.jTableDatosDetalleProve.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleProve.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleProve.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProve(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();									
		
			DetalleProve detalleproveOrigen=new DetalleProve();
			DetalleProve detalleproveDestino=new DetalleProve();
				
			detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleProve.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detalleprovesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleProve.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveOrigen =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleproveOrigen =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproveDestino =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleproveDestino =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detalleproveOrigen =detalleprovesSeleccionados.get(0);
				detalleproveDestino =detalleprovesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleProve(detalleproveOrigen,detalleproveDestino,true,false);
				
				detalleproveDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleproveDestino,detalleproveLogic.getDetalleProves());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproveDestino,detalleproves);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleProve(false);
				
				//this.jTableDatosDetalleProve.setRowSelectionInterval(this.getIndiceNuevoDetalleProve(), this.getIndiceNuevoDetalleProve());
				
				int iLastRow =  this.jTableDatosDetalleProve.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleProve.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleProve.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProve(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleProve.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleProve.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetalleProve.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetalleProve.setVisible(!isVisible);
			this.jPanelPaginacionDetalleProve.setVisible(!isVisible);
			this.jPanelAccionesDetalleProve.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleProve();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetalleProve();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetalleProve();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetalleProve();
			
			this.abrirFrameOrderByDetalleProve();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetalleProve();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleProve(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleProve);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleProve.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleProve.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleProve.setSize(this.jInternalFrameDetalleFormDetalleProve.iWidthFormulario,this.jInternalFrameDetalleFormDetalleProve.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleProve.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleProve.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleProve.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleProve.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth(),DetalleProveConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth(),DetalleProveConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth(),DetalleProveConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaAutoriPago();
					}

					if(PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPagoAuto();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleProve.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleProve.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetalleProve() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleProve==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleProve=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleProve,false,this);
				} else {
					this.jInternalFrameOrderByDetalleProve=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleProve,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleProve);
				this.jInternalFrameOrderByDetalleProve.setVisible(false);
				this.jInternalFrameOrderByDetalleProve.setSelected(false);
				
				this.jInternalFrameOrderByDetalleProve.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleProve"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleProve();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetalleProve() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleProve==null) {
				
				this.jInternalFrameImportacionDetalleProve=new ImportacionJInternalFrame(DetalleProveConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleProve);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleProve);
				this.jInternalFrameImportacionDetalleProve.setVisible(false);
				this.jInternalFrameImportacionDetalleProve.setSelected(false);


				this.jInternalFrameImportacionDetalleProve.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleProve"));
				this.jInternalFrameImportacionDetalleProve.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleProve"));
				this.jInternalFrameImportacionDetalleProve.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleProve"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetalleProve() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleProve==null) {
				this.jInternalFrameReporteDinamicoDetalleProve=new ReporteDinamicoJInternalFrame(DetalleProveConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleProve);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleProve);
				this.jInternalFrameReporteDinamicoDetalleProve.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleProve.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProve"));
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProve"));
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProve"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProve();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaAutoriPago() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPagoAuto() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormDetalleProve.jContentPaneDetalleDetalleProve.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleDetalleProve() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleProve);
			
	       	this.jInternalFrameDetalleFormDetalleProve.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleProve.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleProve.dispose();
			//this.jInternalFrameDetalleFormDetalleProve=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetalleProve() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleProve.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleProve.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetalleProve() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleProve.setVisible(true);
	        this.jInternalFrameImportacionDetalleProve.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDetalleProve() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleProve.setVisible(true);
	        this.jInternalFrameOrderByDetalleProve.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetalleProve() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleProve.setVisible(false);
	        this.jInternalFrameOrderByDetalleProve.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetalleProve() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleProve.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleProve.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetalleProve() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleProve.setVisible(false);
	        this.jInternalFrameImportacionDetalleProve.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeOrdenCompra(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeOrdenCompra);
						OrdenCompraBeanSwingJInternalFrame ordencompraBeanSwingJInternalFrame=new OrdenCompraBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						ordencompraBeanSwingJInternalFrame.setJInternalFrameParent(this);
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.sTipoBusqueda="OrdenCompra";
						}

						ordencompraBeanSwingJInternalFrame.getTodosOrdenCompraArbol();
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.setOrdenCompras(ordencompraBeanSwingJInternalFrame.ordencomprasArbol);
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.CargarTreeOrdenCompra();
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.setVisible(true);
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						ordencompraBeanSwingJInternalFrame.jInternalFrameTreeOrdenCompra.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
						TitledBorder titledBorderOrdenCompra=(TitledBorder)ordencompraBeanSwingJInternalFrame.jScrollPanelDatosOrdenCompra.getBorder();

						titledBorderOrdenCompra.setTitle(titledBorderDetalleProve.getTitle() + " -> OrdenCompra");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,ordencompraBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(ordencompraBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeOrdenCompra(OrdenCompraBeanSwingJInternalFrame jInternalFrameTreeOrdenCompra) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeOrdenCompra);
						jInternalFrameTreeOrdenCompra.setVisible(false);
						jInternalFrameTreeOrdenCompra.setSelected(false);
						//jInternalFrameTreeOrdenCompra.dispose();
						//jInternalFrameTreeOrdenCompra=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleProve(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleProve(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleProve(true);
			//this.isEsNuevoDetalleProve=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleProve("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProve(false) ;
			
			if(detalleproveSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado() && PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPagoAutoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado() && AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProve(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProve(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleProveActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleProve(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleProve(true);
			//this.isEsNuevoDetalleProve=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detalleprove.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleProve("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleProve(false) ;
			
			if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProve(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProve(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.detalleproveConstantesFunciones.cargarid_clienteDetalleProve) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleProve(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.detalleproveConstantesFunciones.cargarid_asiento_contableDetalleProve) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleProve(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.detalleproveConstantesFunciones.cargarid_facturaDetalleProve) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleProve(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaSucursalMovimiento(List<Sucursal> sucursalmovimientosForeignKey)throws Exception{
		TableColumn tableColumnSucursalMovimiento=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO));
		TableCellEditor tableCellEditorSucursalMovimiento =tableColumnSucursalMovimiento.getCellEditor();

		SucursalTableCell sucursalTableCellFk=(SucursalTableCell)tableCellEditorSucursalMovimiento;

		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.setsucursalsForeignKey(sucursalmovimientosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//sucursalTableCellFk.setRowActual(intSelectedRow);
			//sucursalTableCellFk.setsucursalsForeignKeyActual(sucursalmovimientosForeignKey);
		//}


		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.RecargarSucursalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
					
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaOrdenCompra(List<OrdenCompra> ordencomprasForeignKey)throws Exception{
		TableColumn tableColumnOrdenCompra=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA));
		TableCellEditor tableCellEditorOrdenCompra =tableColumnOrdenCompra.getCellEditor();

		OrdenCompraTableCell ordencompraTableCellFk=(OrdenCompraTableCell)tableCellEditorOrdenCompra;

		if(ordencompraTableCellFk!=null) {
			ordencompraTableCellFk.setordencomprasForeignKey(ordencomprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ordencompraTableCellFk.setRowActual(intSelectedRow);
			//ordencompraTableCellFk.setordencomprasForeignKeyActual(ordencomprasForeignKey);
		//}


		if(ordencompraTableCellFk!=null) {
			ordencompraTableCellFk.RecargarOrdenComprasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoDetalleCliente(List<EstadoDetalleCliente> estadodetalleclientesForeignKey)throws Exception{
		TableColumn tableColumnEstadoDetalleCliente=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE));
		TableCellEditor tableCellEditorEstadoDetalleCliente =tableColumnEstadoDetalleCliente.getCellEditor();

		EstadoDetalleClienteTableCell estadodetalleclienteTableCellFk=(EstadoDetalleClienteTableCell)tableCellEditorEstadoDetalleCliente;

		if(estadodetalleclienteTableCellFk!=null) {
			estadodetalleclienteTableCellFk.setestadodetalleclientesForeignKey(estadodetalleclientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadodetalleclienteTableCellFk.setRowActual(intSelectedRow);
			//estadodetalleclienteTableCellFk.setestadodetalleclientesForeignKeyActual(estadodetalleclientesForeignKey);
		//}


		if(estadodetalleclienteTableCellFk!=null) {
			estadodetalleclienteTableCellFk.RecargarEstadoDetalleClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleProve(false);
			
			//if(!this.isEsNuevoDetalleProve) {								
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				
			}
			
			if(this.permiteMantenimiento(this.detalleprove)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleProve=true;
					this.inicializarActualizarBindingTablaDetalleProve(false);
					this.isEsNuevoDetalleProve=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleProve=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleProve=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleProve(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProve(false);
				
				this.habilitarDeshabilitarControlesDetalleProve(false);
			
												
				
				if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleProve();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleProveActionPerformed(evt,detalleproveSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleProve(this.detalleprove,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detalleproveSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detalleprove.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleProveActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				this.detalleprove.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				this.detalleprove.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detalleprove)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleProveModel) this.jTableDatosDetalleProve.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleProve=true;
				this.inicializarActualizarBindingTablaDetalleProve(false);
				this.isEsNuevoDetalleProve=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleProve(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProve(false);
				
				this.habilitarDeshabilitarControlesDetalleProve(false);
				
				
				
				if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleProve();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleProveActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleProve.getRowCount()>=1) {
				jTableDatosDetalleProve.removeRowSelectionInterval(0, jTableDatosDetalleProve.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleProve(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleProve(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProve(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProve(false) ;
			
			this.isEsNuevoDetalleProve=false;
			
			if(DetalleProveJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleProve();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleProve(false);
				
				//SI ES MANUAL
				if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleProve();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleProve--;			
			//DetalleProve detalleproveAux= new DetalleProve();			
			//detalleproveAux.setId(this.iIdNuevoDetalleProve);
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleProve();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
			
			this.detalleprove.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detalleproveLogic.getDetalleProves().add(this.detalleproveAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detalleproves.add(this.detalleproveAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleProve(false);
			
			this.jTableDatosDetalleProve.setRowSelectionInterval(this.getIndiceNuevoDetalleProve(), this.getIndiceNuevoDetalleProve());
			
			int iLastRow =  this.jTableDatosDetalleProve.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleProve.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleProve.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleProve(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleProve(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProve(false);
			
			//SI ES MANUAL
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProve();
			}
			
			//this.abrirFrameTreeDetalleProve();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetalleProveActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle ProveS ?", "MANTENIMIENTO DE Detalle Prove", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleProve.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleProve();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detalleproveReturnGeneral=detalleproveLogic.procesarImportacionDetalleProvesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detalleproveParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleProveReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetalleProveActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleProve.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleProve.setFileImportacion(this.jInternalFrameImportacionDetalleProve.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleProve.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleProve.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleProve.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleProve.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		

		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleProveBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleProveBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleProveConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_SucursalMovimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_SucursalMovimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_SucursalMovimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_SucursalMovimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_OrdenCompra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_OrdenCompra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_OrdenCompra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_OrdenCompra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoDetalleCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoDetalleCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoDetalleCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoDetalleCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAPAGO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoMoneLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoMoneLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoMoneLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoMoneLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoMoneExtra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoMoneExtra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoMoneExtra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoMoneExtra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoMoneLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoMoneLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoMoneLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoMoneLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoMoneLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoMoneLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoMoneLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoMoneLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoMoneExtra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoMoneExtra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoMoneExtra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoMoneExtra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoMoneExtra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoMoneExtra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoMoneExtra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoMoneExtra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProveConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleProve.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleProveConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO:
					sNombreCampoCategoria="id_sucursal_movimiento";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA:
					sNombreCampoCategoria="id_orden_compra";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE:
					sNombreCampoCategoria="id_estado_detalle_cliente";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENTA:
					sNombreCampoCategoria="fecha_venta";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAPAGO:
					sNombreCampoCategoria="fecha_pago";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL:
					sNombreCampoCategoria="monto_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA:
					sNombreCampoCategoria="monto_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoria="numero_factura";
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL:
					sNombreCampoCategoria="debito_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL:
					sNombreCampoCategoria="credito_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					sNombreCampoCategoria="debito_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					sNombreCampoCategoria="credito_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleProveConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO:
					sNombreCampoCategoriaValor="id_sucursal_movimiento";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA:
					sNombreCampoCategoriaValor="id_orden_compra";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE:
					sNombreCampoCategoriaValor="id_estado_detalle_cliente";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENTA:
					sNombreCampoCategoriaValor="fecha_venta";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAPAGO:
					sNombreCampoCategoriaValor="fecha_pago";
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL:
					sNombreCampoCategoriaValor="monto_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA:
					sNombreCampoCategoriaValor="monto_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoriaValor="numero_factura";
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL:
					sNombreCampoCategoriaValor="debito_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL:
					sNombreCampoCategoriaValor="credito_mone_local";
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					sNombreCampoCategoriaValor="debito_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					sNombreCampoCategoriaValor="credito_mone_extra";
					break;

				case DetalleProveConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleProveConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal_movimiento");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Transaccion Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Orden Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_orden_compra");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Detalle Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_detalle_cliente");
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_venta");
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_pago");
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Mone Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_mone_local");
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Mone Extra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_mone_extra");
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Num Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_factura");
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Mone Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_mone_local");
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Mone Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_mone_local");
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Mone Extra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_mone_extra");
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Mone Extra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_mone_extra");
					break;

				case DetalleProveConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetalleProveActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleProves");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleProveConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getsucursalmovimiento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getordencompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getestadodetallecliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENTA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getfecha_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAPAGO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getfecha_pago());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getmonto_mone_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getmonto_mone_extra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getnumero_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getdebito_mone_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getcredito_mone_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getdebito_mone_extra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getcredito_mone_extra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProveConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleProve detalleprove:detalleprovesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleprove.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleProve(row);				
			//	iRow++;
			//}				
			
			//for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleProve(detalleproveAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProve(false);
			
			//SI ES MANUAL
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProve();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProve(false);
			
			//SI ES MANUAL
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleProve();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleProveActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProve(false);
			
			//SI ES MANUAL
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleProve();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleProve() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleProve.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleProve.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleProve.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleProve.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleProve.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleProve.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleProve.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleProve(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleProve(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleProve(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleProve(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleProve(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleProve(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProve(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleProve(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleProveJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleProve() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleProve();
		
		this.inicializarActualizarBindingBotonesManualDetalleProve(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleProve();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProve() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProve(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProve(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleProve.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleProve.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleProve.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetalleProve!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionNuevoDetalleProve.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionSinCerrarDetalleProve.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionSinMensajeDetalleProve.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleProve.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleProve.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetalleProve.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetalleProve!=null) {
				this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionNuevoDetalleProve.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionSinCerrarDetalleProve.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleProve.jCheckBoxPostAccionSinMensajeDetalleProve.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetalleProve.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleProve.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleProve.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleProve.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleProve.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleProve.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleProve.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleProve.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleProve.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleProve(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProve(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProve() throws Exception {
		try	{
			if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleProve();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleProve() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleProve() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleProve.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleProve.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleProve.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleProve.addItem(reporte);
			}
			
			
			if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleProve.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleProve.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleProve.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleProve.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleProve.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleProve.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleProve.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProve();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProve() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
				this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
				this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProve.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleProveConstantesFunciones.getTiposSeleccionarDetalleProve(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleProveConstantesFunciones.getTiposSeleccionarDetalleProve(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleProveConstantesFunciones.getTiposSeleccionarDetalleProve(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProve.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleProve.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetalleProve()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteDetalleProve.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.getSelectedItem()!=null){this.id_sucursal_movimientoFK_IdDetalleProve=((Sucursal)this.jComboBoxid_sucursal_movimientoFK_IdDetalleProveDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.getSelectedItem()!=null){this.id_estado_detalle_clienteFK_IdEstadoDetalleCliente=((EstadoDetalleCliente)this.jComboBoxid_estado_detalle_clienteFK_IdEstadoDetalleClienteDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaDetalleProve.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.getSelectedItem()!=null){this.id_orden_compraFK_IdOrdenCompra=((OrdenCompra)this.jComboBoxid_orden_compraFK_IdOrdenCompraDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDetalleProve.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionDetalleProve.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleProve(Boolean esInicializar) throws Exception {				
		if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleProve();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleProve() throws Exception {
		this.inicializarActualizarBindingTablaDetalleProve(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetalleProve() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleProveOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProveOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDetalleProve(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detalleproveLogic.getDetalleProves().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detalleproves.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleProve.setModel(new DetalleProveModel(this.detalleproveLogic.getDetalleProves(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleProve.setModel(new DetalleProveModel(this.detalleproves,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDetalleProve!=null && this.jInternalFrameOrderByDetalleProve.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleProve();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleProveConstantesFunciones.SCLASSWEBTITULO,detalleproveConstantesFunciones.resaltarSeleccionarDetalleProve,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleProveConstantesFunciones.SCLASSWEBTITULO,detalleproveConstantesFunciones.resaltarSeleccionarDetalleProve,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_ID));

		if(this.detalleproveConstantesFunciones.mostraridDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltaridDetalleProve,this.detalleproveConstantesFunciones.activaridDetalleProve,iSizeTabla,this,true,"idDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltaridDetalleProve,this.detalleproveConstantesFunciones.activaridDetalleProve,this,true,"idDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detalleproveConstantesFunciones.mostrarid_empresaDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detalleproveConstantesFunciones.resaltarid_empresaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_empresaDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detalleproveConstantesFunciones.resaltarid_empresaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_empresaDetalleProve,false,"id_empresaDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detalleproveConstantesFunciones.mostrarid_sucursalDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detalleproveConstantesFunciones.resaltarid_sucursalDetalleProve,this,this.detalleproveConstantesFunciones.activarid_sucursalDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detalleproveConstantesFunciones.resaltarid_sucursalDetalleProve,this,this.detalleproveConstantesFunciones.activarid_sucursalDetalleProve,false,"id_sucursalDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO));

		if(this.detalleproveConstantesFunciones.mostrarid_sucursal_movimientoDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalmovimientosForeignKey,this.detalleproveConstantesFunciones.resaltarid_sucursal_movimientoDetalleProve,this,this.detalleproveConstantesFunciones.activarid_sucursal_movimientoDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalmovimientosForeignKey,this.detalleproveConstantesFunciones.resaltarid_sucursal_movimientoDetalleProve,this,this.detalleproveConstantesFunciones.activarid_sucursal_movimientoDetalleProve,true,"id_sucursal_movimientoDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detalleproveConstantesFunciones.mostrarid_ejercicioDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleproveConstantesFunciones.resaltarid_ejercicioDetalleProve,this,this.detalleproveConstantesFunciones.activarid_ejercicioDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleproveConstantesFunciones.resaltarid_ejercicioDetalleProve,this,this.detalleproveConstantesFunciones.activarid_ejercicioDetalleProve,false,"id_ejercicioDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDPERIODO));

		if(this.detalleproveConstantesFunciones.mostrarid_periodoDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detalleproveConstantesFunciones.resaltarid_periodoDetalleProve,this,this.detalleproveConstantesFunciones.activarid_periodoDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detalleproveConstantesFunciones.resaltarid_periodoDetalleProve,this,this.detalleproveConstantesFunciones.activarid_periodoDetalleProve,false,"id_periodoDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDMODULO));

		if(this.detalleproveConstantesFunciones.mostrarid_moduloDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.detalleproveConstantesFunciones.resaltarid_moduloDetalleProve,this,this.detalleproveConstantesFunciones.activarid_moduloDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.detalleproveConstantesFunciones.resaltarid_moduloDetalleProve,this,this.detalleproveConstantesFunciones.activarid_moduloDetalleProve,false,"id_moduloDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDMONEDA));

		if(this.detalleproveConstantesFunciones.mostrarid_monedaDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.detalleproveConstantesFunciones.resaltarid_monedaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_monedaDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.detalleproveConstantesFunciones.resaltarid_monedaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_monedaDetalleProve,false,"id_monedaDetalleProve","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDCLIENTE));

		if(this.detalleproveConstantesFunciones.mostrarid_clienteDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.detalleproveConstantesFunciones.resaltarid_clienteDetalleProve,this,this.detalleproveConstantesFunciones.activarid_clienteDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.detalleproveConstantesFunciones.resaltarid_clienteDetalleProve,this,this.detalleproveConstantesFunciones.activarid_clienteDetalleProve,true,"id_clienteDetalleProve","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.detalleproveConstantesFunciones.mostrarid_transaccionDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.detalleproveConstantesFunciones.resaltarid_transaccionDetalleProve,this,this.detalleproveConstantesFunciones.activarid_transaccionDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.detalleproveConstantesFunciones.resaltarid_transaccionDetalleProve,this,this.detalleproveConstantesFunciones.activarid_transaccionDetalleProve,true,"id_transaccionDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.detalleproveConstantesFunciones.mostrarid_asiento_contableDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.detalleproveConstantesFunciones.resaltarid_asiento_contableDetalleProve,this,this.detalleproveConstantesFunciones.activarid_asiento_contableDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.detalleproveConstantesFunciones.resaltarid_asiento_contableDetalleProve,this,this.detalleproveConstantesFunciones.activarid_asiento_contableDetalleProve,true,"id_asiento_contableDetalleProve","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDFACTURA));

		if(this.detalleproveConstantesFunciones.mostrarid_facturaDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.detalleproveConstantesFunciones.resaltarid_facturaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_facturaDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.detalleproveConstantesFunciones.resaltarid_facturaDetalleProve,this,this.detalleproveConstantesFunciones.activarid_facturaDetalleProve,true,"id_facturaDetalleProve","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA));

		if(this.detalleproveConstantesFunciones.mostrarid_orden_compraDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new OrdenCompraTableCell(this.ordencomprasForeignKey,this.detalleproveConstantesFunciones.resaltarid_orden_compraDetalleProve,this,this.detalleproveConstantesFunciones.activarid_orden_compraDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new OrdenCompraTableCell(this.ordencomprasForeignKey,this.detalleproveConstantesFunciones.resaltarid_orden_compraDetalleProve,this,this.detalleproveConstantesFunciones.activarid_orden_compraDetalleProve,true,"id_orden_compraDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE));

		if(this.detalleproveConstantesFunciones.mostrarid_estado_detalle_clienteDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoDetalleClienteTableCell(this.estadodetalleclientesForeignKey,this.detalleproveConstantesFunciones.resaltarid_estado_detalle_clienteDetalleProve,this,this.detalleproveConstantesFunciones.activarid_estado_detalle_clienteDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new EstadoDetalleClienteTableCell(this.estadodetalleclientesForeignKey,this.detalleproveConstantesFunciones.resaltarid_estado_detalle_clienteDetalleProve,this,this.detalleproveConstantesFunciones.activarid_estado_detalle_clienteDetalleProve,true,"id_estado_detalle_clienteDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_FECHAVENTA));

		if(this.detalleproveConstantesFunciones.mostrarfecha_ventaDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_FECHAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalleproveConstantesFunciones.resaltarfecha_ventaDetalleProve,this.detalleproveConstantesFunciones.activarfecha_ventaDetalleProve,iSizeTabla,this,true,"fecha_ventaDetalleProve","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalleproveConstantesFunciones.resaltarfecha_ventaDetalleProve,this.detalleproveConstantesFunciones.activarfecha_ventaDetalleProve,this,true,"fecha_ventaDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_FECHAEMISION));

		if(this.detalleproveConstantesFunciones.mostrarfecha_emisionDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalleproveConstantesFunciones.resaltarfecha_emisionDetalleProve,this.detalleproveConstantesFunciones.activarfecha_emisionDetalleProve,iSizeTabla,this,true,"fecha_emisionDetalleProve","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalleproveConstantesFunciones.resaltarfecha_emisionDetalleProve,this.detalleproveConstantesFunciones.activarfecha_emisionDetalleProve,this,true,"fecha_emisionDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_FECHAPAGO));

		if(this.detalleproveConstantesFunciones.mostrarfecha_pagoDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_FECHAPAGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalleproveConstantesFunciones.resaltarfecha_pagoDetalleProve,this.detalleproveConstantesFunciones.activarfecha_pagoDetalleProve,iSizeTabla,this,true,"fecha_pagoDetalleProve","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalleproveConstantesFunciones.resaltarfecha_pagoDetalleProve,this.detalleproveConstantesFunciones.activarfecha_pagoDetalleProve,this,true,"fecha_pagoDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.detalleproveConstantesFunciones.mostrarfecha_vencimientoDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalleproveConstantesFunciones.resaltarfecha_vencimientoDetalleProve,this.detalleproveConstantesFunciones.activarfecha_vencimientoDetalleProve,iSizeTabla,this,true,"fecha_vencimientoDetalleProve","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalleproveConstantesFunciones.resaltarfecha_vencimientoDetalleProve,this.detalleproveConstantesFunciones.activarfecha_vencimientoDetalleProve,this,true,"fecha_vencimientoDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL));

		if(this.detalleproveConstantesFunciones.mostrarmonto_mone_localDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltarmonto_mone_localDetalleProve,this.detalleproveConstantesFunciones.activarmonto_mone_localDetalleProve,iSizeTabla,this,true,"monto_mone_localDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarmonto_mone_localDetalleProve,this.detalleproveConstantesFunciones.activarmonto_mone_localDetalleProve,this,true,"monto_mone_localDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA));

		if(this.detalleproveConstantesFunciones.mostrarmonto_mone_extraDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltarmonto_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activarmonto_mone_extraDetalleProve,iSizeTabla,this,true,"monto_mone_extraDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarmonto_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activarmonto_mone_extraDetalleProve,this,true,"monto_mone_extraDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE));

		if(this.detalleproveConstantesFunciones.mostrarnumero_comprobanteDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleproveConstantesFunciones.resaltarnumero_comprobanteDetalleProve,this.detalleproveConstantesFunciones.activarnumero_comprobanteDetalleProve,iSizeTabla,this,true,"numero_comprobanteDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarnumero_comprobanteDetalleProve,this.detalleproveConstantesFunciones.activarnumero_comprobanteDetalleProve,this,true,"numero_comprobanteDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA));

		if(this.detalleproveConstantesFunciones.mostrarnumero_facturaDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleproveConstantesFunciones.resaltarnumero_facturaDetalleProve,this.detalleproveConstantesFunciones.activarnumero_facturaDetalleProve,iSizeTabla,this,true,"numero_facturaDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarnumero_facturaDetalleProve,this.detalleproveConstantesFunciones.activarnumero_facturaDetalleProve,this,true,"numero_facturaDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL));

		if(this.detalleproveConstantesFunciones.mostrardebito_mone_localDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltardebito_mone_localDetalleProve,this.detalleproveConstantesFunciones.activardebito_mone_localDetalleProve,iSizeTabla,this,true,"debito_mone_localDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltardebito_mone_localDetalleProve,this.detalleproveConstantesFunciones.activardebito_mone_localDetalleProve,this,true,"debito_mone_localDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL));

		if(this.detalleproveConstantesFunciones.mostrarcredito_mone_localDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltarcredito_mone_localDetalleProve,this.detalleproveConstantesFunciones.activarcredito_mone_localDetalleProve,iSizeTabla,this,true,"credito_mone_localDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarcredito_mone_localDetalleProve,this.detalleproveConstantesFunciones.activarcredito_mone_localDetalleProve,this,true,"credito_mone_localDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA));

		if(this.detalleproveConstantesFunciones.mostrardebito_mone_extraDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltardebito_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activardebito_mone_extraDetalleProve,iSizeTabla,this,true,"debito_mone_extraDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltardebito_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activardebito_mone_extraDetalleProve,this,true,"debito_mone_extraDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA));

		if(this.detalleproveConstantesFunciones.mostrarcredito_mone_extraDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproveConstantesFunciones.resaltarcredito_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activarcredito_mone_extraDetalleProve,iSizeTabla,this,true,"credito_mone_extraDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltarcredito_mone_extraDetalleProve,this.detalleproveConstantesFunciones.activarcredito_mone_extraDetalleProve,this,true,"credito_mone_extraDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detalleproveConstantesFunciones.mostrardescripcionDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleproveConstantesFunciones.resaltardescripcionDetalleProve,this.detalleproveConstantesFunciones.activardescripcionDetalleProve,iSizeTabla,this,true,"descripcionDetalleProve","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproveConstantesFunciones.resaltardescripcionDetalleProve,this.detalleproveConstantesFunciones.activardescripcionDetalleProve,this,true,"descripcionDetalleProve","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDANIO));

		if(this.detalleproveConstantesFunciones.mostrarid_anioDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detalleproveConstantesFunciones.resaltarid_anioDetalleProve,this,this.detalleproveConstantesFunciones.activarid_anioDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detalleproveConstantesFunciones.resaltarid_anioDetalleProve,this,this.detalleproveConstantesFunciones.activarid_anioDetalleProve,true,"id_anioDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,DetalleProveConstantesFunciones.LABEL_IDMES));

		if(this.detalleproveConstantesFunciones.mostrarid_mesDetalleProve && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProveConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detalleproveConstantesFunciones.resaltarid_mesDetalleProve,this,this.detalleproveConstantesFunciones.activarid_mesDetalleProve,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detalleproveConstantesFunciones.resaltarid_mesDetalleProve,this,this.detalleproveConstantesFunciones.activarid_mesDetalleProve,true,"id_mesDetalleProve","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProvePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detalleproveSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosPagoAuto && this.detalleproveConstantesFunciones.mostrarPagoAutoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Pago Autos");
				tableColumn.setHeaderValue("Pago Autos");
				tableColumn.setCellRenderer(new PagoAutoTableCell(detalleproveConstantesFunciones.resaltarPagoAutoDetalleProve,this,this.detalleproveConstantesFunciones.activarPagoAutoDetalleProve));
				tableColumn.setCellEditor(new PagoAutoTableCell(detalleproveConstantesFunciones.resaltarPagoAutoDetalleProve,this,this.detalleproveConstantesFunciones.activarPagoAutoDetalleProve));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosDetalleProve.addColumn(tableColumn);
			}

			if(this.isTienePermisosAutoriPago && this.detalleproveConstantesFunciones.mostrarAutoriPagoDetalleProve && !DetalleProveConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Autori Pagos");
				tableColumn.setHeaderValue("Autori Pagos");
				tableColumn.setCellRenderer(new AutoriPagoTableCell(detalleproveConstantesFunciones.resaltarAutoriPagoDetalleProve,this,this.detalleproveConstantesFunciones.activarAutoriPagoDetalleProve));
				tableColumn.setCellEditor(new AutoriPagoTableCell(detalleproveConstantesFunciones.resaltarAutoriPagoDetalleProve,this,this.detalleproveConstantesFunciones.activarAutoriPagoDetalleProve));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosDetalleProve.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleProve.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleProve.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleProve && this.isPermisoGuardarCambiosDetalleProve) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detalleproveSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleProve.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.detalleproveSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosDetalleProve.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleProve.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleProve && this.isPermisoGuardarCambiosDetalleProve) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.detalleproveSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleProve && this.isPermisoGuardarCambiosDetalleProve) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleProve.moveColumn(this.jTableDatosDetalleProve.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleProve.moveColumn(this.jTableDatosDetalleProve.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.detalleproveSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosDetalleProve.moveColumn(this.jTableDatosDetalleProve.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleProve.moveColumn(this.jTableDatosDetalleProve.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleProve.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleProve.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleProve,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleProve.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleProve.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleProve.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleProve.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleProve.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detalleproveLogic.getDetalleProves().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detalleproves.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleProve.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleProve.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleProve();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleProve=false;
					
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
				if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleProve==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleProve.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detalleprove.getsType().equals("DUPLICADO")
				   || this.detalleprove.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleProve=true;
				
				} else {
					this.isEsNuevoDetalleProve=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					if(this.detalleprove.getId()>=0 && !this.detalleprove.getIsNew()) {						
						this.isEsNuevoDetalleProve=false;
						
					} else {
						this.isEsNuevoDetalleProve=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleProve(esRelaciones);						
				
				this.seleccionarDetalleProve(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detalleprove.getId()<0) {
					this.isEsNuevoDetalleProve=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleProve(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleProve(evt,rowIndex);
				}	
				
				if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleProve: " + this.dDif); 
					}
				}								
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleProve(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detalleprove)) {
					if(this.detalleprove.getId()>0) {
						this.detalleprove.setIsDeleted(true);
						
						this.detalleprovesEliminados.add(this.detalleprove);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleproveLogic.getDetalleProves().remove(this.detalleprove);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleproves.remove(this.detalleprove);				
					}
					
					
					((DetalleProveModel) this.jTableDatosDetalleProve.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProve(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleProve(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleProve) {
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleProve.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleProve.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleProve(this.detalleprove);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.detalleproveConstantesFunciones.cargarid_empresaDetalleProve || this.detalleproveConstantesFunciones.event_dependid_empresaDetalleProve) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detalleprove.getid_empresa());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detalleprove.getEmpresa()!=null) {
							this.empresasForeignKey.add(detalleprove.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detalleprove.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detalleproveConstantesFunciones.cargarid_sucursalDetalleProve || this.detalleproveConstantesFunciones.event_dependid_sucursalDetalleProve) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detalleprove.getid_sucursal());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detalleprove.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detalleprove.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detalleprove.getid_sucursal(),false,"Formulario");

					//SucursalMovimiento
					if(!this.detalleproveConstantesFunciones.cargarid_sucursal_movimientoDetalleProve || this.detalleproveConstantesFunciones.event_dependid_sucursal_movimientoDetalleProve) {
						//this.cargarCombosSucursalMovimientosForeignKeyLista(" where id="+this.detalleprove.getid_sucursal_movimiento());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.sucursalmovimientosForeignKey=new ArrayList<Sucursal>();

						if(detalleprove.getSucursalMovimiento()!=null) {
							this.sucursalmovimientosForeignKey.add(detalleprove.getSucursalMovimiento());
						}

						this.addItemDefectoCombosForeignKeySucursalMovimiento();
						this.cargarCombosFrameSucursalMovimientosForeignKey("Todos");
					}
					this.setActualSucursalMovimientoForeignKey(this.detalleprove.getid_sucursal_movimiento(),false,"Formulario");

					//Ejercicio
					if(!this.detalleproveConstantesFunciones.cargarid_ejercicioDetalleProve || this.detalleproveConstantesFunciones.event_dependid_ejercicioDetalleProve) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detalleprove.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detalleprove.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detalleprove.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detalleprove.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detalleproveConstantesFunciones.cargarid_periodoDetalleProve || this.detalleproveConstantesFunciones.event_dependid_periodoDetalleProve) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detalleprove.getid_periodo());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detalleprove.getPeriodo()!=null) {
							this.periodosForeignKey.add(detalleprove.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detalleprove.getid_periodo(),false,"Formulario");

					//Modulo
					if(!this.detalleproveConstantesFunciones.cargarid_moduloDetalleProve || this.detalleproveConstantesFunciones.event_dependid_moduloDetalleProve) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.detalleprove.getid_modulo());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(detalleprove.getModulo()!=null) {
							this.modulosForeignKey.add(detalleprove.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.detalleprove.getid_modulo(),false,"Formulario");

					//Moneda
					if(!this.detalleproveConstantesFunciones.cargarid_monedaDetalleProve || this.detalleproveConstantesFunciones.event_dependid_monedaDetalleProve) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.detalleprove.getid_moneda());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(detalleprove.getMoneda()!=null) {
							this.monedasForeignKey.add(detalleprove.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.detalleprove.getid_moneda(),false,"Formulario");

					//Cliente
					if(!this.detalleproveConstantesFunciones.cargarid_clienteDetalleProve || this.detalleproveConstantesFunciones.event_dependid_clienteDetalleProve) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.detalleprove.getid_cliente());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(detalleprove.getCliente()!=null) {
							this.clientesForeignKey.add(detalleprove.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.detalleprove.getid_cliente(),false,"Formulario");

					//Transaccion
					if(!this.detalleproveConstantesFunciones.cargarid_transaccionDetalleProve || this.detalleproveConstantesFunciones.event_dependid_transaccionDetalleProve) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.detalleprove.getid_transaccion());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(detalleprove.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(detalleprove.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.detalleprove.getid_transaccion(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.detalleproveConstantesFunciones.cargarid_tipo_transaccion_moduloDetalleProve || this.detalleproveConstantesFunciones.event_dependid_tipo_transaccion_moduloDetalleProve) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.detalleprove.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(detalleprove.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(detalleprove.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.detalleprove.getid_tipo_transaccion_modulo(),false,"Formulario");

					//AsientoContable
					if(!this.detalleproveConstantesFunciones.cargarid_asiento_contableDetalleProve || this.detalleproveConstantesFunciones.event_dependid_asiento_contableDetalleProve) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.detalleprove.getid_asiento_contable());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(detalleprove.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(detalleprove.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.detalleprove.getid_asiento_contable(),false,"Formulario");

					//Factura
					if(!this.detalleproveConstantesFunciones.cargarid_facturaDetalleProve || this.detalleproveConstantesFunciones.event_dependid_facturaDetalleProve) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.detalleprove.getid_factura());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(detalleprove.getFactura()!=null) {
							this.facturasForeignKey.add(detalleprove.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.detalleprove.getid_factura(),false,"Formulario");

					//OrdenCompra
					if(!this.detalleproveConstantesFunciones.cargarid_orden_compraDetalleProve || this.detalleproveConstantesFunciones.event_dependid_orden_compraDetalleProve) {
						//this.cargarCombosOrdenComprasForeignKeyLista(" where id="+this.detalleprove.getid_orden_compra());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.ordencomprasForeignKey=new ArrayList<OrdenCompra>();

						if(detalleprove.getOrdenCompra()!=null) {
							this.ordencomprasForeignKey.add(detalleprove.getOrdenCompra());
						}

						this.addItemDefectoCombosForeignKeyOrdenCompra();
						this.cargarCombosFrameOrdenComprasForeignKey("Todos");
					}
					this.setActualOrdenCompraForeignKey(this.detalleprove.getid_orden_compra(),false,"Formulario");

					//EstadoDetalleCliente
					if(!this.detalleproveConstantesFunciones.cargarid_estado_detalle_clienteDetalleProve || this.detalleproveConstantesFunciones.event_dependid_estado_detalle_clienteDetalleProve) {
						//this.cargarCombosEstadoDetalleClientesForeignKeyLista(" where id="+this.detalleprove.getid_estado_detalle_cliente());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.estadodetalleclientesForeignKey=new ArrayList<EstadoDetalleCliente>();

						if(detalleprove.getEstadoDetalleCliente()!=null) {
							this.estadodetalleclientesForeignKey.add(detalleprove.getEstadoDetalleCliente());
						}

						this.addItemDefectoCombosForeignKeyEstadoDetalleCliente();
						this.cargarCombosFrameEstadoDetalleClientesForeignKey("Todos");
					}
					this.setActualEstadoDetalleClienteForeignKey(this.detalleprove.getid_estado_detalle_cliente(),false,"Formulario");

					//Anio
					if(!this.detalleproveConstantesFunciones.cargarid_anioDetalleProve || this.detalleproveConstantesFunciones.event_dependid_anioDetalleProve) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detalleprove.getid_anio());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detalleprove.getAnio()!=null) {
							this.aniosForeignKey.add(detalleprove.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detalleprove.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detalleproveConstantesFunciones.cargarid_mesDetalleProve || this.detalleproveConstantesFunciones.event_dependid_mesDetalleProve) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detalleprove.getid_mes());
									//this.inicializarActualizarBindingDetalleProve(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detalleprove.getMes()!=null) {
							this.messForeignKey.add(detalleprove.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detalleprove.getid_mes(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleProve("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleProve(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProve() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleProve(DetalleProve detalleprove) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleProve(detalleprove,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleProve(DetalleProve detalleprove,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleProve(detalleprove);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleProve(detalleprove,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleProve(detalleprove);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleProve(DetalleProve detalleprove) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setText(detalleprove.getId().toString());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setDate(detalleprove.getfecha_venta());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setDate(detalleprove.getfecha_emision());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setDate(detalleprove.getfecha_pago());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setDate(detalleprove.getfecha_vencimiento());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setText(detalleprove.getmonto_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setText(detalleprove.getmonto_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setText(detalleprove.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setText(detalleprove.getnumero_factura());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setText(detalleprove.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setText(detalleprove.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setText(detalleprove.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setText(detalleprove.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setText(detalleprove.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleProve detalleproveLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detalleproveLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleProve detalleproveLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detalleproveLocal=this.detalleprove;
			} else {
				detalleproveLocal=this.detalleproveAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detalleproveLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleProve(detalleproveLocal,true);
					
					if(detalleproveSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detalleproveLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detalleproveLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleProve(DetalleProve detalleprove,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleProve(detalleprove,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(detalleprove);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleProve(DetalleProve detalleprove,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleProve(detalleprove,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleProve(DetalleProve detalleprove,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.getText()==null || this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.getText()=="" || this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setText("0");
			}

			if(conColumnasBase) {detalleprove.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelIdDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setfecha_venta(this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_FECHAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_ventaDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setfecha_emision(this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_emisionDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setfecha_pago(this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_FECHAPAGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_pagoDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setfecha_vencimiento(this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelfecha_vencimientoDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setmonto_mone_local(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_localDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setmonto_mone_extra(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelmonto_mone_extraDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setnumero_comprobante(this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_comprobanteDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setnumero_factura(this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelnumero_facturaDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setdebito_mone_local(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_localDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setcredito_mone_local(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_localDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setdebito_mone_extra(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldebito_mone_extraDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setcredito_mone_extra(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabelcredito_mone_extraDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleprove.setdescripcion(this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProveConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProve.jLabeldescripcionDetalleProve,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleProve(DetalleProve detalleproveBean,DetalleProve detalleprove,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleProve(DetalleProve detalleproveOrigen,DetalleProve detalleprove,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalleproveOrigen.getId()!=null && !detalleproveOrigen.getId().equals(0L))) {detalleprove.setId(detalleproveOrigen.getId());}}
			if(conDefault || (!conDefault && detalleproveOrigen.getfecha_venta()!=null && !detalleproveOrigen.getfecha_venta().equals(new Date()))) {detalleprove.setfecha_venta(detalleproveOrigen.getfecha_venta());}
			if(conDefault || (!conDefault && detalleproveOrigen.getfecha_emision()!=null && !detalleproveOrigen.getfecha_emision().equals(new Date()))) {detalleprove.setfecha_emision(detalleproveOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && detalleproveOrigen.getfecha_pago()!=null && !detalleproveOrigen.getfecha_pago().equals(new Date()))) {detalleprove.setfecha_pago(detalleproveOrigen.getfecha_pago());}
			if(conDefault || (!conDefault && detalleproveOrigen.getfecha_vencimiento()!=null && !detalleproveOrigen.getfecha_vencimiento().equals(new Date()))) {detalleprove.setfecha_vencimiento(detalleproveOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && detalleproveOrigen.getmonto_mone_local()!=null && !detalleproveOrigen.getmonto_mone_local().equals(0.0))) {detalleprove.setmonto_mone_local(detalleproveOrigen.getmonto_mone_local());}
			if(conDefault || (!conDefault && detalleproveOrigen.getmonto_mone_extra()!=null && !detalleproveOrigen.getmonto_mone_extra().equals(0.0))) {detalleprove.setmonto_mone_extra(detalleproveOrigen.getmonto_mone_extra());}
			if(conDefault || (!conDefault && detalleproveOrigen.getnumero_comprobante()!=null && !detalleproveOrigen.getnumero_comprobante().equals(""))) {detalleprove.setnumero_comprobante(detalleproveOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && detalleproveOrigen.getnumero_factura()!=null && !detalleproveOrigen.getnumero_factura().equals(""))) {detalleprove.setnumero_factura(detalleproveOrigen.getnumero_factura());}
			if(conDefault || (!conDefault && detalleproveOrigen.getdebito_mone_local()!=null && !detalleproveOrigen.getdebito_mone_local().equals(0.0))) {detalleprove.setdebito_mone_local(detalleproveOrigen.getdebito_mone_local());}
			if(conDefault || (!conDefault && detalleproveOrigen.getcredito_mone_local()!=null && !detalleproveOrigen.getcredito_mone_local().equals(0.0))) {detalleprove.setcredito_mone_local(detalleproveOrigen.getcredito_mone_local());}
			if(conDefault || (!conDefault && detalleproveOrigen.getdebito_mone_extra()!=null && !detalleproveOrigen.getdebito_mone_extra().equals(0.0))) {detalleprove.setdebito_mone_extra(detalleproveOrigen.getdebito_mone_extra());}
			if(conDefault || (!conDefault && detalleproveOrigen.getcredito_mone_extra()!=null && !detalleproveOrigen.getcredito_mone_extra().equals(0.0))) {detalleprove.setcredito_mone_extra(detalleproveOrigen.getcredito_mone_extra());}
			if(conDefault || (!conDefault && detalleproveOrigen.getdescripcion()!=null && !detalleproveOrigen.getdescripcion().equals(""))) {detalleprove.setdescripcion(detalleproveOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleProve(DetalleProve detalleprove) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setText(detalleprove.getId().toString());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setDate(detalleprove.getfecha_venta());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setDate(detalleprove.getfecha_emision());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setDate(detalleprove.getfecha_pago());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setDate(detalleprove.getfecha_vencimiento());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setText(detalleprove.getmonto_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setText(detalleprove.getmonto_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setText(detalleprove.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setText(detalleprove.getnumero_factura());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setText(detalleprove.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setText(detalleprove.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setText(detalleprove.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setText(detalleprove.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setText(detalleprove.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleProve(DetalleProveBean detalleproveBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setText(detalleproveBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setDate(detalleproveBean.getfecha_venta());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setDate(detalleproveBean.getfecha_emision());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setDate(detalleproveBean.getfecha_pago());
			this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setDate(detalleproveBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setText(detalleproveBean.getmonto_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setText(detalleproveBean.getmonto_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setText(detalleproveBean.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setText(detalleproveBean.getnumero_factura());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setText(detalleproveBean.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setText(detalleproveBean.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setText(detalleproveBean.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setText(detalleproveBean.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setText(detalleproveBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleProve(DetalleProveParameterReturnGeneral detalleproveReturnGeneral,DetalleProveBean detalleproveBean,Boolean conDefault) throws Exception { 
		try {
			DetalleProve detalleproveLocal=new DetalleProve();
			
			detalleproveLocal=detalleproveReturnGeneral.getDetalleProve();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalleproveLocal.getId()!=null && !detalleproveLocal.getId().equals(0L))) {detalleproveBean.setId(detalleproveLocal.getId());}}
			if(conDefault || (!conDefault && detalleproveLocal.getfecha_venta()!=null && !detalleproveLocal.getfecha_venta().equals(new Date()))) {detalleproveBean.setfecha_venta(detalleproveLocal.getfecha_venta());}
			if(conDefault || (!conDefault && detalleproveLocal.getfecha_emision()!=null && !detalleproveLocal.getfecha_emision().equals(new Date()))) {detalleproveBean.setfecha_emision(detalleproveLocal.getfecha_emision());}
			if(conDefault || (!conDefault && detalleproveLocal.getfecha_pago()!=null && !detalleproveLocal.getfecha_pago().equals(new Date()))) {detalleproveBean.setfecha_pago(detalleproveLocal.getfecha_pago());}
			if(conDefault || (!conDefault && detalleproveLocal.getfecha_vencimiento()!=null && !detalleproveLocal.getfecha_vencimiento().equals(new Date()))) {detalleproveBean.setfecha_vencimiento(detalleproveLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && detalleproveLocal.getmonto_mone_local()!=null && !detalleproveLocal.getmonto_mone_local().equals(0.0))) {detalleproveBean.setmonto_mone_local(detalleproveLocal.getmonto_mone_local());}
			if(conDefault || (!conDefault && detalleproveLocal.getmonto_mone_extra()!=null && !detalleproveLocal.getmonto_mone_extra().equals(0.0))) {detalleproveBean.setmonto_mone_extra(detalleproveLocal.getmonto_mone_extra());}
			if(conDefault || (!conDefault && detalleproveLocal.getnumero_comprobante()!=null && !detalleproveLocal.getnumero_comprobante().equals(""))) {detalleproveBean.setnumero_comprobante(detalleproveLocal.getnumero_comprobante());}
			if(conDefault || (!conDefault && detalleproveLocal.getnumero_factura()!=null && !detalleproveLocal.getnumero_factura().equals(""))) {detalleproveBean.setnumero_factura(detalleproveLocal.getnumero_factura());}
			if(conDefault || (!conDefault && detalleproveLocal.getdebito_mone_local()!=null && !detalleproveLocal.getdebito_mone_local().equals(0.0))) {detalleproveBean.setdebito_mone_local(detalleproveLocal.getdebito_mone_local());}
			if(conDefault || (!conDefault && detalleproveLocal.getcredito_mone_local()!=null && !detalleproveLocal.getcredito_mone_local().equals(0.0))) {detalleproveBean.setcredito_mone_local(detalleproveLocal.getcredito_mone_local());}
			if(conDefault || (!conDefault && detalleproveLocal.getdebito_mone_extra()!=null && !detalleproveLocal.getdebito_mone_extra().equals(0.0))) {detalleproveBean.setdebito_mone_extra(detalleproveLocal.getdebito_mone_extra());}
			if(conDefault || (!conDefault && detalleproveLocal.getcredito_mone_extra()!=null && !detalleproveLocal.getcredito_mone_extra().equals(0.0))) {detalleproveBean.setcredito_mone_extra(detalleproveLocal.getcredito_mone_extra());}
			if(conDefault || (!conDefault && detalleproveLocal.getdescripcion()!=null && !detalleproveLocal.getdescripcion().equals(""))) {detalleproveBean.setdescripcion(detalleproveLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleProveGenerico(Long idDetalleProveSeleccionado,JComboBox jComboBoxDetalleProve,List<DetalleProve> detalleprovesLocal)throws Exception {
		try {
			DetalleProve  detalleproveTemp=null;

			for(DetalleProve detalleproveAux:detalleprovesLocal) {
				if(detalleproveAux.getId()!=null && detalleproveAux.getId().equals(idDetalleProveSeleccionado)) {
					detalleproveTemp=detalleproveAux;
					break;
				}
			}

			jComboBoxDetalleProve.setSelectedItem(detalleproveTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleProveGenerico(JComboBox jComboBoxDetalleProve,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleProve.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleProve.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleProve.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleProve.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleProve.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleProve.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleProve.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleProve.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleProve.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleProve.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("PagoAuto")) {
			jButtonPagoAutoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("AutoriPago")) {
			jButtonAutoriPagoActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleprove=(DetalleProve) detalleproveLogic.getDetalleProves().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleprove =(DetalleProve) detalleproves.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("SucursalMovimiento")) {
			//sDescripcion=this.getActualSucursalMovimientoForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getsucursalmovimiento_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalMovimientoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getsucursalmovimiento_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.gettransaccion_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.gettipotransaccionmodulo_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getfactura_descripcion();
			}
		}

		if(sTipo.equals("OrdenCompra")) {
			//sDescripcion=this.getActualOrdenCompraForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getordencompra_descripcion();
			} else {
				//sDescripcion=this.getActualOrdenCompraForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getordencompra_descripcion();
			}
		}

		if(sTipo.equals("EstadoDetalleCliente")) {
			//sDescripcion=this.getActualEstadoDetalleClienteForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getestadodetallecliente_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoDetalleClienteForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getestadodetallecliente_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detalleprove.getIsNew() && !detalleprove.getIsChanged() && !detalleprove.getIsDeleted()) {
				sDescripcion=detalleprove.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detalleprove.getmes_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleProve detalleproveRow=new DetalleProve();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleproveRow=(DetalleProve) detalleproveLogic.getDetalleProves().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleproveRow=(DetalleProve) detalleproves.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonPagoAutoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,DetalleProve detalleprove) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormDetalleProve==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove = (DetalleProve)this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.detalleprove = (DetalleProve)this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(detalleprove!=null) {
						this.detalleprove = detalleprove;
					} else {
						this.detalleprove = new DetalleProve();
					}
				}

				if(this.isTienePermisosPagoAuto && this.permiteMantenimiento(this.detalleprove)) {
					PagoAutoBeanSwingJInternalFrame pagoautoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup=new PagoAutoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						pagoautoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup;
					} else {
						pagoautoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame;
					}

					List<DetalleProve> detalleproves=new ArrayList<DetalleProve>();
					detalleproves.add(this.detalleprove);
					if(!esRelacionado) {
						//pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setConGuardarRelaciones(false);
						//pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					pagoautoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormDetalleProve.cargarPagoAutoBeanSwingJInternalFrame(detalleproves,this.detalleprove,pagoautoBeanSwingJInternalFrame,/*conInicializar,*/pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getConGuardarRelaciones(),pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado());
					pagoautoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						pagoautoBeanSwingJInternalFrame.actualizarEstadoPanelsPagoAuto("no_relacionado");

						pagoautoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PagoAutoConstantesFunciones.ITAMANIOFILATABLA + (PagoAutoConstantesFunciones.ITAMANIOFILATABLA/2));

						pagoautoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
						TitledBorder titledBorderPagoAuto=(TitledBorder)pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.getBorder();

						titledBorderPagoAuto.setTitle(titledBorderDetalleProve.getTitle() + " -> Pago Auto");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,pagoautoBeanSwingJInternalFrame);
						}

						pagoautoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(pagoautoBeanSwingJInternalFrame);

						pagoautoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.detalleproveSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Pago Auto",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonAutoriPagoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,DetalleProve detalleprove) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormDetalleProve==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove = (DetalleProve)this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.detalleprove = (DetalleProve)this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(detalleprove!=null) {
						this.detalleprove = detalleprove;
					} else {
						this.detalleprove = new DetalleProve();
					}
				}

				if(this.isTienePermisosAutoriPago && this.permiteMantenimiento(this.detalleprove)) {
					AutoriPagoBeanSwingJInternalFrame autoripagoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup=new AutoriPagoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						autoripagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup;
					} else {
						autoripagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame;
					}

					List<DetalleProve> detalleproves=new ArrayList<DetalleProve>();
					detalleproves.add(this.detalleprove);
					if(!esRelacionado) {
						//autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setConGuardarRelaciones(false);
						//autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					autoripagoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormDetalleProve.cargarAutoriPagoBeanSwingJInternalFrame(detalleproves,this.detalleprove,autoripagoBeanSwingJInternalFrame,/*conInicializar,*/autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getConGuardarRelaciones(),autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado());
					autoripagoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						autoripagoBeanSwingJInternalFrame.actualizarEstadoPanelsAutoriPago("no_relacionado");

						autoripagoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(AutoriPagoConstantesFunciones.ITAMANIOFILATABLA + (AutoriPagoConstantesFunciones.ITAMANIOFILATABLA/2));

						autoripagoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
						TitledBorder titledBorderAutoriPago=(TitledBorder)autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.getBorder();

						titledBorderAutoriPago.setTitle(titledBorderDetalleProve.getTitle() + " -> Autori Pago");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,autoripagoBeanSwingJInternalFrame);
						}

						autoripagoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(autoripagoBeanSwingJInternalFrame);

						autoripagoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.detalleproveSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Autori Pago",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleProve(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve));			
			this.jButtonDuplicarDetalleProve.setVisible((this.isVisibilidadCeldaDuplicarDetalleProve && this.isPermisoDuplicarDetalleProve));			
			this.jButtonCopiarDetalleProve.setVisible((this.isVisibilidadCeldaCopiarDetalleProve && this.isPermisoCopiarDetalleProve));
			this.jButtonVerFormDetalleProve.setVisible((this.isVisibilidadCeldaVerFormDetalleProve && this.isPermisoVerFormDetalleProve));
			
			this.jButtonAbrirOrderByDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));			
			
			this.jButtonNuevoRelacionesDetalleProve.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProve && this.isPermisoNuevoDetalleProve));			
			this.jButtonNuevoGuardarCambiosDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve && this.isPermisoGuardarCambiosDetalleProve));
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonModificarDetalleProve.setVisible((this.isVisibilidadCeldaModificarDetalleProve && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.setVisible((this.isVisibilidadCeldaActualizarDetalleProve && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.setVisible((this.isVisibilidadCeldaEliminarDetalleProve && this.isPermisoEliminarDetalleProve));
			this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.setVisible(this.isVisibilidadCeldaCancelarDetalleProve);							
			this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.setVisible((this.isVisibilidadCeldaGuardarDetalleProve && this.isPermisoGuardarCambiosDetalleProve));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleProve.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProve && this.isPermisoGuardarCambiosDetalleProve));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve));						
			this.jButtonDuplicarToolBarDetalleProve.setVisible((this.isVisibilidadCeldaDuplicarDetalleProve && this.isPermisoDuplicarDetalleProve));						
			this.jButtonCopiarToolBarDetalleProve.setVisible((this.isVisibilidadCeldaCopiarDetalleProve && this.isPermisoCopiarDetalleProve));			
			this.jButtonVerFormToolBarDetalleProve.setVisible((this.isVisibilidadCeldaVerFormDetalleProve && this.isPermisoVerFormDetalleProve));			
			this.jButtonAbrirOrderByToolBarDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));
			this.jButtonNuevoRelacionesToolBarDetalleProve.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProve && this.isPermisoNuevoDetalleProve));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve && this.isPermisoGuardarCambiosDetalleProve));			
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonModificarToolBarDetalleProve.setVisible((this.isVisibilidadCeldaModificarDetalleProve && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarToolBarDetalleProve.setVisible((this.isVisibilidadCeldaActualizarDetalleProve  && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarToolBarDetalleProve.setVisible((this.isVisibilidadCeldaEliminarDetalleProve && this.isPermisoEliminarDetalleProve));
			this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarToolBarDetalleProve.setVisible(this.isVisibilidadCeldaCancelarDetalleProve);				
			this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosToolBarDetalleProve.setVisible((this.isVisibilidadCeldaGuardarDetalleProve && this.isPermisoGuardarCambiosDetalleProve));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleProve.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProve && this.isPermisoGuardarCambiosDetalleProve));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve));			
			this.jMenuItemDuplicarDetalleProve.setVisible((this.isVisibilidadCeldaDuplicarDetalleProve && this.isPermisoDuplicarDetalleProve));			
			this.jMenuItemCopiarDetalleProve.setVisible((this.isVisibilidadCeldaCopiarDetalleProve && this.isPermisoCopiarDetalleProve));			
			this.jMenuItemVerFormDetalleProve.setVisible((this.isVisibilidadCeldaVerFormDetalleProve && this.isPermisoVerFormDetalleProve));			
			this.jMenuItemAbrirOrderByDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));			
			//this.jMenuItemMostrarOcultarDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));
			this.jMenuItemDetalleAbrirOrderByDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));			
			//this.jMenuItemDetalleMostrarOcultarDetalleProve.setVisible((this.isVisibilidadCeldaOrdenDetalleProve && this.isPermisoOrdenDetalleProve));			
			this.jMenuItemNuevoRelacionesDetalleProve.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProve && this.isPermisoNuevoDetalleProve));			
			this.jMenuItemNuevoGuardarCambiosDetalleProve.setVisible((this.isVisibilidadCeldaNuevoDetalleProve && this.isPermisoNuevoDetalleProve && this.isPermisoGuardarCambiosDetalleProve));									
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemModificarDetalleProve.setVisible((this.isVisibilidadCeldaModificarDetalleProve && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemActualizarDetalleProve.setVisible((this.isVisibilidadCeldaActualizarDetalleProve && this.isPermisoActualizarDetalleProve));	
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemEliminarDetalleProve.setVisible((this.isVisibilidadCeldaEliminarDetalleProve && this.isPermisoEliminarDetalleProve));
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemCancelarDetalleProve.setVisible(this.isVisibilidadCeldaCancelarDetalleProve);				
			}
			
			this.jMenuItemGuardarCambiosDetalleProve.setVisible((this.isVisibilidadCeldaGuardarDetalleProve && this.isPermisoGuardarCambiosDetalleProve));						
			this.jMenuItemGuardarCambiosTablaDetalleProve.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProve && this.isPermisoGuardarCambiosDetalleProve));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleProve=this.jButtonNuevoDetalleProve.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleProve=this.jButtonDuplicarDetalleProve.isVisible();
			this.isVisibilidadCeldaCopiarDetalleProve=this.jButtonCopiarDetalleProve.isVisible();
			this.isVisibilidadCeldaVerFormDetalleProve=this.jButtonVerFormDetalleProve.isVisible();
			
			this.isVisibilidadCeldaOrdenDetalleProve=this.jButtonAbrirOrderByDetalleProve.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=this.jButtonNuevoRelacionesDetalleProve.isVisible();
			this.isVisibilidadCeldaModificarDetalleProve=this.jButtonModificarDetalleProve.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.isVisibilidadCeldaActualizarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.isVisible();
			this.isVisibilidadCeldaGuardarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=this.jButtonGuardarCambiosTablaDetalleProve.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetalleProve=this.jButtonNuevoToolBarDetalleProve.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=this.jButtonNuevoRelacionesToolBarDetalleProve.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.isVisibilidadCeldaModificarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonModificarToolBarDetalleProve.isVisible();
			this.isVisibilidadCeldaActualizarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarToolBarDetalleProve.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarToolBarDetalleProve.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarToolBarDetalleProve.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleProve=this.jButtonGuardarCambiosToolBarDetalleProve.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=this.jButtonGuardarCambiosTablaToolBarDetalleProve.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetalleProve=this.jMenuItemNuevoDetalleProve.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=this.jMenuItemNuevoRelacionesDetalleProve.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.isVisibilidadCeldaModificarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jMenuItemModificarDetalleProve.isVisible();
			this.isVisibilidadCeldaActualizarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jMenuItemActualizarDetalleProve.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jMenuItemEliminarDetalleProve.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProve=this.jInternalFrameDetalleFormDetalleProve.jMenuItemCancelarDetalleProve.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleProve=this.jMenuItemGuardarCambiosDetalleProve.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=this.jMenuItemGuardarCambiosTablaDetalleProve.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleProve(Boolean esInicializar) {
		if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
				//if(this.detalleproveSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleProve();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleProve(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleProve() {
		this.jButtonNuevoDetalleProve.setVisible(this.isPermisoNuevoDetalleProve);			
		this.jButtonDuplicarDetalleProve.setVisible(this.isPermisoDuplicarDetalleProve);			
		this.jButtonCopiarDetalleProve.setVisible(this.isPermisoCopiarDetalleProve);			
		this.jButtonVerFormDetalleProve.setVisible(this.isPermisoVerFormDetalleProve);			
		
		this.jButtonAbrirOrderByDetalleProve.setVisible(this.isPermisoOrdenDetalleProve);					
		
		this.jButtonNuevoRelacionesDetalleProve.setVisible(this.isPermisoNuevoDetalleProve);			
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonModificarDetalleProve.setVisible(this.isPermisoActualizarDetalleProve);	
			this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.setVisible(this.isPermisoActualizarDetalleProve);	
			this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.setVisible(this.isPermisoEliminarDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.setVisible(this.isVisibilidadCeldaCancelarDetalleProve);						
			this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.setVisible(this.isPermisoGuardarCambiosDetalleProve);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleProve.setVisible(this.isPermisoActualizarDetalleProve);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleProve() {
		this.jInternalFrameDetalleFormDetalleProve.jButtonModificarDetalleProve.setVisible(this.isPermisoActualizarDetalleProve);	
		this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.setVisible(this.isPermisoActualizarDetalleProve);	
		this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.setVisible(this.isPermisoEliminarDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.setVisible(this.isVisibilidadCeldaCancelarDetalleProve);							
		this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.setVisible((this.isVisibilidadCeldaGuardarDetalleProve && this.isPermisoGuardarCambiosDetalleProve));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleProve() {
		if(DetalleProveJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleProve();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleProve() {
	}
	
	public void jTableDatosDetalleProveListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleProve(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detalleprove.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleProve(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleProve.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detalleprove.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleProve(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleProve.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detalleprove.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursal_movimientoDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursalmovimiento=true;

			idTienePermisosucursalmovimiento=this.tienePermisosUsuarioEnPaginaWebDetalleProve(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursalmovimiento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.sucursalmovimientoBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalmovimientoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalmovimientoBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_sucursal_movimiento()!=null) {
					this.sucursalmovimientoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalmovimientoBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_sucursal_movimiento());
					this.sucursalmovimientoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalmovimientoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalmovimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalmovimientoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordersucursalmovimiento=(TitledBorder)this.sucursalmovimientoBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursalmovimiento.setTitle(titledBorderDetalleProve.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursal_movimientoDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_sucursal_movimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal_movimiento = "+this.detalleprove.getid_sucursal_movimiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleProve(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleProve.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detalleprove.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleProve(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleProve.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detalleprove.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebDetalleProve(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderDetalleProve.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.detalleprove.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebDetalleProve(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderDetalleProve.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.detalleprove.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteDetalleProveActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleProve=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosDetalleProve.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderDetalleProve.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebDetalleProve(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderDetalleProve.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.detalleprove.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebDetalleProve(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderDetalleProve.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.detalleprove.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebDetalleProve(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderDetalleProve.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.detalleprove.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableDetalleProveActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleProve=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosDetalleProve.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderDetalleProve.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebDetalleProve(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderDetalleProve.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.detalleprove.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaDetalleProveActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleProve=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosDetalleProve.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderDetalleProve.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebDetalleProve(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderDetalleProve.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.detalleprove.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_orden_compraDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoordencompra=true;

			idTienePermisoordencompra=this.tienePermisosUsuarioEnPaginaWebDetalleProve(OrdenCompraConstantesFunciones.CLASSNAME);

			if(idTienePermisoordencompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.ordencompraBeanSwingJInternalFrame=new OrdenCompraBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ordencompraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ordencompraBeanSwingJInternalFrame.getOrdenCompraLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_orden_compra()!=null) {
					this.ordencompraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ordencompraBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_orden_compra());
					this.ordencompraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ordencompraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ordencompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaOrdenCompra();
				}

				JInternalFrameBase jinternalFrame =this.ordencompraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderordencompra=(TitledBorder)this.ordencompraBeanSwingJInternalFrame.jScrollPanelDatosOrdenCompra.getBorder();

				titledBorderordencompra.setTitle(titledBorderDetalleProve.getTitle() + " -> OrdenCompra");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_orden_compraDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_orden_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_orden_compra = "+this.detalleprove.getid_orden_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_detalle_clienteDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadodetallecliente=true;

			idTienePermisoestadodetallecliente=this.tienePermisosUsuarioEnPaginaWebDetalleProve(EstadoDetalleClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadodetallecliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.estadodetalleclienteBeanSwingJInternalFrame=new EstadoDetalleClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadodetalleclienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadodetalleclienteBeanSwingJInternalFrame.getEstadoDetalleClienteLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_estado_detalle_cliente()!=null) {
					this.estadodetalleclienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadodetalleclienteBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_estado_detalle_cliente());
					this.estadodetalleclienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadodetalleclienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadodetalleclienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoDetalleCliente();
				}

				JInternalFrameBase jinternalFrame =this.estadodetalleclienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderestadodetallecliente=(TitledBorder)this.estadodetalleclienteBeanSwingJInternalFrame.jScrollPanelDatosEstadoDetalleCliente.getBorder();

				titledBorderestadodetallecliente.setTitle(titledBorderDetalleProve.getTitle() + " -> Estado Detalle Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_detalle_clienteDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_estado_detalle_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_detalle_cliente = "+this.detalleprove.getid_estado_detalle_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_ventaDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getfecha_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_venta = '"+Funciones2.getStringPostgresDate(this.detalleprove.getfecha_venta())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.detalleprove.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_pagoDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getfecha_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_pago = '"+Funciones2.getStringPostgresDate(this.detalleprove.getfecha_pago())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.detalleprove.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_mone_localDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getmonto_mone_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_mone_local = "+this.detalleprove.getmonto_mone_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_mone_extraDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getmonto_mone_extra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_mone_extra = "+this.detalleprove.getmonto_mone_extra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.detalleprove.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturaDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getnumero_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_factura like '%"+this.detalleprove.getnumero_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_mone_localDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getdebito_mone_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_mone_local = "+this.detalleprove.getdebito_mone_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_mone_localDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getcredito_mone_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_mone_local = "+this.detalleprove.getcredito_mone_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_mone_extraDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getdebito_mone_extra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_mone_extra = "+this.detalleprove.getdebito_mone_extra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_mone_extraDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getcredito_mone_extra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_mone_extra = "+this.detalleprove.getcredito_mone_extra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detalleprove.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleProve(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleProve.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detalleprove.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleProveUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleProve(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProve.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProve.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detalleproveLogic.getConnexion());

				if(this.detalleprove.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detalleprove.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProve=(TitledBorder)this.jScrollPanelDatosDetalleProve.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleProve.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleProveBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.getdetalleprove(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleprove==null) {
						this.detalleprove = new DetalleProve();
					}

					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);
				}

				if(this.detalleprove.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detalleprove.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProve(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdAnio();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdAsientoContable();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdCliente();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdDetalleProveDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdDetalleProve();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdEjercicio();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdEmpresa();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoDetalleClienteDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdEstadoDetalleCliente();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdFactura();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdMes();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdModulo();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdMoneda();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdOrdenCompraDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdOrdenCompra();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdPeriodo();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdSucursal();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionDetalleProveActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProve(false,false);

			this.getDetalleProvesFK_IdTransaccion();

			this.inicializarActualizarBindingDetalleProve(false);

			//if(DetalleProveBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProve(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproveLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetalleProve() {
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
		

		if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
			this.jInternalFrameDetalleFormDetalleProve.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleProve.dispose();
			this.jInternalFrameDetalleFormDetalleProve=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
			this.jInternalFrameReporteDinamicoDetalleProve.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleProve.dispose();
			this.jInternalFrameReporteDinamicoDetalleProve=null;
		}
		
		if(this.jInternalFrameImportacionDetalleProve!=null) {
			this.jInternalFrameImportacionDetalleProve.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleProve.dispose();
			this.jInternalFrameImportacionDetalleProve=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleProve();
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleProve")) {
				jButtonDuplicarDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleProve")) {
				jButtonCopiarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleProve")) {
				jButtonVerFormDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleProve")) {
				jButtonDuplicarDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleProve")) {
				jButtonDuplicarDetalleProveActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleProve")) {
				jButtonModificarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleProve")) {
				jButtonModificarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleProve")) {
				jButtonModificarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleProve")) {
				jButtonActualizarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleProve")) {
				jButtonActualizarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleProve")) {
				jButtonActualizarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleProve")) {
				jButtonEliminarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleProve")) {
				jButtonEliminarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleProve")) {
				jButtonEliminarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleProve")) {
				jButtonCancelarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleProve")) {
				jButtonCancelarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleProve")) {
				jButtonCancelarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleProve")) {
				jButtonCerrarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleProve")) {
				jButtonCerrarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleProve")) {
				jButtonCerrarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleProve")) {
				jButtonMostrarOcultarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleProve")) {
				jButtonCancelarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleProve")) {
				jButtonCopiarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleProve")) {
				jButtonVerFormDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleProve")) {
				jButtonCopiarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleProve")) {
				jButtonVerFormDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleProve")) {
				jButtonRecargarInformacionDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleProve")) {
				jButtonRecargarInformacionDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleProve")) {
				jButtonRecargarInformacionDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleProve")) {
				jButtonAnterioresDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleProve")) {
				jButtonAnterioresDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleProve")) {
				jButtonAnterioresDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleProve")) {
				jButtonSiguientesDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleProve")) {
				jButtonSiguientesDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleProve")) {
				jButtonSiguientesDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleProve") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleProve")) {
				jButtonAbrirOrderByDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleProve") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleProve")) {
				jButtonMostrarOcultarDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleProve")) {
				jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleProve")) {
				jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleProve")) {
				jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleProve")) {
				jButtonCerrarReporteDinamicoDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleProve")) {
				jButtonGenerarReporteDinamicoDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleProve")) {
				
				jButtonGenerarExcelReporteDinamicoDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetalleProve")) {
				jButtonCerrarImportacionDetalleProveActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleProve")) {
				
				jButtonGenerarImportacionDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetalleProve")) {
				
				jButtonAbrirImportacionDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetalleProve")) {
				jComboBoxTiposAccionesDetalleProveActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleProve")) {
				jComboBoxTiposRelacionesDetalleProveActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleProve")) {
				jComboBoxTiposAccionesDetalleProveActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleProve")) {
				
				jComboBoxTiposSeleccionarDetalleProveActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetalleProve")) {
				jTextFieldValorCampoGeneralDetalleProveActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDetalleProve")) {
				jButtonAbrirOrderByDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleProve")) {
				jButtonAbrirOrderByDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleProve")) {
				jButtonCerrarOrderByDetalleProveActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleProveBusqueda")) {
				this.jButtonidDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleProveUpdate")) {
				this.jButtonid_empresaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleProveBusqueda")) {
				this.jButtonid_empresaDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleProveUpdate")) {
				this.jButtonid_sucursalDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleProveBusqueda")) {
				this.jButtonid_sucursalDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_movimientoDetalleProveUpdate")) {
				this.jButtonid_sucursal_movimientoDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_movimientoDetalleProveBusqueda")) {
				this.jButtonid_sucursal_movimientoDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProveUpdate")) {
				this.jButtonid_ejercicioDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProveBusqueda")) {
				this.jButtonid_ejercicioDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleProveUpdate")) {
				this.jButtonid_periodoDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleProveBusqueda")) {
				this.jButtonid_periodoDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloDetalleProveUpdate")) {
				this.jButtonid_moduloDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloDetalleProveBusqueda")) {
				this.jButtonid_moduloDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaDetalleProveUpdate")) {
				this.jButtonid_monedaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaDetalleProveBusqueda")) {
				this.jButtonid_monedaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteDetalleProve")) {
				this.jButtonid_clienteDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteDetalleProveUpdate")) {
				this.jButtonid_clienteDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteDetalleProveBusqueda")) {
				this.jButtonid_clienteDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionDetalleProveUpdate")) {
				this.jButtonid_transaccionDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionDetalleProveBusqueda")) {
				this.jButtonid_transaccionDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDetalleProveUpdate")) {
				this.jButtonid_tipo_transaccion_moduloDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDetalleProveBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProve")) {
				this.jButtonid_asiento_contableDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProveUpdate")) {
				this.jButtonid_asiento_contableDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProveBusqueda")) {
				this.jButtonid_asiento_contableDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaDetalleProve")) {
				this.jButtonid_facturaDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaDetalleProveUpdate")) {
				this.jButtonid_facturaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaDetalleProveBusqueda")) {
				this.jButtonid_facturaDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_orden_compraDetalleProveUpdate")) {
				this.jButtonid_orden_compraDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_orden_compraDetalleProveBusqueda")) {
				this.jButtonid_orden_compraDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_clienteDetalleProveUpdate")) {
				this.jButtonid_estado_detalle_clienteDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_clienteDetalleProveBusqueda")) {
				this.jButtonid_estado_detalle_clienteDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ventaDetalleProveBusqueda")) {
				this.jButtonfecha_ventaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionDetalleProveBusqueda")) {
				this.jButtonfecha_emisionDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_pagoDetalleProveBusqueda")) {
				this.jButtonfecha_pagoDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoDetalleProveBusqueda")) {
				this.jButtonfecha_vencimientoDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_mone_localDetalleProveBusqueda")) {
				this.jButtonmonto_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_mone_extraDetalleProveBusqueda")) {
				this.jButtonmonto_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleProveBusqueda")) {
				this.jButtonnumero_comprobanteDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaDetalleProveBusqueda")) {
				this.jButtonnumero_facturaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_localDetalleProveBusqueda")) {
				this.jButtondebito_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_localDetalleProveBusqueda")) {
				this.jButtoncredito_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_extraDetalleProveBusqueda")) {
				this.jButtondebito_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_extraDetalleProveBusqueda")) {
				this.jButtoncredito_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleProveBusqueda")) {
				this.jButtondescripcionDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleProveUpdate")) {
				this.jButtonid_anioDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleProveBusqueda")) {
				this.jButtonid_anioDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleProveUpdate")) {
				this.jButtonid_mesDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleProveBusqueda")) {
				this.jButtonid_mesDetalleProveBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableDetalleProve")) {
				this.jButtonid_asiento_contableDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteDetalleProve")) {
				this.jButtonid_clienteDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaDetalleProve")) {
				this.jButtonid_facturaDetalleProveActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableDetalleProve")) {
				this.jButtonFK_IdAsientoContableDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteDetalleProve")) {
				this.jButtonFK_IdClienteDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdDetalleProveDetalleProve")) {
				this.jButtonFK_IdDetalleProveDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoDetalleClienteDetalleProve")) {
				this.jButtonFK_IdEstadoDetalleClienteDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaDetalleProve")) {
				this.jButtonFK_IdFacturaDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdOrdenCompraDetalleProve")) {
				this.jButtonFK_IdOrdenCompraDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloDetalleProve")) {
				this.jButtonFK_IdTipoTransaccionModuloDetalleProveActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionDetalleProve")) {
				this.jButtonFK_IdTransaccionDetalleProveActionPerformed(evt);
			}
			
			;
			
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleProve();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleProve detalleproveLocal=null;
			
			if(!this.getEsControlTabla()) {
				detalleproveLocal=this.detalleprove;
			} else {
				detalleproveLocal=this.detalleproveAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
							
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
								
						
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
								
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
							
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
								
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleProve")) {
					jCheckBoxSeleccionarTodosDetalleProveItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleProve")) {
					jCheckBoxSeleccionadosDetalleProveItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleProve")) {
					
				}
				
				


				
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
												
				
				


				
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProveActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleprove);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleprove);
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProve.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProve.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProveActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproveAnterior =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleProve")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleProveListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleProve.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detalleprove =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detalleprove =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detalleprove);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleProve")) {
				
				}
				
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleProve")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleProve.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleProve")) {
			
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleProve();
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleProve")) {
				jButtonDuplicarDetalleProveActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleProve")) {
				jButtonCopiarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleProve")) {
				jButtonVerFormDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleProve")) {
				jButtonNuevoDetalleProveActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleProve")) {
				jButtonModificarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleProve")) {
				jButtonActualizarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleProve")) {
				jButtonEliminarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleProve")) {
				jButtonCancelarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleProve")) {
				jButtonCerrarDetalleProveActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleProve")) {
				jButtonGuardarCambiosDetalleProveActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleProve")) {
				jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleProve")) {
				jButtonAbrirOrderByDetalleProveActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleProve")) {
				jButtonRecargarInformacionDetalleProveActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleProve")) {
				jButtonAnterioresDetalleProveActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleProve")) {
				jButtonSiguientesDetalleProveActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleProveBusqueda")) {
				this.jButtonidDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleProveUpdate")) {
				this.jButtonid_empresaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleProveBusqueda")) {
				this.jButtonid_empresaDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleProveUpdate")) {
				this.jButtonid_sucursalDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleProveBusqueda")) {
				this.jButtonid_sucursalDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_movimientoDetalleProveUpdate")) {
				this.jButtonid_sucursal_movimientoDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_movimientoDetalleProveBusqueda")) {
				this.jButtonid_sucursal_movimientoDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProveUpdate")) {
				this.jButtonid_ejercicioDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProveBusqueda")) {
				this.jButtonid_ejercicioDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleProveUpdate")) {
				this.jButtonid_periodoDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleProveBusqueda")) {
				this.jButtonid_periodoDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloDetalleProveUpdate")) {
				this.jButtonid_moduloDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloDetalleProveBusqueda")) {
				this.jButtonid_moduloDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaDetalleProveUpdate")) {
				this.jButtonid_monedaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaDetalleProveBusqueda")) {
				this.jButtonid_monedaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteDetalleProve")) {
				this.jButtonid_clienteDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteDetalleProveUpdate")) {
				this.jButtonid_clienteDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteDetalleProveBusqueda")) {
				this.jButtonid_clienteDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionDetalleProveUpdate")) {
				this.jButtonid_transaccionDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionDetalleProveBusqueda")) {
				this.jButtonid_transaccionDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDetalleProveUpdate")) {
				this.jButtonid_tipo_transaccion_moduloDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDetalleProveBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProve")) {
				this.jButtonid_asiento_contableDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProveUpdate")) {
				this.jButtonid_asiento_contableDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleProveBusqueda")) {
				this.jButtonid_asiento_contableDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaDetalleProve")) {
				this.jButtonid_facturaDetalleProveActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaDetalleProveUpdate")) {
				this.jButtonid_facturaDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaDetalleProveBusqueda")) {
				this.jButtonid_facturaDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_orden_compraDetalleProveUpdate")) {
				this.jButtonid_orden_compraDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_orden_compraDetalleProveBusqueda")) {
				this.jButtonid_orden_compraDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_clienteDetalleProveUpdate")) {
				this.jButtonid_estado_detalle_clienteDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_clienteDetalleProveBusqueda")) {
				this.jButtonid_estado_detalle_clienteDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_ventaDetalleProveBusqueda")) {
				this.jButtonfecha_ventaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionDetalleProveBusqueda")) {
				this.jButtonfecha_emisionDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_pagoDetalleProveBusqueda")) {
				this.jButtonfecha_pagoDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoDetalleProveBusqueda")) {
				this.jButtonfecha_vencimientoDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_mone_localDetalleProveBusqueda")) {
				this.jButtonmonto_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_mone_extraDetalleProveBusqueda")) {
				this.jButtonmonto_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleProveBusqueda")) {
				this.jButtonnumero_comprobanteDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaDetalleProveBusqueda")) {
				this.jButtonnumero_facturaDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_localDetalleProveBusqueda")) {
				this.jButtondebito_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_localDetalleProveBusqueda")) {
				this.jButtoncredito_mone_localDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_extraDetalleProveBusqueda")) {
				this.jButtondebito_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_extraDetalleProveBusqueda")) {
				this.jButtoncredito_mone_extraDetalleProveBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleProveBusqueda")) {
				this.jButtondescripcionDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleProveUpdate")) {
				this.jButtonid_anioDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleProveBusqueda")) {
				this.jButtonid_anioDetalleProveBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleProveUpdate")) {
				this.jButtonid_mesDetalleProveUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleProveBusqueda")) {
				this.jButtonid_mesDetalleProveBusquedaActionPerformed(evt);
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleProve();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleProve")) {
				closingInternalFrameDetalleProve();
				
			} else if(sTipo.equals("jButtonCancelarDetalleProve")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleProve = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleProveBeanSwingJInternalFrame jInternalFrameParent=(DetalleProveBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleProve.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleProveActionPerformed(null);
			}
			
			DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleprove,new Object(),this.detalleproveParameterGeneral,this.detalleproveReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleProve(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleProve(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleProve(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detalleprove)) {
			if(!esControlTabla) {
				if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);			
				}
				
				if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleProve(this.detalleprove,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleproveReturnGeneral=detalleproveLogic.procesarEventosDetalleProvesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproveLogic.getDetalleProves(),this.detalleprove,this.detalleproveParameterGeneral,this.isEsNuevoDetalleProve,classes);//this.detalleproveLogic.getDetalleProve()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleProve(this.detalleproveReturnGeneral,this.detalleproveBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleProve(classes,this.detalleproveReturnGeneral,this.detalleproveBean,false);
					}
						
					if(this.detalleproveReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleProve(this.detalleproveReturnGeneral.getDetalleProve());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleProve(this.detalleproveReturnGeneral.getDetalleProve());	
					}
						
					if(this.detalleproveReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleProve(this.detalleproveReturnGeneral.getDetalleProve(),classes);//this.detalleproveBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleProve(this.detalleprove,classes);//this.detalleproveBean);									
				}
			
				if(DetalleProveJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleProve(this.detalleprove,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProve(this.detalleprove);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detalleproveAnterior!=null) {
						this.detalleprove=this.detalleproveAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleproveReturnGeneral=detalleproveLogic.procesarEventosDetalleProvesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproveLogic.getDetalleProves(),this.detalleprove,this.detalleproveParameterGeneral,this.isEsNuevoDetalleProve,classes);//this.detalleproveLogic.getDetalleProve()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleproveSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleproveSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detalleproveReturnGeneral.getDetalleProve(),detalleproveLogic.getDetalleProves());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detalleproveReturnGeneral.getDetalleProve(),this.detalleproves);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleProve.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleProve.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleProve();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleProve() throws Exception {
		
		DetalleProveModel detalleproveModel=(DetalleProveModel)this.jTableDatosDetalleProve.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleproveModel.detalleproves=this.detalleproveLogic.getDetalleProves();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detalleproveModel.detalleproves=this.detalleproves;
		}
		
		
		((DetalleProveModel) this.jTableDatosDetalleProve.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleProve() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetalleproveAnterior(),this.detalleproveLogic.getDetalleProves());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetalleproveAnterior(),this.detalleproves);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleProve();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleProve(DetalleProve detalleprove,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(detalleprove.getPagoAutos());
					this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPagoAuto(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(detalleprove.getAutoriPagos());
					this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPago(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleprove,new Object(),generalEntityParameterGeneral,this.detalleproveReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detalleproveSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleProveConstantesFunciones.getClassesRelationshipsOfDetalleProve(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleProveConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleProve(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleProve(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleProveBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleprove,new Object(),generalEntityParameterGeneral,this.detalleproveReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleProve(DetalleProveBean detalleproveBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(detalleprove.getPagoAutos());
					this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPagoAuto(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(detalleprove.getAutoriPagos());
					this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPago(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleProve(ArrayList<Classe> classes,DetalleProveReturnGeneral detalleproveReturnGeneral,DetalleProveBean detalleproveBean,Boolean conDefault) throws Exception {
		
			this.detalleproveBean.setPagoAutos(detalleproveReturnGeneral.getDetalleProve().getPagoAutos());
			this.detalleproveBean.setAutoriPagos(detalleproveReturnGeneral.getDetalleProve().getAutoriPagos());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleProve(DetalleProve detalleprove,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					detalleprove.setPagoAutos(this.jInternalFrameDetalleFormDetalleProve.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					detalleprove.setAutoriPagos(this.jInternalFrameDetalleFormDetalleProve.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detalleprove)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleProve = new DetalleProveDetalleFormJInternalFrame(jDesktopPane,this.detalleproveSessionBean.getConGuardarRelaciones(),this.detalleproveSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.setVisible(false);
		this.jInternalFrameDetalleFormDetalleProve.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleProve.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleProve.detalleproveLogic=this.detalleproveLogic;
		
		this.cargarCombosFrameForeignKeyDetalleProve("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleProve();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleProve();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleProve("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleProve();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleProve.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleProve"));
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonModificarDetalleProve.addActionListener(new ButtonActionListener(this,"ModificarDetalleProve"));

		
		this.jInternalFrameDetalleFormDetalleProve.jButtonModificarToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleProve"));
					
		this.jInternalFrameDetalleFormDetalleProve.jMenuItemModificarDetalleProve.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleProve"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.addActionListener (new ButtonActionListener(this,"ActualizarDetalleProve"));
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleProve"));
						
		this.jInternalFrameDetalleFormDetalleProve.jMenuItemActualizarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleProve"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.addActionListener (new ButtonActionListener(this,"EliminarDetalleProve"));
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleProve"));
								
		this.jInternalFrameDetalleFormDetalleProve.jMenuItemEliminarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleProve"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.addActionListener (new ButtonActionListener(this,"CancelarDetalleProve"));
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleProve"));
					
		this.jInternalFrameDetalleFormDetalleProve.jMenuItemCancelarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleProve"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jMenuItemDetalleCerrarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleProve"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProve"));
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProve"));
		
		
		
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleProve"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonidDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveBusqueda"));
		//jButtonid_clienteDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProve.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveBusqueda"));
		//jButtonid_asiento_contableDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProve.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveBusqueda"));
		//jButtonid_facturaDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProve.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_ventaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ventaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_emisionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_pagoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_pagoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_vencimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_comprobanteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondescripcionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleProve"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleProve"));
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleProve"));
		}
		
		this.jTableDatosDetalleProve.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleProve"));
		
		this.jTableDatosDetalleProve.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleProve"));
		
		this.jButtonNuevoDetalleProve.addActionListener(new ButtonActionListener(this,"NuevoDetalleProve"));
		
		this.jButtonDuplicarDetalleProve.addActionListener(new ButtonActionListener(this,"DuplicarDetalleProve"));
		
		this.jButtonCopiarDetalleProve.addActionListener(new ButtonActionListener(this,"CopiarDetalleProve"));
		
		this.jButtonVerFormDetalleProve.addActionListener(new ButtonActionListener(this,"VerFormDetalleProve"));
		
		
		this.jButtonNuevoToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleProve"));
			
		this.jButtonDuplicarToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleProve"));
			
		this.jMenuItemNuevoDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleProve"));
			
		this.jMenuItemDuplicarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleProve"));		
		
		
		this.jButtonNuevoRelacionesDetalleProve.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleProve"));
		
		
		this.jButtonNuevoRelacionesToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleProve"));
			
		this.jMenuItemNuevoRelacionesDetalleProve.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleProve"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonModificarDetalleProve.addActionListener(new ButtonActionListener(this,"ModificarDetalleProve"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonModificarToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleProve"));
			
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemModificarDetalleProve.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleProve"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarDetalleProve.addActionListener (new ButtonActionListener(this,"ActualizarDetalleProve"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonActualizarToolBarDetalleProve.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleProve"));
				
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemActualizarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleProve"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarDetalleProve.addActionListener (new ButtonActionListener(this,"EliminarDetalleProve"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonEliminarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleProve"));
						
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemEliminarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleProve"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarDetalleProve.addActionListener (new ButtonActionListener(this,"CancelarDetalleProve"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonCancelarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleProve"));
			
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemCancelarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleProve"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleProve"));		
		
		
		this.jButtonCerrarDetalleProve.addActionListener (new ButtonActionListener(this,"CerrarDetalleProve"));
		
		
		this.jButtonCerrarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleProve"));
			
		this.jMenuItemCerrarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleProve"));
			
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jMenuItemDetalleCerrarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleProve"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleProve"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProve"));
		}
		
		this.jButtonCopiarToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleProve"));
			
		this.jButtonVerFormToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleProve"));
		
		this.jMenuItemGuardarCambiosDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleProve"));
			
		this.jMenuItemCopiarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleProve"));		
		
		this.jMenuItemVerFormDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleProve"));		
		
		
		this.jButtonGuardarCambiosTablaDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleProve"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleProve"));
			
		this.jMenuItemGuardarCambiosTablaDetalleProve.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleProve"));		
		
		
		
		this.jButtonRecargarInformacionDetalleProve.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleProve"));
					
		this.jButtonRecargarInformacionToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleProve"));
		
		this.jMenuItemRecargarInformacionDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleProve"));		
		
		
		
		this.jButtonAnterioresDetalleProve.addActionListener (new ButtonActionListener(this,"AnterioresDetalleProve"));
		
		
		this.jButtonAnterioresToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleProve"));
		
		this.jMenuItemAnterioresDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleProve"));		
		
		
		this.jButtonSiguientesDetalleProve.addActionListener (new ButtonActionListener(this,"SiguientesDetalleProve"));
		
		
		this.jButtonSiguientesToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleProve"));
			
		this.jMenuItemSiguientesDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleProve"));
			
		this.jMenuItemAbrirOrderByDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleProve"));
			
		this.jMenuItemMostrarOcultarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleProve"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleProve"));
			
		this.jMenuItemDetalleMostarOcultarDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleProve"));		
		
		
		this.jButtonNuevoGuardarCambiosDetalleProve.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleProve"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleProve"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleProve.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleProve"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleProve.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleProve"));

		this.jCheckBoxSeleccionadosDetalleProve.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleProve"));
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleProve"));
		}
		
		
		this.jComboBoxTiposRelacionesDetalleProve.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleProve"));
			
		this.jComboBoxTiposAccionesDetalleProve.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleProve"));
					
		this.jComboBoxTiposSeleccionarDetalleProve.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleProve"));
			
		this.jTextFieldValorCampoGeneralDetalleProve.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleProve"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonidDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveBusqueda"));
		//jButtonid_clienteDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProve.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveBusqueda"));
		//jButtonid_asiento_contableDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProve.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveBusqueda"));
		//jButtonid_facturaDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProve.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_ventaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ventaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_emisionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_pagoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_pagoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_vencimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_comprobanteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondescripcionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableDetalleProve"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableDetalleProve.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProve"));

			this.jButtonFK_IdClienteDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdClienteDetalleProve"));

			this.jButtonBuscarFK_IdClienteid_clienteDetalleProve.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProve"));

			this.jButtonFK_IdDetalleProveDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdDetalleProveDetalleProve"));

			this.jButtonFK_IdEstadoDetalleClienteDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleClienteDetalleProve"));

			this.jButtonFK_IdFacturaDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdFacturaDetalleProve"));

			this.jButtonBuscarFK_IdFacturaid_facturaDetalleProve.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProve"));

			this.jButtonFK_IdOrdenCompraDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdOrdenCompraDetalleProve"));

			this.jButtonFK_IdTipoTransaccionModuloDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloDetalleProve"));

			this.jButtonFK_IdTransaccionDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionDetalleProve"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetalleProve!=null) {
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProve"));
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProve"));
				this.jInternalFrameReporteDinamicoDetalleProve.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProve"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleProve.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProve"));				
			//this.jButtonGenerarReporteDinamicoDetalleProve.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProve"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleProve.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProve"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleProve!=null) {
				this.jInternalFrameImportacionDetalleProve.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleProve"));
				this.jInternalFrameImportacionDetalleProve.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleProve"));
				this.jInternalFrameImportacionDetalleProve.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleProve"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleProve.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleProve"));
			
			this.jButtonAbrirOrderByToolBarDetalleProve.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleProve"));			
			
			if(this.jInternalFrameOrderByDetalleProve!=null) {
				this.jInternalFrameOrderByDetalleProve.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleProve"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleProve!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProve.jTabbedPaneRelacionesDetalleProve.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleProve"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleProve();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleProve.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleProve = (JInternalFrameBase)event.getSource();
	            	
	            DetalleProveBeanSwingJInternalFrame jInternalFrameParent=(DetalleProveBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleProve.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleProveActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleProve.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleProveListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleProve.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleProve.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleProve";
		inputMap = this.jButtonNuevoDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleProveActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProveActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleProve";
		inputMap = this.jButtonNuevoRelacionesDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleProveActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleProve";
		inputMap = this.jButtonModificarDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleProve";
		inputMap = this.jButtonActualizarDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleProve";
		inputMap = this.jButtonEliminarDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleProve";
		inputMap = this.jButtonCancelarDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleProve";
		inputMap = this.jButtonCerrarDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleProve";
		inputMap = this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleProve.jButtonGuardarCambiosDetalleProve.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleProveActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleProve.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleProveItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleProve.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleProveActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleProve.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleProveActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleProve.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleProveActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonidDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_empresaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursalDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_sucursal_movimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_movimientoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_ejercicioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_periodoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_monedaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDetalleProveBusqueda"));
		//jButtonid_clienteDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProve.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_transaccionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_tipo_transaccion_moduloDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDetalleProveBusqueda"));
		//jButtonid_asiento_contableDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProve.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProveBusqueda"));
		//jButtonid_facturaDetalleProve.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaDetalleProveActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProve.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProve"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_orden_compraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_orden_compraDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_estado_detalle_clienteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_clienteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_ventaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_ventaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_emisionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_pagoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_pagoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonfecha_vencimientoDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonmonto_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"monto_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_comprobanteDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonnumero_facturaDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_localDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondebito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtoncredito_mone_extraDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraDetalleProveBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtondescripcionDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_anioDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProveBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProve.jButtonid_mesDetalleProveBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProveBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableDetalleProve"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableDetalleProve.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleProve"));

		this.jButtonFK_IdClienteDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdClienteDetalleProve"));

		this.jButtonBuscarFK_IdClienteid_clienteDetalleProve.addActionListener(new ButtonActionListener(this,"id_clienteDetalleProve"));

		this.jButtonFK_IdDetalleProveDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdDetalleProveDetalleProve"));

		this.jButtonFK_IdEstadoDetalleClienteDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleClienteDetalleProve"));

		this.jButtonFK_IdFacturaDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdFacturaDetalleProve"));

		this.jButtonBuscarFK_IdFacturaid_facturaDetalleProve.addActionListener(new ButtonActionListener(this,"id_facturaDetalleProve"));

		this.jButtonFK_IdOrdenCompraDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdOrdenCompraDetalleProve"));

		this.jButtonFK_IdTipoTransaccionModuloDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloDetalleProve"));

		this.jButtonFK_IdTransaccionDetalleProve.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionDetalleProve"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleProve.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleProveActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetalleProveActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleProve.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetalleProve(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
					detalleproveAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProve detalleproveAux:detalleproves) {
					detalleproveAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleProveItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleProve(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
						detalleproveAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProve detalleproveAux:detalleproves) {
						detalleproveAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProve detalleproveAux:detalleproves) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleProve(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleProve.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleProve.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleProveItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleProve(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleProve.getSelectedRows();
			
			DetalleProve detalleproveLocal=new DetalleProve();
			
			//this.seleccionarTodosDetalleProve(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLocal =(DetalleProve) this.detalleproveLogic.getDetalleProves().toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detalleproveLocal =(DetalleProve) this.detalleproves.toArray()[this.jTableDatosDetalleProve.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detalleproveLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
						detalleproveAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProve detalleproveAux:detalleproves) {
						detalleproveAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleProve(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleProve.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleProve.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleProve,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleProveItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleProveParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleProveActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleProve(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleProve.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleProve detalleproveAux:this.detalleproveLogic.getDetalleProves()) {
				
						if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENTA)) {
							existe=true;
							detalleproveAux.setfecha_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							detalleproveAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAPAGO)) {
							existe=true;
							detalleproveAux.setfecha_pago(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							detalleproveAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL)) {
							existe=true;
							detalleproveAux.setmonto_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setmonto_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detalleproveAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							detalleproveAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL)) {
							existe=true;
							detalleproveAux.setdebito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL)) {
							existe=true;
							detalleproveAux.setcredito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setdebito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setcredito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalleproveAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProve detalleproveAux:detalleproves) {
					
						if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENTA)) {
							existe=true;
							detalleproveAux.setfecha_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							detalleproveAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAPAGO)) {
							existe=true;
							detalleproveAux.setfecha_pago(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							detalleproveAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL)) {
							existe=true;
							detalleproveAux.setmonto_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setmonto_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detalleproveAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							detalleproveAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL)) {
							existe=true;
							detalleproveAux.setdebito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL)) {
							existe=true;
							detalleproveAux.setcredito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setdebito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA)) {
							existe=true;
							detalleproveAux.setcredito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalleproveAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleProve(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleProveActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleProve(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleProve=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleProve.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleProve) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleProve(conSplash);
				
					this.generarReporteDetalleProvesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleProvesSeleccionados();
				//this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleProvesSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleProvesSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleProve();
				
				this.exportarDetalleProvesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleProves();
				//this.importarDetalleProves();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleProve();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleProvesSeleccionados();
				//this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Prove", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleProve();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleProve)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleProve(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleProveBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleProve) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleProve(conSplash);
					
						//this.actualizarParametrosGeneralDetalleProve();
						
						this.generarReporteProcesoAccionDetalleProvesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleProveBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle ProveS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Prove", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleProve();
				
						this.actualizarParametrosGeneralDetalleProve();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detalleproveReturnGeneral=detalleproveLogic.procesarAccionDetalleProvesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detalleproveLogic.getDetalleProves(),this.detalleproveParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleProveReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleProve();
					
					DetalleProveBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleProveReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleProve.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleProve.jComboBoxTiposAccionesFormularioDetalleProve.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleProve(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleProveActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleProve();
			
			if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
			DetalleProve detalleprove=new DetalleProve();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleProve(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleProve.getSelectedItem();
			
			
			
			
			detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
			//this.sTipoAccion;
			
			if(detalleprovesSeleccionados.size()==1) {
				for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
					detalleprove=detalleproveAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Pago Auto")) {
					jButtonPagoAutoActionPerformed(null,rowIndex,true,false,detalleprove);
				}
				else if(this.sTipoRelacion.equals("Autori Pago")) {
					jButtonAutoriPagoActionPerformed(null,rowIndex,true,false,detalleprove);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleProve();
			
      		//this.finishProcessDetalleProve(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleProveReturnGeneral() throws Exception {
		if(this.detalleproveReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detalleproveReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detalleproveReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detalleproveReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detalleproveReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detalleproveReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleProve(false);
		}
		
		if(this.detalleproveReturnGeneral.getConRetornoLista() || this.detalleproveReturnGeneral.getConRetornoObjeto()) {
			if(this.detalleproveReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleproveLogic.setDetalleProves(this.detalleproveReturnGeneral.getDetalleProves());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detalleproveReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleproveLogic.setDetalleProve(this.detalleproveReturnGeneral.getDetalleProve());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleProve(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleProve() throws Exception {
		
		
	}
	
	public ArrayList<DetalleProve> getDetalleProvesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleProve) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleProve detalleproveAux:detalleproveLogic.getDetalleProves()) {
					if(detalleproveAux.getIsSelected()) {
						detalleprovesSeleccionados.add(detalleproveAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProve detalleproveAux:this.detalleproves) {
					if(detalleproveAux.getIsSelected()) {
						detalleprovesSeleccionados.add(detalleproveAux);				
					}
				}
			}
			
			if(detalleprovesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detalleprovesSeleccionados.addAll(this.detalleproveLogic.getDetalleProves());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detalleprovesSeleccionados.addAll(this.detalleproves);				
					}
				}
			}
		} else {
			detalleprovesSeleccionados.add(this.detalleprove);
		}
		
		return detalleprovesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleProvesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleProvesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleProvesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleProvesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleProvesSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesDetalleProvesSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Prove",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleProvesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetalleProve();
		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetalleProve();
		
		
		//this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados ,detalleproveImplementable,detalleproveImplementableHome);
	}
	
	public void mostrarImportacionDetalleProves() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetalleProve();
		
		this.abrirFrameImportacionDetalleProve();		
		
			
		//this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados ,detalleproveImplementable,detalleproveImplementableHome);
	}
	
	public void importarDetalleProves() throws Exception {		
	
	}
	
	public void exportarDetalleProvesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleProvesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleProvesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleProvesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Prove",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleProve(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleProve(detalleproveAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detalleproveAux.setsDetalleGeneralEntityReporte(detalleproveAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleProve(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_FECHAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_FECHAPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProveConstantesFunciones.LABEL_IDMES;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleProve(DetalleProve detalleprove,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detalleprove.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getsucursalmovimiento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.gettipotransaccionmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getordencompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getestadodetallecliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getfecha_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getfecha_pago().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getmonto_mone_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getmonto_mone_extra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getnumero_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getdebito_mone_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getcredito_mone_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getdebito_mone_extra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getcredito_mone_extra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleprove.getmes_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleProves");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleProve(row);				
				iRow++;
			}				
			
			for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleProve(detalleproveAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleProvesSeleccionados() throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();		
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleprove.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detalleproves");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detalleprove");
			//elementRoot.appendChild(element);
		
			for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
				element = document.createElement("detalleprove");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleProve(detalleproveAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Prove",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleProve(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONELOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_MONTOMONEEXTRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONELOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONELOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DEBITOMONEEXTRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_CREDITOMONEEXTRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProveConstantesFunciones.LABEL_IDMES);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleProve(DetalleProve detalleprove,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getsucursalmovimiento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.gettipotransaccionmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getordencompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getestadodetallecliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getfecha_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getfecha_pago());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getmonto_mone_local());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getmonto_mone_extra());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getnumero_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getdebito_mone_local());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getcredito_mone_local());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getdebito_mone_extra());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getcredito_mone_extra());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleprove.getmes_descripcion());				
	}
	
	public void setFilaDatosExportarXmlDetalleProve(DetalleProve detalleprove,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleProveConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detalleprove.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleProveConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detalleprove.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(DetalleProveConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detalleprove.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleProveConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detalleprove.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementsucursalmovimiento_descripcion = document.createElement(DetalleProveConstantesFunciones.IDSUCURSALMOVIMIENTO);
		elementsucursalmovimiento_descripcion.appendChild(document.createTextNode(detalleprove.getsucursalmovimiento_descripcion()));
		element.appendChild(elementsucursalmovimiento_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleProveConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detalleprove.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleProveConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detalleprove.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementmodulo_descripcion = document.createElement(DetalleProveConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(detalleprove.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementmoneda_descripcion = document.createElement(DetalleProveConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(detalleprove.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementcliente_descripcion = document.createElement(DetalleProveConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(detalleprove.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementtransaccion_descripcion = document.createElement(DetalleProveConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(detalleprove.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(DetalleProveConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(detalleprove.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);

		Element elementasientocontable_descripcion = document.createElement(DetalleProveConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(detalleprove.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementfactura_descripcion = document.createElement(DetalleProveConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(detalleprove.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementordencompra_descripcion = document.createElement(DetalleProveConstantesFunciones.IDORDENCOMPRA);
		elementordencompra_descripcion.appendChild(document.createTextNode(detalleprove.getordencompra_descripcion()));
		element.appendChild(elementordencompra_descripcion);

		Element elementestadodetallecliente_descripcion = document.createElement(DetalleProveConstantesFunciones.IDESTADODETALLECLIENTE);
		elementestadodetallecliente_descripcion.appendChild(document.createTextNode(detalleprove.getestadodetallecliente_descripcion()));
		element.appendChild(elementestadodetallecliente_descripcion);

		Element elementfecha_venta = document.createElement(DetalleProveConstantesFunciones.FECHAVENTA);
		elementfecha_venta.appendChild(document.createTextNode(detalleprove.getfecha_venta().toString().trim()));
		element.appendChild(elementfecha_venta);

		Element elementfecha_emision = document.createElement(DetalleProveConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(detalleprove.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_pago = document.createElement(DetalleProveConstantesFunciones.FECHAPAGO);
		elementfecha_pago.appendChild(document.createTextNode(detalleprove.getfecha_pago().toString().trim()));
		element.appendChild(elementfecha_pago);

		Element elementfecha_vencimiento = document.createElement(DetalleProveConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(detalleprove.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementmonto_mone_local = document.createElement(DetalleProveConstantesFunciones.MONTOMONELOCAL);
		elementmonto_mone_local.appendChild(document.createTextNode(detalleprove.getmonto_mone_local().toString().trim()));
		element.appendChild(elementmonto_mone_local);

		Element elementmonto_mone_extra = document.createElement(DetalleProveConstantesFunciones.MONTOMONEEXTRA);
		elementmonto_mone_extra.appendChild(document.createTextNode(detalleprove.getmonto_mone_extra().toString().trim()));
		element.appendChild(elementmonto_mone_extra);

		Element elementnumero_comprobante = document.createElement(DetalleProveConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(detalleprove.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementnumero_factura = document.createElement(DetalleProveConstantesFunciones.NUMEROFACTURA);
		elementnumero_factura.appendChild(document.createTextNode(detalleprove.getnumero_factura().trim()));
		element.appendChild(elementnumero_factura);

		Element elementdebito_mone_local = document.createElement(DetalleProveConstantesFunciones.DEBITOMONELOCAL);
		elementdebito_mone_local.appendChild(document.createTextNode(detalleprove.getdebito_mone_local().toString().trim()));
		element.appendChild(elementdebito_mone_local);

		Element elementcredito_mone_local = document.createElement(DetalleProveConstantesFunciones.CREDITOMONELOCAL);
		elementcredito_mone_local.appendChild(document.createTextNode(detalleprove.getcredito_mone_local().toString().trim()));
		element.appendChild(elementcredito_mone_local);

		Element elementdebito_mone_extra = document.createElement(DetalleProveConstantesFunciones.DEBITOMONEEXTRA);
		elementdebito_mone_extra.appendChild(document.createTextNode(detalleprove.getdebito_mone_extra().toString().trim()));
		element.appendChild(elementdebito_mone_extra);

		Element elementcredito_mone_extra = document.createElement(DetalleProveConstantesFunciones.CREDITOMONEEXTRA);
		elementcredito_mone_extra.appendChild(document.createTextNode(detalleprove.getcredito_mone_extra().toString().trim()));
		element.appendChild(elementcredito_mone_extra);

		Element elementdescripcion = document.createElement(DetalleProveConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detalleprove.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementanio_descripcion = document.createElement(DetalleProveConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detalleprove.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleProveConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detalleprove.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);
	}
	
	public void generarReporteGroupGenericoDetalleProvesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleProve> detalleprovesSeleccionados=new ArrayList<DetalleProve>();
		
		detalleprovesSeleccionados=this.getDetalleProvesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleProve(detalleprovesSeleccionados);
		
		this.generarReporteDetalleProves("Todos",detalleprovesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleProve(ArrayList<DetalleProve> detalleprovesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleProve detalleproveAux:detalleprovesSeleccionados) {
				detalleproveAux.setsDetalleGeneralEntityReporte(detalleproveAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDSUCURSALMOVIMIENTO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getsucursalmovimiento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.gettipotransaccionmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDORDENCOMPRA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getordencompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDESTADODETALLECLIENTE)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getestadodetallecliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENTA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalleproveAux.getfecha_venta()));
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalleproveAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAPAGO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalleproveAux.getfecha_pago()));
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalleproveAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_NUMEROFACTURA)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getnumero_factura());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProveConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detalleproveAux.setsDescripcionGeneralEntityReporte1(detalleproveAux.getmes_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProveConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleProve(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleProve=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleProve=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleProve=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=true;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=true;
			this.isVisibilidadCeldaEliminarDetalleProve=true;
			this.isVisibilidadCeldaCancelarDetalleProve=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=true;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleProve=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=true;
			this.isVisibilidadCeldaModificarDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
			this.isVisibilidadCeldaModificarDetalleProve=true;
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
			this.isVisibilidadCeldaCancelarDetalleProve=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProve=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleProveJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleProve=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=true;
		} else {
			this.actualizarEstadoPanelsDetalleProve(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleProve=false;
			//this.isVisibilidadCeldaVerFormDetalleProve=false;
			this.isVisibilidadCeldaDuplicarDetalleProve=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detalleproveSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleProve=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detalleproveSessionBean.getEsGuardarRelacionado()) {
			if(!detalleproveSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;												
			}
			
			this.jButtonCerrarDetalleProve.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleProve=false;
		}
		
		if(!this.permiteMantenimiento(this.detalleprove)) {
			this.isVisibilidadCeldaActualizarDetalleProve=false;
			this.isVisibilidadCeldaEliminarDetalleProve=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleProve() {
		this.isVisibilidadCeldaNuevoDetalleProve=false;
		this.isVisibilidadCeldaGuardarCambiosDetalleProve=false;
	}
	
	public void actualizarEstadoPanelsDetalleProve(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleProve!=null) {
				this.jScrollPanelDatosEdicionDetalleProve.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProve!=null) {
				this.jScrollPanelDatosDetalleProve.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProve!=null) {
				this.jPanelPaginacionDetalleProve.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetalleProve!=null) {
					this.jTabbedPaneBusquedasDetalleProve.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detalleproveSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProve!=null) {
				this.jTabbedPaneBusquedasDetalleProve.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetalleProve!=null) {
				this.jPanelParametrosReportesDetalleProve.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursalMovimiento(Boolean isParaSucursalMovimiento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalMovimientoNegation=!isParaSucursalMovimiento;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaSucursalMovimiento;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalMovimientoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdAsientoContable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdAsientoContable=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdAsientoContable=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaOrdenCompra(Boolean isParaOrdenCompra){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaOrdenCompraNegation=!isParaOrdenCompra;

			this.isVisibilidadFK_IdAsientoContable=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaOrdenCompra;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoDetalleCliente(Boolean isParaEstadoDetalleCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoDetalleClienteNegation=!isParaEstadoDetalleCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaEstadoDetalleCliente;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaEstadoDetalleClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdAsientoContableDetalleProve);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdClienteDetalleProve);}

			this.isVisibilidadFK_IdDetalleProve=isParaMesNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdDetalleProveDetalleProve);}

			this.isVisibilidadFK_IdEstadoDetalleCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleCliente) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdEstadoDetalleClienteDetalleProve);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdFacturaDetalleProve);}

			this.isVisibilidadFK_IdOrdenCompra=isParaMesNegation;
			if(!this.isVisibilidadFK_IdOrdenCompra) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdOrdenCompraDetalleProve);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTipoTransaccionModuloDetalleProve);}

			this.isVisibilidadFK_IdTransaccion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDetalleProve.remove(jPanelFK_IdTransaccionDetalleProve);}
		}
		
	}
	
	

	public String registrarSesionDetalleProveParaPagoAutos() throws Exception {
		Boolean isPaginaPopupPagoAuto=false;

		try {

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean==null) {
				this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean=new PagoAutoSessionBean();
			}

			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setsPathNavegacionActual(detalleproveSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PagoAutoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPagoAuto=this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePagoAuto(true);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePagoAuto(DetalleProveConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProve(true);
			this.jInternalFrameDetalleFormDetalleProve.pagoautoSessionBean.setlidDetalleProveActual(this.idDetalleProveActual);

			detalleproveSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProve(true);
			detalleproveSessionBean.setlIdDetalleProveActualForeignKey(this.idDetalleProveActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionDetalleProveParaAutoriPagos() throws Exception {
		Boolean isPaginaPopupAutoriPago=false;

		try {

			if(this.detalleproveSessionBean==null) {
				this.detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean==null) {
				this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setsPathNavegacionActual(detalleproveSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupAutoriPago=this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAutoriPago(true);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAutoriPago(DetalleProveConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProve(true);
			this.jInternalFrameDetalleFormDetalleProve.autoripagoSessionBean.setlidDetalleProveActual(this.idDetalleProveActual);

			detalleproveSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProve(true);
			detalleproveSessionBean.setlIdDetalleProveActualForeignKey(this.idDetalleProveActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionDetalleProveParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(detalleproveSessionBean==null) {
				detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(detalleproveSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.detalleproveFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(DetalleProveConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProve(true);
			//clienteSessionBean.setlidDetalleProveActual(this.idDetalleProveActual);

			detalleproveSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProve(true);
			detalleproveSessionBean.setlIdDetalleProveActualForeignKey(this.idDetalleProveActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleProveParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(detalleproveSessionBean==null) {
				detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(detalleproveSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.detalleproveFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(DetalleProveConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProve(true);
			//asientocontableSessionBean.setlidDetalleProveActual(this.idDetalleProveActual);

			detalleproveSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProve(true);
			detalleproveSessionBean.setlIdDetalleProveActualForeignKey(this.idDetalleProveActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleProveParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(detalleproveSessionBean==null) {
				detalleproveSessionBean=new DetalleProveSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(detalleproveSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.detalleproveFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(DetalleProveConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProve(true);
			//facturaSessionBean.setlidDetalleProveActual(this.idDetalleProveActual);

			detalleproveSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProve(true);
			detalleproveSessionBean.setlIdDetalleProveActualForeignKey(this.idDetalleProveActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleProveSessionBean detalleproveSessionBean=new DetalleProveSessionBean();
		
		if(this.detalleproveSessionBean==null) {
			this.detalleproveSessionBean=new DetalleProveSessionBean();
		}
		
		this.detalleproveSessionBean.setsUltimaBusquedaDetalleProve(this.getsAccionBusqueda());
		this.detalleproveSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detalleproveSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			detalleproveSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			detalleproveSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdDetalleProve")) {
			detalleproveSessionBean.setid_sucursal_movimiento(this.getid_sucursal_movimientoFK_IdDetalleProve());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detalleproveSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detalleproveSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleCliente")) {
			detalleproveSessionBean.setid_estado_detalle_cliente(this.getid_estado_detalle_clienteFK_IdEstadoDetalleCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			detalleproveSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			detalleproveSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
			detalleproveSessionBean.setid_moneda(this.getid_monedaFK_IdMoneda());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdOrdenCompra")) {
			detalleproveSessionBean.setid_orden_compra(this.getid_orden_compraFK_IdOrdenCompra());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detalleproveSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detalleproveSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			detalleproveSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			detalleproveSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleProveSessionBean detalleproveSessionBean=new DetalleProveSessionBean();
		
		if(this.detalleproveSessionBean==null) {
			this.detalleproveSessionBean=new DetalleProveSessionBean();
		}
		
		if(this.detalleproveSessionBean.getsUltimaBusquedaDetalleProve()!=null&&!this.detalleproveSessionBean.getsUltimaBusquedaDetalleProve().equals("")) {
			this.setsAccionBusqueda(detalleproveSessionBean.getsUltimaBusquedaDetalleProve());
			this.setiNumeroPaginacion(detalleproveSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detalleproveSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(detalleproveSessionBean.getid_asiento_contable());
				detalleproveSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(detalleproveSessionBean.getid_cliente());
				detalleproveSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdDetalleProve")) {
				this.setid_sucursal_movimientoFK_IdDetalleProve(detalleproveSessionBean.getid_sucursal_movimiento());
				detalleproveSessionBean.setid_sucursal_movimiento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detalleproveSessionBean.getid_ejercicio());
				detalleproveSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detalleproveSessionBean.getid_empresa());
				detalleproveSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleCliente")) {
				this.setid_estado_detalle_clienteFK_IdEstadoDetalleCliente(detalleproveSessionBean.getid_estado_detalle_cliente());
				detalleproveSessionBean.setid_estado_detalle_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(detalleproveSessionBean.getid_factura());
				detalleproveSessionBean.setid_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(detalleproveSessionBean.getid_modulo());
				detalleproveSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
				this.setid_monedaFK_IdMoneda(detalleproveSessionBean.getid_moneda());
				detalleproveSessionBean.setid_moneda(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdOrdenCompra")) {
				this.setid_orden_compraFK_IdOrdenCompra(detalleproveSessionBean.getid_orden_compra());
				detalleproveSessionBean.setid_orden_compra(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detalleproveSessionBean.getid_periodo());
				detalleproveSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detalleproveSessionBean.getid_sucursal());
				detalleproveSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(detalleproveSessionBean.getid_tipo_transaccion_modulo());
				detalleproveSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(detalleproveSessionBean.getid_transaccion());
				detalleproveSessionBean.setid_transaccion(-1L);
			}
		}
		
		this.detalleproveSessionBean.setsUltimaBusquedaDetalleProve("");
		this.detalleproveSessionBean.setiNumeroPaginacion(DetalleProveConstantesFunciones.INUMEROPAGINACION);
		this.detalleproveSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleProve(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleProve() {
		this.updateBorderResaltarBusquedasFormularioDetalleProve();
		this.updateVisibilidadBusquedasFormularioDetalleProve();
		this.updateHabilitarBusquedasFormularioDetalleProve();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleProve() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleProve.getComponents().length>0) {
	

		if(this.detalleproveConstantesFunciones.resaltarFK_IdAsientoContableDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdAsientoContableDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdClienteDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdClienteDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdClienteDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdDetalleProveDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdDetalleProveDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdDetalleProveDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdEstadoDetalleClienteDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdEstadoDetalleClienteDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdEstadoDetalleClienteDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdFacturaDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdFacturaDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdFacturaDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdOrdenCompraDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdOrdenCompraDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdOrdenCompraDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDetalleProve);
			}
		}

		if(this.detalleproveConstantesFunciones.resaltarFK_IdTransaccionDetalleProve!=null) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTransaccionDetalleProve);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdTransaccionDetalleProve);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleProve() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleProve.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdAsientoContableDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdAsientoContableDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdClienteDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdClienteDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdClienteDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdDetalleProveDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdDetalleProveDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdDetalleProveDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdEstadoDetalleClienteDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdEstadoDetalleClienteDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdEstadoDetalleClienteDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdFacturaDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdFacturaDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdFacturaDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdOrdenCompraDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdOrdenCompraDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdOrdenCompraDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdTipoTransaccionModuloDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdTipoTransaccionModuloDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTransaccionDetalleProve);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproveConstantesFunciones.mostrarFK_IdTransaccionDetalleProve);
			if(!this.detalleproveConstantesFunciones.mostrarFK_IdTransaccionDetalleProve && index>-1) {
				this.jTabbedPaneBusquedasDetalleProve.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetalleProve() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleProve.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdAsientoContableDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdAsientoContableDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdClienteDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdClienteDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdClienteDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdDetalleProveDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdDetalleProveDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdDetalleProveDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdEstadoDetalleClienteDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdEstadoDetalleClienteDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdEstadoDetalleClienteDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdFacturaDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdFacturaDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdFacturaDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdOrdenCompraDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdOrdenCompraDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdOrdenCompraDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdTipoTransaccionModuloDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdTipoTransaccionModuloDetalleProve);
			}

			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTransaccionDetalleProve);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproveConstantesFunciones.activarFK_IdTransaccionDetalleProve);
				this.jTabbedPaneBusquedasDetalleProve.setEnabledAt(index,this.detalleproveConstantesFunciones.activarFK_IdTransaccionDetalleProve);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetalleProve(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdAsientoContableDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdAsientoContableDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdClienteDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdClienteDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdClienteDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdDetalleProve")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdDetalleProveDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdDetalleProveDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdDetalleProveDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoDetalleCliente")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdEstadoDetalleClienteDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdEstadoDetalleClienteDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdEstadoDetalleClienteDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdFacturaDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdFacturaDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdFacturaDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdOrdenCompra")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdOrdenCompraDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdOrdenCompraDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdOrdenCompraDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDetalleProve);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasDetalleProve.indexOfComponent(this.jPanelFK_IdTransaccionDetalleProve);

			this.jTabbedPaneBusquedasDetalleProve.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProve.getComponent(index);

			this.detalleproveConstantesFunciones.setResaltarFK_IdTransaccionDetalleProve(resaltar);

			jPanel.setBorder(this.detalleproveConstantesFunciones.resaltarFK_IdTransaccionDetalleProve);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetalleProve.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleProve() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleProve();
		this.updateVisibilidadResaltarControlesFormularioDetalleProve();
		this.updateHabilitarResaltarControlesFormularioDetalleProve();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleProve() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detalleproveConstantesFunciones.resaltaridDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltaridDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_empresaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_empresaDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_sucursalDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_sucursalDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_sucursal_movimientoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_sucursal_movimientoDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_ejercicioDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_ejercicioDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_periodoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_periodoDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_moduloDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_moduloDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_monedaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_monedaDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_clienteDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_clienteDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_transaccionDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_transaccionDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_tipo_transaccion_moduloDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_tipo_transaccion_moduloDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_asiento_contableDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_asiento_contableDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_facturaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_facturaDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_orden_compraDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_orden_compraDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_estado_detalle_clienteDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_estado_detalle_clienteDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarfecha_ventaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarfecha_ventaDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarfecha_emisionDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarfecha_emisionDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarfecha_pagoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarfecha_pagoDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarfecha_vencimientoDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarfecha_vencimientoDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarmonto_mone_localDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarmonto_mone_localDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarmonto_mone_extraDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarmonto_mone_extraDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarnumero_comprobanteDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarnumero_comprobanteDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarnumero_facturaDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarnumero_facturaDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltardebito_mone_localDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltardebito_mone_localDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarcredito_mone_localDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarcredito_mone_localDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltardebito_mone_extraDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltardebito_mone_extraDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarcredito_mone_extraDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarcredito_mone_extraDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltardescripcionDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltardescripcionDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_anioDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_anioDetalleProve);}
		if(this.detalleproveConstantesFunciones.resaltarid_mesDetalleProve!=null && this.jInternalFrameDetalleFormDetalleProve!=null) {this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setBorder(this.detalleproveConstantesFunciones.resaltarid_mesDetalleProve);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleProve() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
	
		//this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostraridDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelidDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostraridDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_empresaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_empresaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_empresaDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_sucursalDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_sucursalDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_sucursalDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_sucursal_movimientoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_sucursal_movimientoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_sucursal_movimientoDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_ejercicioDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_ejercicioDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_ejercicioDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_periodoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_periodoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_periodoDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_moduloDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_moduloDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_moduloDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_monedaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_monedaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_monedaDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_clienteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_clienteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_clienteDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_clienteDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_transaccionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_transaccionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_transaccionDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_tipo_transaccion_moduloDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_tipo_transaccion_moduloDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_tipo_transaccion_moduloDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_asiento_contableDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_asiento_contableDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_asiento_contableDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_asiento_contableDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_facturaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_facturaDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_facturaDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_orden_compraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_orden_compraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_orden_compraDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_estado_detalle_clienteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_estado_detalle_clienteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_estado_detalle_clienteDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_ventaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelfecha_ventaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_ventaDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_emisionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelfecha_emisionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_emisionDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_pagoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelfecha_pagoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_pagoDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_vencimientoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelfecha_vencimientoDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarfecha_vencimientoDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarmonto_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelmonto_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarmonto_mone_localDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarmonto_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelmonto_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarmonto_mone_extraDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarnumero_comprobanteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelnumero_comprobanteDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarnumero_comprobanteDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarnumero_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelnumero_facturaDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarnumero_facturaDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardebito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPaneldebito_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardebito_mone_localDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarcredito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelcredito_mone_localDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarcredito_mone_localDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardebito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPaneldebito_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardebito_mone_extraDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarcredito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelcredito_mone_extraDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarcredito_mone_extraDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardescripcionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPaneldescripcionDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrardescripcionDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_anioDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_anioDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_anioDetalleProve);
		//this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_mesDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jPanelid_mesDetalleProve.setVisible(this.detalleproveConstantesFunciones.mostrarid_mesDetalleProve);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleProve() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleProve==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleProve!=null) {
	
		this.jInternalFrameDetalleFormDetalleProve.jLabelidDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activaridDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_empresaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_empresaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursalDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_sucursalDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_sucursal_movimientoDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_sucursal_movimientoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_ejercicioDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_ejercicioDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_periodoDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_periodoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_moduloDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_moduloDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_monedaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_monedaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_clienteDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_clienteDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_clienteDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_clienteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_transaccionDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_transaccionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_tipo_transaccion_moduloDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_tipo_transaccion_moduloDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_asiento_contableDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_asiento_contableDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_asiento_contableDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_asiento_contableDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_facturaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_facturaDetalleProve);
			this.jInternalFrameDetalleFormDetalleProve.jButtonid_facturaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_orden_compraDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_orden_compraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_estado_detalle_clienteDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_estado_detalle_clienteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_ventaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarfecha_ventaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_emisionDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarfecha_emisionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_pagoDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarfecha_pagoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jDateChooserfecha_vencimientoDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarfecha_vencimientoDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_localDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarmonto_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldmonto_mone_extraDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarmonto_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_comprobanteDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarnumero_comprobanteDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldnumero_facturaDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarnumero_facturaDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_localDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activardebito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_localDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarcredito_mone_localDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFielddebito_mone_extraDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activardebito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextFieldcredito_mone_extraDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarcredito_mone_extraDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jTextAreadescripcionDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activardescripcionDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_anioDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_anioDetalleProve);
		this.jInternalFrameDetalleFormDetalleProve.jComboBoxid_mesDetalleProve.setEnabled(this.detalleproveConstantesFunciones.activarid_mesDetalleProve);
		}
	}
	
		
}