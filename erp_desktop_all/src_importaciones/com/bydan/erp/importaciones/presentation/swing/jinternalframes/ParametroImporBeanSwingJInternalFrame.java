/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.importaciones.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.importaciones.util.ParametroImporConstantesFunciones;
import com.bydan.erp.importaciones.util.ParametroImporParameterReturnGeneral;
//import com.bydan.erp.importaciones.util.ParametroImporParameterGeneral;
//import com.bydan.erp.importaciones.presentation.report.source.ParametroImporBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.importaciones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.importaciones.resources.reportes.AuxiliarReportes;


import com.bydan.erp.importaciones.util.*;
import com.bydan.erp.importaciones.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.importaciones.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.importaciones.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ParametroImporBeanSwingJInternalFrame extends ParametroImporJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ParametroImporBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ParametroImpor> parametroimporValidator = new ClassValidator<ParametroImpor>(ParametroImpor.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ParametroImpor parametroimpor;	
	public ParametroImpor parametroimporAux;
	public ParametroImpor parametroimporAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ParametroImpor parametroimporTotales;
	public Long idParametroImporActual;
	public Long iIdNuevoParametroImpor=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

	public String sFinalQueryComboTransaccionOrdenCompra="";

	public List<Transaccion> transaccionordencomprasForeignKey;

	public List<Transaccion> gettransaccionordencomprasForeignKey() {
		return transaccionordencomprasForeignKey;
	}

	public void settransaccionordencomprasForeignKey(List<Transaccion> transaccionordencomprasForeignKey) {
		this.transaccionordencomprasForeignKey = transaccionordencomprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionordencompraForeignKey;

	public Transaccion gettransaccionordencompraForeignKey() {
		return transaccionordencompraForeignKey;
	}

	public void settransaccionordencompraForeignKey(Transaccion transaccionordencompraForeignKey) {
		this.transaccionordencompraForeignKey = transaccionordencompraForeignKey;
	}

	public String sFinalQueryComboTransaccionIngreso="";

	public List<Transaccion> transaccioningresosForeignKey;

	public List<Transaccion> gettransaccioningresosForeignKey() {
		return transaccioningresosForeignKey;
	}

	public void settransaccioningresosForeignKey(List<Transaccion> transaccioningresosForeignKey) {
		this.transaccioningresosForeignKey = transaccioningresosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccioningresoForeignKey;

	public Transaccion gettransaccioningresoForeignKey() {
		return transaccioningresoForeignKey;
	}

	public void settransaccioningresoForeignKey(Transaccion transaccioningresoForeignKey) {
		this.transaccioningresoForeignKey = transaccioningresoForeignKey;
	}

	public String sFinalQueryComboFormatoOrdenCompra="";

	public List<Formato> formatoordencomprasForeignKey;

	public List<Formato> getformatoordencomprasForeignKey() {
		return formatoordencomprasForeignKey;
	}

	public void setformatoordencomprasForeignKey(List<Formato> formatoordencomprasForeignKey) {
		this.formatoordencomprasForeignKey = formatoordencomprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoordencompraForeignKey;

	public Formato getformatoordencompraForeignKey() {
		return formatoordencompraForeignKey;
	}

	public void setformatoordencompraForeignKey(Formato formatoordencompraForeignKey) {
		this.formatoordencompraForeignKey = formatoordencompraForeignKey;
	}

	public String sFinalQueryComboFormatoIngreso="";

	public List<Formato> formatoingresosForeignKey;

	public List<Formato> getformatoingresosForeignKey() {
		return formatoingresosForeignKey;
	}

	public void setformatoingresosForeignKey(List<Formato> formatoingresosForeignKey) {
		this.formatoingresosForeignKey = formatoingresosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoingresoForeignKey;

	public Formato getformatoingresoForeignKey() {
		return formatoingresoForeignKey;
	}

	public void setformatoingresoForeignKey(Formato formatoingresoForeignKey) {
		this.formatoingresoForeignKey = formatoingresoForeignKey;
	}

	public String sFinalQueryComboFormatoPedido="";

	public List<Formato> formatopedidosForeignKey;

	public List<Formato> getformatopedidosForeignKey() {
		return formatopedidosForeignKey;
	}

	public void setformatopedidosForeignKey(List<Formato> formatopedidosForeignKey) {
		this.formatopedidosForeignKey = formatopedidosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatopedidoForeignKey;

	public Formato getformatopedidoForeignKey() {
		return formatopedidoForeignKey;
	}

	public void setformatopedidoForeignKey(Formato formatopedidoForeignKey) {
		this.formatopedidoForeignKey = formatopedidoForeignKey;
	}

	public String sFinalQueryComboFormatoLiquidacion="";

	public List<Formato> formatoliquidacionsForeignKey;

	public List<Formato> getformatoliquidacionsForeignKey() {
		return formatoliquidacionsForeignKey;
	}

	public void setformatoliquidacionsForeignKey(List<Formato> formatoliquidacionsForeignKey) {
		this.formatoliquidacionsForeignKey = formatoliquidacionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoliquidacionForeignKey;

	public Formato getformatoliquidacionForeignKey() {
		return formatoliquidacionForeignKey;
	}

	public void setformatoliquidacionForeignKey(Formato formatoliquidacionForeignKey) {
		this.formatoliquidacionForeignKey = formatoliquidacionForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoParametroImpor;
	public Boolean isPermisoNuevoParametroImpor;
	public Boolean isPermisoActualizarParametroImpor;
	public Boolean isPermisoActualizarOriginalParametroImpor;
	public Boolean isPermisoEliminarParametroImpor;
	public Boolean isPermisoGuardarCambiosParametroImpor;
	public Boolean isPermisoConsultaParametroImpor;
	public Boolean isPermisoBusquedaParametroImpor;
	public Boolean isPermisoReporteParametroImpor;
	public Boolean isPermisoPaginacionMedioParametroImpor;
	public Boolean isPermisoPaginacionAltoParametroImpor;
	public Boolean isPermisoPaginacionTodoParametroImpor;
	public Boolean isPermisoCopiarParametroImpor;
	public Boolean isPermisoVerFormParametroImpor;
	public Boolean isPermisoDuplicarParametroImpor;
	public Boolean isPermisoOrdenParametroImpor;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ParametroImporParameterReturnGeneral parametroimporReturnGeneral;
	public ParametroImporParameterReturnGeneral parametroimporParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoParametroImpor=false;
	public Boolean esParaAccionDesdeFormularioParametroImpor=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ParametroImporSessionBeanAdditional parametroimporSessionBeanAdditional=null;
	
	public ParametroImporSessionBeanAdditional getParametroImporSessionBeanAdditional() {
		return this.parametroimporSessionBeanAdditional;
	}
	
	public void setParametroImporSessionBeanAdditional(ParametroImporSessionBeanAdditional parametroimporSessionBeanAdditional) {
		try {
			this.parametroimporSessionBeanAdditional=parametroimporSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ParametroImporBeanSwingJInternalFrameAdditional parametroimporBeanSwingJInternalFrameAdditional=null;
	//public class ParametroImporBeanSwingJInternalFrame
	
	public ParametroImporBeanSwingJInternalFrameAdditional getParametroImporBeanSwingJInternalFrameAdditional() {
		return this.parametroimporBeanSwingJInternalFrameAdditional;
	}
	
	public void setParametroImporBeanSwingJInternalFrameAdditional(ParametroImporBeanSwingJInternalFrameAdditional parametroimporBeanSwingJInternalFrameAdditional) {
		try {
			this.parametroimporBeanSwingJInternalFrameAdditional=parametroimporBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ParametroImporLogic parametroimporLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ParametroImpor parametroimporBean;
	public ParametroImporConstantesFunciones parametroimporConstantesFunciones;
	//public ParametroImporParameterReturnGeneral parametroimporReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public PaisLogic paisLogic;
	public BodegaLogic bodegaLogic;
	public CentroCostoLogic centrocostoLogic;
	public CuentaContableLogic cuentacontableLogic;
	public TransaccionLogic transaccionordencompraLogic;
	public TransaccionLogic transaccioningresoLogic;
	public FormatoLogic formatoordencompraLogic;
	public FormatoLogic formatoingresoLogic;
	public FormatoLogic formatopedidoLogic;
	public FormatoLogic formatoliquidacionLogic;
	
	//PARAMETROS
	
	
	//public List<ParametroImpor> parametroimpors;	
	//public List<ParametroImpor> parametroimporsEliminados;
	//public List<ParametroImpor> parametroimporsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoParametroImpor=false;
	public Boolean isVisibilidadCeldaDuplicarParametroImpor=true;
	public Boolean isVisibilidadCeldaCopiarParametroImpor=true;
	public Boolean isVisibilidadCeldaVerFormParametroImpor=true;
	public Boolean isVisibilidadCeldaOrdenParametroImpor=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
	public Boolean isVisibilidadCeldaModificarParametroImpor=false;
	public Boolean isVisibilidadCeldaActualizarParametroImpor=false;
	public Boolean isVisibilidadCeldaEliminarParametroImpor=false;
	public Boolean isVisibilidadCeldaCancelarParametroImpor=false;
	public Boolean isVisibilidadCeldaGuardarParametroImpor=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosParametroImpor=false;	
	
	
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFormatoIngreso=false;
	public Boolean isVisibilidadFK_IdFormatoLiquacion=false;
	public Boolean isVisibilidadFK_IdFormatoOrdenCompra=false;
	public Boolean isVisibilidadFK_IdFormatoPedo=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdTransaccionIngreso=false;
	public Boolean isVisibilidadFK_IdTransaccionOrdenCompra=false;
	
	public Long getiIdNuevoParametroImpor() {
		return this.iIdNuevoParametroImpor;
	}

	public void setiIdNuevoParametroImpor(Long iIdNuevoParametroImpor) {
		this.iIdNuevoParametroImpor = iIdNuevoParametroImpor;
	}
	
	public Long getidParametroImporActual() {
		return this.idParametroImporActual;
	}

	public void setidParametroImporActual(Long idParametroImporActual) {
		this.idParametroImporActual = idParametroImporActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ParametroImpor getparametroimpor() {
		return this.parametroimpor;
	}

	public void setparametroimpor(ParametroImpor parametroimpor) {
		this.parametroimpor = parametroimpor;
	}
	
	public ParametroImpor getparametroimporAux() {
		return this.parametroimporAux;
	}

	public void setparametroimporAux(ParametroImpor parametroimporAux) {
		this.parametroimporAux = parametroimporAux;
	}				
	
	public ParametroImpor getparametroimporAnterior() {
		return this.parametroimporAnterior;
	}

	public void setparametroimporAnterior(ParametroImpor parametroimporAnterior) {
		this.parametroimporAnterior = parametroimporAnterior;
	}	
	
	public ParametroImpor getparametroimporTotales() {
		return this.parametroimporTotales;
	}

	public void setparametroimporTotales(ParametroImpor parametroimporTotales) {
		this.parametroimporTotales = parametroimporTotales;
	}	
	
	public ParametroImpor getparametroimporBean() {
		return this.parametroimporBean;
	}

	public void setparametroimporBean(ParametroImpor parametroimporBean) {
		this.parametroimporBean = parametroimporBean;
	}	
	
	public ParametroImporParameterReturnGeneral getparametroimporReturnGeneral() {
		return this.parametroimporReturnGeneral;
	}

	public void setparametroimporReturnGeneral(ParametroImporParameterReturnGeneral parametroimporReturnGeneral) {
		this.parametroimporReturnGeneral = parametroimporReturnGeneral;
	}	
	
	
	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contableFK_IdCuentaContable=-1L;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_formato_ingresoFK_IdFormatoIngreso=-1L;

	public Long getid_formato_ingresoFK_IdFormatoIngreso() {
		return this.id_formato_ingresoFK_IdFormatoIngreso;
	}

	public void setid_formato_ingresoFK_IdFormatoIngreso(Long id_formato_ingresoFK_IdFormatoIngreso) {
		this.id_formato_ingresoFK_IdFormatoIngreso = id_formato_ingresoFK_IdFormatoIngreso;
	}

	public Long id_formato_liquidacionFK_IdFormatoLiquacion=-1L;

	public Long getid_formato_liquidacionFK_IdFormatoLiquacion() {
		return this.id_formato_liquidacionFK_IdFormatoLiquacion;
	}

	public void setid_formato_liquidacionFK_IdFormatoLiquacion(Long id_formato_liquidacionFK_IdFormatoLiquacion) {
		this.id_formato_liquidacionFK_IdFormatoLiquacion = id_formato_liquidacionFK_IdFormatoLiquacion;
	}

	public Long id_formato_orden_compraFK_IdFormatoOrdenCompra=-1L;

	public Long getid_formato_orden_compraFK_IdFormatoOrdenCompra() {
		return this.id_formato_orden_compraFK_IdFormatoOrdenCompra;
	}

	public void setid_formato_orden_compraFK_IdFormatoOrdenCompra(Long id_formato_orden_compraFK_IdFormatoOrdenCompra) {
		this.id_formato_orden_compraFK_IdFormatoOrdenCompra = id_formato_orden_compraFK_IdFormatoOrdenCompra;
	}

	public Long id_formato_pedidoFK_IdFormatoPedo=-1L;

	public Long getid_formato_pedidoFK_IdFormatoPedo() {
		return this.id_formato_pedidoFK_IdFormatoPedo;
	}

	public void setid_formato_pedidoFK_IdFormatoPedo(Long id_formato_pedidoFK_IdFormatoPedo) {
		this.id_formato_pedidoFK_IdFormatoPedo = id_formato_pedidoFK_IdFormatoPedo;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_transaccion_ingresoFK_IdTransaccionIngreso=-1L;

	public Long getid_transaccion_ingresoFK_IdTransaccionIngreso() {
		return this.id_transaccion_ingresoFK_IdTransaccionIngreso;
	}

	public void setid_transaccion_ingresoFK_IdTransaccionIngreso(Long id_transaccion_ingresoFK_IdTransaccionIngreso) {
		this.id_transaccion_ingresoFK_IdTransaccionIngreso = id_transaccion_ingresoFK_IdTransaccionIngreso;
	}

	public Long id_transaccion_orden_compraFK_IdTransaccionOrdenCompra=-1L;

	public Long getid_transaccion_orden_compraFK_IdTransaccionOrdenCompra() {
		return this.id_transaccion_orden_compraFK_IdTransaccionOrdenCompra;
	}

	public void setid_transaccion_orden_compraFK_IdTransaccionOrdenCompra(Long id_transaccion_orden_compraFK_IdTransaccionOrdenCompra) {
		this.id_transaccion_orden_compraFK_IdTransaccionOrdenCompra = id_transaccion_orden_compraFK_IdTransaccionOrdenCompra;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ParametroImporLogic getParametroImporLogic()	{		
		return parametroimporLogic;
	}

	public void setParametroImporLogic(ParametroImporLogic parametroimporLogic) {
		this.parametroimporLogic = parametroimporLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoParametroImpor() {
		return isEsNuevoParametroImpor;
	}

	public void setIsEsNuevoParametroImpor(Boolean isEsNuevoParametroImpor) {
		this.isEsNuevoParametroImpor = isEsNuevoParametroImpor;
	}

	public Boolean getEsParaAccionDesdeFormularioParametroImpor() {
		return esParaAccionDesdeFormularioParametroImpor;
	}
	
	public void setEsParaAccionDesdeFormularioParametroImpor(Boolean esParaAccionDesdeFormularioParametroImpor) {
		this.esParaAccionDesdeFormularioParametroImpor = esParaAccionDesdeFormularioParametroImpor;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(parametroimporSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(parametroimporSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(parametroimporSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(parametroimporSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametroimporSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionOrdenComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionordencomprasForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionOrdenCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionordencompraLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionordencomprasForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccionOrdenCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(parametroimporSessionBean.getlidTransaccionOrdenCompraActual());
					this.transaccionordencomprasForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionIngresosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccioningresosForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionIngreso()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccioningresoLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccioningresosForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccionIngreso(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(parametroimporSessionBean.getlidTransaccionIngresoActual());
					this.transaccioningresosForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoOrdenComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoordencomprasForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoOrdenCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoordencompraLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoordencomprasForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoOrdenCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametroimporSessionBean.getlidFormatoOrdenCompraActual());
					this.formatoordencomprasForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoIngresosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoingresosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoingresoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoingresosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoIngreso(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametroimporSessionBean.getlidFormatoIngresoActual());
					this.formatoingresosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoPedidosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatopedidosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatopedidoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatopedidosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoPedido(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametroimporSessionBean.getlidFormatoPedidoActual());
					this.formatopedidosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoLiquidacionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoliquidacionsForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoLiquidacion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoliquidacionLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoliquidacionsForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoLiquidacion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(parametroimporSessionBean.getlidFormatoLiquidacionActual());
					this.formatoliquidacionsForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaParametroImpor.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaParametroImporGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaParametroImporGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaParametroImporGenerico!=null && jComboBoxid_empresaParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_empresaParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisParametroImpor.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisParametroImpor!=null) {
						jComboBoxid_paisFK_IdPaisParametroImpor.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisParametroImpor!=null) {
							//jComboBoxid_paisFK_IdPaisParametroImpor.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisParametroImpor.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisParametroImporGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisParametroImporGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisParametroImporGenerico!=null && jComboBoxid_paisParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_paisParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaParametroImpor.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaParametroImpor!=null) {
						jComboBoxid_bodegaFK_IdBodegaParametroImpor.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaParametroImpor!=null) {
							//jComboBoxid_bodegaFK_IdBodegaParametroImpor.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaParametroImpor.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaParametroImporGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaParametroImporGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaParametroImporGenerico!=null && jComboBoxid_bodegaParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_bodegaParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoParametroImpor.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoParametroImporGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoParametroImporGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoParametroImporGenerico!=null && jComboBoxid_centro_costoParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableParametroImpor.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableTemp!=null && jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor!=null) {
						jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.setSelectedItem(cuentacontableTemp);
					} else {
						if(jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor!=null) {
							//jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.setSelectedItem(cuentacontableTemp);
							if(jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.getItemCount()>0) {
								jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableParametroImporGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableParametroImporGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableParametroImporGenerico!=null && jComboBoxid_cuenta_contableParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionOrdenCompraForeignKey(Long idTransaccionOrdenCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionordencompraTemp=null;

			for(Transaccion transaccionordencompraAux:transaccionordencomprasForeignKey) {
				if(transaccionordencompraAux.getId()!=null && transaccionordencompraAux.getId().equals(idTransaccionOrdenCompraSeleccionado)) {
					transaccionordencompraTemp=transaccionordencompraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionordencompraTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setTransaccionOrdenCompra(transaccionordencompraTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedItem(transaccionordencompraTemp);
					}
				} else {
					//jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedItem(transaccionordencompraTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccionOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionordencompraTemp!=null && jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor!=null) {
						jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.setSelectedItem(transaccionordencompraTemp);
					} else {
						if(jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor!=null) {
							//jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.setSelectedItem(transaccionordencompraTemp);
							if(jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.getItemCount()>0) {
								jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionOrdenCompraForeignKeyDescripcion(Long idTransaccionOrdenCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionordencompraTemp=null;

			for(Transaccion transaccionordencompraAux:transaccionordencomprasForeignKey) {
				if(transaccionordencompraAux.getId()!=null && transaccionordencompraAux.getId().equals(idTransaccionOrdenCompraSeleccionado)) {
					transaccionordencompraTemp=transaccionordencompraAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionordencompraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionOrdenCompraForeignKeyGenerico(Long idTransaccionOrdenCompraSeleccionado,JComboBox jComboBoxid_transaccion_orden_compraParametroImporGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionordencompraTemp=null;

			for(Transaccion transaccionordencompraAux:transaccionordencomprasForeignKey) {
				if(transaccionordencompraAux.getId()!=null && transaccionordencompraAux.getId().equals(idTransaccionOrdenCompraSeleccionado)) {
					transaccionordencompraTemp=transaccionordencompraAux;
					break;
				}
			}

			if(transaccionordencompraTemp!=null) {
				jComboBoxid_transaccion_orden_compraParametroImporGenerico.setSelectedItem(transaccionordencompraTemp);
			} else {
				if(jComboBoxid_transaccion_orden_compraParametroImporGenerico!=null && jComboBoxid_transaccion_orden_compraParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_transaccion_orden_compraParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionIngresoForeignKey(Long idTransaccionIngresoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccioningresoTemp=null;

			for(Transaccion transaccioningresoAux:transaccioningresosForeignKey) {
				if(transaccioningresoAux.getId()!=null && transaccioningresoAux.getId().equals(idTransaccionIngresoSeleccionado)) {
					transaccioningresoTemp=transaccioningresoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccioningresoTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setTransaccionIngreso(transaccioningresoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setSelectedItem(transaccioningresoTemp);
					}
				} else {
					//jComboBoxid_transaccion_ingresoParametroImpor.setSelectedItem(transaccioningresoTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccionIngreso") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccioningresoTemp!=null && jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor!=null) {
						jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.setSelectedItem(transaccioningresoTemp);
					} else {
						if(jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor!=null) {
							//jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.setSelectedItem(transaccioningresoTemp);
							if(jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.getItemCount()>0) {
								jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionIngresoForeignKeyDescripcion(Long idTransaccionIngresoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccioningresoTemp=null;

			for(Transaccion transaccioningresoAux:transaccioningresosForeignKey) {
				if(transaccioningresoAux.getId()!=null && transaccioningresoAux.getId().equals(idTransaccionIngresoSeleccionado)) {
					transaccioningresoTemp=transaccioningresoAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccioningresoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionIngresoForeignKeyGenerico(Long idTransaccionIngresoSeleccionado,JComboBox jComboBoxid_transaccion_ingresoParametroImporGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccioningresoTemp=null;

			for(Transaccion transaccioningresoAux:transaccioningresosForeignKey) {
				if(transaccioningresoAux.getId()!=null && transaccioningresoAux.getId().equals(idTransaccionIngresoSeleccionado)) {
					transaccioningresoTemp=transaccioningresoAux;
					break;
				}
			}

			if(transaccioningresoTemp!=null) {
				jComboBoxid_transaccion_ingresoParametroImporGenerico.setSelectedItem(transaccioningresoTemp);
			} else {
				if(jComboBoxid_transaccion_ingresoParametroImporGenerico!=null && jComboBoxid_transaccion_ingresoParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_transaccion_ingresoParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoOrdenCompraForeignKey(Long idFormatoOrdenCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoordencompraTemp=null;

			for(Formato formatoordencompraAux:formatoordencomprasForeignKey) {
				if(formatoordencompraAux.getId()!=null && formatoordencompraAux.getId().equals(idFormatoOrdenCompraSeleccionado)) {
					formatoordencompraTemp=formatoordencompraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoordencompraTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setFormatoOrdenCompra(formatoordencompraTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setSelectedItem(formatoordencompraTemp);
					}
				} else {
					//jComboBoxid_formato_orden_compraParametroImpor.setSelectedItem(formatoordencompraTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoordencompraTemp!=null && jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor!=null) {
						jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.setSelectedItem(formatoordencompraTemp);
					} else {
						if(jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor!=null) {
							//jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.setSelectedItem(formatoordencompraTemp);
							if(jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.getItemCount()>0) {
								jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoOrdenCompraForeignKeyDescripcion(Long idFormatoOrdenCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoordencompraTemp=null;

			for(Formato formatoordencompraAux:formatoordencomprasForeignKey) {
				if(formatoordencompraAux.getId()!=null && formatoordencompraAux.getId().equals(idFormatoOrdenCompraSeleccionado)) {
					formatoordencompraTemp=formatoordencompraAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoordencompraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoOrdenCompraForeignKeyGenerico(Long idFormatoOrdenCompraSeleccionado,JComboBox jComboBoxid_formato_orden_compraParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoordencompraTemp=null;

			for(Formato formatoordencompraAux:formatoordencomprasForeignKey) {
				if(formatoordencompraAux.getId()!=null && formatoordencompraAux.getId().equals(idFormatoOrdenCompraSeleccionado)) {
					formatoordencompraTemp=formatoordencompraAux;
					break;
				}
			}

			if(formatoordencompraTemp!=null) {
				jComboBoxid_formato_orden_compraParametroImporGenerico.setSelectedItem(formatoordencompraTemp);
			} else {
				if(jComboBoxid_formato_orden_compraParametroImporGenerico!=null && jComboBoxid_formato_orden_compraParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_formato_orden_compraParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoIngresoForeignKey(Long idFormatoIngresoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoingresoTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setFormatoIngreso(formatoingresoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setSelectedItem(formatoingresoTemp);
					}
				} else {
					//jComboBoxid_formato_ingresoParametroImpor.setSelectedItem(formatoingresoTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoIngreso") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoingresoTemp!=null && jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor!=null) {
						jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.setSelectedItem(formatoingresoTemp);
					} else {
						if(jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor!=null) {
							//jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.setSelectedItem(formatoingresoTemp);
							if(jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.getItemCount()>0) {
								jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoIngresoForeignKeyDescripcion(Long idFormatoIngresoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoingresoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoIngresoForeignKeyGenerico(Long idFormatoIngresoSeleccionado,JComboBox jComboBoxid_formato_ingresoParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}

			if(formatoingresoTemp!=null) {
				jComboBoxid_formato_ingresoParametroImporGenerico.setSelectedItem(formatoingresoTemp);
			} else {
				if(jComboBoxid_formato_ingresoParametroImporGenerico!=null && jComboBoxid_formato_ingresoParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_formato_ingresoParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoPedidoForeignKey(Long idFormatoPedidoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatopedidoTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setFormatoPedido(formatopedidoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setSelectedItem(formatopedidoTemp);
					}
				} else {
					//jComboBoxid_formato_pedidoParametroImpor.setSelectedItem(formatopedidoTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoPedo") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatopedidoTemp!=null && jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor!=null) {
						jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.setSelectedItem(formatopedidoTemp);
					} else {
						if(jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor!=null) {
							//jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.setSelectedItem(formatopedidoTemp);
							if(jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.getItemCount()>0) {
								jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoPedidoForeignKeyDescripcion(Long idFormatoPedidoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatopedidoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoPedidoForeignKeyGenerico(Long idFormatoPedidoSeleccionado,JComboBox jComboBoxid_formato_pedidoParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatopedidoTemp=null;

			for(Formato formatopedidoAux:formatopedidosForeignKey) {
				if(formatopedidoAux.getId()!=null && formatopedidoAux.getId().equals(idFormatoPedidoSeleccionado)) {
					formatopedidoTemp=formatopedidoAux;
					break;
				}
			}

			if(formatopedidoTemp!=null) {
				jComboBoxid_formato_pedidoParametroImporGenerico.setSelectedItem(formatopedidoTemp);
			} else {
				if(jComboBoxid_formato_pedidoParametroImporGenerico!=null && jComboBoxid_formato_pedidoParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_formato_pedidoParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoLiquidacionForeignKey(Long idFormatoLiquidacionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoliquidacionTemp=null;

			for(Formato formatoliquidacionAux:formatoliquidacionsForeignKey) {
				if(formatoliquidacionAux.getId()!=null && formatoliquidacionAux.getId().equals(idFormatoLiquidacionSeleccionado)) {
					formatoliquidacionTemp=formatoliquidacionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoliquidacionTemp!=null) {

					if(this.parametroimpor!=null) {
						this.parametroimpor.setFormatoLiquidacion(formatoliquidacionTemp);
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setSelectedItem(formatoliquidacionTemp);
					}
				} else {
					//jComboBoxid_formato_liquidacionParametroImpor.setSelectedItem(formatoliquidacionTemp);
					if(this.jInternalFrameDetalleFormParametroImpor!=null) {
						if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormatoLiquacion") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoliquidacionTemp!=null && jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor!=null) {
						jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.setSelectedItem(formatoliquidacionTemp);
					} else {
						if(jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor!=null) {
							//jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.setSelectedItem(formatoliquidacionTemp);
							if(jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.getItemCount()>0) {
								jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoLiquidacionForeignKeyDescripcion(Long idFormatoLiquidacionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoliquidacionTemp=null;

			for(Formato formatoliquidacionAux:formatoliquidacionsForeignKey) {
				if(formatoliquidacionAux.getId()!=null && formatoliquidacionAux.getId().equals(idFormatoLiquidacionSeleccionado)) {
					formatoliquidacionTemp=formatoliquidacionAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoliquidacionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoLiquidacionForeignKeyGenerico(Long idFormatoLiquidacionSeleccionado,JComboBox jComboBoxid_formato_liquidacionParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoliquidacionTemp=null;

			for(Formato formatoliquidacionAux:formatoliquidacionsForeignKey) {
				if(formatoliquidacionAux.getId()!=null && formatoliquidacionAux.getId().equals(idFormatoLiquidacionSeleccionado)) {
					formatoliquidacionTemp=formatoliquidacionAux;
					break;
				}
			}

			if(formatoliquidacionTemp!=null) {
				jComboBoxid_formato_liquidacionParametroImporGenerico.setSelectedItem(formatoliquidacionTemp);
			} else {
				if(jComboBoxid_formato_liquidacionParametroImporGenerico!=null && jComboBoxid_formato_liquidacionParametroImporGenerico.getItemCount()>0) {
					jComboBoxid_formato_liquidacionParametroImporGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_empresaParametroImporGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaParametroImporGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaParametroImporGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				parametroimpor.setid_empresa(empresaAux.getId());
				parametroimpor.setempresa_descripcion(ParametroImporConstantesFunciones.getEmpresaDescripcion(empresaAux));
				parametroimpor.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_paisParametroImporGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisParametroImporGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisParametroImporGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				parametroimpor.setid_pais(paisAux.getId());
				parametroimpor.setpais_descripcion(ParametroImporConstantesFunciones.getPaisDescripcion(paisAux));
				parametroimpor.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_bodegaParametroImporGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaParametroImporGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaParametroImporGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				parametroimpor.setid_bodega(bodegaAux.getId());
				parametroimpor.setbodega_descripcion(ParametroImporConstantesFunciones.getBodegaDescripcion(bodegaAux));
				parametroimpor.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_centro_costoParametroImporGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoParametroImporGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoParametroImporGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				parametroimpor.setid_centro_costo(centrocostoAux.getId());
				parametroimpor.setcentrocosto_descripcion(ParametroImporConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				parametroimpor.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_cuenta_contableParametroImporGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableParametroImporGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableParametroImporGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametroimpor.setid_cuenta_contable(cuentacontableAux.getId());
				parametroimpor.setcuentacontable_descripcion(ParametroImporConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				parametroimpor.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionOrdenCompraForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_transaccion_orden_compraParametroImporGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccion_orden_compraParametroImporGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccion_orden_compraParametroImporGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				parametroimpor.setid_transaccion_orden_compra(transaccionAux.getId());
				parametroimpor.settransaccionordencompra_descripcion(ParametroImporConstantesFunciones.getTransaccionOrdenCompraDescripcion(transaccionAux));
				parametroimpor.setTransaccionOrdenCompra(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionIngresoForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_transaccion_ingresoParametroImporGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccion_ingresoParametroImporGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccion_ingresoParametroImporGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				parametroimpor.setid_transaccion_ingreso(transaccionAux.getId());
				parametroimpor.settransaccioningreso_descripcion(ParametroImporConstantesFunciones.getTransaccionIngresoDescripcion(transaccionAux));
				parametroimpor.setTransaccionIngreso(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoOrdenCompraForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_formato_orden_compraParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_orden_compraParametroImporGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_orden_compraParametroImporGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametroimpor.setid_formato_orden_compra(formatoAux.getId());
				parametroimpor.setformatoordencompra_descripcion(ParametroImporConstantesFunciones.getFormatoOrdenCompraDescripcion(formatoAux));
				parametroimpor.setFormatoOrdenCompra(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoIngresoForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_formato_ingresoParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_ingresoParametroImporGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_ingresoParametroImporGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametroimpor.setid_formato_ingreso(formatoAux.getId());
				parametroimpor.setformatoingreso_descripcion(ParametroImporConstantesFunciones.getFormatoIngresoDescripcion(formatoAux));
				parametroimpor.setFormatoIngreso(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoPedidoForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_formato_pedidoParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_pedidoParametroImporGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_pedidoParametroImporGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametroimpor.setid_formato_pedido(formatoAux.getId());
				parametroimpor.setformatopedido_descripcion(ParametroImporConstantesFunciones.getFormatoPedidoDescripcion(formatoAux));
				parametroimpor.setFormatoPedido(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoLiquidacionForeignKey(ParametroImpor parametroimpor,JComboBox jComboBoxid_formato_liquidacionParametroImporGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_liquidacionParametroImporGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_liquidacionParametroImporGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				parametroimpor.setid_formato_liquidacion(formatoAux.getId());
				parametroimpor.setformatoliquidacion_descripcion(ParametroImporConstantesFunciones.getFormatoLiquidacionDescripcion(formatoAux));
				parametroimpor.setFormatoLiquidacion(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisParametroImpor.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisParametroImpor.addItem(pais);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.addItem(bodega);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.addItem(centrocosto);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.addItem(cuentacontable);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionOrdenComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.removeAllItems();

							for(Transaccion transaccionordencompra:this.transaccionordencomprasForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.addItem(transaccionordencompra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccionOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.removeAllItems();

							for(Transaccion transaccionordencompra:this.transaccionordencomprasForeignKey) {
								this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.addItem(transaccionordencompra);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionIngresosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.removeAllItems();

							for(Transaccion transaccioningreso:this.transaccioningresosForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.addItem(transaccioningreso);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccionIngreso") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.removeAllItems();

							for(Transaccion transaccioningreso:this.transaccioningresosForeignKey) {
								this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.addItem(transaccioningreso);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoOrdenComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.removeAllItems();

							for(Formato formatoordencompra:this.formatoordencomprasForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.addItem(formatoordencompra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoOrdenCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.removeAllItems();

							for(Formato formatoordencompra:this.formatoordencomprasForeignKey) {
								this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.addItem(formatoordencompra);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoIngresosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.removeAllItems();

							for(Formato formatoingreso:this.formatoingresosForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.addItem(formatoingreso);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoIngreso") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.removeAllItems();

							for(Formato formatoingreso:this.formatoingresosForeignKey) {
								this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.addItem(formatoingreso);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoPedidosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.removeAllItems();

							for(Formato formatopedido:this.formatopedidosForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.addItem(formatopedido);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoPedo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.removeAllItems();

							for(Formato formatopedido:this.formatopedidosForeignKey) {
								this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.addItem(formatopedido);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoLiquidacionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.removeAllItems();

							for(Formato formatoliquidacion:this.formatoliquidacionsForeignKey) {
								this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.addItem(formatoliquidacion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroImpor!=null) { 
					}

					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormatoLiquacion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.removeAllItems();

							for(Formato formatoliquidacion:this.formatoliquidacionsForeignKey) {
								this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.addItem(formatoliquidacion);
							}
						}

						if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisParametroImpor.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.setSelectedItem(cuentacontable);
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionOrdenCompraForeignKey(Transaccion transaccionordencompra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedItem(transaccionordencompra);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.setSelectedItem(transaccionordencompra);
						} else {
							this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionIngresoForeignKey(Transaccion transaccioningreso,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setSelectedItem(transaccioningreso);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.setSelectedItem(transaccioningreso);
						} else {
							this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoOrdenCompraForeignKey(Formato formatoordencompra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setSelectedItem(formatoordencompra);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.setSelectedItem(formatoordencompra);
						} else {
							this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoIngresoForeignKey(Formato formatoingreso,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setSelectedItem(formatoingreso);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.setSelectedItem(formatoingreso);
						} else {
							this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoPedidoForeignKey(Formato formatopedido,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setSelectedItem(formatopedido);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.setSelectedItem(formatopedido);
						} else {
							this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoLiquidacionForeignKey(Formato formatoliquidacion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setSelectedItem(formatoliquidacion);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroImpor!=null) {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.setSelectedItem(formatoliquidacion);
						} else {
							this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesParametroImpor() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ParametroImporConstantesFunciones.refrescarForeignKeysDescripcionesParametroImpor(this.parametroimporLogic.getParametroImpors());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ParametroImporConstantesFunciones.refrescarForeignKeysDescripcionesParametroImpor(this.parametroimpors);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(Formato.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//parametroimporLogic.setParametroImpors(this.parametroimpors);
			parametroimporLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ParametroImporParameterReturnGeneral getParametroImporParameterGeneral() {
		return this.parametroimporParameterGeneral;
	}
	
	public void setParametroImporParameterGeneral(ParametroImporParameterReturnGeneral parametroimporParameterGeneral) {
		this.parametroimporParameterGeneral = parametroimporParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoParametroImpor() {
		return isPermisoTodoParametroImpor;
	}

	public void setIsPermisoTodoParametroImpor(Boolean isPermisoTodoParametroImpor) {
		this.isPermisoTodoParametroImpor = isPermisoTodoParametroImpor;
	}

	public Boolean getIsPermisoNuevoParametroImpor() {
		return isPermisoNuevoParametroImpor;
	}

	public void setIsPermisoNuevoParametroImpor(Boolean isPermisoNuevoParametroImpor) {
		this.isPermisoNuevoParametroImpor = isPermisoNuevoParametroImpor;
	}

	public Boolean getIsPermisoActualizarParametroImpor() {
		return isPermisoActualizarParametroImpor;
	}

	public void setIsPermisoActualizarParametroImpor(Boolean isPermisoActualizarParametroImpor) {
		this.isPermisoActualizarParametroImpor = isPermisoActualizarParametroImpor;
	}

	public Boolean getIsPermisoEliminarParametroImpor() {
		return isPermisoEliminarParametroImpor;
	}

	public void setIsPermisoEliminarParametroImpor(Boolean isPermisoEliminarParametroImpor) {
		this.isPermisoEliminarParametroImpor = isPermisoEliminarParametroImpor;
	}

	public Boolean getIsPermisoGuardarCambiosParametroImpor() {
		return isPermisoGuardarCambiosParametroImpor;
	}

	public void setIsPermisoGuardarCambiosParametroImpor(Boolean isPermisoGuardarCambiosParametroImpor) {
		this.isPermisoGuardarCambiosParametroImpor = isPermisoGuardarCambiosParametroImpor;
	}
	
	public Boolean getIsPermisoConsultaParametroImpor() {
		return isPermisoConsultaParametroImpor;
	}

	public void setIsPermisoConsultaParametroImpor(Boolean isPermisoConsultaParametroImpor) {
		this.isPermisoConsultaParametroImpor = isPermisoConsultaParametroImpor;
	}

	public Boolean getIsPermisoBusquedaParametroImpor() {
		return isPermisoBusquedaParametroImpor;
	}

	public void setIsPermisoBusquedaParametroImpor(Boolean isPermisoBusquedaParametroImpor) {
		this.isPermisoBusquedaParametroImpor = isPermisoBusquedaParametroImpor;
	}

	public Boolean getIsPermisoReporteParametroImpor() {
		return isPermisoReporteParametroImpor;
	}

	public void setIsPermisoReporteParametroImpor(Boolean isPermisoReporteParametroImpor) {
		this.isPermisoReporteParametroImpor = isPermisoReporteParametroImpor;
	}
	
	public Boolean getIsPermisoPaginacionMedioParametroImpor() {
		return isPermisoPaginacionMedioParametroImpor;
	}

	public void setIsPermisoPaginacionMedioParametroImpor(Boolean isPermisoPaginacionMedioParametroImpor) {
		this.isPermisoPaginacionMedioParametroImpor = isPermisoPaginacionMedioParametroImpor;
	}
	
	public Boolean getIsPermisoPaginacionTodoParametroImpor() {
		return isPermisoPaginacionTodoParametroImpor;
	}

	public void setIsPermisoPaginacionTodoParametroImpor(Boolean isPermisoPaginacionTodoParametroImpor) {
		this.isPermisoPaginacionTodoParametroImpor = isPermisoPaginacionTodoParametroImpor;
	}
	
	public Boolean getIsPermisoPaginacionAltoParametroImpor() {
		return isPermisoPaginacionAltoParametroImpor;
	}

	public void setIsPermisoPaginacionAltoParametroImpor(Boolean isPermisoPaginacionAltoParametroImpor) {
		this.isPermisoPaginacionAltoParametroImpor = isPermisoPaginacionAltoParametroImpor;
	}
	
	public Boolean getIsPermisoCopiarParametroImpor() {
		return isPermisoCopiarParametroImpor;
	}

	public void setIsPermisoCopiarParametroImpor(Boolean isPermisoCopiarParametroImpor) {
		this.isPermisoCopiarParametroImpor = isPermisoCopiarParametroImpor;
	}
	
	public Boolean getIsPermisoVerFormParametroImpor() {
		return isPermisoVerFormParametroImpor;
	}

	public void setIsPermisoVerFormParametroImpor(Boolean isPermisoVerFormParametroImpor) {
		this.isPermisoVerFormParametroImpor = isPermisoVerFormParametroImpor;
	}
	
	public Boolean getIsPermisoDuplicarParametroImpor() {
		return isPermisoDuplicarParametroImpor;
	}

	public void setIsPermisoDuplicarParametroImpor(Boolean isPermisoDuplicarParametroImpor) {
		this.isPermisoDuplicarParametroImpor = isPermisoDuplicarParametroImpor;
	}
	
	public Boolean getIsPermisoOrdenParametroImpor() {
		return isPermisoOrdenParametroImpor;
	}

	public void setIsPermisoOrdenParametroImpor(Boolean isPermisoOrdenParametroImpor) {
		this.isPermisoOrdenParametroImpor = isPermisoOrdenParametroImpor;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoParametroImpor() {
		return isVisibilidadCeldaNuevoParametroImpor;
	}

	public void setIsVisibilidadCeldaNuevoParametroImpor(Boolean isVisibilidadCeldaNuevoParametroImpor) {
		this.isVisibilidadCeldaNuevoParametroImpor = isVisibilidadCeldaNuevoParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarParametroImpor() {
		return isVisibilidadCeldaDuplicarParametroImpor;
	}

	public void setIsVisibilidadCeldaDuplicarParametroImpor(Boolean isVisibilidadCeldaDuplicarParametroImpor) {
		this.isVisibilidadCeldaDuplicarParametroImpor = isVisibilidadCeldaDuplicarParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarParametroImpor() {
		return isVisibilidadCeldaCopiarParametroImpor;
	}

	public void setIsVisibilidadCeldaCopiarParametroImpor(Boolean isVisibilidadCeldaCopiarParametroImpor) {
		this.isVisibilidadCeldaCopiarParametroImpor = isVisibilidadCeldaCopiarParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormParametroImpor() {
		return isVisibilidadCeldaVerFormParametroImpor;
	}

	public void setIsVisibilidadCeldaVerFormParametroImpor(Boolean isVisibilidadCeldaVerFormParametroImpor) {
		this.isVisibilidadCeldaVerFormParametroImpor = isVisibilidadCeldaVerFormParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenParametroImpor() {
		return isVisibilidadCeldaOrdenParametroImpor;
	}

	public void setIsVisibilidadCeldaOrdenParametroImpor(Boolean isVisibilidadCeldaOrdenParametroImpor) {
		this.isVisibilidadCeldaOrdenParametroImpor = isVisibilidadCeldaOrdenParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesParametroImpor() {
		return isVisibilidadCeldaNuevoRelacionesParametroImpor;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesParametroImpor(Boolean isVisibilidadCeldaNuevoRelacionesParametroImpor) {
		this.isVisibilidadCeldaNuevoRelacionesParametroImpor = isVisibilidadCeldaNuevoRelacionesParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaModificarParametroImpor() {
		return isVisibilidadCeldaModificarParametroImpor;
	}

	public void setIsVisibilidadCeldaModificarParametroImpor(Boolean isVisibilidadCeldaModificarParametroImpor) {
		this.isVisibilidadCeldaModificarParametroImpor = isVisibilidadCeldaModificarParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarParametroImpor() {
		return isVisibilidadCeldaActualizarParametroImpor;
	}

	public void setIsVisibilidadCeldaActualizarParametroImpor(Boolean isVisibilidadCeldaActualizarParametroImpor) {
		this.isVisibilidadCeldaActualizarParametroImpor = isVisibilidadCeldaActualizarParametroImpor;
	}

	public Boolean getIsVisibilidadCeldaEliminarParametroImpor() {
		return isVisibilidadCeldaEliminarParametroImpor;
	}

	public void setIsVisibilidadCeldaEliminarParametroImpor(Boolean isVisibilidadCeldaEliminarParametroImpor) {
		this.isVisibilidadCeldaEliminarParametroImpor = isVisibilidadCeldaEliminarParametroImpor;
	}

	public Boolean getIsVisibilidadCeldaCancelarParametroImpor() {
		return isVisibilidadCeldaCancelarParametroImpor;
	}

	public void setIsVisibilidadCeldaCancelarParametroImpor(Boolean isVisibilidadCeldaCancelarParametroImpor) {
		this.isVisibilidadCeldaCancelarParametroImpor = isVisibilidadCeldaCancelarParametroImpor;
	}

	public Boolean getIsVisibilidadCeldaGuardarParametroImpor() {
		return isVisibilidadCeldaGuardarParametroImpor;
	}

	public void setIsVisibilidadCeldaGuardarParametroImpor(Boolean isVisibilidadCeldaGuardarParametroImpor) {
		this.isVisibilidadCeldaGuardarParametroImpor = isVisibilidadCeldaGuardarParametroImpor;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosParametroImpor() {
		return isVisibilidadCeldaGuardarCambiosParametroImpor;
	}

	public void setIsVisibilidadCeldaGuardarCambiosParametroImpor(Boolean isVisibilidadCeldaGuardarCambiosParametroImpor) {
		this.isVisibilidadCeldaGuardarCambiosParametroImpor = isVisibilidadCeldaGuardarCambiosParametroImpor;
	}
		
	public ParametroImporSessionBean getparametroimporSessionBean() {
		return this.parametroimporSessionBean;
	}
	
	public void setparametroimporSessionBean(ParametroImporSessionBean parametroimporSessionBean) {
		this.parametroimporSessionBean=parametroimporSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormatoIngreso() {
		return this.isVisibilidadFK_IdFormatoIngreso;
	}

	public void setisVisibilidadFK_IdFormatoIngreso(Boolean isVisibilidadFK_IdFormatoIngreso) {
		this.isVisibilidadFK_IdFormatoIngreso=isVisibilidadFK_IdFormatoIngreso;
	}

	public Boolean getisVisibilidadFK_IdFormatoLiquacion() {
		return this.isVisibilidadFK_IdFormatoLiquacion;
	}

	public void setisVisibilidadFK_IdFormatoLiquacion(Boolean isVisibilidadFK_IdFormatoLiquacion) {
		this.isVisibilidadFK_IdFormatoLiquacion=isVisibilidadFK_IdFormatoLiquacion;
	}

	public Boolean getisVisibilidadFK_IdFormatoOrdenCompra() {
		return this.isVisibilidadFK_IdFormatoOrdenCompra;
	}

	public void setisVisibilidadFK_IdFormatoOrdenCompra(Boolean isVisibilidadFK_IdFormatoOrdenCompra) {
		this.isVisibilidadFK_IdFormatoOrdenCompra=isVisibilidadFK_IdFormatoOrdenCompra;
	}

	public Boolean getisVisibilidadFK_IdFormatoPedo() {
		return this.isVisibilidadFK_IdFormatoPedo;
	}

	public void setisVisibilidadFK_IdFormatoPedo(Boolean isVisibilidadFK_IdFormatoPedo) {
		this.isVisibilidadFK_IdFormatoPedo=isVisibilidadFK_IdFormatoPedo;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdTransaccionIngreso() {
		return this.isVisibilidadFK_IdTransaccionIngreso;
	}

	public void setisVisibilidadFK_IdTransaccionIngreso(Boolean isVisibilidadFK_IdTransaccionIngreso) {
		this.isVisibilidadFK_IdTransaccionIngreso=isVisibilidadFK_IdTransaccionIngreso;
	}

	public Boolean getisVisibilidadFK_IdTransaccionOrdenCompra() {
		return this.isVisibilidadFK_IdTransaccionOrdenCompra;
	}

	public void setisVisibilidadFK_IdTransaccionOrdenCompra(Boolean isVisibilidadFK_IdTransaccionOrdenCompra) {
		this.isVisibilidadFK_IdTransaccionOrdenCompra=isVisibilidadFK_IdTransaccionOrdenCompra;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysParametroImpor(ParametroImpor parametroimpor)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(parametroimpor,null);
				this.setActualParaGuardarPaisForeignKey(parametroimpor,null);
				this.setActualParaGuardarBodegaForeignKey(parametroimpor,null);
				this.setActualParaGuardarCentroCostoForeignKey(parametroimpor,null);
				this.setActualParaGuardarCuentaContableForeignKey(parametroimpor,null);
				this.setActualParaGuardarTransaccionOrdenCompraForeignKey(parametroimpor,null);
				this.setActualParaGuardarTransaccionIngresoForeignKey(parametroimpor,null);
				this.setActualParaGuardarFormatoOrdenCompraForeignKey(parametroimpor,null);
				this.setActualParaGuardarFormatoIngresoForeignKey(parametroimpor,null);
				this.setActualParaGuardarFormatoPedidoForeignKey(parametroimpor,null);
				this.setActualParaGuardarFormatoLiquidacionForeignKey(parametroimpor,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ParametroImpor parametroimpor,ParametroImpor parametroimporAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalParametroImpor(parametroimpor);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		parametroimporAux.setId(parametroimpor.getId());
		parametroimporAux.setVersionRow(parametroimpor.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessParametroImpor();
		
			int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = parametroimporValidator.getInvalidValues(this.parametroimpor);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			parametroimporLogic.setDatosCliente(datosCliente);
			parametroimporLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				parametroimporAux=new  ParametroImpor();
				
				parametroimporAux.setIsNew(true);
				parametroimporAux.setIsChanged(true);
				
				parametroimporAux.setParametroImporOriginal(this.parametroimpor);
				
				parametroimporAux.setId(this.parametroimpor.getId());	
				parametroimporAux.setVersionRow(this.parametroimpor.getVersionRow());	
				parametroimporAux.setid_empresa(this.parametroimpor.getid_empresa());	
				parametroimporAux.setid_pais(this.parametroimpor.getid_pais());	
				parametroimporAux.setid_bodega(this.parametroimpor.getid_bodega());	
				parametroimporAux.setid_centro_costo(this.parametroimpor.getid_centro_costo());	
				parametroimporAux.setid_cuenta_contable(this.parametroimpor.getid_cuenta_contable());	
				parametroimporAux.setid_transaccion_orden_compra(this.parametroimpor.getid_transaccion_orden_compra());	
				parametroimporAux.setid_transaccion_ingreso(this.parametroimpor.getid_transaccion_ingreso());	
				parametroimporAux.setid_formato_orden_compra(this.parametroimpor.getid_formato_orden_compra());	
				parametroimporAux.setid_formato_ingreso(this.parametroimpor.getid_formato_ingreso());	
				parametroimporAux.setid_formato_pedido(this.parametroimpor.getid_formato_pedido());	
				parametroimporAux.setid_formato_liquidacion(this.parametroimpor.getid_formato_liquidacion());	
				parametroimporAux.setdias_llega_bodega(this.parametroimpor.getdias_llega_bodega());	
				parametroimporAux.setporcentaje_seguro(this.parametroimpor.getporcentaje_seguro());	
				parametroimporAux.setfodin(this.parametroimpor.getfodin());	
				parametroimporAux.setcorpei(this.parametroimpor.getcorpei());	
				parametroimporAux.setcon_secuencial(this.parametroimpor.getcon_secuencial());	
				parametroimporAux.setsecuencial(this.parametroimpor.getsecuencial());	
				parametroimporAux.setcon_peso_precio(this.parametroimpor.getcon_peso_precio());	
				parametroimporAux.setcon_lote(this.parametroimpor.getcon_lote());	
				parametroimporAux.setcon_unidad(this.parametroimpor.getcon_unidad());	
				parametroimporAux.setcon_conversion(this.parametroimpor.getcon_conversion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametroimporSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroimporAux,parametroimpors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroimporSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.saveParametroImpors();//WithConnection
						//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);
					
					this.refrescarForeignKeysDescripcionesParametroImpor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroimporLogic.saveParametroImporRelaciones(parametroimporAux);//WithConnection
								//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametroimporSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametroimporAux,parametroimpors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				parametroimporAux=new  ParametroImpor();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.parametroimporSessionBean.getEsGuardarRelacionado() 
					|| (this.parametroimporSessionBean.getEsGuardarRelacionado() && this.parametroimpor.getId()>=0)) {
						
					parametroimporAux.setIsNew(false);
				}
				
				parametroimporAux.setIsDeleted(false);
			
				parametroimporAux.setId(this.parametroimpor.getId());	
				parametroimporAux.setVersionRow(this.parametroimpor.getVersionRow());	
				parametroimporAux.setid_empresa(this.parametroimpor.getid_empresa());	
				parametroimporAux.setid_pais(this.parametroimpor.getid_pais());	
				parametroimporAux.setid_bodega(this.parametroimpor.getid_bodega());	
				parametroimporAux.setid_centro_costo(this.parametroimpor.getid_centro_costo());	
				parametroimporAux.setid_cuenta_contable(this.parametroimpor.getid_cuenta_contable());	
				parametroimporAux.setid_transaccion_orden_compra(this.parametroimpor.getid_transaccion_orden_compra());	
				parametroimporAux.setid_transaccion_ingreso(this.parametroimpor.getid_transaccion_ingreso());	
				parametroimporAux.setid_formato_orden_compra(this.parametroimpor.getid_formato_orden_compra());	
				parametroimporAux.setid_formato_ingreso(this.parametroimpor.getid_formato_ingreso());	
				parametroimporAux.setid_formato_pedido(this.parametroimpor.getid_formato_pedido());	
				parametroimporAux.setid_formato_liquidacion(this.parametroimpor.getid_formato_liquidacion());	
				parametroimporAux.setdias_llega_bodega(this.parametroimpor.getdias_llega_bodega());	
				parametroimporAux.setporcentaje_seguro(this.parametroimpor.getporcentaje_seguro());	
				parametroimporAux.setfodin(this.parametroimpor.getfodin());	
				parametroimporAux.setcorpei(this.parametroimpor.getcorpei());	
				parametroimporAux.setcon_secuencial(this.parametroimpor.getcon_secuencial());	
				parametroimporAux.setsecuencial(this.parametroimpor.getsecuencial());	
				parametroimporAux.setcon_peso_precio(this.parametroimpor.getcon_peso_precio());	
				parametroimporAux.setcon_lote(this.parametroimpor.getcon_lote());	
				parametroimporAux.setcon_unidad(this.parametroimpor.getcon_unidad());	
				parametroimporAux.setcon_conversion(this.parametroimpor.getcon_conversion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroimporAux,parametroimpors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroimporSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.saveParametroImpors();//WithConnection
						//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);
					
					this.refrescarForeignKeysDescripcionesParametroImpor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroimporLogic.saveParametroImporRelaciones(parametroimporAux);//WithConnection
								//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametroimporSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametroimporAux,parametroimpors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametroimpor,parametroimporAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				parametroimporAux=new  ParametroImpor();
				
				parametroimporAux.setIsNew(false);
				parametroimporAux.setIsChanged(false);
				
				parametroimporAux.setIsDeleted(true);
				
				parametroimporAux.setId(this.parametroimpor.getId());	
				parametroimporAux.setVersionRow(this.parametroimpor.getVersionRow());	
				parametroimporAux.setid_empresa(this.parametroimpor.getid_empresa());	
				parametroimporAux.setid_pais(this.parametroimpor.getid_pais());	
				parametroimporAux.setid_bodega(this.parametroimpor.getid_bodega());	
				parametroimporAux.setid_centro_costo(this.parametroimpor.getid_centro_costo());	
				parametroimporAux.setid_cuenta_contable(this.parametroimpor.getid_cuenta_contable());	
				parametroimporAux.setid_transaccion_orden_compra(this.parametroimpor.getid_transaccion_orden_compra());	
				parametroimporAux.setid_transaccion_ingreso(this.parametroimpor.getid_transaccion_ingreso());	
				parametroimporAux.setid_formato_orden_compra(this.parametroimpor.getid_formato_orden_compra());	
				parametroimporAux.setid_formato_ingreso(this.parametroimpor.getid_formato_ingreso());	
				parametroimporAux.setid_formato_pedido(this.parametroimpor.getid_formato_pedido());	
				parametroimporAux.setid_formato_liquidacion(this.parametroimpor.getid_formato_liquidacion());	
				parametroimporAux.setdias_llega_bodega(this.parametroimpor.getdias_llega_bodega());	
				parametroimporAux.setporcentaje_seguro(this.parametroimpor.getporcentaje_seguro());	
				parametroimporAux.setfodin(this.parametroimpor.getfodin());	
				parametroimporAux.setcorpei(this.parametroimpor.getcorpei());	
				parametroimporAux.setcon_secuencial(this.parametroimpor.getcon_secuencial());	
				parametroimporAux.setsecuencial(this.parametroimpor.getsecuencial());	
				parametroimporAux.setcon_peso_precio(this.parametroimpor.getcon_peso_precio());	
				parametroimporAux.setcon_lote(this.parametroimpor.getcon_lote());	
				parametroimporAux.setcon_unidad(this.parametroimpor.getcon_unidad());	
				parametroimporAux.setcon_conversion(this.parametroimpor.getcon_conversion());	
				
				if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.parametroimporAux.getId()>=0) {	
						this.parametroimporsEliminados.add(parametroimporAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroimporAux,parametroimpors);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametroimporSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.saveParametroImpors();//WithConnection
						//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametroimporLogic.saveParametroImporRelaciones(parametroimporAux);//WithConnection
								//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
								|| this.parametroimporSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(parametroimporAux,parametroimporLogic.getParametroImpors());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(parametroimporAux,parametroimpors);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getParametroImpors().addAll(this.parametroimporsEliminados);
					
					parametroimporLogic.saveParametroImpors();//WithConnection
					//parametroimporLogic.getSetVersionRowParametroImpors();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesParametroImpor();
				
				this.parametroimporsEliminados= new ArrayList<ParametroImpor>();		
			}
			
			if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Parametro Impor GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.parametroimpor=parametroimporAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessParametroImpor();
      	}
		
	}	
	
	public void actualizarRelaciones(ParametroImpor parametroimporLocal) throws Exception {
		
		if(this.parametroimporSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ParametroImpor parametroimporLocal) throws Exception {	
		if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				parametroimporLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				parametroimporLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				parametroimporLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				parametroimporLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				parametroimporLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionordencompraBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionordencompraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionordencompraBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionordencompraBeanSwingJInternalFrameLocal.actualizarLista(transaccionordencompraBeanSwingJInternalFrameLocal.transaccion,this.transaccionordencomprasForeignKey);

				transaccionordencompraBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionordencompraBeanSwingJInternalFrameLocal.transaccion);

				parametroimporLocal.setTransaccionOrdenCompra(transaccionordencompraBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccionOrdenCompra();
				this.cargarCombosFrameTransaccionOrdenComprasForeignKey("Formulario");
				this.setActualTransaccionOrdenCompraForeignKey(transaccionordencompraBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccioningresoBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccioningresoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccioningresoBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccioningresoBeanSwingJInternalFrameLocal.actualizarLista(transaccioningresoBeanSwingJInternalFrameLocal.transaccion,this.transaccioningresosForeignKey);

				transaccioningresoBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccioningresoBeanSwingJInternalFrameLocal.transaccion);

				parametroimporLocal.setTransaccionIngreso(transaccioningresoBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccionIngreso();
				this.cargarCombosFrameTransaccionIngresosForeignKey("Formulario");
				this.setActualTransaccionIngresoForeignKey(transaccioningresoBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoordencompraBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoordencompraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoordencompraBeanSwingJInternalFrameLocal.getformato(),true);
				formatoordencompraBeanSwingJInternalFrameLocal.actualizarLista(formatoordencompraBeanSwingJInternalFrameLocal.formato,this.formatoordencomprasForeignKey);

				formatoordencompraBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoordencompraBeanSwingJInternalFrameLocal.formato);

				parametroimporLocal.setFormatoOrdenCompra(formatoordencompraBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoOrdenCompra();
				this.cargarCombosFrameFormatoOrdenComprasForeignKey("Formulario");
				this.setActualFormatoOrdenCompraForeignKey(formatoordencompraBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoingresoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoingresoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoingresoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoingresoBeanSwingJInternalFrameLocal.actualizarLista(formatoingresoBeanSwingJInternalFrameLocal.formato,this.formatoingresosForeignKey);

				formatoingresoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoingresoBeanSwingJInternalFrameLocal.formato);

				parametroimporLocal.setFormatoIngreso(formatoingresoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoIngreso();
				this.cargarCombosFrameFormatoIngresosForeignKey("Formulario");
				this.setActualFormatoIngresoForeignKey(formatoingresoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatopedidoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatopedidoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatopedidoBeanSwingJInternalFrameLocal.getformato(),true);
				formatopedidoBeanSwingJInternalFrameLocal.actualizarLista(formatopedidoBeanSwingJInternalFrameLocal.formato,this.formatopedidosForeignKey);

				formatopedidoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatopedidoBeanSwingJInternalFrameLocal.formato);

				parametroimporLocal.setFormatoPedido(formatopedidoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoPedido();
				this.cargarCombosFrameFormatoPedidosForeignKey("Formulario");
				this.setActualFormatoPedidoForeignKey(formatopedidoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoliquidacionBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoliquidacionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoliquidacionBeanSwingJInternalFrameLocal.getformato(),true);
				formatoliquidacionBeanSwingJInternalFrameLocal.actualizarLista(formatoliquidacionBeanSwingJInternalFrameLocal.formato,this.formatoliquidacionsForeignKey);

				formatoliquidacionBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoliquidacionBeanSwingJInternalFrameLocal.formato);

				parametroimporLocal.setFormatoLiquidacion(formatoliquidacionBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoLiquidacion();
				this.cargarCombosFrameFormatoLiquidacionsForeignKey("Formulario");
				this.setActualFormatoLiquidacionForeignKey(formatoliquidacionBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarParametroImporActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = parametroimporValidator.getInvalidValues(this.parametroimpor);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ParametroImpor parametroimpor,List<ParametroImpor> parametroimpors) throws Exception {
		try	{		
			ParametroImporConstantesFunciones.actualizarLista(parametroimpor,parametroimpors,this.parametroimporSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ParametroImpor parametroimpor,List<ParametroImpor> parametroimpors) throws Exception {
		try	{			
			ParametroImporConstantesFunciones.actualizarSelectedLista(parametroimpor,parametroimpors);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ParametroImpor> parametroimporsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				parametroimporsLocal=this.parametroimporLogic.getParametroImpors();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				parametroimporsLocal=this.parametroimpors;
			}
			//ARCHITECTURE
		
			for(ParametroImpor parametroimporLocal:parametroimporsLocal) {
				if(this.permiteMantenimiento(parametroimporLocal) && parametroimporLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ParametroImporConstantesFunciones.getParametroImporLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_empresaParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_paisParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_bodegaParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_centro_costoParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_cuenta_contableParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDTRANSACCIONORDENCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_transaccion_orden_compraParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDTRANSACCIONINGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_transaccion_ingresoParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDFORMATOORDENCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_orden_compraParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDFORMATOINGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_ingresoParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDFORMATOPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_pedidoParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.IDFORMATOLIQUIDACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_liquidacionParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.DIASLLEGABODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabeldias_llega_bodegaParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.PORCENTAJESEGURO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelporcentaje_seguroParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.FODIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelfodinParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CORPEI)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcorpeiParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CONSECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_secuencialParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.SECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelsecuencialParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CONPESOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_peso_precioParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CONLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_loteParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CONUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_unidadParametroImpor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroImporConstantesFunciones.CONCONVERSION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_conversionParametroImpor,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_empresaParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_paisParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_bodegaParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_centro_costoParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_cuenta_contableParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_transaccion_orden_compraParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_transaccion_ingresoParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_orden_compraParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_ingresoParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_pedidoParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelid_formato_liquidacionParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabeldias_llega_bodegaParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelporcentaje_seguroParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelfodinParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcorpeiParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_secuencialParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelsecuencialParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_peso_precioParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_loteParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_unidadParametroImpor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_conversionParametroImpor,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoParametroImpor--;	
		
		
		this.parametroimporAux=new ParametroImpor();
		
		this.parametroimporAux.setId(this.iIdNuevoParametroImpor);
		this.parametroimporAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametroimporLogic.getParametroImpors().add(this.parametroimporAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.parametroimpors.add(this.parametroimporAux);
		}
		//ARCHITECTURE
		
		this.parametroimpor=this.parametroimporAux;
		
		if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioParametroImpor(this.parametroimpor);
			this.setVariablesObjetoActualToFormularioForeignKeyParametroImpor(this.parametroimpor);
		}
				
		//this.setDefaultControlesParametroImpor();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyParametroImpor();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyParametroImpor();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroImpor();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroImpor(this.parametroimporBean,this.parametroimpor,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ParametroImporConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
			classes=ParametroImporConstantesFunciones.getClassesRelationshipsOfParametroImpor(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.parametroimporReturnGeneral=parametroimporLogic.procesarEventosParametroImporsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroimporLogic.getParametroImpors(),this.parametroimpor,this.parametroimporParameterGeneral,this.isEsNuevoParametroImpor,classes);//this.parametroimporLogic.getParametroImpor()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanParametroImpor(this.parametroimporReturnGeneral,this.parametroimporBean,false);
		
		if(this.parametroimporReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyParametroImpor(this.parametroimporReturnGeneral.getParametroImpor());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioParametroImpor(this.parametroimporReturnGeneral.getParametroImpor());
		}
		
		if(this.parametroimporReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioParametroImpor(this.parametroimporReturnGeneral.getParametroImpor(),classes);//this.parametroimporBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyParametroImpor();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyParametroImpor();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroImporBeanSwingJInternalFrameAdditional.RecargarFormParametroImpor(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingParametroImpor(false);
						
			if(parametroimporSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroImpor();
			}
			
			this.actualizarVisualTableDatosParametroImpor();
			
			this.jTableDatosParametroImpor.setRowSelectionInterval(this.getIndiceNuevoParametroImpor(), this.getIndiceNuevoParametroImpor());
			
			this.seleccionarFilaTablaParametroImporActual();
						
			this.actualizarEstadoCeldasBotonesParametroImpor("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesParametroImpor(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activardias_llega_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarporcentaje_seguroParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarfodinParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcorpeiParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcon_secuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarsecuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcon_peso_precioParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcon_loteParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcon_unidadParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarcon_conversionParametroImpor);	
		//
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_empresaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_paisParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_centro_costoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_cuenta_contableParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_transaccion_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_transaccion_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_formato_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_formato_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_formato_pedidoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setEnabled(isHabilitar && this.parametroimporConstantesFunciones.activarid_formato_liquidacionParametroImpor);
	};
	
	public void setDefaultControlesParametroImpor() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoParametroImpor(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.parametroimporSessionBean.setConGuardarRelaciones(true);			
			this.parametroimporSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.setVisible(true);
			
					
		} else {
			//this.parametroimporSessionBean.setConGuardarRelaciones(false);			
			this.parametroimporSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoParametroImpor() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
				if(parametroimporAux.getId().equals(this.iIdNuevoParametroImpor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroImpor parametroimporAux:this.parametroimpors) {
				if(parametroimporAux.getId().equals(this.iIdNuevoParametroImpor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualParametroImpor(ParametroImpor parametroimpor,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
				if(parametroimporAux.getId().equals(parametroimpor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroImpor parametroimporAux:this.parametroimpors) {
				if(parametroimporAux.getId().equals(parametroimpor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalParametroImpor(ParametroImpor parametroimporOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
				if(parametroimporAux.getParametroImporOriginal().getId().equals(parametroimporOriginal.getId())) {
					existe=true;
					parametroimporOriginal.setId(parametroimporAux.getId());
					parametroimporOriginal.setVersionRow(parametroimporAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroImpor parametroimporAux:this.parametroimpors) {
				if(parametroimporAux.getParametroImporOriginal().getId().equals(parametroimporOriginal.getId())) {
					existe=true;
					parametroimporOriginal.setId(parametroimporAux.getId());
					parametroimporOriginal.setVersionRow(parametroimporAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosParametroImpor(Boolean esParaCancelar) throws Exception {
		parametroimporsAux=new ArrayList<ParametroImpor>();
		parametroimporAux=new ParametroImpor();
		
		if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
					if(parametroimporAux.getId()<0) {
						parametroimporsAux.add(parametroimporAux);
					}		
				}
				this.iIdNuevoParametroImpor=0L;
				this.parametroimporLogic.getParametroImpors().removeAll(parametroimporsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroImpor parametroimporAux:this.parametroimpors) {
					if(parametroimporAux.getId()<0) {
						parametroimporsAux.add(parametroimporAux);
					}		
				}
				this.iIdNuevoParametroImpor=0L;
				this.parametroimpors.removeAll(parametroimporsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoParametroImpor 
					&& this.parametroimporLogic.getParametroImpors().size()>0
					) {
					parametroimporAux=this.parametroimporLogic.getParametroImpors().get(this.parametroimporLogic.getParametroImpors().size() - 1);
				
					if(parametroimporAux.getId()<0) {
						this.parametroimporLogic.getParametroImpors().remove(parametroimporAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoParametroImpor && this.parametroimpors.size()>0) {
					parametroimporAux=this.parametroimpors.get(this.parametroimpors.size() - 1);
				
					if(parametroimporAux.getId()<0) {
						this.parametroimpors.remove(parametroimporAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoParametroImpor(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(parametroimpor.getId()<0) {
				this.parametroimporLogic.getParametroImpors().remove(this.parametroimpor);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(parametroimpor.getId()<0) {
				this.parametroimpors.remove(this.parametroimpor);
			}
		}			
	}
	
	public void setEstadosInicialesParametroImpor(List<ParametroImpor> parametroimporsAux) throws Exception {
		ParametroImporConstantesFunciones.setEstadosInicialesParametroImpor(parametroimporsAux);
	}
	
	public void setEstadosInicialesParametroImpor(ParametroImpor parametroimporAux) throws Exception {
		ParametroImporConstantesFunciones.setEstadosInicialesParametroImpor(parametroimporAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarParametroImporActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarParametroImporActual()) {
				if(!this.isEsNuevoParametroImpor) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoParametroImpor=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarParametroImporActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Parametro Impor ?", "MANTENIMIENTO DE Parametro Impor", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ParametroImpor parametroimpor) throws Exception {
		ParametroImporConstantesFunciones.seleccionarAsignar(this.parametroimpor,parametroimpor);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarParametroImpor=this.isPermisoActualizarOriginalParametroImpor;
			
			
			this.seleccionarAsignar(parametroimpor);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroImporConstantesFunciones.quitarEspaciosParametroImpor(this.parametroimpor,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesParametroImpor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.parametroimporSessionBean.setsFuncionBusquedaRapida(this.parametroimporSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoParametroImpor) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosParametroImpor(esParaCancelar);				
				this.cancelarNuevoParametroImpor(esParaCancelar);								
			}
			
			this.parametroimpor=new ParametroImpor();
			
			this.inicializarParametroImpor();
			
			this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarParametroImpor() throws Exception {
		try {
			ParametroImporConstantesFunciones.inicializarParametroImpor(this.parametroimpor);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.parametroimporLogic.getParametroImpors().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteParametroImpors(String sAccionBusqueda,List<ParametroImpor> parametroimporsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ParametroImpor"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ParametroImporMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ParametroImporMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ParametroImpor"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Parametro Impores");		
		parameters.put("busquedapor", ParametroImporConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceParametroImpor=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ParametroImporConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ParametroImporConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceParametroImpor=new JRBeanArrayDataSource(ParametroImporJInternalFrame.TraerParametroImporBeans(parametroimporsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceParametroImpor);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ParametroImporConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ParametroImporConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ParametroImporBean.TraerParametroImporBeans(parametroimporsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoParametroImporActionPerformed(null);
					//this.generarExcelReporteParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesParametroImpors(sAccionBusqueda,sTipoArchivoReporte,parametroimporsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteParametroImpors(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroImpor> parametroimporsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroImpors");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroImpor("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ParametroImpor parametroimpor : parametroimporsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ParametroImporConstantesFunciones.generarExcelReporteDataParametroImpor("NORMAL",row,workbook,parametroimpor,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderParametroImpor(String sTipo,Row row,Workbook workbook) {
		
		ParametroImporConstantesFunciones.generarExcelReporteHeaderParametroImpor(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalParametroImpors(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroImpor> parametroimporsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroImpors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ParametroImpor parametroimpor : parametroimporsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ParametroImporConstantesFunciones.getParametroImporDescripcion(parametroimpor));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getcuentacontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.gettransaccionordencompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.gettransaccioningreso_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getformatoordencompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getformatoingreso_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getformatopedido_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getformatoliquidacion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getdias_llega_bodega());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getporcentaje_seguro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_FODIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_FODIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getfodin());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CORPEI))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CORPEI);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getcorpei());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametroimpor.getcon_secuencial()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_SECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_SECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametroimpor.getsecuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametroimpor.getcon_peso_precio()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CONLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametroimpor.getcon_lote()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CONUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametroimpor.getcon_unidad()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroImporConstantesFunciones.LABEL_CONCONVERSION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONCONVERSION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(parametroimpor.getcon_conversion()));


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesParametroImpors(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroImpor> parametroimporsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ParametroImpor> parametroimporsRespaldo=null;
		
		classes=ParametroImporConstantesFunciones.getClassesRelationshipsOfParametroImpor(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.parametroimporLogic.setDatosCliente(this.datosCliente);
		this.parametroimporLogic.setDatosDeep(this.datosDeep);
		this.parametroimporLogic.setIsConDeep(true);
		
		parametroimporsRespaldo=this.parametroimporLogic.getParametroImpors();
		
		this.parametroimporLogic.setParametroImpors(parametroimporsParaReportes);	
		this.parametroimporLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		parametroimporsParaReportes=this.parametroimporLogic.getParametroImpors();
		this.parametroimporLogic.setParametroImpors(parametroimporsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroImpors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroImpor("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ParametroImpor parametroimpor : parametroimporsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderParametroImpor("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ParametroImporConstantesFunciones.generarExcelReporteDataParametroImpor("NORMAL",row,workbook,parametroimpor,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ParametroImporConstantesFunciones.getParametroImporDescripcion(parametroimpor));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroImpor.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessParametroImpor() throws Exception {		
		this.startProcessParametroImpor(true);
	}
	
	public void startProcessParametroImpor(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasParametroImpor ,this.jPanelParametrosReportesParametroImpor, this.jScrollPanelDatosParametroImpor,this.jPanelPaginacionParametroImpor, this.jScrollPanelDatosEdicionParametroImpor, this.jPanelAccionesParametroImpor,this.jPanelAccionesFormularioParametroImpor,this.jmenuBarParametroImpor,this.jmenuBarDetalleParametroImpor,this.jTtoolBarParametroImpor,this.jTtoolBarDetalleParametroImpor);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroImpor=this.jTabbedPaneBusquedasParametroImpor; 
		
		final JPanel jPanelParametrosReportesParametroImpor=this.jPanelParametrosReportesParametroImpor;
		//final JScrollPane jScrollPanelDatosParametroImpor=this.jScrollPanelDatosParametroImpor;
		final JTable jTableDatosParametroImpor=this.jTableDatosParametroImpor;		
		final JPanel jPanelPaginacionParametroImpor=this.jPanelPaginacionParametroImpor;
		//final JScrollPane jScrollPanelDatosEdicionParametroImpor=this.jScrollPanelDatosEdicionParametroImpor;
		final JPanel jPanelAccionesParametroImpor=this.jPanelAccionesParametroImpor;
		
		JPanel jPanelCamposAuxiliarParametroImpor=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarParametroImpor=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			jPanelCamposAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jPanelCamposParametroImpor;
			jPanelAccionesFormularioAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jPanelAccionesFormularioParametroImpor;
		}
		
		final JPanel jPanelCamposParametroImpor=jPanelCamposAuxiliarParametroImpor;
		final JPanel jPanelAccionesFormularioParametroImpor=jPanelAccionesFormularioAuxiliarParametroImpor;
		
		
		final JMenuBar jmenuBarParametroImpor=this.jmenuBarParametroImpor;
		final JToolBar jTtoolBarParametroImpor=this.jTtoolBarParametroImpor;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarParametroImpor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroImpor=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			jmenuBarDetalleAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jmenuBarDetalleParametroImpor;
			jTtoolBarDetalleAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jTtoolBarDetalleParametroImpor;
		}
		
		final JMenuBar jmenuBarDetalleParametroImpor=jmenuBarDetalleAuxiliarParametroImpor;
		final JToolBar jTtoolBarDetalleParametroImpor=jTtoolBarDetalleAuxiliarParametroImpor;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroImpor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroImpor;
			processRunnable.jTableDatos=jTableDatosParametroImpor;
			processRunnable.jPanelCampos=jPanelCamposParametroImpor;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroImpor;
			processRunnable.jPanelAcciones=jPanelAccionesParametroImpor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroImpor;
			
			
			processRunnable.jmenuBar=jmenuBarParametroImpor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroImpor;
			processRunnable.jTtoolBar=jTtoolBarParametroImpor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroImpor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroImpor ,jPanelParametrosReportesParametroImpor,jTableDatosParametroImpor, /*jScrollPanelDatosParametroImpor,*/jPanelCamposParametroImpor,jPanelPaginacionParametroImpor, /*jScrollPanelDatosEdicionParametroImpor,*/ jPanelAccionesParametroImpor,jPanelAccionesFormularioParametroImpor,jmenuBarParametroImpor,jmenuBarDetalleParametroImpor,jTtoolBarParametroImpor,jTtoolBarDetalleParametroImpor);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroImpor ,jPanelParametrosReportesParametroImpor, jScrollPanelDatosParametroImpor,jPanelPaginacionParametroImpor, jScrollPanelDatosEdicionParametroImpor, jPanelAccionesParametroImpor,jPanelAccionesFormularioParametroImpor,jmenuBarParametroImpor,jmenuBarDetalleParametroImpor,jTtoolBarParametroImpor,jTtoolBarDetalleParametroImpor);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessParametroImpor() {// throws Exception 
		this.finishProcessParametroImpor(true);
	}
	
	public void finishProcessParametroImpor(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasParametroImpor ,this.jPanelParametrosReportesParametroImpor, this.jScrollPanelDatosParametroImpor,this.jPanelPaginacionParametroImpor, this.jScrollPanelDatosEdicionParametroImpor, this.jPanelAccionesParametroImpor,this.jPanelAccionesFormularioParametroImpor,this.jmenuBarParametroImpor,this.jmenuBarDetalleParametroImpor,this.jTtoolBarParametroImpor,this.jTtoolBarDetalleParametroImpor);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroImpor=this.jTabbedPaneBusquedasParametroImpor; 
		
		final JPanel jPanelParametrosReportesParametroImpor=this.jPanelParametrosReportesParametroImpor;
		//final JScrollPane jScrollPanelDatosParametroImpor=this.jScrollPanelDatosParametroImpor;
		final JTable jTableDatosParametroImpor=this.jTableDatosParametroImpor;		
		final JPanel jPanelPaginacionParametroImpor=this.jPanelPaginacionParametroImpor;
		//final JScrollPane jScrollPanelDatosEdicionParametroImpor=this.jScrollPanelDatosEdicionParametroImpor;
		final JPanel jPanelAccionesParametroImpor=this.jPanelAccionesParametroImpor;
		
		JPanel jPanelCamposAuxiliarParametroImpor=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarParametroImpor=new JPanel();
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			jPanelCamposAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jPanelCamposParametroImpor;
			jPanelAccionesFormularioAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jPanelAccionesFormularioParametroImpor;
		}
		
		final JPanel jPanelCamposParametroImpor=jPanelCamposAuxiliarParametroImpor;
		final JPanel jPanelAccionesFormularioParametroImpor=jPanelAccionesFormularioAuxiliarParametroImpor;
		
		
		final JMenuBar jmenuBarParametroImpor=this.jmenuBarParametroImpor;		
		final JToolBar jTtoolBarParametroImpor=this.jTtoolBarParametroImpor;
				
		JMenuBar jmenuBarDetalleAuxiliarParametroImpor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroImpor=new JToolBar();
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			jmenuBarDetalleAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jmenuBarDetalleParametroImpor;
			jTtoolBarDetalleAuxiliarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jTtoolBarDetalleParametroImpor;		
		}
		
		final JMenuBar jmenuBarDetalleParametroImpor=jmenuBarDetalleAuxiliarParametroImpor;
		final JToolBar jTtoolBarDetalleParametroImpor=jTtoolBarDetalleAuxiliarParametroImpor;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroImpor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroImpor;
			processRunnable.jTableDatos=jTableDatosParametroImpor;
			processRunnable.jPanelCampos=jPanelCamposParametroImpor;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroImpor;
			processRunnable.jPanelAcciones=jPanelAccionesParametroImpor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroImpor;
			
			
			processRunnable.jmenuBar=jmenuBarParametroImpor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroImpor;
			processRunnable.jTtoolBar=jTtoolBarParametroImpor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroImpor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasParametroImpor ,jPanelParametrosReportesParametroImpor, jTableDatosParametroImpor,/*jScrollPanelDatosParametroImpor,*/jPanelCamposParametroImpor,jPanelPaginacionParametroImpor, /*jScrollPanelDatosEdicionParametroImpor,*/ jPanelAccionesParametroImpor,jPanelAccionesFormularioParametroImpor,jmenuBarParametroImpor,jmenuBarDetalleParametroImpor,jTtoolBarParametroImpor,jTtoolBarDetalleParametroImpor));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesParametroImpor(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarParametroImpor(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuParametroImpor(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarParametroImpor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarParametroImpor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleParametroImpor,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuParametroImpor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarParametroImpor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleParametroImpor,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.parametroimporConstantesFunciones.getsFinalQueryParametroImpor();
		String  finalQueryPaginacionTodos=this.parametroimporConstantesFunciones.getsFinalQueryParametroImpor();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ParametroImporConstantesFunciones.getArrayColumnasGlobalesNoParametroImpor(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ParametroImporConstantesFunciones.getArrayColumnasGlobalesParametroImpor(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ParametroImporConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.parametroimporsEliminados= new ArrayList<ParametroImpor>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessParametroImpor();
		
				///*ParametroImporSessionBean*/this.parametroimporSessionBean=new ParametroImporSessionBean();
			
			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ParametroImporConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ParametroImporConstantesFunciones.getClassesForeignKeysOfParametroImpor(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/parametroimpor."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			parametroimporsAux= new ArrayList<ParametroImpor>();
			
				
			parametroimporLogic.setDatosCliente(this.datosCliente);
			parametroimporLogic.setDatosDeep(this.datosDeep);
			parametroimporLogic.setIsConDeep(true);
			
			
			parametroimporLogic.getParametroImporDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					parametroimporLogic.getTodosParametroImpors(finalQueryGlobal,pagination);
					
					//parametroimporLogic.getTodosParametroImporsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(parametroimporLogic.getParametroImpors()==null|| parametroimporLogic.getParametroImpors().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroimporsAux= new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux= new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroimporLogic.getTodosParametroImpors(finalQueryGlobal+"",this.pagination);												
							
							//parametroimporLogic.getTodosParametroImporsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteParametroImpors("Todos",parametroimporLogic.getParametroImpors() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());					
							parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idParametroImpor=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idParametroImpor=this.idActual;
				
				} else if(this.idParametroImporActual!=null && this.idParametroImporActual!=0L) {
					idParametroImpor=idParametroImporActual;
				}
				
					
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndicePorId(idParametroImpor);
				
				this.parametroimpors=new ArrayList<ParametroImpor>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					parametroimporLogic.getEntity(idParametroImpor);
					
					//parametroimporLogic.getEntityWithConnection(idParametroImpor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
					parametroimporLogic.getParametroImpors().add(parametroimporLogic.getParametroImpor());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpors=new ArrayList<ParametroImpor>();
					this.parametroimpors.add(parametroimpor);
				}
				
				if(parametroimporLogic.getParametroImpor()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdBodega",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdBodega",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdCentroCosto",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdCentroCosto",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContable")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdCuentaContable",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdCuentaContable",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdEmpresa",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdEmpresa",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoIngreso")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoIngreso(id_formato_ingresoFK_IdFormatoIngreso);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdFormatoIngreso(finalQueryGlobal,pagination,id_formato_ingresoFK_IdFormatoIngreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoIngreso(id_formato_ingresoFK_IdFormatoIngreso);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoIngreso(id_formato_ingresoFK_IdFormatoIngreso);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdFormatoIngreso(finalQueryGlobal,pagination,id_formato_ingresoFK_IdFormatoIngreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoIngreso(id_formato_ingresoFK_IdFormatoIngreso);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoIngreso(id_formato_ingresoFK_IdFormatoIngreso);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdFormatoIngreso",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdFormatoIngreso",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoLiquacion")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoLiquacion(id_formato_liquidacionFK_IdFormatoLiquacion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdFormatoLiquacion(finalQueryGlobal,pagination,id_formato_liquidacionFK_IdFormatoLiquacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoLiquacion(id_formato_liquidacionFK_IdFormatoLiquacion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoLiquacion(id_formato_liquidacionFK_IdFormatoLiquacion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdFormatoLiquacion(finalQueryGlobal,pagination,id_formato_liquidacionFK_IdFormatoLiquacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoLiquacion(id_formato_liquidacionFK_IdFormatoLiquacion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoLiquacion(id_formato_liquidacionFK_IdFormatoLiquacion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdFormatoLiquacion",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdFormatoLiquacion",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoOrdenCompra")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoOrdenCompra(id_formato_orden_compraFK_IdFormatoOrdenCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdFormatoOrdenCompra(finalQueryGlobal,pagination,id_formato_orden_compraFK_IdFormatoOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoOrdenCompra(id_formato_orden_compraFK_IdFormatoOrdenCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoOrdenCompra(id_formato_orden_compraFK_IdFormatoOrdenCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdFormatoOrdenCompra(finalQueryGlobal,pagination,id_formato_orden_compraFK_IdFormatoOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoOrdenCompra(id_formato_orden_compraFK_IdFormatoOrdenCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoOrdenCompra(id_formato_orden_compraFK_IdFormatoOrdenCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdFormatoOrdenCompra",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdFormatoOrdenCompra",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormatoPedo")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdFormatoPedo(finalQueryGlobal,pagination,id_formato_pedidoFK_IdFormatoPedo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdFormatoPedo(finalQueryGlobal,pagination,id_formato_pedidoFK_IdFormatoPedo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdFormatoPedo(id_formato_pedidoFK_IdFormatoPedo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdFormatoPedo",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdFormatoPedo",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdPais",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdPais",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccionIngreso")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionIngreso(id_transaccion_ingresoFK_IdTransaccionIngreso);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdTransaccionIngreso(finalQueryGlobal,pagination,id_transaccion_ingresoFK_IdTransaccionIngreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionIngreso(id_transaccion_ingresoFK_IdTransaccionIngreso);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionIngreso(id_transaccion_ingresoFK_IdTransaccionIngreso);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdTransaccionIngreso(finalQueryGlobal,pagination,id_transaccion_ingresoFK_IdTransaccionIngreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionIngreso(id_transaccion_ingresoFK_IdTransaccionIngreso);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionIngreso(id_transaccion_ingresoFK_IdTransaccionIngreso);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdTransaccionIngreso",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdTransaccionIngreso",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccionOrdenCompra")) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionOrdenCompra(id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametroimporLogic.getParametroImporsFK_IdTransaccionOrdenCompra(finalQueryGlobal,pagination,id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionOrdenCompra(id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionOrdenCompra(id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametroimporLogic.getParametroImpors()==null||parametroimporLogic.getParametroImpors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametroimpors==null|| parametroimpors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporsAux=new ArrayList<ParametroImpor>();
						parametroimporsAux.addAll(parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporsAux=new ArrayList<ParametroImpor>();
							parametroimporsAux.addAll(parametroimpors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametroimporLogic.getParametroImporsFK_IdTransaccionOrdenCompra(finalQueryGlobal,pagination,id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionOrdenCompra(id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroImporConstantesFunciones.getDetalleIndiceFK_IdTransaccionOrdenCompra(id_transaccion_orden_compraFK_IdTransaccionOrdenCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroImpors("FK_IdTransaccionOrdenCompra",parametroimporLogic.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroImpors("FK_IdTransaccionOrdenCompra",parametroimpors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporLogic.setParametroImpors(new ArrayList<ParametroImpor>());
						parametroimporLogic.getParametroImpors().addAll(parametroimporsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimpors=new ArrayList<ParametroImpor>();
							parametroimpors.addAll(parametroimporsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesParametroImpor();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessParametroImpor();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametroimporLogic.getParametroImpors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametroimpors.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametroimporLogic.getParametroImpors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametroimpors.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ParametroImpor parametroimpor) {
		Boolean permite=true;
		
		if(this.parametroimpor.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ParametroImporConstantesFunciones.getOrderByListaParametroImpor();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ParametroImporConstantesFunciones.getOrderByListaParametroImpor();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroImpor parametroimpor:parametroimporLogic.getParametroImpors()) {
				if(parametroimpor.getsType().equals(Constantes2.S_TOTALES)) {
					parametroimporTotales=parametroimpor;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroImpor parametroimpor:this.parametroimpors) {
				if(parametroimpor.getsType().equals(Constantes2.S_TOTALES)) {
					parametroimporTotales=parametroimpor;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.parametroimporAux=new ParametroImpor();
			this.parametroimporAux.setsType(Constantes2.S_TOTALES);
			this.parametroimporAux.setIsNew(false);
			this.parametroimporAux.setIsChanged(false);
			this.parametroimporAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ParametroImporConstantesFunciones.TotalizarValoresFilaParametroImpor(this.parametroimporLogic.getParametroImpors(),this.parametroimporAux);
				
				this.parametroimporLogic.getParametroImpors().add(this.parametroimporAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ParametroImporConstantesFunciones.TotalizarValoresFilaParametroImpor(this.parametroimpors,this.parametroimporAux);
				
				this.parametroimpors.add(this.parametroimporAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		parametroimporTotales=new ParametroImpor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametroimporLogic.getParametroImpors().remove(parametroimporTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametroimpors.remove(parametroimporTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		parametroimporTotales=new ParametroImpor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroImpor parametroimpor:parametroimporLogic.getParametroImpors()) {
				if(parametroimpor.getsType().equals(Constantes2.S_TOTALES)) {
					parametroimporTotales=parametroimpor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroImporConstantesFunciones.TotalizarValoresFilaParametroImpor(this.parametroimporLogic.getParametroImpors(),parametroimporTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroImpor parametroimpor:this.parametroimpors) {
				if(parametroimpor.getsType().equals(Constantes2.S_TOTALES)) {
					parametroimporTotales=parametroimpor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroImporConstantesFunciones.TotalizarValoresFilaParametroImpor(this.parametroimpors,parametroimporTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getParametroImporsFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdCuentaContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdFormatoIngreso()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoIngreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdFormatoLiquacion()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoLiquacion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdFormatoOrdenCompra()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoOrdenCompra";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdFormatoPedo()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoPedo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdTransaccionIngreso()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccionIngreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroImporsFK_IdTransaccionOrdenCompra()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccionOrdenCompra";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getParametroImporsFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdCuentaContable(String sFinalQuery,Long id_cuenta_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdCuentaContable(sFinalQuery,this.pagination,id_cuenta_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdFormatoIngreso(String sFinalQuery,Long id_formato_ingreso)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdFormatoIngreso(sFinalQuery,this.pagination,id_formato_ingreso);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdFormatoLiquacion(String sFinalQuery,Long id_formato_liquidacion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdFormatoLiquacion(sFinalQuery,this.pagination,id_formato_liquidacion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdFormatoOrdenCompra(String sFinalQuery,Long id_formato_orden_compra)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdFormatoOrdenCompra(sFinalQuery,this.pagination,id_formato_orden_compra);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdFormatoPedo(String sFinalQuery,Long id_formato_pedido)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdFormatoPedo(sFinalQuery,this.pagination,id_formato_pedido);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdTransaccionIngreso(String sFinalQuery,Long id_transaccion_ingreso)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdTransaccionIngreso(sFinalQuery,this.pagination,id_transaccion_ingreso);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroImporsFK_IdTransaccionOrdenCompra(String sFinalQuery,Long id_transaccion_orden_compra)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLogic.getParametroImporsFK_IdTransaccionOrdenCompra(sFinalQuery,this.pagination,id_transaccion_orden_compra);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosParametroImpor() {
		this.isPermisoTodoParametroImpor=false;
		this.isPermisoNuevoParametroImpor=false;
		this.isPermisoActualizarParametroImpor=false;
		this.isPermisoActualizarOriginalParametroImpor=false;
		this.isPermisoEliminarParametroImpor=false;
		this.isPermisoGuardarCambiosParametroImpor=false;
		this.isPermisoConsultaParametroImpor=false;
		this.isPermisoBusquedaParametroImpor=false;
		this.isPermisoReporteParametroImpor=false;		
		this.isPermisoOrdenParametroImpor=false;		
		this.isPermisoPaginacionMedioParametroImpor=false;		
		this.isPermisoPaginacionAltoParametroImpor=false;
		this.isPermisoPaginacionTodoParametroImpor=false;
		this.isPermisoCopiarParametroImpor=false;		
		this.isPermisoVerFormParametroImpor=false;		
		this.isPermisoDuplicarParametroImpor=false;		
		this.isPermisoOrdenParametroImpor=false;		
	}
	
	public void setPermisosUsuarioParametroImpor(Boolean isPermiso) {
		this.isPermisoTodoParametroImpor=isPermiso;
		this.isPermisoNuevoParametroImpor=isPermiso;
		this.isPermisoActualizarParametroImpor=isPermiso;
		this.isPermisoActualizarOriginalParametroImpor=isPermiso;
		this.isPermisoEliminarParametroImpor=isPermiso;
		this.isPermisoGuardarCambiosParametroImpor=isPermiso;
		this.isPermisoConsultaParametroImpor=isPermiso;
		this.isPermisoBusquedaParametroImpor=isPermiso;
		this.isPermisoReporteParametroImpor=isPermiso;
		this.isPermisoOrdenParametroImpor=isPermiso;		
		this.isPermisoPaginacionMedioParametroImpor=isPermiso;		
		this.isPermisoPaginacionAltoParametroImpor=isPermiso;		
		this.isPermisoPaginacionTodoParametroImpor=isPermiso;		
		this.isPermisoCopiarParametroImpor=isPermiso;		
		this.isPermisoVerFormParametroImpor=isPermiso;		
		this.isPermisoDuplicarParametroImpor=isPermiso;
		this.isPermisoOrdenParametroImpor=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioParametroImpor(Boolean isPermiso) {
		//this.isPermisoTodoParametroImpor=isPermiso;
		this.isPermisoNuevoParametroImpor=isPermiso;
		this.isPermisoActualizarParametroImpor=isPermiso;
		this.isPermisoActualizarOriginalParametroImpor=isPermiso;
		this.isPermisoEliminarParametroImpor=isPermiso;
		this.isPermisoGuardarCambiosParametroImpor=isPermiso;
		//this.isPermisoConsultaParametroImpor=isPermiso;
		//this.isPermisoBusquedaParametroImpor=isPermiso;
		//this.isPermisoReporteParametroImpor=isPermiso;
		//this.isPermisoOrdenParametroImpor=isPermiso;		
		//this.isPermisoPaginacionMedioParametroImpor=isPermiso;		
		//this.isPermisoPaginacionAltoParametroImpor=isPermiso;		
		//this.isPermisoPaginacionTodoParametroImpor=isPermiso;		
		//this.isPermisoCopiarParametroImpor=isPermiso;		
		//this.isPermisoDuplicarParametroImpor=isPermiso;
		//this.isPermisoOrdenParametroImpor=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioParametroImporClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ParametroImporJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebParametroImpor(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioParametroImporClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioParametroImporClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionParametroImporClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioParametroImporClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioParametroImpor() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ParametroImporJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ParametroImporConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoParametroImpor=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarParametroImpor=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalParametroImpor=this.isPermisoActualizarParametroImpor;
			this.isPermisoEliminarParametroImpor=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosParametroImpor=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaParametroImpor=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaParametroImpor=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoParametroImpor=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteParametroImpor=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroImpor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioParametroImpor=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoParametroImpor=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoParametroImpor=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarParametroImpor=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormParametroImpor=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarParametroImpor=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroImpor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosParametroImpor.setToolTipText(this.jTableDatosParametroImpor.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioParametroImpor(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioParametroImpor(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ParametroImporJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ParametroImporJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioParametroImpor() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyParametroImporListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
				this.transaccionordencomprasForeignKey=new ArrayList();
				this.transaccioningresosForeignKey=new ArrayList();
				this.formatoordencomprasForeignKey=new ArrayList();
				this.formatoingresosForeignKey=new ArrayList();
				this.formatopedidosForeignKey=new ArrayList();
				this.formatoliquidacionsForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyParametroImporListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ParametroImporJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyParametroImporListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoLiquidacionListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionOrdenCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionordencomprasForeignKey==null||this.transaccionordencomprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionOrdenComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionIngresoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccioningresosForeignKey==null||this.transaccioningresosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionIngresosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoOrdenCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoordencomprasForeignKey==null||this.formatoordencomprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoOrdenComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoIngresoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoingresosForeignKey==null||this.formatoingresosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoIngresosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoPedidoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatopedidosForeignKey==null||this.formatopedidosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoPedidosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoLiquidacionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoliquidacionsForeignKey==null||this.formatoliquidacionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoLiquidacionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyParametroImporListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ParametroImporParameterReturnGeneral parametroimporReturnGeneral=new ParametroImporParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_empresaParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_empresaParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_paisParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_paisParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_bodegaParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_bodegaParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_centro_costoParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_centro_costoParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_cuenta_contableParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_cuenta_contableParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}


				String finalQueryGlobalTransaccionOrdenCompra="";

				if(((this.transaccionordencomprasForeignKey==null||this.transaccionordencomprasForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_transaccion_orden_compraParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_transaccion_orden_compraParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionOrdenCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

						finalQueryGlobalTransaccionOrdenCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccionOrdenCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccionOrdenCompra, "");
						finalQueryGlobalTransaccionOrdenCompra+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionOrdenComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccionOrdenCompra=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidTransaccionOrdenCompraActual();
					}
				} else {
					finalQueryGlobalTransaccionOrdenCompra="NONE";
				}


				String finalQueryGlobalTransaccionIngreso="";

				if(((this.transaccioningresosForeignKey==null||this.transaccioningresosForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_transaccion_ingresoParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_transaccion_ingresoParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionIngreso()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_INVENTARIO);

						finalQueryGlobalTransaccionIngreso=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccionIngreso=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccionIngreso, "");
						finalQueryGlobalTransaccionIngreso+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionIngresosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccionIngreso=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidTransaccionIngresoActual();
					}
				} else {
					finalQueryGlobalTransaccionIngreso="NONE";
				}


				String finalQueryGlobalFormatoOrdenCompra="";

				if(((this.formatoordencomprasForeignKey==null||this.formatoordencomprasForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_formato_orden_compraParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_formato_orden_compraParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoOrdenCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoOrdenCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoOrdenCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoOrdenCompra, "");
						finalQueryGlobalFormatoOrdenCompra+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoOrdenComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoOrdenCompra=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidFormatoOrdenCompraActual();
					}
				} else {
					finalQueryGlobalFormatoOrdenCompra="NONE";
				}


				String finalQueryGlobalFormatoIngreso="";

				if(((this.formatoingresosForeignKey==null||this.formatoingresosForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_formato_ingresoParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_formato_ingresoParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoIngreso=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoIngreso=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoIngreso, "");
						finalQueryGlobalFormatoIngreso+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoIngresosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoIngreso=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidFormatoIngresoActual();
					}
				} else {
					finalQueryGlobalFormatoIngreso="NONE";
				}


				String finalQueryGlobalFormatoPedido="";

				if(((this.formatopedidosForeignKey==null||this.formatopedidosForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_formato_pedidoParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_formato_pedidoParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoPedido=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoPedido=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoPedido, "");
						finalQueryGlobalFormatoPedido+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoPedidosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoPedido=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidFormatoPedidoActual();
					}
				} else {
					finalQueryGlobalFormatoPedido="NONE";
				}


				String finalQueryGlobalFormatoLiquidacion="";

				if(((this.formatoliquidacionsForeignKey==null||this.formatoliquidacionsForeignKey.size()<=0) && this.parametroimporConstantesFunciones.cargarid_formato_liquidacionParametroImpor)
					 || (this.esRecargarFks && this.parametroimporConstantesFunciones.cargarid_formato_liquidacionParametroImpor)) {

					if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoLiquidacion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoLiquidacion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoLiquidacion=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoLiquidacion, "");
						finalQueryGlobalFormatoLiquidacion+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoLiquidacionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoLiquidacion=" WHERE " + ConstantesSql.ID + "="+parametroimporSessionBean.getlidFormatoLiquidacionActual();
					}
				} else {
					finalQueryGlobalFormatoLiquidacion="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				parametroimporReturnGeneral=parametroimporLogic.cargarCombosLoteForeignKeyParametroImpor(finalQueryGlobalEmpresa,finalQueryGlobalPais,finalQueryGlobalBodega,finalQueryGlobalCentroCosto,finalQueryGlobalCuentaContable,finalQueryGlobalTransaccionOrdenCompra,finalQueryGlobalTransaccionIngreso,finalQueryGlobalFormatoOrdenCompra,finalQueryGlobalFormatoIngreso,finalQueryGlobalFormatoPedido,finalQueryGlobalFormatoLiquidacion);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=parametroimporReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=parametroimporReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=parametroimporReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=parametroimporReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=parametroimporReturnGeneral.getcuentacontablesForeignKey();
			}

			if(!finalQueryGlobalTransaccionOrdenCompra.equals("NONE")) {
				this.transaccionordencomprasForeignKey=parametroimporReturnGeneral.gettransaccionordencomprasForeignKey();
			}

			if(!finalQueryGlobalTransaccionIngreso.equals("NONE")) {
				this.transaccioningresosForeignKey=parametroimporReturnGeneral.gettransaccioningresosForeignKey();
			}

			if(!finalQueryGlobalFormatoOrdenCompra.equals("NONE")) {
				this.formatoordencomprasForeignKey=parametroimporReturnGeneral.getformatoordencomprasForeignKey();
			}

			if(!finalQueryGlobalFormatoIngreso.equals("NONE")) {
				this.formatoingresosForeignKey=parametroimporReturnGeneral.getformatoingresosForeignKey();
			}

			if(!finalQueryGlobalFormatoPedido.equals("NONE")) {
				this.formatopedidosForeignKey=parametroimporReturnGeneral.getformatopedidosForeignKey();
			}

			if(!finalQueryGlobalFormatoLiquidacion.equals("NONE")) {
				this.formatoliquidacionsForeignKey=parametroimporReturnGeneral.getformatoliquidacionsForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyParametroImpor()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCuentaContable();
			this.addItemDefectoCombosForeignKeyTransaccionOrdenCompra();
			this.addItemDefectoCombosForeignKeyTransaccionIngreso();
			this.addItemDefectoCombosForeignKeyFormatoOrdenCompra();
			this.addItemDefectoCombosForeignKeyFormatoIngreso();
			this.addItemDefectoCombosForeignKeyFormatoPedido();
			this.addItemDefectoCombosForeignKeyFormatoLiquidacion();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.parametroimporSessionBean==null) {
				this.parametroimporSessionBean=new ParametroImporSessionBean();
			}

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccionOrdenCompra()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionOrdenCompra()) {
				Transaccion transaccionordencompra=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccionordencompra,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccionordencompra.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionordencomprasForeignKey,transaccionordencompra,true)) {

					this.transaccionordencomprasForeignKey.add(0,transaccionordencompra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccionIngreso()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionIngreso()) {
				Transaccion transaccioningreso=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccioningreso,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccioningreso.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccioningresosForeignKey,transaccioningreso,true)) {

					this.transaccioningresosForeignKey.add(0,transaccioningreso);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoOrdenCompra()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoOrdenCompra()) {
				Formato formatoordencompra=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoordencompra,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoordencompra.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoordencomprasForeignKey,formatoordencompra,true)) {

					this.formatoordencomprasForeignKey.add(0,formatoordencompra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoIngreso()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {
				Formato formatoingreso=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoingreso,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoingreso.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoingresosForeignKey,formatoingreso,true)) {

					this.formatoingresosForeignKey.add(0,formatoingreso);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoPedido()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoPedido()) {
				Formato formatopedido=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatopedido,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatopedido.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatopedidosForeignKey,formatopedido,true)) {

					this.formatopedidosForeignKey.add(0,formatopedido);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoLiquidacion()throws Exception {
		try {

			if(!this.parametroimporSessionBean.getisBusquedaDesdeForeignKeySesionFormatoLiquidacion()) {
				Formato formatoliquidacion=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoliquidacion,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoliquidacion.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoliquidacionsForeignKey,formatoliquidacion,true)) {

					this.formatoliquidacionsForeignKey.add(0,formatoliquidacion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyParametroImpor()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyParametroImpor(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyParametroImpor()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroImpor();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyParametroImpor(ParametroImpor parametroimpor)throws Exception {	
		try {
			
			this.setActualPaisForeignKey(parametroimpor.getid_pais(),false,"Formulario");
			this.setActualBodegaForeignKey(parametroimpor.getid_bodega(),false,"Formulario");
			this.setActualCentroCostoForeignKey(parametroimpor.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableForeignKey(parametroimpor.getid_cuenta_contable(),false,"Formulario");
			this.setActualTransaccionOrdenCompraForeignKey(parametroimpor.getid_transaccion_orden_compra(),false,"Formulario");
			this.setActualTransaccionIngresoForeignKey(parametroimpor.getid_transaccion_ingreso(),false,"Formulario");
			this.setActualFormatoOrdenCompraForeignKey(parametroimpor.getid_formato_orden_compra(),false,"Formulario");
			this.setActualFormatoIngresoForeignKey(parametroimpor.getid_formato_ingreso(),false,"Formulario");
			this.setActualFormatoPedidoForeignKey(parametroimpor.getid_formato_pedido(),false,"Formulario");
			this.setActualFormatoLiquidacionForeignKey(parametroimpor.getid_formato_liquidacion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyParametroImpor(ParametroImpor parametroimpor,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyParametroImpor()throws Exception {	
		try {
			
			this.setActualPaisForeignKey(this.parametroimporConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualBodegaForeignKey(this.parametroimporConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.parametroimporConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.parametroimporConstantesFunciones.getid_cuenta_contable(),false,"Formulario");
			this.setActualTransaccionOrdenCompraForeignKey(this.parametroimporConstantesFunciones.getid_transaccion_orden_compra(),false,"Formulario");
			this.setActualTransaccionIngresoForeignKey(this.parametroimporConstantesFunciones.getid_transaccion_ingreso(),false,"Formulario");
			this.setActualFormatoOrdenCompraForeignKey(this.parametroimporConstantesFunciones.getid_formato_orden_compra(),false,"Formulario");
			this.setActualFormatoIngresoForeignKey(this.parametroimporConstantesFunciones.getid_formato_ingreso(),false,"Formulario");
			this.setActualFormatoPedidoForeignKey(this.parametroimporConstantesFunciones.getid_formato_pedido(),false,"Formulario");
			this.setActualFormatoLiquidacionForeignKey(this.parametroimporConstantesFunciones.getid_formato_liquidacion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyParametroImpor()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyParametroImpor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyParametroImpor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroParametroImpor()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyParametroImpor()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");
			this.cargarCombosFrameTransaccionOrdenComprasForeignKey("Todos");
			this.cargarCombosFrameTransaccionIngresosForeignKey("Todos");
			this.cargarCombosFrameFormatoOrdenComprasForeignKey("Todos");
			this.cargarCombosFrameFormatoIngresosForeignKey("Todos");
			this.cargarCombosFrameFormatoPedidosForeignKey("Todos");
			this.cargarCombosFrameFormatoLiquidacionsForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyParametroImpor(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionOrdenComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionIngresosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoOrdenComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoIngresosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoPedidosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoLiquidacionsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyParametroImpor()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	






















	
	

	public ParametroImporBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ParametroImporBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ParametroImporBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.parametroimporSessionBean=new ParametroImporSessionBean(); 
		this.parametroimporConstantesFunciones=new ParametroImporConstantesFunciones(); 
		this.parametroimporBean=new ParametroImpor();//(this.parametroimporConstantesFunciones); 		
		this.parametroimporReturnGeneral=new ParametroImporParameterReturnGeneral(); 
		
		this.parametroimporSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.parametroimporSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ParametroImporBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ParametroImporBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ParametroImporBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessParametroImpor(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.parametroimporConstantesFunciones=new ParametroImporConstantesFunciones(); 
			this.parametroimporBean=new ParametroImpor();//this.parametroimporConstantesFunciones); 			
			this.parametroimporReturnGeneral=new ParametroImporParameterReturnGeneral(); 
		
			ParametroImporBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Parametro Impor Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.parametroimpor=new ParametroImpor();
			this.parametroimpors = new ArrayList<ParametroImpor>();
			this.parametroimporsAux = new ArrayList<ParametroImpor>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic=new ParametroImporLogic();
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			//this.parametroimporSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.parametroimporSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormParametroImpor);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroImpor);	
					}
					
					if(this.jInternalFrameImportacionParametroImpor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroImpor);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByParametroImpor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByParametroImpor);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormParametroImpor!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroImpor);
				this.jInternalFrameDetalleFormParametroImpor.setVisible(false);
				this.jInternalFrameDetalleFormParametroImpor.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroImpor);
					this.jInternalFrameReporteDinamicoParametroImpor.setVisible(false);
					this.jInternalFrameReporteDinamicoParametroImpor.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionParametroImpor!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionParametroImpor);
					this.jInternalFrameImportacionParametroImpor.setVisible(false);
					this.jInternalFrameImportacionParametroImpor.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByParametroImpor!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByParametroImpor);
					this.jInternalFrameOrderByParametroImpor.setVisible(false);
					this.jInternalFrameOrderByParametroImpor.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idParametroImporActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ParametroImporConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.parametroimporReturnGeneral=new ParametroImporParameterReturnGeneral();
			
			this.parametroimporParameterGeneral=new ParametroImporParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.parametroimporLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ParametroImporJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroImporConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametroimporSessionBean.getEsGuardarRelacionado(),this.parametroimporSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroImporConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametroimporSessionBean.getEsGuardarRelacionado(),this.parametroimporSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaDuplicarParametroImpor=true;
			this.isVisibilidadCeldaCopiarParametroImpor=true;
			this.isVisibilidadCeldaVerFormParametroImpor=true;
			this.isVisibilidadCeldaOrdenParametroImpor=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=false;
			this.isVisibilidadCeldaGuardarParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			
			
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFormatoIngreso=true;
			this.isVisibilidadFK_IdFormatoLiquacion=true;
			this.isVisibilidadFK_IdFormatoOrdenCompra=true;
			this.isVisibilidadFK_IdFormatoPedo=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdTransaccionIngreso=true;
			this.isVisibilidadFK_IdTransaccionOrdenCompra=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosParametroImpor();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioParametroImpor(false);
			
			this.setPermisosUsuarioParametroImpor();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroimporSessionBean.getEsGuardarRelacionado() 
				|| (this.parametroimporSessionBean.getEsGuardarRelacionado() && this.parametroimporSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioParametroImporClasesRelacionadas();
			}
			
			if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioParametroImporClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosParametroImpor();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualParametroImpor();
			}
			
			if(!this.isPermisoBusquedaParametroImpor) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasParametroImpor.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioParametroImpor,this.isPermisoPaginacionMedioParametroImpor,this.isPermisoPaginacionTodoParametroImpor);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ParametroImporConstantesFunciones.getTiposSeleccionarParametroImpor());
				
				this.tiposColumnasSelect=ParametroImporConstantesFunciones.getTiposSeleccionarParametroImpor(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioParametroImpor();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioParametroImpor(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioParametroImpor(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroImpor() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.paisLogic=new PaisLogic();
			this.bodegaLogic=new BodegaLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.cuentacontableLogic=new CuentaContableLogic();
			this.transaccionordencompraLogic=new TransaccionLogic();
			this.transaccioningresoLogic=new TransaccionLogic();
			this.formatoordencompraLogic=new FormatoLogic();
			this.formatoingresoLogic=new FormatoLogic();
			this.formatopedidoLogic=new FormatoLogic();
			this.formatoliquidacionLogic=new FormatoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				parametroimporImplementable= (ParametroImporImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroImporConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				parametroimporImplementableHome= (ParametroImporImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroImporConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.parametroimpors= new ArrayList<ParametroImpor>();
			this.parametroimporsEliminados= new ArrayList<ParametroImpor>();
						
			this.isEsNuevoParametroImpor=false;
			this.esParaAccionDesdeFormularioParametroImpor=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			this.transaccionordencomprasForeignKey=new ArrayList<Transaccion>() ;
			this.transaccioningresosForeignKey=new ArrayList<Transaccion>() ;
			this.formatoordencomprasForeignKey=new ArrayList<Formato>() ;
			this.formatoingresosForeignKey=new ArrayList<Formato>() ;
			this.formatopedidosForeignKey=new ArrayList<Formato>() ;
			this.formatoliquidacionsForeignKey=new ArrayList<Formato>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyParametroImpor(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroParametroImpor();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ParametroImporBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ParametroImporConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesParametroImpor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingParametroImpor(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioParametroImpor();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioParametroImpor();
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasParametroImpor.getTabCount(); i++) {
					this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessParametroImpor(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ParametroImpor: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectParametroImpor() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesParametroImpor")) {
				iIndex=this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessParametroImpor();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyParametroImpor(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyParametroImpor(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyParametroImpor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyParametroImporListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyParametroImpor();
		
		this.cargarCombosFrameForeignKeyParametroImpor();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyParametroImpor();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyParametroImpor();
		}
	}
	
	

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionOrdenCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccionOrdenCompra();
				this.cargarCombosFrameTransaccionOrdenComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccionOrdenCompra(this.transaccionordencomprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionIngreso(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccionIngreso();
				this.cargarCombosFrameTransaccionIngresosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccionIngreso(this.transaccioningresosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoOrdenCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoOrdenCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoOrdenCompra();
				this.cargarCombosFrameFormatoOrdenComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoOrdenCompra(this.formatoordencomprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoIngreso(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoIngreso();
				this.cargarCombosFrameFormatoIngresosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoIngreso(this.formatoingresosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoPedido(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoPedidoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoPedido();
				this.cargarCombosFrameFormatoPedidosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoPedido(this.formatopedidosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoLiquidacion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoLiquidacionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoLiquidacion();
				this.cargarCombosFrameFormatoLiquidacionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoLiquidacion(this.formatoliquidacionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoParametroImporActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			
			if(jTableDatosParametroImpor.getRowCount()>=1) {
				jTableDatosParametroImpor.removeRowSelectionInterval(0, jTableDatosParametroImpor.getRowCount()-1);						
			}
			
			this.isEsNuevoParametroImpor=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoParametroImpor(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesParametroImpor(true);			
			//this.parametroimpor=new ParametroImpor();
			//this.parametroimpor.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroImpor(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroImpor() ;
			
			if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroImpor(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.parametroimpor);	
			this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);				
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ParametroImpor: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarParametroImporActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosParametroImpor.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosParametroImpor.getSelectedRows().length;			
			}
			
			parametroimporsSeleccionados=this.getParametroImporsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoParametroImpor--;			
				//ParametroImpor parametroimporAux= new ParametroImpor();			
				//parametroimporAux.setId(this.iIdNuevoParametroImpor);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ParametroImpor parametroimporOrigen=new ParametroImpor();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ParametroImpor parametroimporOrigen : parametroimporsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							parametroimporOrigen =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametroimporOrigen =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaParametroImpor();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.parametroimpor.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosParametroImpor(parametroimporOrigen,this.parametroimpor,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametroimporLogic.getParametroImpors().add(this.parametroimporAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametroimpors.add(this.parametroimporAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaParametroImpor(false);
				
				this.jTableDatosParametroImpor.setRowSelectionInterval(this.getIndiceNuevoParametroImpor(), this.getIndiceNuevoParametroImpor());
				
				int iLastRow =  this.jTableDatosParametroImpor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroImpor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroImpor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroImpor(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();									
		
			ParametroImpor parametroimporOrigen=new ParametroImpor();
			ParametroImpor parametroimporDestino=new ParametroImpor();
				
			parametroimporsSeleccionados=this.getParametroImporsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosParametroImpor.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || parametroimporsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosParametroImpor.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporOrigen =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametroimporOrigen =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametroimporDestino =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametroimporDestino =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				parametroimporOrigen =parametroimporsSeleccionados.get(0);
				parametroimporDestino =parametroimporsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosParametroImpor(parametroimporOrigen,parametroimporDestino,true,false);
				
				parametroimporDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametroimporDestino,parametroimporLogic.getParametroImpors());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametroimporDestino,parametroimpors);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaParametroImpor(false);
				
				//this.jTableDatosParametroImpor.setRowSelectionInterval(this.getIndiceNuevoParametroImpor(), this.getIndiceNuevoParametroImpor());
				
				int iLastRow =  this.jTableDatosParametroImpor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroImpor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroImpor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroImpor(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormParametroImpor.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesParametroImpor.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasParametroImpor.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesParametroImpor.setVisible(!isVisible);
			this.jPanelPaginacionParametroImpor.setVisible(!isVisible);
			this.jPanelAccionesParametroImpor.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameParametroImpor();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoParametroImpor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionParametroImpor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByParametroImpor();
			
			this.abrirFrameOrderByParametroImpor();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByParametroImpor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleParametroImpor(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroImpor);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormParametroImpor.isMaximum()) {
					this.jInternalFrameDetalleFormParametroImpor.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormParametroImpor.setSize(this.jInternalFrameDetalleFormParametroImpor.iWidthFormulario,this.jInternalFrameDetalleFormParametroImpor.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormParametroImpor.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormParametroImpor.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormParametroImpor.isMaximum()) {
						this.jInternalFrameDetalleFormParametroImpor.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormParametroImpor.jContentPaneDetalleParametroImpor.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormParametroImpor.jContentPaneDetalleParametroImpor.getWidth(),ParametroImporConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormParametroImpor.jContentPaneDetalleParametroImpor.getWidth(),ParametroImporConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormParametroImpor.jContentPaneDetalleParametroImpor.getWidth(),ParametroImporConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormParametroImpor.setVisible(true);
	        this.jInternalFrameDetalleFormParametroImpor.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByParametroImpor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByParametroImpor==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByParametroImpor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroImpor,false,this);
				} else {
					this.jInternalFrameOrderByParametroImpor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroImpor,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByParametroImpor);
				this.jInternalFrameOrderByParametroImpor.setVisible(false);
				this.jInternalFrameOrderByParametroImpor.setSelected(false);
				
				this.jInternalFrameOrderByParametroImpor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroImpor"));
				
				this.inicializarActualizarBindingTablaOrderByParametroImpor();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionParametroImpor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionParametroImpor==null) {
				
				this.jInternalFrameImportacionParametroImpor=new ImportacionJInternalFrame(ParametroImporConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroImpor);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionParametroImpor);
				this.jInternalFrameImportacionParametroImpor.setVisible(false);
				this.jInternalFrameImportacionParametroImpor.setSelected(false);


				this.jInternalFrameImportacionParametroImpor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroImpor"));
				this.jInternalFrameImportacionParametroImpor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroImpor"));
				this.jInternalFrameImportacionParametroImpor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroImpor"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoParametroImpor() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoParametroImpor==null) {
				this.jInternalFrameReporteDinamicoParametroImpor=new ReporteDinamicoJInternalFrame(ParametroImporConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroImpor);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroImpor);
				this.jInternalFrameReporteDinamicoParametroImpor.setVisible(false);
				this.jInternalFrameReporteDinamicoParametroImpor.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroImpor"));
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroImpor"));
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroImpor"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroImpor();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleParametroImpor() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroImpor);
			
	       	this.jInternalFrameDetalleFormParametroImpor.setVisible(false);
	        this.jInternalFrameDetalleFormParametroImpor.setSelected(false);
			
			//this.jInternalFrameDetalleFormParametroImpor.dispose();
			//this.jInternalFrameDetalleFormParametroImpor=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoParametroImpor() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoParametroImpor.setVisible(true);
	        this.jInternalFrameReporteDinamicoParametroImpor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionParametroImpor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionParametroImpor.setVisible(true);
	        this.jInternalFrameImportacionParametroImpor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByParametroImpor() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByParametroImpor.setVisible(true);
	        this.jInternalFrameOrderByParametroImpor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByParametroImpor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByParametroImpor.setVisible(false);
	        this.jInternalFrameOrderByParametroImpor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoParametroImpor() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoParametroImpor.setVisible(false);
	        this.jInternalFrameReporteDinamicoParametroImpor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionParametroImpor() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionParametroImpor.setVisible(false);
	        this.jInternalFrameImportacionParametroImpor.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderParametroImpor.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
						TitledBorder titledBorderCuentaContable=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContable.setTitle(titledBorderParametroImpor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContable(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarParametroImpor(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarParametroImpor(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesParametroImpor(true);
			//this.isEsNuevoParametroImpor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesParametroImpor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroImpor(false) ;
			
			if(parametroimporSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroImpor(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroImpor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaParametroImporActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarParametroImpor(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesParametroImpor(true);
			//this.isEsNuevoParametroImpor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.parametroimpor.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesParametroImpor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesParametroImpor(false) ;
			
			if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroImpor(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroImpor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccionOrdenCompra(List<Transaccion> transaccionordencomprasForeignKey)throws Exception{
		TableColumn tableColumnTransaccionOrdenCompra=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA));
		TableCellEditor tableCellEditorTransaccionOrdenCompra =tableColumnTransaccionOrdenCompra.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccionOrdenCompra;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionordencomprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionordencomprasForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccionIngreso(List<Transaccion> transaccioningresosForeignKey)throws Exception{
		TableColumn tableColumnTransaccionIngreso=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO));
		TableCellEditor tableCellEditorTransaccionIngreso =tableColumnTransaccionIngreso.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccionIngreso;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccioningresosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccioningresosForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoOrdenCompra(List<Formato> formatoordencomprasForeignKey)throws Exception{
		TableColumn tableColumnFormatoOrdenCompra=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA));
		TableCellEditor tableCellEditorFormatoOrdenCompra =tableColumnFormatoOrdenCompra.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoOrdenCompra;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoordencomprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoordencomprasForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoIngreso(List<Formato> formatoingresosForeignKey)throws Exception{
		TableColumn tableColumnFormatoIngreso=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO));
		TableCellEditor tableCellEditorFormatoIngreso =tableColumnFormatoIngreso.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoIngreso;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoingresosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoingresosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoPedido(List<Formato> formatopedidosForeignKey)throws Exception{
		TableColumn tableColumnFormatoPedido=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO));
		TableCellEditor tableCellEditorFormatoPedido =tableColumnFormatoPedido.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoPedido;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatopedidosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatopedidosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoLiquidacion(List<Formato> formatoliquidacionsForeignKey)throws Exception{
		TableColumn tableColumnFormatoLiquidacion=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION));
		TableCellEditor tableCellEditorFormatoLiquidacion =tableColumnFormatoLiquidacion.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoLiquidacion;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoliquidacionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoliquidacionsForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesParametroImpor(false);
			
			//if(!this.isEsNuevoParametroImpor) {								
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				
			}
			
			if(this.permiteMantenimiento(this.parametroimpor)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoParametroImpor=true;
					this.inicializarActualizarBindingTablaParametroImpor(false);
					this.isEsNuevoParametroImpor=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoParametroImpor=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoParametroImpor=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroImpor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroImpor(false);
				
				this.habilitarDeshabilitarControlesParametroImpor(false);
			
												
				
				if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleParametroImpor();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoParametroImporActionPerformed(evt,parametroimporSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualParametroImpor(this.parametroimpor,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,parametroimporSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.parametroimpor.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarParametroImporActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				this.parametroimpor.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				this.parametroimpor.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.parametroimpor)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ParametroImporModel) this.jTableDatosParametroImpor.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoParametroImpor=true;
				this.inicializarActualizarBindingTablaParametroImpor(false);
				this.isEsNuevoParametroImpor=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroImpor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroImpor(false);
				
				this.habilitarDeshabilitarControlesParametroImpor(false);
				
				
				
				if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleParametroImpor();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarParametroImporActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosParametroImpor.getRowCount()>=1) {
				jTableDatosParametroImpor.removeRowSelectionInterval(0, jTableDatosParametroImpor.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesParametroImpor(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaParametroImpor(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroImpor(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroImpor(false) ;
			
			this.isEsNuevoParametroImpor=false;
			
			if(ParametroImporJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleParametroImpor();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingParametroImpor(false);
				
				//SI ES MANUAL
				if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualParametroImpor();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoParametroImpor--;			
			//ParametroImpor parametroimporAux= new ParametroImpor();			
			//parametroimporAux.setId(this.iIdNuevoParametroImpor);
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaParametroImpor();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
			
			this.parametroimpor.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.parametroimporLogic.getParametroImpors().add(this.parametroimporAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.parametroimpors.add(this.parametroimporAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaParametroImpor(false);
			
			this.jTableDatosParametroImpor.setRowSelectionInterval(this.getIndiceNuevoParametroImpor(), this.getIndiceNuevoParametroImpor());
			
			int iLastRow =  this.jTableDatosParametroImpor.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosParametroImpor.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosParametroImpor.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaParametroImpor(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametroImpor(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroImpor(false);
			
			//SI ES MANUAL
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroImpor();
			}
			
			//this.abrirFrameTreeParametroImpor();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionParametroImporActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Parametro ImporES ?", "MANTENIMIENTO DE Parametro Impor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionParametroImpor.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralParametroImpor();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.parametroimporReturnGeneral=parametroimporLogic.procesarImportacionParametroImporsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.parametroimporParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarParametroImporReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionParametroImporActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionParametroImpor.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionParametroImpor.setFileImportacion(this.jInternalFrameImportacionParametroImpor.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionParametroImpor.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionParametroImpor.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionParametroImpor.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionParametroImpor.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		

		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ParametroImporBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ParametroImporBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroImporConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TransaccionOrdenCompra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TransaccionOrdenCompra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TransaccionOrdenCompra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TransaccionOrdenCompra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TransaccionIngreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TransaccionIngreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TransaccionIngreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TransaccionIngreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoOrdenCompra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoOrdenCompra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoOrdenCompra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoOrdenCompra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoIngreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoIngreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoIngreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoIngreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoLiquidacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoLiquidacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoLiquidacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoLiquidacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_asLlegaBodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_asLlegaBodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_asLlegaBodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_asLlegaBodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeSeguro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeSeguro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeSeguro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeSeguro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_FODIN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_din_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_din_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_din_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_din_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CORPEI:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rpei_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rpei_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rpei_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rpei_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nSecuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nSecuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nSecuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nSecuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_SECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPesoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPesoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPesoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPesoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CONLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CONUNIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nUnidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nUnidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nUnidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nUnidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroImporConstantesFunciones.LABEL_CONCONVERSION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nConversion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nConversion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nConversion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nConversion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoParametroImpor.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ParametroImporConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA:
					sNombreCampoCategoria="id_transaccion_orden_compra";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO:
					sNombreCampoCategoria="id_transaccion_ingreso";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA:
					sNombreCampoCategoria="id_formato_orden_compra";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO:
					sNombreCampoCategoria="id_formato_ingreso";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					sNombreCampoCategoria="id_formato_pedido";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION:
					sNombreCampoCategoria="id_formato_liquidacion";
					break;

				case ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA:
					sNombreCampoCategoria="dias_llega_bodega";
					break;

				case ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO:
					sNombreCampoCategoria="porcentaje_seguro";
					break;

				case ParametroImporConstantesFunciones.LABEL_FODIN:
					sNombreCampoCategoria="fodin";
					break;

				case ParametroImporConstantesFunciones.LABEL_CORPEI:
					sNombreCampoCategoria="corpei";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL:
					sNombreCampoCategoria="con_secuencial";
					break;

				case ParametroImporConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoria="secuencial";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO:
					sNombreCampoCategoria="con_peso_precio";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONLOTE:
					sNombreCampoCategoria="con_lote";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONUNIDAD:
					sNombreCampoCategoria="con_unidad";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONCONVERSION:
					sNombreCampoCategoria="con_conversion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ParametroImporConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA:
					sNombreCampoCategoriaValor="id_transaccion_orden_compra";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO:
					sNombreCampoCategoriaValor="id_transaccion_ingreso";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA:
					sNombreCampoCategoriaValor="id_formato_orden_compra";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO:
					sNombreCampoCategoriaValor="id_formato_ingreso";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					sNombreCampoCategoriaValor="id_formato_pedido";
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION:
					sNombreCampoCategoriaValor="id_formato_liquidacion";
					break;

				case ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA:
					sNombreCampoCategoriaValor="dias_llega_bodega";
					break;

				case ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO:
					sNombreCampoCategoriaValor="porcentaje_seguro";
					break;

				case ParametroImporConstantesFunciones.LABEL_FODIN:
					sNombreCampoCategoriaValor="fodin";
					break;

				case ParametroImporConstantesFunciones.LABEL_CORPEI:
					sNombreCampoCategoriaValor="corpei";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL:
					sNombreCampoCategoriaValor="con_secuencial";
					break;

				case ParametroImporConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoriaValor="secuencial";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO:
					sNombreCampoCategoriaValor="con_peso_precio";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONLOTE:
					sNombreCampoCategoriaValor="con_lote";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONUNIDAD:
					sNombreCampoCategoriaValor="con_unidad";
					break;

				case ParametroImporConstantesFunciones.LABEL_CONCONVERSION:
					sNombreCampoCategoriaValor="con_conversion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroImporConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion Orden Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion_orden_compra");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion Ingreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion_ingreso");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Orden Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_orden_compra");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Ingreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_ingreso");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Pedo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_pedido");
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato Liquacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_liquidacion");
					break;

				case ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dias Llega Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"dias_llega_bodega");
					break;

				case ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Porcentaje Seguro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_seguro");
					break;

				case ParametroImporConstantesFunciones.LABEL_FODIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fodin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fodin");
					break;

				case ParametroImporConstantesFunciones.LABEL_CORPEI:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Corpei",sNombreCampoCategoria,sNombreCampoCategoriaValor,"corpei");
					break;

				case ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_secuencial");
					break;

				case ParametroImporConstantesFunciones.LABEL_SECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial");
					break;

				case ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Peso Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_peso_precio");
					break;

				case ParametroImporConstantesFunciones.LABEL_CONLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_lote");
					break;

				case ParametroImporConstantesFunciones.LABEL_CONUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Unad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_unidad");
					break;

				case ParametroImporConstantesFunciones.LABEL_CONCONVERSION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Conversion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_conversion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoParametroImporActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ParametroImpors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ParametroImporConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.gettransaccionordencompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.gettransaccioningreso_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getformatoordencompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getformatoingreso_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getformatopedido_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getformatoliquidacion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getdias_llega_bodega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getporcentaje_seguro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_FODIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_FODIN);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getfodin());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CORPEI:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CORPEI);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcorpei());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcon_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_SECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_SECUENCIAL);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getsecuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcon_peso_precio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CONLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONLOTE);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcon_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CONUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONUNIDAD);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcon_unidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroImporConstantesFunciones.LABEL_CONCONVERSION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONCONVERSION);
					iRow++;

					for(ParametroImpor parametroimpor:parametroimporsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametroimpor.getcon_conversion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelParametroImpor(row);				
			//	iRow++;
			//}				
			
			//for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelParametroImpor(parametroimporAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroImpor(false);
			
			//SI ES MANUAL
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroImpor();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroImpor(false);
			
			//SI ES MANUAL
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroImpor();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesParametroImporActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroImpor(false);
			
			//SI ES MANUAL
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroImpor();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaParametroImpor() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosParametroImpor.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosParametroImpor.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosParametroImpor.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosParametroImpor.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosParametroImpor.setMinimumSize(dimensionMinimum);
		this.jTableDatosParametroImpor.setMaximumSize(dimensionMaximum);
		this.jTableDatosParametroImpor.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingParametroImpor(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingParametroImpor(esInicializar,true);
	}
	
	public void inicializarActualizarBindingParametroImpor(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaParametroImpor(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesParametroImpor(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasParametroImpor(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroImpor(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesParametroImpor(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ParametroImporJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualParametroImpor() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaParametroImpor();
		
		this.inicializarActualizarBindingBotonesManualParametroImpor(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualParametroImpor();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroImpor() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualParametroImpor(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualParametroImpor(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosParametroImpor.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosParametroImpor.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteParametroImpor.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormParametroImpor!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionNuevoParametroImpor.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionSinCerrarParametroImpor.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionSinMensajeParametroImpor.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosParametroImpor.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosParametroImpor.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteParametroImpor.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormParametroImpor!=null) {
				this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionNuevoParametroImpor.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionSinCerrarParametroImpor.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormParametroImpor.jCheckBoxPostAccionSinMensajeParametroImpor.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionParametroImpor.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionParametroImpor.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesParametroImpor.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesParametroImpor.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesParametroImpor.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarParametroImpor.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesParametroImpor.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesParametroImpor.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralParametroImpor.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesParametroImpor(Boolean esInicializar) throws Exception {
		try	{	
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualParametroImpor(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesParametroImpor() throws Exception {
		try	{
			if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroImpor();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroImpor() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroImpor() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesParametroImpor.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesParametroImpor.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesParametroImpor.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionParametroImpor.addItem(reporte);
			}
			
			
			if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionParametroImpor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionParametroImpor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesParametroImpor.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesParametroImpor.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarParametroImpor.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarParametroImpor.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarParametroImpor.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroImpor();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroImpor() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
				this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
				this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
				
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroImpor.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ParametroImporConstantesFunciones.getTiposSeleccionarParametroImpor(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ParametroImporConstantesFunciones.getTiposSeleccionarParametroImpor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ParametroImporConstantesFunciones.getTiposSeleccionarParametroImpor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroImpor.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoParametroImpor.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualParametroImpor()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.getSelectedItem()!=null){this.id_cuenta_contableFK_IdCuentaContable=((CuentaContable)this.jComboBoxid_cuenta_contableFK_IdCuentaContableParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.getSelectedItem()!=null){this.id_formato_ingresoFK_IdFormatoIngreso=((Formato)this.jComboBoxid_formato_ingresoFK_IdFormatoIngresoParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.getSelectedItem()!=null){this.id_formato_liquidacionFK_IdFormatoLiquacion=((Formato)this.jComboBoxid_formato_liquidacionFK_IdFormatoLiquacionParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.getSelectedItem()!=null){this.id_formato_orden_compraFK_IdFormatoOrdenCompra=((Formato)this.jComboBoxid_formato_orden_compraFK_IdFormatoOrdenCompraParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.getSelectedItem()!=null){this.id_formato_pedidoFK_IdFormatoPedo=((Formato)this.jComboBoxid_formato_pedidoFK_IdFormatoPedoParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_paisFK_IdPaisParametroImpor.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.getSelectedItem()!=null){this.id_transaccion_ingresoFK_IdTransaccionIngreso=((Transaccion)this.jComboBoxid_transaccion_ingresoFK_IdTransaccionIngresoParametroImpor.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.getSelectedItem()!=null){this.id_transaccion_orden_compraFK_IdTransaccionOrdenCompra=((Transaccion)this.jComboBoxid_transaccion_orden_compraFK_IdTransaccionOrdenCompraParametroImpor.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasParametroImpor(Boolean esInicializar) throws Exception {				
		if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualParametroImpor();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaParametroImpor() throws Exception {
		this.inicializarActualizarBindingTablaParametroImpor(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByParametroImpor() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosParametroImporOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImporOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaParametroImpor(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=parametroimporLogic.getParametroImpors().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=parametroimpors.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosParametroImpor.setModel(new ParametroImporModel(this.parametroimporLogic.getParametroImpors(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosParametroImpor.setModel(new ParametroImporModel(this.parametroimpors,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByParametroImpor!=null && this.jInternalFrameOrderByParametroImpor.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByParametroImpor();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ParametroImporConstantesFunciones.SCLASSWEBTITULO,parametroimporConstantesFunciones.resaltarSeleccionarParametroImpor,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ParametroImporConstantesFunciones.SCLASSWEBTITULO,parametroimporConstantesFunciones.resaltarSeleccionarParametroImpor,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_ID));

		if(this.parametroimporConstantesFunciones.mostraridParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroimporConstantesFunciones.resaltaridParametroImpor,this.parametroimporConstantesFunciones.activaridParametroImpor,iSizeTabla,this,true,"idParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltaridParametroImpor,this.parametroimporConstantesFunciones.activaridParametroImpor,this,true,"idParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDEMPRESA));

		if(this.parametroimporConstantesFunciones.mostrarid_empresaParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.parametroimporConstantesFunciones.resaltarid_empresaParametroImpor,this,this.parametroimporConstantesFunciones.activarid_empresaParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.parametroimporConstantesFunciones.resaltarid_empresaParametroImpor,this,this.parametroimporConstantesFunciones.activarid_empresaParametroImpor,false,"id_empresaParametroImpor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDPAIS));

		if(this.parametroimporConstantesFunciones.mostrarid_paisParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.parametroimporConstantesFunciones.resaltarid_paisParametroImpor,this,this.parametroimporConstantesFunciones.activarid_paisParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.parametroimporConstantesFunciones.resaltarid_paisParametroImpor,this,this.parametroimporConstantesFunciones.activarid_paisParametroImpor,true,"id_paisParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDBODEGA));

		if(this.parametroimporConstantesFunciones.mostrarid_bodegaParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.parametroimporConstantesFunciones.resaltarid_bodegaParametroImpor,this,this.parametroimporConstantesFunciones.activarid_bodegaParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.parametroimporConstantesFunciones.resaltarid_bodegaParametroImpor,this,this.parametroimporConstantesFunciones.activarid_bodegaParametroImpor,true,"id_bodegaParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.parametroimporConstantesFunciones.mostrarid_centro_costoParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.parametroimporConstantesFunciones.resaltarid_centro_costoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_centro_costoParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.parametroimporConstantesFunciones.resaltarid_centro_costoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_centro_costoParametroImpor,true,"id_centro_costoParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE));

		if(this.parametroimporConstantesFunciones.mostrarid_cuenta_contableParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.parametroimporConstantesFunciones.resaltarid_cuenta_contableParametroImpor,this,this.parametroimporConstantesFunciones.activarid_cuenta_contableParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.parametroimporConstantesFunciones.resaltarid_cuenta_contableParametroImpor,this,this.parametroimporConstantesFunciones.activarid_cuenta_contableParametroImpor,true,"id_cuenta_contableParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA));

		if(this.parametroimporConstantesFunciones.mostrarid_transaccion_orden_compraParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionordencomprasForeignKey,this.parametroimporConstantesFunciones.resaltarid_transaccion_orden_compraParametroImpor,this,this.parametroimporConstantesFunciones.activarid_transaccion_orden_compraParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionordencomprasForeignKey,this.parametroimporConstantesFunciones.resaltarid_transaccion_orden_compraParametroImpor,this,this.parametroimporConstantesFunciones.activarid_transaccion_orden_compraParametroImpor,true,"id_transaccion_orden_compraParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO));

		if(this.parametroimporConstantesFunciones.mostrarid_transaccion_ingresoParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccioningresosForeignKey,this.parametroimporConstantesFunciones.resaltarid_transaccion_ingresoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_transaccion_ingresoParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccioningresosForeignKey,this.parametroimporConstantesFunciones.resaltarid_transaccion_ingresoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_transaccion_ingresoParametroImpor,true,"id_transaccion_ingresoParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA));

		if(this.parametroimporConstantesFunciones.mostrarid_formato_orden_compraParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoordencomprasForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_orden_compraParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_orden_compraParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoordencomprasForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_orden_compraParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_orden_compraParametroImpor,true,"id_formato_orden_compraParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO));

		if(this.parametroimporConstantesFunciones.mostrarid_formato_ingresoParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoingresosForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_ingresoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_ingresoParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoingresosForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_ingresoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_ingresoParametroImpor,true,"id_formato_ingresoParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO));

		if(this.parametroimporConstantesFunciones.mostrarid_formato_pedidoParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatopedidosForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_pedidoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_pedidoParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatopedidosForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_pedidoParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_pedidoParametroImpor,true,"id_formato_pedidoParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION));

		if(this.parametroimporConstantesFunciones.mostrarid_formato_liquidacionParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoliquidacionsForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_liquidacionParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_liquidacionParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoliquidacionsForeignKey,this.parametroimporConstantesFunciones.resaltarid_formato_liquidacionParametroImpor,this,this.parametroimporConstantesFunciones.activarid_formato_liquidacionParametroImpor,true,"id_formato_liquidacionParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA));

		if(this.parametroimporConstantesFunciones.mostrardias_llega_bodegaParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroimporConstantesFunciones.resaltardias_llega_bodegaParametroImpor,this.parametroimporConstantesFunciones.activardias_llega_bodegaParametroImpor,iSizeTabla,this,true,"dias_llega_bodegaParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltardias_llega_bodegaParametroImpor,this.parametroimporConstantesFunciones.activardias_llega_bodegaParametroImpor,this,true,"dias_llega_bodegaParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO));

		if(this.parametroimporConstantesFunciones.mostrarporcentaje_seguroParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroimporConstantesFunciones.resaltarporcentaje_seguroParametroImpor,this.parametroimporConstantesFunciones.activarporcentaje_seguroParametroImpor,iSizeTabla,this,true,"porcentaje_seguroParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltarporcentaje_seguroParametroImpor,this.parametroimporConstantesFunciones.activarporcentaje_seguroParametroImpor,this,true,"porcentaje_seguroParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_FODIN));

		if(this.parametroimporConstantesFunciones.mostrarfodinParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_FODIN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroimporConstantesFunciones.resaltarfodinParametroImpor,this.parametroimporConstantesFunciones.activarfodinParametroImpor,iSizeTabla,this,true,"fodinParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltarfodinParametroImpor,this.parametroimporConstantesFunciones.activarfodinParametroImpor,this,true,"fodinParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CORPEI));

		if(this.parametroimporConstantesFunciones.mostrarcorpeiParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CORPEI,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametroimporConstantesFunciones.resaltarcorpeiParametroImpor,this.parametroimporConstantesFunciones.activarcorpeiParametroImpor,iSizeTabla,this,true,"corpeiParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltarcorpeiParametroImpor,this.parametroimporConstantesFunciones.activarcorpeiParametroImpor,this,true,"corpeiParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL));

		if(this.parametroimporConstantesFunciones.mostrarcon_secuencialParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametroimporConstantesFunciones.resaltarcon_secuencialParametroImpor,this.parametroimporConstantesFunciones.activarcon_secuencialParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametroimporConstantesFunciones.resaltarcon_secuencialParametroImpor,this.parametroimporConstantesFunciones.activarcon_secuencialParametroImpor,this,true,"con_secuencialParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_SECUENCIAL));

		if(this.parametroimporConstantesFunciones.mostrarsecuencialParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_SECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.parametroimporConstantesFunciones.resaltarsecuencialParametroImpor,this.parametroimporConstantesFunciones.activarsecuencialParametroImpor,iSizeTabla,this,true,"secuencialParametroImpor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametroimporConstantesFunciones.resaltarsecuencialParametroImpor,this.parametroimporConstantesFunciones.activarsecuencialParametroImpor,this,true,"secuencialParametroImpor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO));

		if(this.parametroimporConstantesFunciones.mostrarcon_peso_precioParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametroimporConstantesFunciones.resaltarcon_peso_precioParametroImpor,this.parametroimporConstantesFunciones.activarcon_peso_precioParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametroimporConstantesFunciones.resaltarcon_peso_precioParametroImpor,this.parametroimporConstantesFunciones.activarcon_peso_precioParametroImpor,this,true,"con_peso_precioParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CONLOTE));

		if(this.parametroimporConstantesFunciones.mostrarcon_loteParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CONLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametroimporConstantesFunciones.resaltarcon_loteParametroImpor,this.parametroimporConstantesFunciones.activarcon_loteParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametroimporConstantesFunciones.resaltarcon_loteParametroImpor,this.parametroimporConstantesFunciones.activarcon_loteParametroImpor,this,true,"con_loteParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CONUNIDAD));

		if(this.parametroimporConstantesFunciones.mostrarcon_unidadParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CONUNIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametroimporConstantesFunciones.resaltarcon_unidadParametroImpor,this.parametroimporConstantesFunciones.activarcon_unidadParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametroimporConstantesFunciones.resaltarcon_unidadParametroImpor,this.parametroimporConstantesFunciones.activarcon_unidadParametroImpor,this,true,"con_unidadParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,ParametroImporConstantesFunciones.LABEL_CONCONVERSION));

		if(this.parametroimporConstantesFunciones.mostrarcon_conversionParametroImpor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroImporConstantesFunciones.LABEL_CONCONVERSION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.parametroimporConstantesFunciones.resaltarcon_conversionParametroImpor,this.parametroimporConstantesFunciones.activarcon_conversionParametroImpor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.parametroimporConstantesFunciones.resaltarcon_conversionParametroImpor,this.parametroimporConstantesFunciones.activarcon_conversionParametroImpor,this,true,"con_conversionParametroImpor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroImporPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.parametroimporSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroImpor.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroImpor.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarParametroImpor && this.isPermisoGuardarCambiosParametroImpor) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.parametroimporSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosParametroImpor.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosParametroImpor.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroImpor && this.isPermisoGuardarCambiosParametroImpor) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroImpor && this.isPermisoGuardarCambiosParametroImpor) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosParametroImpor.moveColumn(this.jTableDatosParametroImpor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosParametroImpor.moveColumn(this.jTableDatosParametroImpor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosParametroImpor.moveColumn(this.jTableDatosParametroImpor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosParametroImpor.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosParametroImpor.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosParametroImpor,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosParametroImpor.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosParametroImpor.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosParametroImpor.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosParametroImpor.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosParametroImpor.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=parametroimporLogic.getParametroImpors().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=parametroimpors.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosParametroImpor.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosParametroImpor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosParametroImpor();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoParametroImpor=false;
					
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
				if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormParametroImpor==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroImpor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.parametroimpor.getsType().equals("DUPLICADO")
				   || this.parametroimpor.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoParametroImpor=true;
				
				} else {
					this.isEsNuevoParametroImpor=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					if(this.parametroimpor.getId()>=0 && !this.parametroimpor.getIsNew()) {						
						this.isEsNuevoParametroImpor=false;
						
					} else {
						this.isEsNuevoParametroImpor=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoParametroImpor(esRelaciones);						
				
				this.seleccionarParametroImpor(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.parametroimpor.getId()<0) {
					this.isEsNuevoParametroImpor=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarParametroImpor(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarParametroImpor(evt,rowIndex);
				}	
				
				if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ParametroImpor: " + this.dDif); 
					}
				}								
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarParametroImpor(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.parametroimpor)) {
					if(this.parametroimpor.getId()>0) {
						this.parametroimpor.setIsDeleted(true);
						
						this.parametroimporsEliminados.add(this.parametroimpor);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametroimporLogic.getParametroImpors().remove(this.parametroimpor);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametroimpors.remove(this.parametroimpor);				
					}
					
					
					((ParametroImporModel) this.jTableDatosParametroImpor.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroImpor(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarParametroImpor(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoParametroImpor) {
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroImpor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroImpor.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioParametroImpor(this.parametroimpor);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.parametroimporConstantesFunciones.cargarid_empresaParametroImpor || this.parametroimporConstantesFunciones.event_dependid_empresaParametroImpor) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.parametroimpor.getid_empresa());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(parametroimpor.getEmpresa()!=null) {
							this.empresasForeignKey.add(parametroimpor.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.parametroimpor.getid_empresa(),false,"Formulario");

					//Pais
					if(!this.parametroimporConstantesFunciones.cargarid_paisParametroImpor || this.parametroimporConstantesFunciones.event_dependid_paisParametroImpor) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.parametroimpor.getid_pais());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(parametroimpor.getPais()!=null) {
							this.paissForeignKey.add(parametroimpor.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.parametroimpor.getid_pais(),false,"Formulario");

					//Bodega
					if(!this.parametroimporConstantesFunciones.cargarid_bodegaParametroImpor || this.parametroimporConstantesFunciones.event_dependid_bodegaParametroImpor) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.parametroimpor.getid_bodega());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(parametroimpor.getBodega()!=null) {
							this.bodegasForeignKey.add(parametroimpor.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.parametroimpor.getid_bodega(),false,"Formulario");

					//CentroCosto
					if(!this.parametroimporConstantesFunciones.cargarid_centro_costoParametroImpor || this.parametroimporConstantesFunciones.event_dependid_centro_costoParametroImpor) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.parametroimpor.getid_centro_costo());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(parametroimpor.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(parametroimpor.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.parametroimpor.getid_centro_costo(),false,"Formulario");

					//CuentaContable
					if(!this.parametroimporConstantesFunciones.cargarid_cuenta_contableParametroImpor || this.parametroimporConstantesFunciones.event_dependid_cuenta_contableParametroImpor) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.parametroimpor.getid_cuenta_contable());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(parametroimpor.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(parametroimpor.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.parametroimpor.getid_cuenta_contable(),false,"Formulario");

					//TransaccionOrdenCompra
					if(!this.parametroimporConstantesFunciones.cargarid_transaccion_orden_compraParametroImpor || this.parametroimporConstantesFunciones.event_dependid_transaccion_orden_compraParametroImpor) {
						//this.cargarCombosTransaccionOrdenComprasForeignKeyLista(" where id="+this.parametroimpor.getid_transaccion_orden_compra());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.transaccionordencomprasForeignKey=new ArrayList<Transaccion>();

						if(parametroimpor.getTransaccionOrdenCompra()!=null) {
							this.transaccionordencomprasForeignKey.add(parametroimpor.getTransaccionOrdenCompra());
						}

						this.addItemDefectoCombosForeignKeyTransaccionOrdenCompra();
						this.cargarCombosFrameTransaccionOrdenComprasForeignKey("Todos");
					}
					this.setActualTransaccionOrdenCompraForeignKey(this.parametroimpor.getid_transaccion_orden_compra(),false,"Formulario");

					//TransaccionIngreso
					if(!this.parametroimporConstantesFunciones.cargarid_transaccion_ingresoParametroImpor || this.parametroimporConstantesFunciones.event_dependid_transaccion_ingresoParametroImpor) {
						//this.cargarCombosTransaccionIngresosForeignKeyLista(" where id="+this.parametroimpor.getid_transaccion_ingreso());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.transaccioningresosForeignKey=new ArrayList<Transaccion>();

						if(parametroimpor.getTransaccionIngreso()!=null) {
							this.transaccioningresosForeignKey.add(parametroimpor.getTransaccionIngreso());
						}

						this.addItemDefectoCombosForeignKeyTransaccionIngreso();
						this.cargarCombosFrameTransaccionIngresosForeignKey("Todos");
					}
					this.setActualTransaccionIngresoForeignKey(this.parametroimpor.getid_transaccion_ingreso(),false,"Formulario");

					//FormatoOrdenCompra
					if(!this.parametroimporConstantesFunciones.cargarid_formato_orden_compraParametroImpor || this.parametroimporConstantesFunciones.event_dependid_formato_orden_compraParametroImpor) {
						//this.cargarCombosFormatoOrdenComprasForeignKeyLista(" where id="+this.parametroimpor.getid_formato_orden_compra());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.formatoordencomprasForeignKey=new ArrayList<Formato>();

						if(parametroimpor.getFormatoOrdenCompra()!=null) {
							this.formatoordencomprasForeignKey.add(parametroimpor.getFormatoOrdenCompra());
						}

						this.addItemDefectoCombosForeignKeyFormatoOrdenCompra();
						this.cargarCombosFrameFormatoOrdenComprasForeignKey("Todos");
					}
					this.setActualFormatoOrdenCompraForeignKey(this.parametroimpor.getid_formato_orden_compra(),false,"Formulario");

					//FormatoIngreso
					if(!this.parametroimporConstantesFunciones.cargarid_formato_ingresoParametroImpor || this.parametroimporConstantesFunciones.event_dependid_formato_ingresoParametroImpor) {
						//this.cargarCombosFormatoIngresosForeignKeyLista(" where id="+this.parametroimpor.getid_formato_ingreso());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.formatoingresosForeignKey=new ArrayList<Formato>();

						if(parametroimpor.getFormatoIngreso()!=null) {
							this.formatoingresosForeignKey.add(parametroimpor.getFormatoIngreso());
						}

						this.addItemDefectoCombosForeignKeyFormatoIngreso();
						this.cargarCombosFrameFormatoIngresosForeignKey("Todos");
					}
					this.setActualFormatoIngresoForeignKey(this.parametroimpor.getid_formato_ingreso(),false,"Formulario");

					//FormatoPedido
					if(!this.parametroimporConstantesFunciones.cargarid_formato_pedidoParametroImpor || this.parametroimporConstantesFunciones.event_dependid_formato_pedidoParametroImpor) {
						//this.cargarCombosFormatoPedidosForeignKeyLista(" where id="+this.parametroimpor.getid_formato_pedido());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.formatopedidosForeignKey=new ArrayList<Formato>();

						if(parametroimpor.getFormatoPedido()!=null) {
							this.formatopedidosForeignKey.add(parametroimpor.getFormatoPedido());
						}

						this.addItemDefectoCombosForeignKeyFormatoPedido();
						this.cargarCombosFrameFormatoPedidosForeignKey("Todos");
					}
					this.setActualFormatoPedidoForeignKey(this.parametroimpor.getid_formato_pedido(),false,"Formulario");

					//FormatoLiquidacion
					if(!this.parametroimporConstantesFunciones.cargarid_formato_liquidacionParametroImpor || this.parametroimporConstantesFunciones.event_dependid_formato_liquidacionParametroImpor) {
						//this.cargarCombosFormatoLiquidacionsForeignKeyLista(" where id="+this.parametroimpor.getid_formato_liquidacion());
									//this.inicializarActualizarBindingParametroImpor(false,false);
						this.formatoliquidacionsForeignKey=new ArrayList<Formato>();

						if(parametroimpor.getFormatoLiquidacion()!=null) {
							this.formatoliquidacionsForeignKey.add(parametroimpor.getFormatoLiquidacion());
						}

						this.addItemDefectoCombosForeignKeyFormatoLiquidacion();
						this.cargarCombosFrameFormatoLiquidacionsForeignKey("Todos");
					}
					this.setActualFormatoLiquidacionForeignKey(this.parametroimpor.getid_formato_liquidacion(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesParametroImpor("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesParametroImpor(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroImpor() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroImpor(ParametroImpor parametroimpor) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoParametroImpor(parametroimpor,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroImpor(ParametroImpor parametroimpor,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioParametroImpor(parametroimpor);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyParametroImpor(parametroimpor,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyParametroImpor(parametroimpor);
	}
	
	public void setVariablesObjetoActualToFormularioParametroImpor(ParametroImpor parametroimpor) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setText(parametroimpor.getId().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setText(parametroimpor.getdias_llega_bodega().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setText(parametroimpor.getporcentaje_seguro().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setText(parametroimpor.getfodin().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setText(parametroimpor.getcorpei().toString());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setSelected(parametroimpor.getcon_secuencial());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setText(parametroimpor.getsecuencial());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setSelected(parametroimpor.getcon_peso_precio());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setSelected(parametroimpor.getcon_lote());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setSelected(parametroimpor.getcon_unidad());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setSelected(parametroimpor.getcon_conversion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ParametroImpor parametroimporLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,parametroimporLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ParametroImpor parametroimporLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				parametroimporLocal=this.parametroimpor;
			} else {
				parametroimporLocal=this.parametroimporAnterior;
			}
		}
		
		if(this.permiteMantenimiento(parametroimporLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoParametroImpor(parametroimporLocal,true);
					
					if(parametroimporSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(parametroimporLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(parametroimporLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoParametroImpor(ParametroImpor parametroimpor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroImpor(parametroimpor,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(parametroimpor);
	}
	
	public void setVariablesFormularioToObjetoActualParametroImpor(ParametroImpor parametroimpor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroImpor(parametroimpor,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualParametroImpor(ParametroImpor parametroimpor,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.getText()==null || this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.getText()=="" || this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.getText()=="Id") {
				this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setText("0");
			}

			if(conColumnasBase) {parametroimpor.setId(Long.parseLong(this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelIdParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setdias_llega_bodega(Integer.parseInt(this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabeldias_llega_bodegaParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setporcentaje_seguro(Double.parseDouble(this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelporcentaje_seguroParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setfodin(Double.parseDouble(this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_FODIN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelfodinParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcorpei(Double.parseDouble(this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CORPEI+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcorpeiParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcon_secuencial(this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_secuencialParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setsecuencial(this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_SECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelsecuencialParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcon_peso_precio(this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_peso_precioParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcon_lote(this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CONLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_loteParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcon_unidad(this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CONUNIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_unidadParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametroimpor.setcon_conversion(this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroImporConstantesFunciones.LABEL_CONCONVERSION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroImpor.jLabelcon_conversionParametroImpor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroImpor(ParametroImpor parametroimporBean,ParametroImpor parametroimpor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && parametroimporBean.getid_pais()!=null && !parametroimporBean.getid_pais().equals(-1L))) {parametroimpor.setid_pais(parametroimporBean.getid_pais());}
			if(conDefault || (!conDefault && parametroimporBean.getid_bodega()!=null && !parametroimporBean.getid_bodega().equals(-1L))) {parametroimpor.setid_bodega(parametroimporBean.getid_bodega());}
			if(conDefault || (!conDefault && parametroimporBean.getid_centro_costo()!=null && !parametroimporBean.getid_centro_costo().equals(null))) {parametroimpor.setid_centro_costo(parametroimporBean.getid_centro_costo());}
			if(conDefault || (!conDefault && parametroimporBean.getid_cuenta_contable()!=null && !parametroimporBean.getid_cuenta_contable().equals(-1L))) {parametroimpor.setid_cuenta_contable(parametroimporBean.getid_cuenta_contable());}
			if(conDefault || (!conDefault && parametroimporBean.getid_transaccion_orden_compra()!=null && !parametroimporBean.getid_transaccion_orden_compra().equals(-1L))) {parametroimpor.setid_transaccion_orden_compra(parametroimporBean.getid_transaccion_orden_compra());}
			if(conDefault || (!conDefault && parametroimporBean.getid_transaccion_ingreso()!=null && !parametroimporBean.getid_transaccion_ingreso().equals(-1L))) {parametroimpor.setid_transaccion_ingreso(parametroimporBean.getid_transaccion_ingreso());}
			if(conDefault || (!conDefault && parametroimporBean.getid_formato_orden_compra()!=null && !parametroimporBean.getid_formato_orden_compra().equals(-1L))) {parametroimpor.setid_formato_orden_compra(parametroimporBean.getid_formato_orden_compra());}
			if(conDefault || (!conDefault && parametroimporBean.getid_formato_ingreso()!=null && !parametroimporBean.getid_formato_ingreso().equals(-1L))) {parametroimpor.setid_formato_ingreso(parametroimporBean.getid_formato_ingreso());}
			if(conDefault || (!conDefault && parametroimporBean.getid_formato_pedido()!=null && !parametroimporBean.getid_formato_pedido().equals(-1L))) {parametroimpor.setid_formato_pedido(parametroimporBean.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametroimporBean.getid_formato_liquidacion()!=null && !parametroimporBean.getid_formato_liquidacion().equals(-1L))) {parametroimpor.setid_formato_liquidacion(parametroimporBean.getid_formato_liquidacion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosParametroImpor(ParametroImpor parametroimporOrigen,ParametroImpor parametroimpor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametroimporOrigen.getId()!=null && !parametroimporOrigen.getId().equals(0L))) {parametroimpor.setId(parametroimporOrigen.getId());}}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_pais()!=null && !parametroimporOrigen.getid_pais().equals(-1L))) {parametroimpor.setid_pais(parametroimporOrigen.getid_pais());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_bodega()!=null && !parametroimporOrigen.getid_bodega().equals(-1L))) {parametroimpor.setid_bodega(parametroimporOrigen.getid_bodega());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_centro_costo()!=null && !parametroimporOrigen.getid_centro_costo().equals(null))) {parametroimpor.setid_centro_costo(parametroimporOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_cuenta_contable()!=null && !parametroimporOrigen.getid_cuenta_contable().equals(-1L))) {parametroimpor.setid_cuenta_contable(parametroimporOrigen.getid_cuenta_contable());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_transaccion_orden_compra()!=null && !parametroimporOrigen.getid_transaccion_orden_compra().equals(-1L))) {parametroimpor.setid_transaccion_orden_compra(parametroimporOrigen.getid_transaccion_orden_compra());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_transaccion_ingreso()!=null && !parametroimporOrigen.getid_transaccion_ingreso().equals(-1L))) {parametroimpor.setid_transaccion_ingreso(parametroimporOrigen.getid_transaccion_ingreso());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_formato_orden_compra()!=null && !parametroimporOrigen.getid_formato_orden_compra().equals(-1L))) {parametroimpor.setid_formato_orden_compra(parametroimporOrigen.getid_formato_orden_compra());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_formato_ingreso()!=null && !parametroimporOrigen.getid_formato_ingreso().equals(-1L))) {parametroimpor.setid_formato_ingreso(parametroimporOrigen.getid_formato_ingreso());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_formato_pedido()!=null && !parametroimporOrigen.getid_formato_pedido().equals(-1L))) {parametroimpor.setid_formato_pedido(parametroimporOrigen.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametroimporOrigen.getid_formato_liquidacion()!=null && !parametroimporOrigen.getid_formato_liquidacion().equals(-1L))) {parametroimpor.setid_formato_liquidacion(parametroimporOrigen.getid_formato_liquidacion());}
			if(conDefault || (!conDefault && parametroimporOrigen.getdias_llega_bodega()!=null && !parametroimporOrigen.getdias_llega_bodega().equals(0))) {parametroimpor.setdias_llega_bodega(parametroimporOrigen.getdias_llega_bodega());}
			if(conDefault || (!conDefault && parametroimporOrigen.getporcentaje_seguro()!=null && !parametroimporOrigen.getporcentaje_seguro().equals(0.0))) {parametroimpor.setporcentaje_seguro(parametroimporOrigen.getporcentaje_seguro());}
			if(conDefault || (!conDefault && parametroimporOrigen.getfodin()!=null && !parametroimporOrigen.getfodin().equals(0.0))) {parametroimpor.setfodin(parametroimporOrigen.getfodin());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcorpei()!=null && !parametroimporOrigen.getcorpei().equals(0.0))) {parametroimpor.setcorpei(parametroimporOrigen.getcorpei());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcon_secuencial()!=null && !parametroimporOrigen.getcon_secuencial().equals(false))) {parametroimpor.setcon_secuencial(parametroimporOrigen.getcon_secuencial());}
			if(conDefault || (!conDefault && parametroimporOrigen.getsecuencial()!=null && !parametroimporOrigen.getsecuencial().equals(""))) {parametroimpor.setsecuencial(parametroimporOrigen.getsecuencial());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcon_peso_precio()!=null && !parametroimporOrigen.getcon_peso_precio().equals(false))) {parametroimpor.setcon_peso_precio(parametroimporOrigen.getcon_peso_precio());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcon_lote()!=null && !parametroimporOrigen.getcon_lote().equals(false))) {parametroimpor.setcon_lote(parametroimporOrigen.getcon_lote());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcon_unidad()!=null && !parametroimporOrigen.getcon_unidad().equals(false))) {parametroimpor.setcon_unidad(parametroimporOrigen.getcon_unidad());}
			if(conDefault || (!conDefault && parametroimporOrigen.getcon_conversion()!=null && !parametroimporOrigen.getcon_conversion().equals(false))) {parametroimpor.setcon_conversion(parametroimporOrigen.getcon_conversion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroImpor(ParametroImpor parametroimpor) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setText(parametroimpor.getId().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setText(parametroimpor.getdias_llega_bodega().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setText(parametroimpor.getporcentaje_seguro().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setText(parametroimpor.getfodin().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setText(parametroimpor.getcorpei().toString());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setSelected(parametroimpor.getcon_secuencial());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setText(parametroimpor.getsecuencial());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setSelected(parametroimpor.getcon_peso_precio());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setSelected(parametroimpor.getcon_lote());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setSelected(parametroimpor.getcon_unidad());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setSelected(parametroimpor.getcon_conversion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroImpor(ParametroImporBean parametroimporBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setText(parametroimporBean.getId().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setText(parametroimporBean.getdias_llega_bodega().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setText(parametroimporBean.getporcentaje_seguro().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setText(parametroimporBean.getfodin().toString());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setText(parametroimporBean.getcorpei().toString());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setSelected(parametroimporBean.getcon_secuencial());
			this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setText(parametroimporBean.getsecuencial());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setSelected(parametroimporBean.getcon_peso_precio());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setSelected(parametroimporBean.getcon_lote());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setSelected(parametroimporBean.getcon_unidad());
			this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setSelected(parametroimporBean.getcon_conversion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanParametroImpor(ParametroImporParameterReturnGeneral parametroimporReturnGeneral,ParametroImporBean parametroimporBean,Boolean conDefault) throws Exception { 
		try {
			ParametroImpor parametroimporLocal=new ParametroImpor();
			
			parametroimporLocal=parametroimporReturnGeneral.getParametroImpor();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametroimporLocal.getId()!=null && !parametroimporLocal.getId().equals(0L))) {parametroimporBean.setId(parametroimporLocal.getId());}}
			if(conDefault || (!conDefault && parametroimporLocal.getid_pais()!=null && !parametroimporLocal.getid_pais().equals(-1L))) {parametroimporBean.setid_pais(parametroimporLocal.getid_pais());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_bodega()!=null && !parametroimporLocal.getid_bodega().equals(-1L))) {parametroimporBean.setid_bodega(parametroimporLocal.getid_bodega());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_centro_costo()!=null && !parametroimporLocal.getid_centro_costo().equals(null))) {parametroimporBean.setid_centro_costo(parametroimporLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_cuenta_contable()!=null && !parametroimporLocal.getid_cuenta_contable().equals(-1L))) {parametroimporBean.setid_cuenta_contable(parametroimporLocal.getid_cuenta_contable());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_transaccion_orden_compra()!=null && !parametroimporLocal.getid_transaccion_orden_compra().equals(-1L))) {parametroimporBean.setid_transaccion_orden_compra(parametroimporLocal.getid_transaccion_orden_compra());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_transaccion_ingreso()!=null && !parametroimporLocal.getid_transaccion_ingreso().equals(-1L))) {parametroimporBean.setid_transaccion_ingreso(parametroimporLocal.getid_transaccion_ingreso());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_formato_orden_compra()!=null && !parametroimporLocal.getid_formato_orden_compra().equals(-1L))) {parametroimporBean.setid_formato_orden_compra(parametroimporLocal.getid_formato_orden_compra());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_formato_ingreso()!=null && !parametroimporLocal.getid_formato_ingreso().equals(-1L))) {parametroimporBean.setid_formato_ingreso(parametroimporLocal.getid_formato_ingreso());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_formato_pedido()!=null && !parametroimporLocal.getid_formato_pedido().equals(-1L))) {parametroimporBean.setid_formato_pedido(parametroimporLocal.getid_formato_pedido());}
			if(conDefault || (!conDefault && parametroimporLocal.getid_formato_liquidacion()!=null && !parametroimporLocal.getid_formato_liquidacion().equals(-1L))) {parametroimporBean.setid_formato_liquidacion(parametroimporLocal.getid_formato_liquidacion());}
			if(conDefault || (!conDefault && parametroimporLocal.getdias_llega_bodega()!=null && !parametroimporLocal.getdias_llega_bodega().equals(0))) {parametroimporBean.setdias_llega_bodega(parametroimporLocal.getdias_llega_bodega());}
			if(conDefault || (!conDefault && parametroimporLocal.getporcentaje_seguro()!=null && !parametroimporLocal.getporcentaje_seguro().equals(0.0))) {parametroimporBean.setporcentaje_seguro(parametroimporLocal.getporcentaje_seguro());}
			if(conDefault || (!conDefault && parametroimporLocal.getfodin()!=null && !parametroimporLocal.getfodin().equals(0.0))) {parametroimporBean.setfodin(parametroimporLocal.getfodin());}
			if(conDefault || (!conDefault && parametroimporLocal.getcorpei()!=null && !parametroimporLocal.getcorpei().equals(0.0))) {parametroimporBean.setcorpei(parametroimporLocal.getcorpei());}
			if(conDefault || (!conDefault && parametroimporLocal.getcon_secuencial()!=null && !parametroimporLocal.getcon_secuencial().equals(false))) {parametroimporBean.setcon_secuencial(parametroimporLocal.getcon_secuencial());}
			if(conDefault || (!conDefault && parametroimporLocal.getsecuencial()!=null && !parametroimporLocal.getsecuencial().equals(""))) {parametroimporBean.setsecuencial(parametroimporLocal.getsecuencial());}
			if(conDefault || (!conDefault && parametroimporLocal.getcon_peso_precio()!=null && !parametroimporLocal.getcon_peso_precio().equals(false))) {parametroimporBean.setcon_peso_precio(parametroimporLocal.getcon_peso_precio());}
			if(conDefault || (!conDefault && parametroimporLocal.getcon_lote()!=null && !parametroimporLocal.getcon_lote().equals(false))) {parametroimporBean.setcon_lote(parametroimporLocal.getcon_lote());}
			if(conDefault || (!conDefault && parametroimporLocal.getcon_unidad()!=null && !parametroimporLocal.getcon_unidad().equals(false))) {parametroimporBean.setcon_unidad(parametroimporLocal.getcon_unidad());}
			if(conDefault || (!conDefault && parametroimporLocal.getcon_conversion()!=null && !parametroimporLocal.getcon_conversion().equals(false))) {parametroimporBean.setcon_conversion(parametroimporLocal.getcon_conversion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxParametroImporGenerico(Long idParametroImporSeleccionado,JComboBox jComboBoxParametroImpor,List<ParametroImpor> parametroimporsLocal)throws Exception {
		try {
			ParametroImpor  parametroimporTemp=null;

			for(ParametroImpor parametroimporAux:parametroimporsLocal) {
				if(parametroimporAux.getId()!=null && parametroimporAux.getId().equals(idParametroImporSeleccionado)) {
					parametroimporTemp=parametroimporAux;
					break;
				}
			}

			jComboBoxParametroImpor.setSelectedItem(parametroimporTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxParametroImporGenerico(JComboBox jComboBoxParametroImpor,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxParametroImpor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroImpor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxParametroImpor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroImpor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroImpor.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxParametroImpor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroImpor.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxParametroImpor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxParametroImpor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxParametroImpor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroimpor=(ParametroImpor) parametroimporLogic.getParametroImpors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametroimpor =(ParametroImpor) parametroimpors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getpais_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getbodega_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getcuentacontable_descripcion();
			}
		}

		if(sTipo.equals("TransaccionOrdenCompra")) {
			//sDescripcion=this.getActualTransaccionOrdenCompraForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.gettransaccionordencompra_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionOrdenCompraForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.gettransaccionordencompra_descripcion();
			}
		}

		if(sTipo.equals("TransaccionIngreso")) {
			//sDescripcion=this.getActualTransaccionIngresoForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.gettransaccioningreso_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionIngresoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.gettransaccioningreso_descripcion();
			}
		}

		if(sTipo.equals("FormatoOrdenCompra")) {
			//sDescripcion=this.getActualFormatoOrdenCompraForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getformatoordencompra_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoOrdenCompraForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getformatoordencompra_descripcion();
			}
		}

		if(sTipo.equals("FormatoIngreso")) {
			//sDescripcion=this.getActualFormatoIngresoForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getformatoingreso_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoIngresoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getformatoingreso_descripcion();
			}
		}

		if(sTipo.equals("FormatoPedido")) {
			//sDescripcion=this.getActualFormatoPedidoForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getformatopedido_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoPedidoForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getformatopedido_descripcion();
			}
		}

		if(sTipo.equals("FormatoLiquidacion")) {
			//sDescripcion=this.getActualFormatoLiquidacionForeignKeyDescripcion((Long)value);
			if(!parametroimpor.getIsNew() && !parametroimpor.getIsChanged() && !parametroimpor.getIsDeleted()) {
				sDescripcion=parametroimpor.getformatoliquidacion_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoLiquidacionForeignKeyDescripcion((Long)value);
				sDescripcion=parametroimpor.getformatoliquidacion_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ParametroImpor parametroimporRow=new ParametroImpor();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroimporRow=(ParametroImpor) parametroimporLogic.getParametroImpors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametroimporRow=(ParametroImpor) parametroimpors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualParametroImpor(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor));			
			this.jButtonDuplicarParametroImpor.setVisible((this.isVisibilidadCeldaDuplicarParametroImpor && this.isPermisoDuplicarParametroImpor));			
			this.jButtonCopiarParametroImpor.setVisible((this.isVisibilidadCeldaCopiarParametroImpor && this.isPermisoCopiarParametroImpor));
			this.jButtonVerFormParametroImpor.setVisible((this.isVisibilidadCeldaVerFormParametroImpor && this.isPermisoVerFormParametroImpor));
			
			this.jButtonAbrirOrderByParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));			
			
			this.jButtonNuevoRelacionesParametroImpor.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroImpor && this.isPermisoNuevoParametroImpor));			
			this.jButtonNuevoGuardarCambiosParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor && this.isPermisoGuardarCambiosParametroImpor));
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonModificarParametroImpor.setVisible((this.isVisibilidadCeldaModificarParametroImpor && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.setVisible((this.isVisibilidadCeldaActualizarParametroImpor && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.setVisible((this.isVisibilidadCeldaEliminarParametroImpor && this.isPermisoEliminarParametroImpor));
			this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.setVisible(this.isVisibilidadCeldaCancelarParametroImpor);							
			this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.setVisible((this.isVisibilidadCeldaGuardarParametroImpor && this.isPermisoGuardarCambiosParametroImpor));			
			
			}
						
			this.jButtonGuardarCambiosTablaParametroImpor.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroImpor && this.isPermisoGuardarCambiosParametroImpor));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor));						
			this.jButtonDuplicarToolBarParametroImpor.setVisible((this.isVisibilidadCeldaDuplicarParametroImpor && this.isPermisoDuplicarParametroImpor));						
			this.jButtonCopiarToolBarParametroImpor.setVisible((this.isVisibilidadCeldaCopiarParametroImpor && this.isPermisoCopiarParametroImpor));			
			this.jButtonVerFormToolBarParametroImpor.setVisible((this.isVisibilidadCeldaVerFormParametroImpor && this.isPermisoVerFormParametroImpor));			
			this.jButtonAbrirOrderByToolBarParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));
			this.jButtonNuevoRelacionesToolBarParametroImpor.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroImpor && this.isPermisoNuevoParametroImpor));			
			this.jButtonNuevoGuardarCambiosToolBarParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor && this.isPermisoGuardarCambiosParametroImpor));			
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonModificarToolBarParametroImpor.setVisible((this.isVisibilidadCeldaModificarParametroImpor && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarToolBarParametroImpor.setVisible((this.isVisibilidadCeldaActualizarParametroImpor  && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarToolBarParametroImpor.setVisible((this.isVisibilidadCeldaEliminarParametroImpor && this.isPermisoEliminarParametroImpor));
			this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarToolBarParametroImpor.setVisible(this.isVisibilidadCeldaCancelarParametroImpor);				
			this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosToolBarParametroImpor.setVisible((this.isVisibilidadCeldaGuardarParametroImpor && this.isPermisoGuardarCambiosParametroImpor));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarParametroImpor.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroImpor && this.isPermisoGuardarCambiosParametroImpor));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor));			
			this.jMenuItemDuplicarParametroImpor.setVisible((this.isVisibilidadCeldaDuplicarParametroImpor && this.isPermisoDuplicarParametroImpor));			
			this.jMenuItemCopiarParametroImpor.setVisible((this.isVisibilidadCeldaCopiarParametroImpor && this.isPermisoCopiarParametroImpor));			
			this.jMenuItemVerFormParametroImpor.setVisible((this.isVisibilidadCeldaVerFormParametroImpor && this.isPermisoVerFormParametroImpor));			
			this.jMenuItemAbrirOrderByParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));			
			//this.jMenuItemMostrarOcultarParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));
			this.jMenuItemDetalleAbrirOrderByParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));			
			//this.jMenuItemDetalleMostrarOcultarParametroImpor.setVisible((this.isVisibilidadCeldaOrdenParametroImpor && this.isPermisoOrdenParametroImpor));			
			this.jMenuItemNuevoRelacionesParametroImpor.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroImpor && this.isPermisoNuevoParametroImpor));			
			this.jMenuItemNuevoGuardarCambiosParametroImpor.setVisible((this.isVisibilidadCeldaNuevoParametroImpor && this.isPermisoNuevoParametroImpor && this.isPermisoGuardarCambiosParametroImpor));									
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemModificarParametroImpor.setVisible((this.isVisibilidadCeldaModificarParametroImpor && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemActualizarParametroImpor.setVisible((this.isVisibilidadCeldaActualizarParametroImpor && this.isPermisoActualizarParametroImpor));	
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemEliminarParametroImpor.setVisible((this.isVisibilidadCeldaEliminarParametroImpor && this.isPermisoEliminarParametroImpor));
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemCancelarParametroImpor.setVisible(this.isVisibilidadCeldaCancelarParametroImpor);				
			}
			
			this.jMenuItemGuardarCambiosParametroImpor.setVisible((this.isVisibilidadCeldaGuardarParametroImpor && this.isPermisoGuardarCambiosParametroImpor));						
			this.jMenuItemGuardarCambiosTablaParametroImpor.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroImpor && this.isPermisoGuardarCambiosParametroImpor));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoParametroImpor=this.jButtonNuevoParametroImpor.isVisible();
			this.isVisibilidadCeldaDuplicarParametroImpor=this.jButtonDuplicarParametroImpor.isVisible();
			this.isVisibilidadCeldaCopiarParametroImpor=this.jButtonCopiarParametroImpor.isVisible();
			this.isVisibilidadCeldaVerFormParametroImpor=this.jButtonVerFormParametroImpor.isVisible();
			
			this.isVisibilidadCeldaOrdenParametroImpor=this.jButtonAbrirOrderByParametroImpor.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=this.jButtonNuevoRelacionesParametroImpor.isVisible();
			this.isVisibilidadCeldaModificarParametroImpor=this.jButtonModificarParametroImpor.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.isVisibilidadCeldaActualizarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.isVisible();
			this.isVisibilidadCeldaEliminarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.isVisible();
			this.isVisibilidadCeldaCancelarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.isVisible();
			this.isVisibilidadCeldaGuardarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=this.jButtonGuardarCambiosTablaParametroImpor.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoParametroImpor=this.jButtonNuevoToolBarParametroImpor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=this.jButtonNuevoRelacionesToolBarParametroImpor.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.isVisibilidadCeldaModificarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonModificarToolBarParametroImpor.isVisible();
			this.isVisibilidadCeldaActualizarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarToolBarParametroImpor.isVisible();
			this.isVisibilidadCeldaEliminarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarToolBarParametroImpor.isVisible();
			this.isVisibilidadCeldaCancelarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarToolBarParametroImpor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroImpor=this.jButtonGuardarCambiosToolBarParametroImpor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=this.jButtonGuardarCambiosTablaToolBarParametroImpor.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoParametroImpor=this.jMenuItemNuevoParametroImpor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=this.jMenuItemNuevoRelacionesParametroImpor.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.isVisibilidadCeldaModificarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jMenuItemModificarParametroImpor.isVisible();
			this.isVisibilidadCeldaActualizarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jMenuItemActualizarParametroImpor.isVisible();
			this.isVisibilidadCeldaEliminarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jMenuItemEliminarParametroImpor.isVisible();
			this.isVisibilidadCeldaCancelarParametroImpor=this.jInternalFrameDetalleFormParametroImpor.jMenuItemCancelarParametroImpor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroImpor=this.jMenuItemGuardarCambiosParametroImpor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=this.jMenuItemGuardarCambiosTablaParametroImpor.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesParametroImpor(Boolean esInicializar) {
		if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {			
			if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
				//if(this.parametroimporSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesParametroImpor();
			}
			
			this.inicializarActualizarBindingBotonesManualParametroImpor(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualParametroImpor() {
		this.jButtonNuevoParametroImpor.setVisible(this.isPermisoNuevoParametroImpor);			
		this.jButtonDuplicarParametroImpor.setVisible(this.isPermisoDuplicarParametroImpor);			
		this.jButtonCopiarParametroImpor.setVisible(this.isPermisoCopiarParametroImpor);			
		this.jButtonVerFormParametroImpor.setVisible(this.isPermisoVerFormParametroImpor);			
		
		this.jButtonAbrirOrderByParametroImpor.setVisible(this.isPermisoOrdenParametroImpor);					
		
		this.jButtonNuevoRelacionesParametroImpor.setVisible(this.isPermisoNuevoParametroImpor);			
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonModificarParametroImpor.setVisible(this.isPermisoActualizarParametroImpor);	
			this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.setVisible(this.isPermisoActualizarParametroImpor);	
			this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.setVisible(this.isPermisoEliminarParametroImpor);
			this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.setVisible(this.isVisibilidadCeldaCancelarParametroImpor);						
			this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.setVisible(this.isPermisoGuardarCambiosParametroImpor);							
		}
		
		this.jButtonGuardarCambiosTablaParametroImpor.setVisible(this.isPermisoActualizarParametroImpor);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroImpor() {
		this.jInternalFrameDetalleFormParametroImpor.jButtonModificarParametroImpor.setVisible(this.isPermisoActualizarParametroImpor);	
		this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.setVisible(this.isPermisoActualizarParametroImpor);	
		this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.setVisible(this.isPermisoEliminarParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.setVisible(this.isVisibilidadCeldaCancelarParametroImpor);							
		this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.setVisible((this.isVisibilidadCeldaGuardarParametroImpor && this.isPermisoGuardarCambiosParametroImpor));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosParametroImpor() {
		if(ParametroImporJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualParametroImpor();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesParametroImpor() {
	}
	
	public void jTableDatosParametroImporListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarParametroImpor(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.parametroimpor.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebParametroImpor(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderParametroImpor.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.parametroimpor.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebParametroImpor(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderParametroImpor.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.parametroimpor.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebParametroImpor(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderParametroImpor.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.parametroimpor.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebParametroImpor(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderParametroImpor.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.parametroimpor.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebParametroImpor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderParametroImpor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.parametroimpor.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccion_orden_compraParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccionordencompra=true;

			idTienePermisotransaccionordencompra=this.tienePermisosUsuarioEnPaginaWebParametroImpor(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccionordencompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.transaccionordencompraBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionordencompraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionordencompraBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_transaccion_orden_compra()!=null) {
					this.transaccionordencompraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionordencompraBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_transaccion_orden_compra());
					this.transaccionordencompraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionordencompraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionordencompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionordencompraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBordertransaccionordencompra=(TitledBorder)this.transaccionordencompraBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccionordencompra.setTitle(titledBorderParametroImpor.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccion_orden_compraParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_transaccion_orden_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion_orden_compra = "+this.parametroimpor.getid_transaccion_orden_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccion_ingresoParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccioningreso=true;

			idTienePermisotransaccioningreso=this.tienePermisosUsuarioEnPaginaWebParametroImpor(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccioningreso) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.transaccioningresoBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccioningresoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccioningresoBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_transaccion_ingreso()!=null) {
					this.transaccioningresoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccioningresoBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_transaccion_ingreso());
					this.transaccioningresoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccioningresoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccioningresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccioningresoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBordertransaccioningreso=(TitledBorder)this.transaccioningresoBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccioningreso.setTitle(titledBorderParametroImpor.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccion_ingresoParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_transaccion_ingreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion_ingreso = "+this.parametroimpor.getid_transaccion_ingreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_orden_compraParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoordencompra=true;

			idTienePermisoformatoordencompra=this.tienePermisosUsuarioEnPaginaWebParametroImpor(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoordencompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.formatoordencompraBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoordencompraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoordencompraBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_formato_orden_compra()!=null) {
					this.formatoordencompraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoordencompraBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_formato_orden_compra());
					this.formatoordencompraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoordencompraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoordencompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoordencompraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderformatoordencompra=(TitledBorder)this.formatoordencompraBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoordencompra.setTitle(titledBorderParametroImpor.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_orden_compraParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_formato_orden_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_orden_compra = "+this.parametroimpor.getid_formato_orden_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_ingresoParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoingreso=true;

			idTienePermisoformatoingreso=this.tienePermisosUsuarioEnPaginaWebParametroImpor(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoingreso) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.formatoingresoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoingresoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoingresoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_formato_ingreso()!=null) {
					this.formatoingresoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoingresoBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_formato_ingreso());
					this.formatoingresoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoingresoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoingresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoingresoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderformatoingreso=(TitledBorder)this.formatoingresoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoingreso.setTitle(titledBorderParametroImpor.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_ingresoParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_formato_ingreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_ingreso = "+this.parametroimpor.getid_formato_ingreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_pedidoParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatopedido=true;

			idTienePermisoformatopedido=this.tienePermisosUsuarioEnPaginaWebParametroImpor(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatopedido) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.formatopedidoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatopedidoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatopedidoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_formato_pedido()!=null) {
					this.formatopedidoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatopedidoBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_formato_pedido());
					this.formatopedidoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatopedidoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatopedidoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatopedidoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderformatopedido=(TitledBorder)this.formatopedidoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatopedido.setTitle(titledBorderParametroImpor.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_pedidoParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_formato_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_pedido = "+this.parametroimpor.getid_formato_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_liquidacionParametroImporUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoliquidacion=true;

			idTienePermisoformatoliquidacion=this.tienePermisosUsuarioEnPaginaWebParametroImpor(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoliquidacion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroImpor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroImpor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);

				this.formatoliquidacionBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoliquidacionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoliquidacionBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.parametroimporLogic.getConnexion());

				if(this.parametroimpor.getid_formato_liquidacion()!=null) {
					this.formatoliquidacionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoliquidacionBeanSwingJInternalFrame.setIdActual(this.parametroimpor.getid_formato_liquidacion());
					this.formatoliquidacionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoliquidacionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoliquidacionBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoliquidacionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroImpor=(TitledBorder)this.jScrollPanelDatosParametroImpor.getBorder();
				TitledBorder titledBorderformatoliquidacion=(TitledBorder)this.formatoliquidacionBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoliquidacion.setTitle(titledBorderParametroImpor.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_liquidacionParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getid_formato_liquidacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_liquidacion = "+this.parametroimpor.getid_formato_liquidacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondias_llega_bodegaParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getdias_llega_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where dias_llega_bodega = "+this.parametroimpor.getdias_llega_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_seguroParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getporcentaje_seguro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_seguro = "+this.parametroimpor.getporcentaje_seguro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfodinParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getfodin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fodin = "+this.parametroimpor.getfodin().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncorpeiParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcorpei()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where corpei = "+this.parametroimpor.getcorpei().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_secuencialParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcon_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_secuencial = "+this.parametroimpor.getcon_secuencial().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencialParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getsecuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial like '%"+this.parametroimpor.getsecuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_peso_precioParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcon_peso_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_peso_precio = "+this.parametroimpor.getcon_peso_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_loteParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcon_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_lote = "+this.parametroimpor.getcon_lote().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_unidadParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcon_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_unidad = "+this.parametroimpor.getcon_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_conversionParametroImporBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.getparametroimpor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametroimpor==null) {
						this.parametroimpor = new ParametroImpor();
					}

					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);
				}

				if(this.parametroimpor.getcon_conversion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_conversion = "+this.parametroimpor.getcon_conversion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroImpor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBodegaParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdBodega();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdCentroCosto();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdCuentaContable();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdEmpresa();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoIngresoParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdFormatoIngreso();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoLiquacionParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdFormatoLiquacion();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoOrdenCompraParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdFormatoOrdenCompra();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoPedoParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdFormatoPedo();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdPais();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionIngresoParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdTransaccionIngreso();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionOrdenCompraParametroImporActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroImpor(false,false);

			this.getParametroImporsFK_IdTransaccionOrdenCompra();

			this.inicializarActualizarBindingParametroImpor(false);

			//if(ParametroImporBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroImpor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametroimporLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameParametroImpor() {
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
			this.jInternalFrameDetalleFormParametroImpor.setVisible(false);	    			
			this.jInternalFrameDetalleFormParametroImpor.dispose();
			this.jInternalFrameDetalleFormParametroImpor=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
			this.jInternalFrameReporteDinamicoParametroImpor.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoParametroImpor.dispose();
			this.jInternalFrameReporteDinamicoParametroImpor=null;
		}
		
		if(this.jInternalFrameImportacionParametroImpor!=null) {
			this.jInternalFrameImportacionParametroImpor.setVisible(false);	    			
			this.jInternalFrameImportacionParametroImpor.dispose();
			this.jInternalFrameImportacionParametroImpor=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessParametroImpor();
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			
			if(sTipo.equals("NuevoParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarParametroImpor")) {
				jButtonDuplicarParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarParametroImpor")) {
				jButtonCopiarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("VerFormParametroImpor")) {
				jButtonVerFormParametroImporActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarParametroImpor")) {
				jButtonDuplicarParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarParametroImpor")) {
				jButtonDuplicarParametroImporActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarParametroImpor")) {
				jButtonModificarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarParametroImpor")) {
				jButtonModificarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarParametroImpor")) {
				jButtonModificarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("ActualizarParametroImpor")) {
				jButtonActualizarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarParametroImpor")) {
				jButtonActualizarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarParametroImpor")) {
				jButtonActualizarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("EliminarParametroImpor")) {
				jButtonEliminarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarParametroImpor")) {
				jButtonEliminarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarParametroImpor")) {
				jButtonEliminarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("CancelarParametroImpor")) {
				jButtonCancelarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarParametroImpor")) {
				jButtonCancelarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarParametroImpor")) {
				jButtonCancelarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("CerrarParametroImpor")) {
				jButtonCerrarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarParametroImpor")) {
				jButtonCerrarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarParametroImpor")) {
				jButtonCerrarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarParametroImpor")) {
				jButtonMostrarOcultarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarParametroImpor")) {
				jButtonCancelarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarParametroImpor")) {
				jButtonCopiarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarParametroImpor")) {
				jButtonVerFormParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarParametroImpor")) {
				jButtonCopiarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormParametroImpor")) {
				jButtonVerFormParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionParametroImpor")) {
				jButtonRecargarInformacionParametroImporActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarParametroImpor")) {
				jButtonRecargarInformacionParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionParametroImpor")) {
				jButtonRecargarInformacionParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresParametroImpor")) {
				jButtonAnterioresParametroImporActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarParametroImpor")) {
				jButtonAnterioresParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreParametroImpor")) {
				jButtonAnterioresParametroImporActionPerformed(evt);
			} else if(sTipo.equals("SiguientesParametroImpor")) {
				jButtonSiguientesParametroImporActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarParametroImpor")) {
				jButtonSiguientesParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesParametroImpor")) {
				jButtonSiguientesParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByParametroImpor") || sTipo.equals("MenuItemDetalleAbrirOrderByParametroImpor")) {
				jButtonAbrirOrderByParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarParametroImpor") || sTipo.equals("MenuItemDetalleMostrarOcultarParametroImpor")) {
				jButtonMostrarOcultarParametroImporActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosParametroImpor")) {
				jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarParametroImpor")) {
				jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosParametroImpor")) {
				jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoParametroImpor")) {
				jButtonCerrarReporteDinamicoParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoParametroImpor")) {
				jButtonGenerarReporteDinamicoParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoParametroImpor")) {
				
				jButtonGenerarExcelReporteDinamicoParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionParametroImpor")) {
				jButtonCerrarImportacionParametroImporActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionParametroImpor")) {
				
				jButtonGenerarImportacionParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionParametroImpor")) {
				
				jButtonAbrirImportacionParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesParametroImpor")) {
				jComboBoxTiposAccionesParametroImporActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesParametroImpor")) {
				jComboBoxTiposRelacionesParametroImporActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioParametroImpor")) {
				jComboBoxTiposAccionesParametroImporActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarParametroImpor")) {
				
				jComboBoxTiposSeleccionarParametroImporActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralParametroImpor")) {
				jTextFieldValorCampoGeneralParametroImporActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByParametroImpor")) {
				jButtonAbrirOrderByParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarParametroImpor")) {
				jButtonAbrirOrderByParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByParametroImpor")) {
				jButtonCerrarOrderByParametroImporActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroImporBusqueda")) {
				this.jButtonidParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroImporUpdate")) {
				this.jButtonid_empresaParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroImporBusqueda")) {
				this.jButtonid_empresaParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisParametroImporUpdate")) {
				this.jButtonid_paisParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisParametroImporBusqueda")) {
				this.jButtonid_paisParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaParametroImporUpdate")) {
				this.jButtonid_bodegaParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaParametroImporBusqueda")) {
				this.jButtonid_bodegaParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoParametroImporUpdate")) {
				this.jButtonid_centro_costoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoParametroImporBusqueda")) {
				this.jButtonid_centro_costoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableParametroImporUpdate")) {
				this.jButtonid_cuenta_contableParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableParametroImporBusqueda")) {
				this.jButtonid_cuenta_contableParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_orden_compraParametroImporUpdate")) {
				this.jButtonid_transaccion_orden_compraParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_orden_compraParametroImporBusqueda")) {
				this.jButtonid_transaccion_orden_compraParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_ingresoParametroImporUpdate")) {
				this.jButtonid_transaccion_ingresoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_ingresoParametroImporBusqueda")) {
				this.jButtonid_transaccion_ingresoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_orden_compraParametroImporUpdate")) {
				this.jButtonid_formato_orden_compraParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_orden_compraParametroImporBusqueda")) {
				this.jButtonid_formato_orden_compraParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_ingresoParametroImporUpdate")) {
				this.jButtonid_formato_ingresoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_ingresoParametroImporBusqueda")) {
				this.jButtonid_formato_ingresoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroImporUpdate")) {
				this.jButtonid_formato_pedidoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroImporBusqueda")) {
				this.jButtonid_formato_pedidoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_liquidacionParametroImporUpdate")) {
				this.jButtonid_formato_liquidacionParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_liquidacionParametroImporBusqueda")) {
				this.jButtonid_formato_liquidacionParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_llega_bodegaParametroImporBusqueda")) {
				this.jButtondias_llega_bodegaParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_seguroParametroImporBusqueda")) {
				this.jButtonporcentaje_seguroParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fodinParametroImporBusqueda")) {
				this.jButtonfodinParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("corpeiParametroImporBusqueda")) {
				this.jButtoncorpeiParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_secuencialParametroImporBusqueda")) {
				this.jButtoncon_secuencialParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialParametroImporBusqueda")) {
				this.jButtonsecuencialParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_peso_precioParametroImporBusqueda")) {
				this.jButtoncon_peso_precioParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_loteParametroImporBusqueda")) {
				this.jButtoncon_loteParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_unidadParametroImporBusqueda")) {
				this.jButtoncon_unidadParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_conversionParametroImporBusqueda")) {
				this.jButtoncon_conversionParametroImporBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdBodegaParametroImpor")) {
				this.jButtonFK_IdBodegaParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoParametroImpor")) {
				this.jButtonFK_IdCentroCostoParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableParametroImpor")) {
				this.jButtonFK_IdCuentaContableParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoIngresoParametroImpor")) {
				this.jButtonFK_IdFormatoIngresoParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoLiquacionParametroImpor")) {
				this.jButtonFK_IdFormatoLiquacionParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoOrdenCompraParametroImpor")) {
				this.jButtonFK_IdFormatoOrdenCompraParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoPedoParametroImpor")) {
				this.jButtonFK_IdFormatoPedoParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisParametroImpor")) {
				this.jButtonFK_IdPaisParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionIngresoParametroImpor")) {
				this.jButtonFK_IdTransaccionIngresoParametroImporActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionOrdenCompraParametroImpor")) {
				this.jButtonFK_IdTransaccionOrdenCompraParametroImporActionPerformed(evt);
			}
			
			;
			
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessParametroImpor();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ParametroImpor parametroimporLocal=null;
			
			if(!this.getEsControlTabla()) {
				parametroimporLocal=this.parametroimpor;
			} else {
				parametroimporLocal=this.parametroimporAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
							
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
								
						
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
								
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
							
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
								
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosParametroImpor")) {
					jCheckBoxSeleccionarTodosParametroImporItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosParametroImpor")) {
					jCheckBoxSeleccionadosParametroImporItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarParametroImpor")) {
					
				}
				
				


				
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
												
				
				


				
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroImporActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametroimpor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametroimpor);
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroImpor.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroImpor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroImporActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametroimporAnterior =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarParametroImpor")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosParametroImporListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosParametroImpor.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.parametroimpor =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.parametroimpor =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.parametroimpor);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarParametroImpor")) {
				
				}
				
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarParametroImpor")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosParametroImpor.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarParametroImpor")) {
			
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessParametroImpor();
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			if(sTipo.equals("NuevoParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarParametroImpor")) {
				jButtonDuplicarParametroImporActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarParametroImpor")) {
				jButtonCopiarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormParametroImpor")) {
				jButtonVerFormParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesParametroImpor")) {
				jButtonNuevoParametroImporActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarParametroImpor")) {
				jButtonModificarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarParametroImpor")) {
				jButtonActualizarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarParametroImpor")) {
				jButtonEliminarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarParametroImpor")) {
				jButtonCancelarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarParametroImpor")) {
				jButtonCerrarParametroImporActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosParametroImpor")) {
				jButtonGuardarCambiosParametroImporActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosParametroImpor")) {
				jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByParametroImpor")) {
				jButtonAbrirOrderByParametroImporActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionParametroImpor")) {
				jButtonRecargarInformacionParametroImporActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresParametroImpor")) {
				jButtonAnterioresParametroImporActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesParametroImpor")) {
				jButtonSiguientesParametroImporActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroImporBusqueda")) {
				this.jButtonidParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroImporUpdate")) {
				this.jButtonid_empresaParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroImporBusqueda")) {
				this.jButtonid_empresaParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisParametroImporUpdate")) {
				this.jButtonid_paisParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisParametroImporBusqueda")) {
				this.jButtonid_paisParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaParametroImporUpdate")) {
				this.jButtonid_bodegaParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaParametroImporBusqueda")) {
				this.jButtonid_bodegaParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoParametroImporUpdate")) {
				this.jButtonid_centro_costoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoParametroImporBusqueda")) {
				this.jButtonid_centro_costoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableParametroImporUpdate")) {
				this.jButtonid_cuenta_contableParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableParametroImporBusqueda")) {
				this.jButtonid_cuenta_contableParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_orden_compraParametroImporUpdate")) {
				this.jButtonid_transaccion_orden_compraParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_orden_compraParametroImporBusqueda")) {
				this.jButtonid_transaccion_orden_compraParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_ingresoParametroImporUpdate")) {
				this.jButtonid_transaccion_ingresoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_ingresoParametroImporBusqueda")) {
				this.jButtonid_transaccion_ingresoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_orden_compraParametroImporUpdate")) {
				this.jButtonid_formato_orden_compraParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_orden_compraParametroImporBusqueda")) {
				this.jButtonid_formato_orden_compraParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_ingresoParametroImporUpdate")) {
				this.jButtonid_formato_ingresoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_ingresoParametroImporBusqueda")) {
				this.jButtonid_formato_ingresoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroImporUpdate")) {
				this.jButtonid_formato_pedidoParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_pedidoParametroImporBusqueda")) {
				this.jButtonid_formato_pedidoParametroImporBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_liquidacionParametroImporUpdate")) {
				this.jButtonid_formato_liquidacionParametroImporUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_liquidacionParametroImporBusqueda")) {
				this.jButtonid_formato_liquidacionParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("dias_llega_bodegaParametroImporBusqueda")) {
				this.jButtondias_llega_bodegaParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_seguroParametroImporBusqueda")) {
				this.jButtonporcentaje_seguroParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fodinParametroImporBusqueda")) {
				this.jButtonfodinParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("corpeiParametroImporBusqueda")) {
				this.jButtoncorpeiParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_secuencialParametroImporBusqueda")) {
				this.jButtoncon_secuencialParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialParametroImporBusqueda")) {
				this.jButtonsecuencialParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_peso_precioParametroImporBusqueda")) {
				this.jButtoncon_peso_precioParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_loteParametroImporBusqueda")) {
				this.jButtoncon_loteParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_unidadParametroImporBusqueda")) {
				this.jButtoncon_unidadParametroImporBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_conversionParametroImporBusqueda")) {
				this.jButtoncon_conversionParametroImporBusquedaActionPerformed(evt);
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessParametroImpor();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameParametroImpor")) {
				closingInternalFrameParametroImpor();
				
			} else if(sTipo.equals("jButtonCancelarParametroImpor")) {
				JInternalFrameBase jInternalFrameDetalleFormParametroImpor = (JInternalFrameBase)evt.getSource();
	            	
	            ParametroImporBeanSwingJInternalFrame jInternalFrameParent=(ParametroImporBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroImpor.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarParametroImporActionPerformed(null);
			}
			
			ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametroimpor,new Object(),this.parametroimporParameterGeneral,this.parametroimporReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormParametroImpor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormParametroImpor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormParametroImpor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.parametroimpor)) {
			if(!esControlTabla) {
				if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);			
				}
				
				if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualParametroImpor(this.parametroimpor,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametroimporReturnGeneral=parametroimporLogic.procesarEventosParametroImporsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroimporLogic.getParametroImpors(),this.parametroimpor,this.parametroimporParameterGeneral,this.isEsNuevoParametroImpor,classes);//this.parametroimporLogic.getParametroImpor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanParametroImpor(this.parametroimporReturnGeneral,this.parametroimporBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanParametroImpor(classes,this.parametroimporReturnGeneral,this.parametroimporBean,false);
					}
						
					if(this.parametroimporReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyParametroImpor(this.parametroimporReturnGeneral.getParametroImpor());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioParametroImpor(this.parametroimporReturnGeneral.getParametroImpor());	
					}
						
					if(this.parametroimporReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioParametroImpor(this.parametroimporReturnGeneral.getParametroImpor(),classes);//this.parametroimporBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioParametroImpor(this.parametroimpor,classes);//this.parametroimporBean);									
				}
			
				if(ParametroImporJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualParametroImpor(this.parametroimpor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroImpor(this.parametroimpor);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.parametroimporAnterior!=null) {
						this.parametroimpor=this.parametroimporAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametroimporReturnGeneral=parametroimporLogic.procesarEventosParametroImporsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroimporLogic.getParametroImpors(),this.parametroimpor,this.parametroimporParameterGeneral,this.isEsNuevoParametroImpor,classes);//this.parametroimporLogic.getParametroImpor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametroimporSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametroimporSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.parametroimporReturnGeneral.getParametroImpor(),parametroimporLogic.getParametroImpors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.parametroimporReturnGeneral.getParametroImpor(),this.parametroimpors);
				}
				//ARCHITECTURE
				
				//this.jTableDatosParametroImpor.repaint();
				
				//((AbstractTableModel) this.jTableDatosParametroImpor.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosParametroImpor();
			}
		}
	}
	
	public void actualizarVisualTableDatosParametroImpor() throws Exception {
		
		ParametroImporModel parametroimporModel=(ParametroImporModel)this.jTableDatosParametroImpor.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametroimporModel.parametroimpors=this.parametroimporLogic.getParametroImpors();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			parametroimporModel.parametroimpors=this.parametroimpors;
		}
		
		
		((ParametroImporModel) this.jTableDatosParametroImpor.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaParametroImpor() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getparametroimporAnterior(),this.parametroimporLogic.getParametroImpors());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getparametroimporAnterior(),this.parametroimpors);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosParametroImpor();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioParametroImpor(ParametroImpor parametroimpor,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroimpor,new Object(),generalEntityParameterGeneral,this.parametroimporReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.parametroimporSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ParametroImporConstantesFunciones.getClassesRelationshipsOfParametroImpor(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ParametroImporConstantesFunciones.getClassesRelationshipsFromStringsOfParametroImpor(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormParametroImpor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ParametroImporBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametroimpor,new Object(),generalEntityParameterGeneral,this.parametroimporReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioParametroImpor(ParametroImporBean parametroimporBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanParametroImpor(ArrayList<Classe> classes,ParametroImporReturnGeneral parametroimporReturnGeneral,ParametroImporBean parametroimporBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualParametroImpor(ParametroImpor parametroimpor,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.parametroimpor)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormParametroImpor = new ParametroImporDetalleFormJInternalFrame(jDesktopPane,this.parametroimporSessionBean.getConGuardarRelaciones(),this.parametroimporSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.setVisible(false);
		this.jInternalFrameDetalleFormParametroImpor.setSelected(false);						
		
		this.jInternalFrameDetalleFormParametroImpor.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormParametroImpor.parametroimporLogic=this.parametroimporLogic;
		
		this.cargarCombosFrameForeignKeyParametroImpor("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroImpor();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroImpor();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyParametroImpor("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyParametroImpor();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormParametroImpor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroImpor"));
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonModificarParametroImpor.addActionListener(new ButtonActionListener(this,"ModificarParametroImpor"));

		
		this.jInternalFrameDetalleFormParametroImpor.jButtonModificarToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroImpor"));
					
		this.jInternalFrameDetalleFormParametroImpor.jMenuItemModificarParametroImpor.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroImpor"));		
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.addActionListener (new ButtonActionListener(this,"ActualizarParametroImpor"));
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroImpor"));
						
		this.jInternalFrameDetalleFormParametroImpor.jMenuItemActualizarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroImpor"));		
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.addActionListener (new ButtonActionListener(this,"EliminarParametroImpor"));
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroImpor"));
								
		this.jInternalFrameDetalleFormParametroImpor.jMenuItemEliminarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroImpor"));		
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.addActionListener (new ButtonActionListener(this,"CancelarParametroImpor"));
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroImpor"));
					
		this.jInternalFrameDetalleFormParametroImpor.jMenuItemCancelarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroImpor"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jMenuItemDetalleCerrarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroImpor"));		
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroImpor"));
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroImpor"));
		
		
		
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroImpor"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonidParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"idParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtondias_llega_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"dias_llega_bodegaParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonporcentaje_seguroParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_seguroParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonfodinParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"fodinParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncorpeiParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"corpeiParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_secuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonsecuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_peso_precioParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_peso_precioParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_loteParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_loteParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_unidadParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_unidadParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_conversionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_conversionParametroImporBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroImpor"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameParametroImpor"));
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroImpor"));
		}
		
		this.jTableDatosParametroImpor.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarParametroImpor"));
		
		this.jTableDatosParametroImpor.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarParametroImpor"));
		
		this.jButtonNuevoParametroImpor.addActionListener(new ButtonActionListener(this,"NuevoParametroImpor"));
		
		this.jButtonDuplicarParametroImpor.addActionListener(new ButtonActionListener(this,"DuplicarParametroImpor"));
		
		this.jButtonCopiarParametroImpor.addActionListener(new ButtonActionListener(this,"CopiarParametroImpor"));
		
		this.jButtonVerFormParametroImpor.addActionListener(new ButtonActionListener(this,"VerFormParametroImpor"));
		
		
		this.jButtonNuevoToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"NuevoToolBarParametroImpor"));
			
		this.jButtonDuplicarToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"DuplicarToolBarParametroImpor"));
			
		this.jMenuItemNuevoParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoParametroImpor"));
			
		this.jMenuItemDuplicarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarParametroImpor"));		
		
		
		this.jButtonNuevoRelacionesParametroImpor.addActionListener (new ButtonActionListener(this,"NuevoRelacionesParametroImpor"));
		
		
		this.jButtonNuevoRelacionesToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarParametroImpor"));
			
		this.jMenuItemNuevoRelacionesParametroImpor.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesParametroImpor"));		
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonModificarParametroImpor.addActionListener(new ButtonActionListener(this,"ModificarParametroImpor"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonModificarToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroImpor"));
			
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemModificarParametroImpor.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroImpor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarParametroImpor.addActionListener (new ButtonActionListener(this,"ActualizarParametroImpor"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonActualizarToolBarParametroImpor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroImpor"));
				
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemActualizarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroImpor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarParametroImpor.addActionListener (new ButtonActionListener(this,"EliminarParametroImpor"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonEliminarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroImpor"));
						
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemEliminarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroImpor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarParametroImpor.addActionListener (new ButtonActionListener(this,"CancelarParametroImpor"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonCancelarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroImpor"));
			
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemCancelarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroImpor"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarParametroImpor"));		
		
		
		this.jButtonCerrarParametroImpor.addActionListener (new ButtonActionListener(this,"CerrarParametroImpor"));
		
		
		this.jButtonCerrarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"CerrarToolBarParametroImpor"));
			
		this.jMenuItemCerrarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemCerrarParametroImpor"));
			
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jMenuItemDetalleCerrarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroImpor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosParametroImpor"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroImpor"));
		}
		
		this.jButtonCopiarToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"CopiarToolBarParametroImpor"));
			
		this.jButtonVerFormToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"VerFormToolBarParametroImpor"));
		
		this.jMenuItemGuardarCambiosParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosParametroImpor"));
			
		this.jMenuItemCopiarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemCopiarParametroImpor"));		
		
		this.jMenuItemVerFormParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemVerFormParametroImpor"));		
		
		
		this.jButtonGuardarCambiosTablaParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroImpor"));
		
		
		this.jButtonGuardarCambiosTablaToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarParametroImpor"));
			
		this.jMenuItemGuardarCambiosTablaParametroImpor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroImpor"));		
		
		
		
		this.jButtonRecargarInformacionParametroImpor.addActionListener (new ButtonActionListener(this,"RecargarInformacionParametroImpor"));
					
		this.jButtonRecargarInformacionToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarParametroImpor"));
		
		this.jMenuItemRecargarInformacionParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionParametroImpor"));		
		
		
		
		this.jButtonAnterioresParametroImpor.addActionListener (new ButtonActionListener(this,"AnterioresParametroImpor"));
		
		
		this.jButtonAnterioresToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"AnterioresToolBarParametroImpor"));
		
		this.jMenuItemAnterioresParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresParametroImpor"));		
		
		
		this.jButtonSiguientesParametroImpor.addActionListener (new ButtonActionListener(this,"SiguientesParametroImpor"));
		
		
		this.jButtonSiguientesToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"SiguientesToolBarParametroImpor"));
			
		this.jMenuItemSiguientesParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesParametroImpor"));
			
		this.jMenuItemAbrirOrderByParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByParametroImpor"));
			
		this.jMenuItemMostrarOcultarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarParametroImpor"));
			
		this.jMenuItemDetalleAbrirOrderByParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByParametroImpor"));
			
		this.jMenuItemDetalleMostarOcultarParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarParametroImpor"));		
		
		
		this.jButtonNuevoGuardarCambiosParametroImpor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosParametroImpor"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarParametroImpor"));
			
		this.jMenuItemNuevoGuardarCambiosParametroImpor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosParametroImpor"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosParametroImpor.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosParametroImpor"));

		this.jCheckBoxSeleccionadosParametroImpor.addItemListener(new CheckBoxItemListener(this,"SeleccionadosParametroImpor"));
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroImpor"));
		}
		
		
		this.jComboBoxTiposRelacionesParametroImpor.addActionListener (new ButtonActionListener(this,"TiposRelacionesParametroImpor"));
			
		this.jComboBoxTiposAccionesParametroImpor.addActionListener (new ButtonActionListener(this,"TiposAccionesParametroImpor"));
					
		this.jComboBoxTiposSeleccionarParametroImpor.addActionListener (new ButtonActionListener(this,"TiposSeleccionarParametroImpor"));
			
		this.jTextFieldValorCampoGeneralParametroImpor.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralParametroImpor"));		
		
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonidParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"idParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtondias_llega_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"dias_llega_bodegaParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonporcentaje_seguroParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_seguroParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonfodinParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"fodinParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncorpeiParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"corpeiParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_secuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonsecuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_peso_precioParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_peso_precioParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_loteParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_loteParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_unidadParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_unidadParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_conversionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_conversionParametroImporBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaParametroImpor"));

			this.jButtonFK_IdCentroCostoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoParametroImpor"));

			this.jButtonFK_IdCuentaContableParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableParametroImpor"));

			this.jButtonFK_IdFormatoIngresoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoIngresoParametroImpor"));

			this.jButtonFK_IdFormatoLiquacionParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoLiquacionParametroImpor"));

			this.jButtonFK_IdFormatoOrdenCompraParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoOrdenCompraParametroImpor"));

			this.jButtonFK_IdFormatoPedoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoPedoParametroImpor"));

			this.jButtonFK_IdPaisParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdPaisParametroImpor"));

			this.jButtonFK_IdTransaccionIngresoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionIngresoParametroImpor"));

			this.jButtonFK_IdTransaccionOrdenCompraParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionOrdenCompraParametroImpor"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoParametroImpor!=null) {
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroImpor"));
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroImpor"));
				this.jInternalFrameReporteDinamicoParametroImpor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroImpor"));
			}
			
			//this.jButtonCerrarReporteDinamicoParametroImpor.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroImpor"));				
			//this.jButtonGenerarReporteDinamicoParametroImpor.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroImpor"));
			//this.jButtonGenerarExcelReporteDinamicoParametroImpor.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroImpor"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionParametroImpor!=null) {
				this.jInternalFrameImportacionParametroImpor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroImpor"));
				this.jInternalFrameImportacionParametroImpor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroImpor"));
				this.jInternalFrameImportacionParametroImpor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroImpor"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByParametroImpor.addActionListener (new ButtonActionListener(this,"AbrirOrderByParametroImpor"));
			
			this.jButtonAbrirOrderByToolBarParametroImpor.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarParametroImpor"));			
			
			if(this.jInternalFrameOrderByParametroImpor!=null) {
				this.jInternalFrameOrderByParametroImpor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroImpor"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormParametroImpor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroImpor.jTabbedPaneRelacionesParametroImpor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroImpor"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameParametroImpor();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormParametroImpor.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormParametroImpor = (JInternalFrameBase)event.getSource();
	            	
	            ParametroImporBeanSwingJInternalFrame jInternalFrameParent=(ParametroImporBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroImpor.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarParametroImporActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosParametroImpor.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosParametroImporListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosParametroImpor.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosParametroImpor.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoParametroImpor";
		inputMap = this.jButtonNuevoParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroImporActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroImporActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesParametroImpor";
		inputMap = this.jButtonNuevoRelacionesParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroImporActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarParametroImpor";
		inputMap = this.jButtonModificarParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarParametroImpor";
		inputMap = this.jButtonActualizarParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarParametroImpor";
		inputMap = this.jButtonEliminarParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarParametroImpor";
		inputMap = this.jButtonCancelarParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarParametroImpor";
		inputMap = this.jButtonCerrarParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosParametroImpor";
		inputMap = this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormParametroImpor.jButtonGuardarCambiosParametroImpor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosParametroImporActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosParametroImpor.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosParametroImporItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesParametroImpor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesParametroImporActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarParametroImpor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarParametroImporActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralParametroImpor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralParametroImporActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonidParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"idParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_empresaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_paisParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_paisParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_paisParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_centro_costoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_cuenta_contableParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_transaccion_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_orden_compraParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_orden_compraParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_ingresoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_pedidoParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_pedidoParametroImporBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporUpdate.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonid_formato_liquidacionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_liquidacionParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtondias_llega_bodegaParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"dias_llega_bodegaParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonporcentaje_seguroParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_seguroParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonfodinParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"fodinParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncorpeiParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"corpeiParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_secuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtonsecuencialParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"secuencialParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_peso_precioParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_peso_precioParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_loteParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_loteParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_unidadParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_unidadParametroImporBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroImpor.jButtoncon_conversionParametroImporBusqueda.addActionListener(new ButtonActionListener(this,"con_conversionParametroImporBusqueda"));
		
		
		this.jButtonFK_IdBodegaParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaParametroImpor"));

		this.jButtonFK_IdCentroCostoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoParametroImpor"));

		this.jButtonFK_IdCuentaContableParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableParametroImpor"));

		this.jButtonFK_IdFormatoIngresoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoIngresoParametroImpor"));

		this.jButtonFK_IdFormatoLiquacionParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoLiquacionParametroImpor"));

		this.jButtonFK_IdFormatoOrdenCompraParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoOrdenCompraParametroImpor"));

		this.jButtonFK_IdFormatoPedoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdFormatoPedoParametroImpor"));

		this.jButtonFK_IdPaisParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdPaisParametroImpor"));

		this.jButtonFK_IdTransaccionIngresoParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionIngresoParametroImpor"));

		this.jButtonFK_IdTransaccionOrdenCompraParametroImpor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionOrdenCompraParametroImpor"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionParametroImpor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionParametroImporActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarParametroImporActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarParametroImpor.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosParametroImpor(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
					parametroimporAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroImpor parametroimporAux:parametroimpors) {
					parametroimporAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosParametroImporItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroImpor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
						parametroimporAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroImpor parametroimporAux:parametroimpors) {
						parametroimporAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
					
						if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL)) {
							existe=true;
							parametroimporAux.setcon_secuencial(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO)) {
							existe=true;
							parametroimporAux.setcon_peso_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONLOTE)) {
							existe=true;
							parametroimporAux.setcon_lote(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONUNIDAD)) {
							existe=true;
							parametroimporAux.setcon_unidad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONCONVERSION)) {
							existe=true;
							parametroimporAux.setcon_conversion(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroImpor parametroimporAux:parametroimpors) {
						
						if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL)) {
							existe=true;
							parametroimporAux.setcon_secuencial(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO)) {
							existe=true;
							parametroimporAux.setcon_peso_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONLOTE)) {
							existe=true;
							parametroimporAux.setcon_lote(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONUNIDAD)) {
							existe=true;
							parametroimporAux.setcon_unidad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONCONVERSION)) {
							existe=true;
							parametroimporAux.setcon_conversion(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaParametroImpor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroImpor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroImpor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosParametroImporItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroImpor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosParametroImpor.getSelectedRows();
			
			ParametroImpor parametroimporLocal=new ParametroImpor();
			
			//this.seleccionarTodosParametroImpor(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametroimporLocal =(ParametroImpor) this.parametroimporLogic.getParametroImpors().toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					parametroimporLocal =(ParametroImpor) this.parametroimpors.toArray()[this.jTableDatosParametroImpor.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				parametroimporLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
						parametroimporAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroImpor parametroimporAux:parametroimpors) {
						parametroimporAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaParametroImpor(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroImpor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroImpor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroImpor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualParametroImporItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarParametroImporParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralParametroImporActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingParametroImpor(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralParametroImpor.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroImpor parametroimporAux:this.parametroimporLogic.getParametroImpors()) {
				
						if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA)) {
							existe=true;
							parametroimporAux.setdias_llega_bodega(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO)) {
							existe=true;
							parametroimporAux.setporcentaje_seguro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_FODIN)) {
							existe=true;
							parametroimporAux.setfodin(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CORPEI)) {
							existe=true;
							parametroimporAux.setcorpei(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							parametroimporAux.setsecuencial(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroImpor parametroimporAux:parametroimpors) {
					
						if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA)) {
							existe=true;
							parametroimporAux.setdias_llega_bodega(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO)) {
							existe=true;
							parametroimporAux.setporcentaje_seguro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_FODIN)) {
							existe=true;
							parametroimporAux.setfodin(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CORPEI)) {
							existe=true;
							parametroimporAux.setcorpei(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							parametroimporAux.setsecuencial(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaParametroImpor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesParametroImporActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingParametroImpor(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioParametroImpor=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesParametroImpor.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteParametroImpor) {				
					conSplash=true;//false;										
					
					//this.startProcessParametroImpor(conSplash);
				
					this.generarReporteParametroImporsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoParametroImporsSeleccionados();
				//this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroImporsSeleccionados(false);
				//this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroImporsSeleccionados(true);
				//this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroImpor();
				
				this.exportarParametroImporsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionParametroImpors();
				//this.importarParametroImpors();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroImpor();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelParametroImporsSeleccionados();
				//this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Parametro Impor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessParametroImpor();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoParametroImpor)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyParametroImpor(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
				}	
			} 			
			else if(ParametroImporBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteParametroImpor) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessParametroImpor(conSplash);
					
						//this.actualizarParametrosGeneralParametroImpor();
						
						this.generarReporteProcesoAccionParametroImporsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ParametroImporBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Parametro ImporES SELECCIONADOS?", "MANTENIMIENTO DE Parametro Impor", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessParametroImpor();
				
						this.actualizarParametrosGeneralParametroImpor();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.parametroimporReturnGeneral=parametroimporLogic.procesarAccionParametroImporsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.parametroimporLogic.getParametroImpors(),this.parametroimporParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarParametroImporReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralParametroImpor();
					
					ParametroImporBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarParametroImporReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroImpor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroImpor.jComboBoxTiposAccionesFormularioParametroImpor.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessParametroImpor(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesParametroImporActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessParametroImpor();
			
			if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
			ParametroImpor parametroimpor=new ParametroImpor();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingParametroImpor(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesParametroImpor.getSelectedItem();
			
			
			
			
			parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
			//this.sTipoAccion;
			
			if(parametroimporsSeleccionados.size()==1) {
				for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
					parametroimpor=parametroimporAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessParametroImpor();
			
      		//this.finishProcessParametroImpor(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarParametroImporReturnGeneral() throws Exception {
		if(this.parametroimporReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.parametroimporReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.parametroimporReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.parametroimporReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.parametroimporReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.parametroimporReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingParametroImpor(false);
		}
		
		if(this.parametroimporReturnGeneral.getConRetornoLista() || this.parametroimporReturnGeneral.getConRetornoObjeto()) {
			if(this.parametroimporReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametroimporLogic.setParametroImpors(this.parametroimporReturnGeneral.getParametroImpors());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.parametroimporReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametroimporLogic.setParametroImpor(this.parametroimporReturnGeneral.getParametroImpor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingParametroImpor(false);
		}
	}
	
	public void actualizarParametrosGeneralParametroImpor() throws Exception {
		
		
	}
	
	public ArrayList<ParametroImpor> getParametroImporsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioParametroImpor) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ParametroImpor parametroimporAux:parametroimporLogic.getParametroImpors()) {
					if(parametroimporAux.getIsSelected()) {
						parametroimporsSeleccionados.add(parametroimporAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroImpor parametroimporAux:this.parametroimpors) {
					if(parametroimporAux.getIsSelected()) {
						parametroimporsSeleccionados.add(parametroimporAux);				
					}
				}
			}
			
			if(parametroimporsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						parametroimporsSeleccionados.addAll(this.parametroimporLogic.getParametroImpors());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						parametroimporsSeleccionados.addAll(this.parametroimpors);				
					}
				}
			}
		} else {
			parametroimporsSeleccionados.add(this.parametroimpor);
		}
		
		return parametroimporsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteParametroImporsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalParametroImporsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoParametroImporsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroImporsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroImporsSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Parametro Impor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados);
		
	}	
	
	public void generarReporteNormalParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionParametroImporsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		
		this.abrirInicializarFrameReporteDinamicoParametroImpor();
		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoParametroImpor();
		
		
		//this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados ,parametroimporImplementable,parametroimporImplementableHome);
	}
	
	public void mostrarImportacionParametroImpors() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionParametroImpor();
		
		this.abrirFrameImportacionParametroImpor();		
		
			
		//this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados ,parametroimporImplementable,parametroimporImplementableHome);
	}
	
	public void importarParametroImpors() throws Exception {		
	
	}
	
	public void exportarParametroImporsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelParametroImporsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoParametroImporsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlParametroImporsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Parametro Impor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarParametroImpor(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarParametroImpor(parametroimporAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//parametroimporAux.setsDetalleGeneralEntityReporte(parametroimporAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarParametroImpor(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_FODIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CORPEI;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_SECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CONLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CONUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroImporConstantesFunciones.LABEL_CONCONVERSION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarParametroImpor(ParametroImpor parametroimpor,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=parametroimpor.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcuentacontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.gettransaccionordencompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.gettransaccioningreso_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getformatoordencompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getformatoingreso_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getformatopedido_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getformatoliquidacion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getdias_llega_bodega().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getporcentaje_seguro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getfodin().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcorpei().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcon_secuencial().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getsecuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcon_peso_precio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcon_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcon_unidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametroimpor.getcon_conversion().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ParametroImpors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelParametroImpor(row);				
				iRow++;
			}				
			
			for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelParametroImpor(parametroimporAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlParametroImporsSeleccionados() throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();		
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametroimpor.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("parametroimpors");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("parametroimpor");
			//elementRoot.appendChild(element);
		
			for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
				element = document.createElement("parametroimpor");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlParametroImpor(parametroimporAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Impor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelParametroImpor(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_PORCENTAJESEGURO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_FODIN);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CORPEI);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_SECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroImporConstantesFunciones.LABEL_CONCONVERSION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelParametroImpor(ParametroImpor parametroimpor,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcuentacontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.gettransaccionordencompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.gettransaccioningreso_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getformatoordencompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getformatoingreso_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getformatopedido_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getformatoliquidacion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getdias_llega_bodega());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getporcentaje_seguro());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getfodin());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcorpei());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcon_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getsecuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcon_peso_precio());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcon_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcon_unidad());
		cell = row.createCell(iColumn++);cell.setCellValue(parametroimpor.getcon_conversion());				
	}
	
	public void setFilaDatosExportarXmlParametroImpor(ParametroImpor parametroimpor,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ParametroImporConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(parametroimpor.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ParametroImporConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(parametroimpor.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ParametroImporConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(parametroimpor.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementpais_descripcion = document.createElement(ParametroImporConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(parametroimpor.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementbodega_descripcion = document.createElement(ParametroImporConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(parametroimpor.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(ParametroImporConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(parametroimpor.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcuentacontable_descripcion = document.createElement(ParametroImporConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(parametroimpor.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);

		Element elementtransaccionordencompra_descripcion = document.createElement(ParametroImporConstantesFunciones.IDTRANSACCIONORDENCOMPRA);
		elementtransaccionordencompra_descripcion.appendChild(document.createTextNode(parametroimpor.gettransaccionordencompra_descripcion()));
		element.appendChild(elementtransaccionordencompra_descripcion);

		Element elementtransaccioningreso_descripcion = document.createElement(ParametroImporConstantesFunciones.IDTRANSACCIONINGRESO);
		elementtransaccioningreso_descripcion.appendChild(document.createTextNode(parametroimpor.gettransaccioningreso_descripcion()));
		element.appendChild(elementtransaccioningreso_descripcion);

		Element elementformatoordencompra_descripcion = document.createElement(ParametroImporConstantesFunciones.IDFORMATOORDENCOMPRA);
		elementformatoordencompra_descripcion.appendChild(document.createTextNode(parametroimpor.getformatoordencompra_descripcion()));
		element.appendChild(elementformatoordencompra_descripcion);

		Element elementformatoingreso_descripcion = document.createElement(ParametroImporConstantesFunciones.IDFORMATOINGRESO);
		elementformatoingreso_descripcion.appendChild(document.createTextNode(parametroimpor.getformatoingreso_descripcion()));
		element.appendChild(elementformatoingreso_descripcion);

		Element elementformatopedido_descripcion = document.createElement(ParametroImporConstantesFunciones.IDFORMATOPEDIDO);
		elementformatopedido_descripcion.appendChild(document.createTextNode(parametroimpor.getformatopedido_descripcion()));
		element.appendChild(elementformatopedido_descripcion);

		Element elementformatoliquidacion_descripcion = document.createElement(ParametroImporConstantesFunciones.IDFORMATOLIQUIDACION);
		elementformatoliquidacion_descripcion.appendChild(document.createTextNode(parametroimpor.getformatoliquidacion_descripcion()));
		element.appendChild(elementformatoliquidacion_descripcion);

		Element elementdias_llega_bodega = document.createElement(ParametroImporConstantesFunciones.DIASLLEGABODEGA);
		elementdias_llega_bodega.appendChild(document.createTextNode(parametroimpor.getdias_llega_bodega().toString().trim()));
		element.appendChild(elementdias_llega_bodega);

		Element elementporcentaje_seguro = document.createElement(ParametroImporConstantesFunciones.PORCENTAJESEGURO);
		elementporcentaje_seguro.appendChild(document.createTextNode(parametroimpor.getporcentaje_seguro().toString().trim()));
		element.appendChild(elementporcentaje_seguro);

		Element elementfodin = document.createElement(ParametroImporConstantesFunciones.FODIN);
		elementfodin.appendChild(document.createTextNode(parametroimpor.getfodin().toString().trim()));
		element.appendChild(elementfodin);

		Element elementcorpei = document.createElement(ParametroImporConstantesFunciones.CORPEI);
		elementcorpei.appendChild(document.createTextNode(parametroimpor.getcorpei().toString().trim()));
		element.appendChild(elementcorpei);

		Element elementcon_secuencial = document.createElement(ParametroImporConstantesFunciones.CONSECUENCIAL);
		elementcon_secuencial.appendChild(document.createTextNode(parametroimpor.getcon_secuencial().toString().trim()));
		element.appendChild(elementcon_secuencial);

		Element elementsecuencial = document.createElement(ParametroImporConstantesFunciones.SECUENCIAL);
		elementsecuencial.appendChild(document.createTextNode(parametroimpor.getsecuencial().trim()));
		element.appendChild(elementsecuencial);

		Element elementcon_peso_precio = document.createElement(ParametroImporConstantesFunciones.CONPESOPRECIO);
		elementcon_peso_precio.appendChild(document.createTextNode(parametroimpor.getcon_peso_precio().toString().trim()));
		element.appendChild(elementcon_peso_precio);

		Element elementcon_lote = document.createElement(ParametroImporConstantesFunciones.CONLOTE);
		elementcon_lote.appendChild(document.createTextNode(parametroimpor.getcon_lote().toString().trim()));
		element.appendChild(elementcon_lote);

		Element elementcon_unidad = document.createElement(ParametroImporConstantesFunciones.CONUNIDAD);
		elementcon_unidad.appendChild(document.createTextNode(parametroimpor.getcon_unidad().toString().trim()));
		element.appendChild(elementcon_unidad);

		Element elementcon_conversion = document.createElement(ParametroImporConstantesFunciones.CONCONVERSION);
		elementcon_conversion.appendChild(document.createTextNode(parametroimpor.getcon_conversion().toString().trim()));
		element.appendChild(elementcon_conversion);
	}
	
	public void generarReporteGroupGenericoParametroImporsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ParametroImpor> parametroimporsSeleccionados=new ArrayList<ParametroImpor>();
		
		parametroimporsSeleccionados=this.getParametroImporsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoParametroImpor(parametroimporsSeleccionados);
		
		this.generarReporteParametroImpors("Todos",parametroimporsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoParametroImpor(ArrayList<ParametroImpor> parametroimporsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ParametroImpor parametroimporAux:parametroimporsSeleccionados) {
				parametroimporAux.setsDetalleGeneralEntityReporte(parametroimporAux.toString());
			
				if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getcuentacontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONORDENCOMPRA)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.gettransaccionordencompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDTRANSACCIONINGRESO)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.gettransaccioningreso_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDFORMATOORDENCOMPRA)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getformatoordencompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDFORMATOINGRESO)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getformatoingreso_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDFORMATOPEDIDO)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getformatopedido_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_IDFORMATOLIQUIDACION)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getformatoliquidacion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_DIASLLEGABODEGA)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getdias_llega_bodega().toString());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONSECUENCIAL)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametroimporAux.getcon_secuencial()));
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_SECUENCIAL)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(parametroimporAux.getsecuencial());
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONPESOPRECIO)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametroimporAux.getcon_peso_precio()));
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONLOTE)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametroimporAux.getcon_lote()));
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONUNIDAD)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametroimporAux.getcon_unidad()));
				}
				 else if(sTipoSeleccionar.equals(ParametroImporConstantesFunciones.LABEL_CONCONVERSION)) {
					existe=true;
					parametroimporAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(parametroimporAux.getcon_conversion()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroImporConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesParametroImpor(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoParametroImpor=true;
				this.isVisibilidadCeldaNuevoRelacionesParametroImpor=true;
				this.isVisibilidadCeldaGuardarCambiosParametroImpor=true;
			}
			
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=true;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=true;
			this.isVisibilidadCeldaEliminarParametroImpor=true;
			this.isVisibilidadCeldaCancelarParametroImpor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=true;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoParametroImpor=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=true;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=true;
			this.isVisibilidadCeldaModificarParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
			this.isVisibilidadCeldaModificarParametroImpor=true;
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
			this.isVisibilidadCeldaCancelarParametroImpor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroImpor=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ParametroImporJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoParametroImpor=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=true;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=true;
		} else {
			this.actualizarEstadoPanelsParametroImpor(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarParametroImpor=false;
			//this.isVisibilidadCeldaVerFormParametroImpor=false;
			this.isVisibilidadCeldaDuplicarParametroImpor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!parametroimporSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
		} else {
			this.isVisibilidadCeldaNuevoParametroImpor=false;
			this.isVisibilidadCeldaGuardarCambiosParametroImpor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(parametroimporSessionBean.getEsGuardarRelacionado()) {
			if(!parametroimporSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;												
			}
			
			this.jButtonCerrarParametroImpor.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesParametroImpor=false;
		}
		
		if(!this.permiteMantenimiento(this.parametroimpor)) {
			this.isVisibilidadCeldaActualizarParametroImpor=false;
			this.isVisibilidadCeldaEliminarParametroImpor=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesParametroImpor() {
	}
	
	public void actualizarEstadoPanelsParametroImpor(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionParametroImpor!=null) {
				this.jScrollPanelDatosEdicionParametroImpor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroImpor!=null) {
				this.jScrollPanelDatosParametroImpor.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroImpor!=null) {
				this.jPanelPaginacionParametroImpor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.parametroimporSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasParametroImpor!=null) {
					this.jTabbedPaneBusquedasParametroImpor.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.parametroimporSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroImpor!=null) {
				this.jTabbedPaneBusquedasParametroImpor.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesParametroImpor!=null) {
				this.jPanelParametrosReportesParametroImpor.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadFK_IdBodega=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContable;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccionOrdenCompra(Boolean isParaTransaccionOrdenCompra){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionOrdenCompraNegation=!isParaTransaccionOrdenCompra;

			this.isVisibilidadFK_IdBodega=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaTransaccionOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaTransaccionOrdenCompra;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccionIngreso(Boolean isParaTransaccionIngreso){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionIngresoNegation=!isParaTransaccionIngreso;

			this.isVisibilidadFK_IdBodega=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaTransaccionIngreso;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaTransaccionIngresoNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoOrdenCompra(Boolean isParaFormatoOrdenCompra){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoOrdenCompraNegation=!isParaFormatoOrdenCompra;

			this.isVisibilidadFK_IdBodega=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaFormatoOrdenCompra;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaFormatoOrdenCompraNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoIngreso(Boolean isParaFormatoIngreso){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoIngresoNegation=!isParaFormatoIngreso;

			this.isVisibilidadFK_IdBodega=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaFormatoIngreso;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoPedido(Boolean isParaFormatoPedido){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoPedidoNegation=!isParaFormatoPedido;

			this.isVisibilidadFK_IdBodega=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoPedido;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaFormatoPedidoNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoLiquidacion(Boolean isParaFormatoLiquidacion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoLiquidacionNegation=!isParaFormatoLiquidacion;

			this.isVisibilidadFK_IdBodega=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdBodegaParametroImpor);}

			this.isVisibilidadFK_IdCentroCosto=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCentroCostoParametroImpor);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdCuentaContableParametroImpor);}

			this.isVisibilidadFK_IdFormatoIngreso=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdFormatoIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoIngresoParametroImpor);}

			this.isVisibilidadFK_IdFormatoLiquacion=isParaFormatoLiquidacion;
			if(!this.isVisibilidadFK_IdFormatoLiquacion) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoLiquacionParametroImpor);}

			this.isVisibilidadFK_IdFormatoOrdenCompra=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdFormatoOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoOrdenCompraParametroImpor);}

			this.isVisibilidadFK_IdFormatoPedo=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdFormatoPedo) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdFormatoPedoParametroImpor);}

			this.isVisibilidadFK_IdPais=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdPaisParametroImpor);}

			this.isVisibilidadFK_IdTransaccionIngreso=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdTransaccionIngreso) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionIngresoParametroImpor);}

			this.isVisibilidadFK_IdTransaccionOrdenCompra=isParaFormatoLiquidacionNegation;
			if(!this.isVisibilidadFK_IdTransaccionOrdenCompra) {this.jTabbedPaneBusquedasParametroImpor.remove(jPanelFK_IdTransaccionOrdenCompraParametroImpor);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ParametroImporSessionBean parametroimporSessionBean=new ParametroImporSessionBean();
		
		if(this.parametroimporSessionBean==null) {
			this.parametroimporSessionBean=new ParametroImporSessionBean();
		}
		
		this.parametroimporSessionBean.setsUltimaBusquedaParametroImpor(this.getsAccionBusqueda());
		this.parametroimporSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.parametroimporSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			parametroimporSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			parametroimporSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
			parametroimporSessionBean.setid_cuenta_contable(this.getid_cuenta_contableFK_IdCuentaContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			parametroimporSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoIngreso")) {
			parametroimporSessionBean.setid_formato_ingreso(this.getid_formato_ingresoFK_IdFormatoIngreso());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoLiquacion")) {
			parametroimporSessionBean.setid_formato_liquidacion(this.getid_formato_liquidacionFK_IdFormatoLiquacion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoOrdenCompra")) {
			parametroimporSessionBean.setid_formato_orden_compra(this.getid_formato_orden_compraFK_IdFormatoOrdenCompra());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormatoPedo")) {
			parametroimporSessionBean.setid_formato_pedido(this.getid_formato_pedidoFK_IdFormatoPedo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			parametroimporSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccionIngreso")) {
			parametroimporSessionBean.setid_transaccion_ingreso(this.getid_transaccion_ingresoFK_IdTransaccionIngreso());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccionOrdenCompra")) {
			parametroimporSessionBean.setid_transaccion_orden_compra(this.getid_transaccion_orden_compraFK_IdTransaccionOrdenCompra());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ParametroImporSessionBean parametroimporSessionBean=new ParametroImporSessionBean();
		
		if(this.parametroimporSessionBean==null) {
			this.parametroimporSessionBean=new ParametroImporSessionBean();
		}
		
		if(this.parametroimporSessionBean.getsUltimaBusquedaParametroImpor()!=null&&!this.parametroimporSessionBean.getsUltimaBusquedaParametroImpor().equals("")) {
			this.setsAccionBusqueda(parametroimporSessionBean.getsUltimaBusquedaParametroImpor());
			this.setiNumeroPaginacion(parametroimporSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(parametroimporSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(parametroimporSessionBean.getid_bodega());
				parametroimporSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(parametroimporSessionBean.getid_centro_costo());
				parametroimporSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
				this.setid_cuenta_contableFK_IdCuentaContable(parametroimporSessionBean.getid_cuenta_contable());
				parametroimporSessionBean.setid_cuenta_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(parametroimporSessionBean.getid_empresa());
				parametroimporSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoIngreso")) {
				this.setid_formato_ingresoFK_IdFormatoIngreso(parametroimporSessionBean.getid_formato_ingreso());
				parametroimporSessionBean.setid_formato_ingreso(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoLiquacion")) {
				this.setid_formato_liquidacionFK_IdFormatoLiquacion(parametroimporSessionBean.getid_formato_liquidacion());
				parametroimporSessionBean.setid_formato_liquidacion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoOrdenCompra")) {
				this.setid_formato_orden_compraFK_IdFormatoOrdenCompra(parametroimporSessionBean.getid_formato_orden_compra());
				parametroimporSessionBean.setid_formato_orden_compra(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormatoPedo")) {
				this.setid_formato_pedidoFK_IdFormatoPedo(parametroimporSessionBean.getid_formato_pedido());
				parametroimporSessionBean.setid_formato_pedido(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(parametroimporSessionBean.getid_pais());
				parametroimporSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccionIngreso")) {
				this.setid_transaccion_ingresoFK_IdTransaccionIngreso(parametroimporSessionBean.getid_transaccion_ingreso());
				parametroimporSessionBean.setid_transaccion_ingreso(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccionOrdenCompra")) {
				this.setid_transaccion_orden_compraFK_IdTransaccionOrdenCompra(parametroimporSessionBean.getid_transaccion_orden_compra());
				parametroimporSessionBean.setid_transaccion_orden_compra(-1L);
			}
		}
		
		this.parametroimporSessionBean.setsUltimaBusquedaParametroImpor("");
		this.parametroimporSessionBean.setiNumeroPaginacion(ParametroImporConstantesFunciones.INUMEROPAGINACION);
		this.parametroimporSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaParametroImpor(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioParametroImpor() {
		this.updateBorderResaltarBusquedasFormularioParametroImpor();
		this.updateVisibilidadBusquedasFormularioParametroImpor();
		this.updateHabilitarBusquedasFormularioParametroImpor();
	}
	
	public void updateBorderResaltarBusquedasFormularioParametroImpor() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasParametroImpor.getComponents().length>0) {
	

		if(this.parametroimporConstantesFunciones.resaltarFK_IdBodegaParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdBodegaParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdBodegaParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdCentroCostoParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCentroCostoParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdCentroCostoParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdCuentaContableParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCuentaContableParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdCuentaContableParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoIngresoParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoIngresoParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoIngresoParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoLiquacionParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoLiquacionParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoLiquacionParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoOrdenCompraParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoOrdenCompraParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoOrdenCompraParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoPedoParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoPedoParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdPaisParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdPaisParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdPaisParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionIngresoParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionIngresoParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionIngresoParametroImpor);
			}
		}

		if(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionOrdenCompraParametroImpor!=null) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionOrdenCompraParametroImpor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionOrdenCompraParametroImpor);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioParametroImpor() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasParametroImpor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdBodegaParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdBodegaParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdBodegaParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCentroCostoParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdCentroCostoParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdCentroCostoParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCuentaContableParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdCuentaContableParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdCuentaContableParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoIngresoParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdFormatoIngresoParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdFormatoIngresoParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoLiquacionParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdFormatoLiquacionParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdFormatoLiquacionParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoOrdenCompraParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdFormatoOrdenCompraParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdFormatoOrdenCompraParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdFormatoPedoParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdFormatoPedoParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdPaisParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdPaisParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdPaisParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionIngresoParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdTransaccionIngresoParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdTransaccionIngresoParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionOrdenCompraParametroImpor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametroimporConstantesFunciones.mostrarFK_IdTransaccionOrdenCompraParametroImpor);
			if(!this.parametroimporConstantesFunciones.mostrarFK_IdTransaccionOrdenCompraParametroImpor && index>-1) {
				this.jTabbedPaneBusquedasParametroImpor.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioParametroImpor() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasParametroImpor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdBodegaParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdBodegaParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdBodegaParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCentroCostoParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdCentroCostoParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdCentroCostoParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCuentaContableParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdCuentaContableParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdCuentaContableParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoIngresoParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdFormatoIngresoParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdFormatoIngresoParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoLiquacionParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdFormatoLiquacionParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdFormatoLiquacionParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoOrdenCompraParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdFormatoOrdenCompraParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdFormatoOrdenCompraParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdFormatoPedoParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdFormatoPedoParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdPaisParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdPaisParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdPaisParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionIngresoParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdTransaccionIngresoParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdTransaccionIngresoParametroImpor);
			}

			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionOrdenCompraParametroImpor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametroimporConstantesFunciones.activarFK_IdTransaccionOrdenCompraParametroImpor);
				this.jTabbedPaneBusquedasParametroImpor.setEnabledAt(index,this.parametroimporConstantesFunciones.activarFK_IdTransaccionOrdenCompraParametroImpor);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaParametroImpor(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdBodegaParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdBodegaParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdBodegaParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCentroCostoParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdCentroCostoParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdCentroCostoParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContable")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdCuentaContableParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdCuentaContableParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdCuentaContableParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoIngreso")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoIngresoParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdFormatoIngresoParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoIngresoParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoLiquacion")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoLiquacionParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdFormatoLiquacionParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoLiquacionParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoOrdenCompra")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoOrdenCompraParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdFormatoOrdenCompraParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoOrdenCompraParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormatoPedo")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdFormatoPedoParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdFormatoPedoParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdFormatoPedoParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdPaisParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdPaisParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdPaisParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccionIngreso")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionIngresoParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdTransaccionIngresoParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionIngresoParametroImpor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccionOrdenCompra")) {
			index= this.jTabbedPaneBusquedasParametroImpor.indexOfComponent(this.jPanelFK_IdTransaccionOrdenCompraParametroImpor);

			this.jTabbedPaneBusquedasParametroImpor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroImpor.getComponent(index);

			this.parametroimporConstantesFunciones.setResaltarFK_IdTransaccionOrdenCompraParametroImpor(resaltar);

			jPanel.setBorder(this.parametroimporConstantesFunciones.resaltarFK_IdTransaccionOrdenCompraParametroImpor);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarParametroImpor.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioParametroImpor() throws Exception {

		if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioParametroImpor();
		this.updateVisibilidadResaltarControlesFormularioParametroImpor();
		this.updateHabilitarResaltarControlesFormularioParametroImpor();
		
	}
	
	public void updateBorderResaltarControlesFormularioParametroImpor() throws Exception {
		if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.parametroimporConstantesFunciones.resaltaridParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltaridParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_empresaParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_empresaParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_paisParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_paisParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_bodegaParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_bodegaParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_centro_costoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_centro_costoParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_cuenta_contableParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_cuenta_contableParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_transaccion_orden_compraParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_transaccion_orden_compraParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_transaccion_ingresoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_transaccion_ingresoParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_formato_orden_compraParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_formato_orden_compraParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_formato_ingresoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_formato_ingresoParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_formato_pedidoParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_formato_pedidoParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarid_formato_liquidacionParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarid_formato_liquidacionParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltardias_llega_bodegaParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltardias_llega_bodegaParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarporcentaje_seguroParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarporcentaje_seguroParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarfodinParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarfodinParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcorpeiParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcorpeiParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcon_secuencialParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setBorderPainted(true);this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcon_secuencialParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarsecuencialParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarsecuencialParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcon_peso_precioParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setBorderPainted(true);this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcon_peso_precioParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcon_loteParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setBorderPainted(true);this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcon_loteParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcon_unidadParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setBorderPainted(true);this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcon_unidadParametroImpor);}
		if(this.parametroimporConstantesFunciones.resaltarcon_conversionParametroImpor!=null && this.jInternalFrameDetalleFormParametroImpor!=null) {this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setBorderPainted(true);this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setBorder(this.parametroimporConstantesFunciones.resaltarcon_conversionParametroImpor);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioParametroImpor() throws Exception {		
		if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
	
		//this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostraridParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelidParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostraridParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_empresaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_empresaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_empresaParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_paisParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_paisParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_paisParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_bodegaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_bodegaParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_centro_costoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_centro_costoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_centro_costoParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_cuenta_contableParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_cuenta_contableParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_cuenta_contableParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_transaccion_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_transaccion_orden_compraParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_transaccion_orden_compraParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_transaccion_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_transaccion_ingresoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_transaccion_ingresoParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_formato_orden_compraParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_orden_compraParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_formato_ingresoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_ingresoParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_pedidoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_formato_pedidoParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_pedidoParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_liquidacionParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelid_formato_liquidacionParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarid_formato_liquidacionParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrardias_llega_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPaneldias_llega_bodegaParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrardias_llega_bodegaParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarporcentaje_seguroParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelporcentaje_seguroParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarporcentaje_seguroParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarfodinParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelfodinParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarfodinParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcorpeiParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcorpeiParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcorpeiParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_secuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcon_secuencialParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_secuencialParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarsecuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelsecuencialParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarsecuencialParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_peso_precioParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcon_peso_precioParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_peso_precioParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_loteParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcon_loteParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_loteParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_unidadParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcon_unidadParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_unidadParametroImpor);
		//this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_conversionParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jPanelcon_conversionParametroImpor.setVisible(this.parametroimporConstantesFunciones.mostrarcon_conversionParametroImpor);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioParametroImpor() throws Exception {
		if(this.jInternalFrameDetalleFormParametroImpor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroImpor!=null) {
	
		this.jInternalFrameDetalleFormParametroImpor.jLabelidParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activaridParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_empresaParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_empresaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_paisParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_paisParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_bodegaParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_centro_costoParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_centro_costoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_cuenta_contableParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_cuenta_contableParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_orden_compraParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_transaccion_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_transaccion_ingresoParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_transaccion_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_orden_compraParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_formato_orden_compraParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_ingresoParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_formato_ingresoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_pedidoParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_formato_pedidoParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jComboBoxid_formato_liquidacionParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarid_formato_liquidacionParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFielddias_llega_bodegaParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activardias_llega_bodegaParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldporcentaje_seguroParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarporcentaje_seguroParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldfodinParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarfodinParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldcorpeiParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcorpeiParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_secuencialParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcon_secuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jTextFieldsecuencialParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarsecuencialParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_peso_precioParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcon_peso_precioParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_loteParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcon_loteParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_unidadParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcon_unidadParametroImpor);
		this.jInternalFrameDetalleFormParametroImpor.jCheckBoxcon_conversionParametroImpor.setEnabled(this.parametroimporConstantesFunciones.activarcon_conversionParametroImpor);
		}
	}
	
		
}