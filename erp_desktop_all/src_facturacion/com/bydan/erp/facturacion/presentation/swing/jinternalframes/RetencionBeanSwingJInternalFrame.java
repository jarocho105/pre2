/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.RetencionConstantesFunciones;
import com.bydan.erp.facturacion.util.RetencionParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.RetencionParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.RetencionBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class RetencionBeanSwingJInternalFrame extends RetencionJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(RetencionBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Retencion> retencionValidator = new ClassValidator<Retencion>(Retencion.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Retencion retencion;	
	public Retencion retencionAux;
	public Retencion retencionAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Retencion retencionTotales;
	public Long idRetencionActual;
	public Long iIdNuevoRetencion=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboTipoRetencion="";

	public List<TipoRetencion> tiporetencionsForeignKey;

	public List<TipoRetencion> gettiporetencionsForeignKey() {
		return tiporetencionsForeignKey;
	}

	public void settiporetencionsForeignKey(List<TipoRetencion> tiporetencionsForeignKey) {
		this.tiporetencionsForeignKey = tiporetencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionForeignKey;

	public TipoRetencion gettiporetencionForeignKey() {
		return tiporetencionForeignKey;
	}

	public void settiporetencionForeignKey(TipoRetencion tiporetencionForeignKey) {
		this.tiporetencionForeignKey = tiporetencionForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboCuentaContableRetencion="";

	public List<CuentaContable> cuentacontableretencionsForeignKey;

	public List<CuentaContable> getcuentacontableretencionsForeignKey() {
		return cuentacontableretencionsForeignKey;
	}

	public void setcuentacontableretencionsForeignKey(List<CuentaContable> cuentacontableretencionsForeignKey) {
		this.cuentacontableretencionsForeignKey = cuentacontableretencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableretencionForeignKey;

	public CuentaContable getcuentacontableretencionForeignKey() {
		return cuentacontableretencionForeignKey;
	}

	public void setcuentacontableretencionForeignKey(CuentaContable cuentacontableretencionForeignKey) {
		this.cuentacontableretencionForeignKey = cuentacontableretencionForeignKey;
	}

	public String sFinalQueryComboEstadoRetencion="";

	public List<EstadoRetencion> estadoretencionsForeignKey;

	public List<EstadoRetencion> getestadoretencionsForeignKey() {
		return estadoretencionsForeignKey;
	}

	public void setestadoretencionsForeignKey(List<EstadoRetencion> estadoretencionsForeignKey) {
		this.estadoretencionsForeignKey = estadoretencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoRetencion estadoretencionForeignKey;

	public EstadoRetencion getestadoretencionForeignKey() {
		return estadoretencionForeignKey;
	}

	public void setestadoretencionForeignKey(EstadoRetencion estadoretencionForeignKey) {
		this.estadoretencionForeignKey = estadoretencionForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idCuentaContableRetencionActual=0L;

	public Long getidCuentaContableRetencionActual() {
		return idCuentaContableRetencionActual;
	}

	public void setidCuentaContableRetencionActual(Long idCuentaContableRetencionActual) {
		this.idCuentaContableRetencionActual= idCuentaContableRetencionActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoRetencion;
	public Boolean isPermisoNuevoRetencion;
	public Boolean isPermisoActualizarRetencion;
	public Boolean isPermisoActualizarOriginalRetencion;
	public Boolean isPermisoEliminarRetencion;
	public Boolean isPermisoGuardarCambiosRetencion;
	public Boolean isPermisoConsultaRetencion;
	public Boolean isPermisoBusquedaRetencion;
	public Boolean isPermisoReporteRetencion;
	public Boolean isPermisoPaginacionMedioRetencion;
	public Boolean isPermisoPaginacionAltoRetencion;
	public Boolean isPermisoPaginacionTodoRetencion;
	public Boolean isPermisoCopiarRetencion;
	public Boolean isPermisoVerFormRetencion;
	public Boolean isPermisoDuplicarRetencion;
	public Boolean isPermisoOrdenRetencion;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public RetencionParameterReturnGeneral retencionReturnGeneral;
	public RetencionParameterReturnGeneral retencionParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoRetencion=false;
	public Boolean esParaAccionDesdeFormularioRetencion=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected RetencionSessionBeanAdditional retencionSessionBeanAdditional=null;
	
	public RetencionSessionBeanAdditional getRetencionSessionBeanAdditional() {
		return this.retencionSessionBeanAdditional;
	}
	
	public void setRetencionSessionBeanAdditional(RetencionSessionBeanAdditional retencionSessionBeanAdditional) {
		try {
			this.retencionSessionBeanAdditional=retencionSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected RetencionBeanSwingJInternalFrameAdditional retencionBeanSwingJInternalFrameAdditional=null;
	//public class RetencionBeanSwingJInternalFrame
	
	public RetencionBeanSwingJInternalFrameAdditional getRetencionBeanSwingJInternalFrameAdditional() {
		return this.retencionBeanSwingJInternalFrameAdditional;
	}
	
	public void setRetencionBeanSwingJInternalFrameAdditional(RetencionBeanSwingJInternalFrameAdditional retencionBeanSwingJInternalFrameAdditional) {
		try {
			this.retencionBeanSwingJInternalFrameAdditional=retencionBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public RetencionLogic retencionLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Retencion retencionBean;
	public RetencionConstantesFunciones retencionConstantesFunciones;
	//public RetencionParameterReturnGeneral retencionReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public AsientoContableLogic asientocontableLogic;
	public TipoRetencionLogic tiporetencionLogic;
	public ClienteLogic clienteLogic;
	public FacturaLogic facturaLogic;
	public MonedaLogic monedaLogic;
	public CuentaContableLogic cuentacontableretencionLogic;
	public EstadoRetencionLogic estadoretencionLogic;
	
	//PARAMETROS
	
	
	//public List<Retencion> retencions;	
	//public List<Retencion> retencionsEliminados;
	//public List<Retencion> retencionsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoRetencion=false;
	public Boolean isVisibilidadCeldaDuplicarRetencion=true;
	public Boolean isVisibilidadCeldaCopiarRetencion=true;
	public Boolean isVisibilidadCeldaVerFormRetencion=true;
	public Boolean isVisibilidadCeldaOrdenRetencion=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesRetencion=false;
	public Boolean isVisibilidadCeldaModificarRetencion=false;
	public Boolean isVisibilidadCeldaActualizarRetencion=false;
	public Boolean isVisibilidadCeldaEliminarRetencion=false;
	public Boolean isVisibilidadCeldaCancelarRetencion=false;
	public Boolean isVisibilidadCeldaGuardarRetencion=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosRetencion=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdCuentaContableRetencion=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoRetencion=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoRetencion=false;
	
	public Long getiIdNuevoRetencion() {
		return this.iIdNuevoRetencion;
	}

	public void setiIdNuevoRetencion(Long iIdNuevoRetencion) {
		this.iIdNuevoRetencion = iIdNuevoRetencion;
	}
	
	public Long getidRetencionActual() {
		return this.idRetencionActual;
	}

	public void setidRetencionActual(Long idRetencionActual) {
		this.idRetencionActual = idRetencionActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Retencion getretencion() {
		return this.retencion;
	}

	public void setretencion(Retencion retencion) {
		this.retencion = retencion;
	}
	
	public Retencion getretencionAux() {
		return this.retencionAux;
	}

	public void setretencionAux(Retencion retencionAux) {
		this.retencionAux = retencionAux;
	}				
	
	public Retencion getretencionAnterior() {
		return this.retencionAnterior;
	}

	public void setretencionAnterior(Retencion retencionAnterior) {
		this.retencionAnterior = retencionAnterior;
	}	
	
	public Retencion getretencionTotales() {
		return this.retencionTotales;
	}

	public void setretencionTotales(Retencion retencionTotales) {
		this.retencionTotales = retencionTotales;
	}	
	
	public Retencion getretencionBean() {
		return this.retencionBean;
	}

	public void setretencionBean(Retencion retencionBean) {
		this.retencionBean = retencionBean;
	}	
	
	public RetencionParameterReturnGeneral getretencionReturnGeneral() {
		return this.retencionReturnGeneral;
	}

	public void setretencionReturnGeneral(RetencionParameterReturnGeneral retencionReturnGeneral) {
		this.retencionReturnGeneral = retencionReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_cuenta_contable_retencionFK_IdCuentaContableRetencion=-1L;

	public Long getid_cuenta_contable_retencionFK_IdCuentaContableRetencion() {
		return this.id_cuenta_contable_retencionFK_IdCuentaContableRetencion;
	}

	public void setid_cuenta_contable_retencionFK_IdCuentaContableRetencion(Long id_cuenta_contable_retencionFK_IdCuentaContableRetencion) {
		this.id_cuenta_contable_retencionFK_IdCuentaContableRetencion = id_cuenta_contable_retencionFK_IdCuentaContableRetencion;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_retencionFK_IdEstadoRetencion=-1L;

	public Long getid_estado_retencionFK_IdEstadoRetencion() {
		return this.id_estado_retencionFK_IdEstadoRetencion;
	}

	public void setid_estado_retencionFK_IdEstadoRetencion(Long id_estado_retencionFK_IdEstadoRetencion) {
		this.id_estado_retencionFK_IdEstadoRetencion = id_estado_retencionFK_IdEstadoRetencion;
	}

	public Long id_facturaFK_IdFactura=null;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_retencionFK_IdTipoRetencion=-1L;

	public Long getid_tipo_retencionFK_IdTipoRetencion() {
		return this.id_tipo_retencionFK_IdTipoRetencion;
	}

	public void setid_tipo_retencionFK_IdTipoRetencion(Long id_tipo_retencionFK_IdTipoRetencion) {
		this.id_tipo_retencionFK_IdTipoRetencion = id_tipo_retencionFK_IdTipoRetencion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public RetencionLogic getRetencionLogic()	{		
		return retencionLogic;
	}

	public void setRetencionLogic(RetencionLogic retencionLogic) {
		this.retencionLogic = retencionLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoRetencion() {
		return isEsNuevoRetencion;
	}

	public void setIsEsNuevoRetencion(Boolean isEsNuevoRetencion) {
		this.isEsNuevoRetencion = isEsNuevoRetencion;
	}

	public Boolean getEsParaAccionDesdeFormularioRetencion() {
		return esParaAccionDesdeFormularioRetencion;
	}
	
	public void setEsParaAccionDesdeFormularioRetencion(Boolean esParaAccionDesdeFormularioRetencion) {
		this.esParaAccionDesdeFormularioRetencion = esParaAccionDesdeFormularioRetencion;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(retencionSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(retencionSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(retencionSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(retencionSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(retencionSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(retencionSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(retencionSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionsForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(retencionSessionBean.getlidTipoRetencionActual());
					this.tiporetencionsForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(retencionSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Factura facturaNulo = new Factura();

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.facturasForeignKey.add(0, facturaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(retencionSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(retencionSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableretencionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableretencionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(retencionSessionBean.getlidCuentaContableRetencionActual());
					this.cuentacontableretencionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadoretencionsForeignKey=new ArrayList<EstadoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoRetencionLogic estadoretencionLogic=new EstadoRetencionLogic();

			//estadoretencionLogic.getEstadoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadoretencionLogic.getEstadoRetencionDataAccess().setIsForForeingKeyData(true);

					estadoretencionLogic.getTodosEstadoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.estadoretencionsForeignKey=estadoretencionLogic.getEstadoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadoretencionLogic.getEntityWithConnection(retencionSessionBean.getlidEstadoRetencionActual());
					this.estadoretencionsForeignKey.add(estadoretencionLogic.getEstadoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaRetencion.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaRetencionGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaRetencionGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaRetencionGenerico!=null && jComboBoxid_empresaRetencionGenerico.getItemCount()>0) {
					jComboBoxid_empresaRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalRetencion.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalRetencionGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalRetencionGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalRetencionGenerico!=null && jComboBoxid_sucursalRetencionGenerico.getItemCount()>0) {
					jComboBoxid_sucursalRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioRetencion.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioRetencionGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioRetencionGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioRetencionGenerico!=null && jComboBoxid_ejercicioRetencionGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoRetencion.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoRetencionGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoRetencionGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoRetencionGenerico!=null && jComboBoxid_periodoRetencionGenerico.getItemCount()>0) {
					jComboBoxid_periodoRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioRetencion.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioRetencionGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioRetencionGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioRetencionGenerico!=null && jComboBoxid_anioRetencionGenerico.getItemCount()>0) {
					jComboBoxid_anioRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesRetencion.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesRetencionGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesRetencionGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesRetencionGenerico!=null && jComboBoxid_mesRetencionGenerico.getItemCount()>0) {
					jComboBoxid_mesRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableRetencion.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableRetencion!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableRetencion!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableRetencionGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableRetencionGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableRetencionGenerico!=null && jComboBoxid_asiento_contableRetencionGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionForeignKey(Long idTipoRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setTipoRetencion(tiporetencionTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setSelectedItem(tiporetencionTemp);
					}
				} else {
					//jComboBoxid_tipo_retencionRetencion.setSelectedItem(tiporetencionTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionTemp!=null && jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion!=null) {
						jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.setSelectedItem(tiporetencionTemp);
					} else {
						if(jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion!=null) {
							//jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.setSelectedItem(tiporetencionTemp);
							if(jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.getItemCount()>0) {
								jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionForeignKeyDescripcion(Long idTipoRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionForeignKeyGenerico(Long idTipoRetencionSeleccionado,JComboBox jComboBoxid_tipo_retencionRetencionGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(tiporetencionTemp!=null) {
				jComboBoxid_tipo_retencionRetencionGenerico.setSelectedItem(tiporetencionTemp);
			} else {
				if(jComboBoxid_tipo_retencionRetencionGenerico!=null && jComboBoxid_tipo_retencionRetencionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencionRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteRetencion.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteRetencion!=null) {
						jComboBoxid_clienteFK_IdClienteRetencion.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteRetencion!=null) {
							//jComboBoxid_clienteFK_IdClienteRetencion.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteRetencion.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteRetencionGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteRetencionGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteRetencionGenerico!=null && jComboBoxid_clienteRetencionGenerico.getItemCount()>0) {
					jComboBoxid_clienteRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaRetencion.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaRetencion!=null) {
						jComboBoxid_facturaFK_IdFacturaRetencion.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaRetencion!=null) {
							//jComboBoxid_facturaFK_IdFacturaRetencion.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaRetencion.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaRetencionGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaRetencionGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaRetencionGenerico!=null && jComboBoxid_facturaRetencionGenerico.getItemCount()>0) {
					jComboBoxid_facturaRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaRetencion.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaRetencionGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaRetencionGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaRetencionGenerico!=null && jComboBoxid_monedaRetencionGenerico.getItemCount()>0) {
					jComboBoxid_monedaRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableRetencionForeignKey(Long idCuentaContableRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableretencionTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setCuentaContableRetencion(cuentacontableretencionTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setSelectedItem(cuentacontableretencionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_retencionRetencion.setSelectedItem(cuentacontableretencionTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableretencionTemp!=null && jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion!=null) {
						jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.setSelectedItem(cuentacontableretencionTemp);
					} else {
						if(jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion!=null) {
							//jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.setSelectedItem(cuentacontableretencionTemp);
							if(jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.getItemCount()>0) {
								jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableRetencionForeignKeyDescripcion(Long idCuentaContableRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableretencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableRetencionForeignKeyGenerico(Long idCuentaContableRetencionSeleccionado,JComboBox jComboBoxid_cuenta_contable_retencionRetencionGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}

			if(cuentacontableretencionTemp!=null) {
				jComboBoxid_cuenta_contable_retencionRetencionGenerico.setSelectedItem(cuentacontableretencionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_retencionRetencionGenerico!=null && jComboBoxid_cuenta_contable_retencionRetencionGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_retencionRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoRetencionForeignKey(Long idEstadoRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoRetencion  estadoretencionTemp=null;

			for(EstadoRetencion estadoretencionAux:estadoretencionsForeignKey) {
				if(estadoretencionAux.getId()!=null && estadoretencionAux.getId().equals(idEstadoRetencionSeleccionado)) {
					estadoretencionTemp=estadoretencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadoretencionTemp!=null) {

					if(this.retencion!=null) {
						this.retencion.setEstadoRetencion(estadoretencionTemp);
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) {
						this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setSelectedItem(estadoretencionTemp);
					}
				} else {
					//jComboBoxid_estado_retencionRetencion.setSelectedItem(estadoretencionTemp);
					if(this.jInternalFrameDetalleFormRetencion!=null) {
						if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.getItemCount()>0) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadoretencionTemp!=null && jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion!=null) {
						jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.setSelectedItem(estadoretencionTemp);
					} else {
						if(jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion!=null) {
							//jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.setSelectedItem(estadoretencionTemp);
							if(jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.getItemCount()>0) {
								jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoRetencionForeignKeyDescripcion(Long idEstadoRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoRetencion  estadoretencionTemp=null;

			for(EstadoRetencion estadoretencionAux:estadoretencionsForeignKey) {
				if(estadoretencionAux.getId()!=null && estadoretencionAux.getId().equals(idEstadoRetencionSeleccionado)) {
					estadoretencionTemp=estadoretencionAux;
					break;
				}
			}


			sDescripcion=EstadoRetencionConstantesFunciones.getEstadoRetencionDescripcion(estadoretencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoRetencionForeignKeyGenerico(Long idEstadoRetencionSeleccionado,JComboBox jComboBoxid_estado_retencionRetencionGenerico)throws Exception
	{
		try
		{
			EstadoRetencion  estadoretencionTemp=null;

			for(EstadoRetencion estadoretencionAux:estadoretencionsForeignKey) {
				if(estadoretencionAux.getId()!=null && estadoretencionAux.getId().equals(idEstadoRetencionSeleccionado)) {
					estadoretencionTemp=estadoretencionAux;
					break;
				}
			}

			if(estadoretencionTemp!=null) {
				jComboBoxid_estado_retencionRetencionGenerico.setSelectedItem(estadoretencionTemp);
			} else {
				if(jComboBoxid_estado_retencionRetencionGenerico!=null && jComboBoxid_estado_retencionRetencionGenerico.getItemCount()>0) {
					jComboBoxid_estado_retencionRetencionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Retencion retencion,JComboBox jComboBoxid_empresaRetencionGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaRetencionGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaRetencionGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				retencion.setid_empresa(empresaAux.getId());
				retencion.setempresa_descripcion(RetencionConstantesFunciones.getEmpresaDescripcion(empresaAux));
				retencion.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Retencion retencion,JComboBox jComboBoxid_sucursalRetencionGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalRetencionGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalRetencionGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				retencion.setid_sucursal(sucursalAux.getId());
				retencion.setsucursal_descripcion(RetencionConstantesFunciones.getSucursalDescripcion(sucursalAux));
				retencion.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(Retencion retencion,JComboBox jComboBoxid_ejercicioRetencionGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioRetencionGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioRetencionGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				retencion.setid_ejercicio(ejercicioAux.getId());
				retencion.setejercicio_descripcion(RetencionConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				retencion.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(Retencion retencion,JComboBox jComboBoxid_periodoRetencionGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoRetencionGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoRetencionGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				retencion.setid_periodo(periodoAux.getId());
				retencion.setperiodo_descripcion(RetencionConstantesFunciones.getPeriodoDescripcion(periodoAux));
				retencion.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(Retencion retencion,JComboBox jComboBoxid_anioRetencionGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioRetencionGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioRetencionGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				retencion.setid_anio(anioAux.getId());
				retencion.setanio_descripcion(RetencionConstantesFunciones.getAnioDescripcion(anioAux));
				retencion.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(Retencion retencion,JComboBox jComboBoxid_mesRetencionGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesRetencionGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesRetencionGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				retencion.setid_mes(mesAux.getId());
				retencion.setmes_descripcion(RetencionConstantesFunciones.getMesDescripcion(mesAux));
				retencion.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(Retencion retencion,JComboBox jComboBoxid_asiento_contableRetencionGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableRetencionGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableRetencionGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				retencion.setid_asiento_contable(asientocontableAux.getId());
				retencion.setasientocontable_descripcion(RetencionConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				retencion.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionForeignKey(Retencion retencion,JComboBox jComboBoxid_tipo_retencionRetencionGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencionRetencionGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencionRetencionGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				retencion.setid_tipo_retencion(tiporetencionAux.getId());
				retencion.settiporetencion_descripcion(RetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionAux));
				retencion.setTipoRetencion(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(Retencion retencion,JComboBox jComboBoxid_clienteRetencionGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteRetencionGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteRetencionGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				retencion.setid_cliente(clienteAux.getId());
				retencion.setcliente_descripcion(RetencionConstantesFunciones.getClienteDescripcion(clienteAux));
				retencion.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(Retencion retencion,JComboBox jComboBoxid_facturaRetencionGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaRetencionGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaRetencionGenerico.getSelectedItem();
			}

			if(facturaAux!=null) {
				retencion.setid_factura(facturaAux.getId());
				retencion.setfactura_descripcion(RetencionConstantesFunciones.getFacturaDescripcion(facturaAux));
				retencion.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(Retencion retencion,JComboBox jComboBoxid_monedaRetencionGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaRetencionGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaRetencionGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				retencion.setid_moneda(monedaAux.getId());
				retencion.setmoneda_descripcion(RetencionConstantesFunciones.getMonedaDescripcion(monedaAux));
				retencion.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableRetencionForeignKey(Retencion retencion,JComboBox jComboBoxid_cuenta_contable_retencionRetencionGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_retencionRetencionGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_retencionRetencionGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				retencion.setid_cuenta_contable_retencion(cuentacontableAux.getId());
				retencion.setcuentacontableretencion_descripcion(RetencionConstantesFunciones.getCuentaContableRetencionDescripcion(cuentacontableAux));
				retencion.setCuentaContableRetencion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoRetencionForeignKey(Retencion retencion,JComboBox jComboBoxid_estado_retencionRetencionGenerico)throws Exception
	{
		try
		{
			EstadoRetencion  estadoretencionAux=new EstadoRetencion();

			if(jComboBoxid_estado_retencionRetencionGenerico==null) {
				estadoretencionAux=(EstadoRetencion)this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.getSelectedItem();
			} else {
				estadoretencionAux=(EstadoRetencion)jComboBoxid_estado_retencionRetencionGenerico.getSelectedItem();
			}

			if(estadoretencionAux!=null && estadoretencionAux.getId()!=null) {
				retencion.setid_estado_retencion(estadoretencionAux.getId());
				retencion.setestadoretencion_descripcion(RetencionConstantesFunciones.getEstadoRetencionDescripcion(estadoretencionAux));
				retencion.setEstadoRetencion(estadoretencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.addItem(asientocontable);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.addItem(tiporetencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.addItem(tiporetencion);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteRetencion.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteRetencion.addItem(cliente);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaRetencion.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaRetencion.addItem(factura);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.removeAllItems();

							for(CuentaContable cuentacontableretencion:this.cuentacontableretencionsForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.addItem(cuentacontableretencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.removeAllItems();

							for(CuentaContable cuentacontableretencion:this.cuentacontableretencionsForeignKey) {
								this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.addItem(cuentacontableretencion);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) { 
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.removeAllItems();

							for(EstadoRetencion estadoretencion:this.estadoretencionsForeignKey) {
								this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.addItem(estadoretencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRetencion!=null) { 
					}

					if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.removeAllItems();

							for(EstadoRetencion estadoretencion:this.estadoretencionsForeignKey) {
								this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.addItem(estadoretencion);
							}
						}

						if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionForeignKey(TipoRetencion tiporetencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setSelectedItem(tiporetencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.setSelectedItem(tiporetencion);
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteRetencion.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaRetencion.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableRetencionForeignKey(CuentaContable cuentacontableretencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setSelectedItem(cuentacontableretencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.setSelectedItem(cuentacontableretencion);
						} else {
							this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoRetencionForeignKey(EstadoRetencion estadoretencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setSelectedItem(estadoretencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormRetencion!=null) {
							this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.setSelectedItem(estadoretencion);
						} else {
							this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesRetencion() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			RetencionConstantesFunciones.refrescarForeignKeysDescripcionesRetencion(this.retencionLogic.getRetencions());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			RetencionConstantesFunciones.refrescarForeignKeysDescripcionesRetencion(this.retencions);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(TipoRetencion.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(EstadoRetencion.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//retencionLogic.setRetencions(this.retencions);
			retencionLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public RetencionParameterReturnGeneral getRetencionParameterGeneral() {
		return this.retencionParameterGeneral;
	}
	
	public void setRetencionParameterGeneral(RetencionParameterReturnGeneral retencionParameterGeneral) {
		this.retencionParameterGeneral = retencionParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoRetencion() {
		return isPermisoTodoRetencion;
	}

	public void setIsPermisoTodoRetencion(Boolean isPermisoTodoRetencion) {
		this.isPermisoTodoRetencion = isPermisoTodoRetencion;
	}

	public Boolean getIsPermisoNuevoRetencion() {
		return isPermisoNuevoRetencion;
	}

	public void setIsPermisoNuevoRetencion(Boolean isPermisoNuevoRetencion) {
		this.isPermisoNuevoRetencion = isPermisoNuevoRetencion;
	}

	public Boolean getIsPermisoActualizarRetencion() {
		return isPermisoActualizarRetencion;
	}

	public void setIsPermisoActualizarRetencion(Boolean isPermisoActualizarRetencion) {
		this.isPermisoActualizarRetencion = isPermisoActualizarRetencion;
	}

	public Boolean getIsPermisoEliminarRetencion() {
		return isPermisoEliminarRetencion;
	}

	public void setIsPermisoEliminarRetencion(Boolean isPermisoEliminarRetencion) {
		this.isPermisoEliminarRetencion = isPermisoEliminarRetencion;
	}

	public Boolean getIsPermisoGuardarCambiosRetencion() {
		return isPermisoGuardarCambiosRetencion;
	}

	public void setIsPermisoGuardarCambiosRetencion(Boolean isPermisoGuardarCambiosRetencion) {
		this.isPermisoGuardarCambiosRetencion = isPermisoGuardarCambiosRetencion;
	}
	
	public Boolean getIsPermisoConsultaRetencion() {
		return isPermisoConsultaRetencion;
	}

	public void setIsPermisoConsultaRetencion(Boolean isPermisoConsultaRetencion) {
		this.isPermisoConsultaRetencion = isPermisoConsultaRetencion;
	}

	public Boolean getIsPermisoBusquedaRetencion() {
		return isPermisoBusquedaRetencion;
	}

	public void setIsPermisoBusquedaRetencion(Boolean isPermisoBusquedaRetencion) {
		this.isPermisoBusquedaRetencion = isPermisoBusquedaRetencion;
	}

	public Boolean getIsPermisoReporteRetencion() {
		return isPermisoReporteRetencion;
	}

	public void setIsPermisoReporteRetencion(Boolean isPermisoReporteRetencion) {
		this.isPermisoReporteRetencion = isPermisoReporteRetencion;
	}
	
	public Boolean getIsPermisoPaginacionMedioRetencion() {
		return isPermisoPaginacionMedioRetencion;
	}

	public void setIsPermisoPaginacionMedioRetencion(Boolean isPermisoPaginacionMedioRetencion) {
		this.isPermisoPaginacionMedioRetencion = isPermisoPaginacionMedioRetencion;
	}
	
	public Boolean getIsPermisoPaginacionTodoRetencion() {
		return isPermisoPaginacionTodoRetencion;
	}

	public void setIsPermisoPaginacionTodoRetencion(Boolean isPermisoPaginacionTodoRetencion) {
		this.isPermisoPaginacionTodoRetencion = isPermisoPaginacionTodoRetencion;
	}
	
	public Boolean getIsPermisoPaginacionAltoRetencion() {
		return isPermisoPaginacionAltoRetencion;
	}

	public void setIsPermisoPaginacionAltoRetencion(Boolean isPermisoPaginacionAltoRetencion) {
		this.isPermisoPaginacionAltoRetencion = isPermisoPaginacionAltoRetencion;
	}
	
	public Boolean getIsPermisoCopiarRetencion() {
		return isPermisoCopiarRetencion;
	}

	public void setIsPermisoCopiarRetencion(Boolean isPermisoCopiarRetencion) {
		this.isPermisoCopiarRetencion = isPermisoCopiarRetencion;
	}
	
	public Boolean getIsPermisoVerFormRetencion() {
		return isPermisoVerFormRetencion;
	}

	public void setIsPermisoVerFormRetencion(Boolean isPermisoVerFormRetencion) {
		this.isPermisoVerFormRetencion = isPermisoVerFormRetencion;
	}
	
	public Boolean getIsPermisoDuplicarRetencion() {
		return isPermisoDuplicarRetencion;
	}

	public void setIsPermisoDuplicarRetencion(Boolean isPermisoDuplicarRetencion) {
		this.isPermisoDuplicarRetencion = isPermisoDuplicarRetencion;
	}
	
	public Boolean getIsPermisoOrdenRetencion() {
		return isPermisoOrdenRetencion;
	}

	public void setIsPermisoOrdenRetencion(Boolean isPermisoOrdenRetencion) {
		this.isPermisoOrdenRetencion = isPermisoOrdenRetencion;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRetencion() {
		return isVisibilidadCeldaNuevoRetencion;
	}

	public void setIsVisibilidadCeldaNuevoRetencion(Boolean isVisibilidadCeldaNuevoRetencion) {
		this.isVisibilidadCeldaNuevoRetencion = isVisibilidadCeldaNuevoRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarRetencion() {
		return isVisibilidadCeldaDuplicarRetencion;
	}

	public void setIsVisibilidadCeldaDuplicarRetencion(Boolean isVisibilidadCeldaDuplicarRetencion) {
		this.isVisibilidadCeldaDuplicarRetencion = isVisibilidadCeldaDuplicarRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarRetencion() {
		return isVisibilidadCeldaCopiarRetencion;
	}

	public void setIsVisibilidadCeldaCopiarRetencion(Boolean isVisibilidadCeldaCopiarRetencion) {
		this.isVisibilidadCeldaCopiarRetencion = isVisibilidadCeldaCopiarRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormRetencion() {
		return isVisibilidadCeldaVerFormRetencion;
	}

	public void setIsVisibilidadCeldaVerFormRetencion(Boolean isVisibilidadCeldaVerFormRetencion) {
		this.isVisibilidadCeldaVerFormRetencion = isVisibilidadCeldaVerFormRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenRetencion() {
		return isVisibilidadCeldaOrdenRetencion;
	}

	public void setIsVisibilidadCeldaOrdenRetencion(Boolean isVisibilidadCeldaOrdenRetencion) {
		this.isVisibilidadCeldaOrdenRetencion = isVisibilidadCeldaOrdenRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesRetencion() {
		return isVisibilidadCeldaNuevoRelacionesRetencion;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesRetencion(Boolean isVisibilidadCeldaNuevoRelacionesRetencion) {
		this.isVisibilidadCeldaNuevoRelacionesRetencion = isVisibilidadCeldaNuevoRelacionesRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaModificarRetencion() {
		return isVisibilidadCeldaModificarRetencion;
	}

	public void setIsVisibilidadCeldaModificarRetencion(Boolean isVisibilidadCeldaModificarRetencion) {
		this.isVisibilidadCeldaModificarRetencion = isVisibilidadCeldaModificarRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarRetencion() {
		return isVisibilidadCeldaActualizarRetencion;
	}

	public void setIsVisibilidadCeldaActualizarRetencion(Boolean isVisibilidadCeldaActualizarRetencion) {
		this.isVisibilidadCeldaActualizarRetencion = isVisibilidadCeldaActualizarRetencion;
	}

	public Boolean getIsVisibilidadCeldaEliminarRetencion() {
		return isVisibilidadCeldaEliminarRetencion;
	}

	public void setIsVisibilidadCeldaEliminarRetencion(Boolean isVisibilidadCeldaEliminarRetencion) {
		this.isVisibilidadCeldaEliminarRetencion = isVisibilidadCeldaEliminarRetencion;
	}

	public Boolean getIsVisibilidadCeldaCancelarRetencion() {
		return isVisibilidadCeldaCancelarRetencion;
	}

	public void setIsVisibilidadCeldaCancelarRetencion(Boolean isVisibilidadCeldaCancelarRetencion) {
		this.isVisibilidadCeldaCancelarRetencion = isVisibilidadCeldaCancelarRetencion;
	}

	public Boolean getIsVisibilidadCeldaGuardarRetencion() {
		return isVisibilidadCeldaGuardarRetencion;
	}

	public void setIsVisibilidadCeldaGuardarRetencion(Boolean isVisibilidadCeldaGuardarRetencion) {
		this.isVisibilidadCeldaGuardarRetencion = isVisibilidadCeldaGuardarRetencion;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosRetencion() {
		return isVisibilidadCeldaGuardarCambiosRetencion;
	}

	public void setIsVisibilidadCeldaGuardarCambiosRetencion(Boolean isVisibilidadCeldaGuardarCambiosRetencion) {
		this.isVisibilidadCeldaGuardarCambiosRetencion = isVisibilidadCeldaGuardarCambiosRetencion;
	}
		
	public RetencionSessionBean getretencionSessionBean() {
		return this.retencionSessionBean;
	}
	
	public void setretencionSessionBean(RetencionSessionBean retencionSessionBean) {
		this.retencionSessionBean=retencionSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableRetencion() {
		return this.isVisibilidadFK_IdCuentaContableRetencion;
	}

	public void setisVisibilidadFK_IdCuentaContableRetencion(Boolean isVisibilidadFK_IdCuentaContableRetencion) {
		this.isVisibilidadFK_IdCuentaContableRetencion=isVisibilidadFK_IdCuentaContableRetencion;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoRetencion() {
		return this.isVisibilidadFK_IdEstadoRetencion;
	}

	public void setisVisibilidadFK_IdEstadoRetencion(Boolean isVisibilidadFK_IdEstadoRetencion) {
		this.isVisibilidadFK_IdEstadoRetencion=isVisibilidadFK_IdEstadoRetencion;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencion() {
		return this.isVisibilidadFK_IdTipoRetencion;
	}

	public void setisVisibilidadFK_IdTipoRetencion(Boolean isVisibilidadFK_IdTipoRetencion) {
		this.isVisibilidadFK_IdTipoRetencion=isVisibilidadFK_IdTipoRetencion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysRetencion(Retencion retencion)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(retencion,null);
				this.setActualParaGuardarSucursalForeignKey(retencion,null);
				this.setActualParaGuardarEjercicioForeignKey(retencion,null);
				this.setActualParaGuardarPeriodoForeignKey(retencion,null);
				this.setActualParaGuardarAnioForeignKey(retencion,null);
				this.setActualParaGuardarMesForeignKey(retencion,null);
				this.setActualParaGuardarAsientoContableForeignKey(retencion,null);
				this.setActualParaGuardarTipoRetencionForeignKey(retencion,null);
				this.setActualParaGuardarClienteForeignKey(retencion,null);
				this.setActualParaGuardarFacturaForeignKey(retencion,null);
				this.setActualParaGuardarMonedaForeignKey(retencion,null);
				this.setActualParaGuardarCuentaContableRetencionForeignKey(retencion,null);
				this.setActualParaGuardarEstadoRetencionForeignKey(retencion,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(Retencion retencion,Retencion retencionAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalRetencion(retencion);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		retencionAux.setId(retencion.getId());
		retencionAux.setVersionRow(retencion.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessRetencion();
		
			int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = retencionValidator.getInvalidValues(this.retencion);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			retencionLogic.setDatosCliente(datosCliente);
			retencionLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				retencionAux=new  Retencion();
				
				retencionAux.setIsNew(true);
				retencionAux.setIsChanged(true);
				
				retencionAux.setRetencionOriginal(this.retencion);
				
				retencionAux.setId(this.retencion.getId());	
				retencionAux.setVersionRow(this.retencion.getVersionRow());	
				retencionAux.setid_empresa(this.retencion.getid_empresa());	
				retencionAux.setid_sucursal(this.retencion.getid_sucursal());	
				retencionAux.setid_ejercicio(this.retencion.getid_ejercicio());	
				retencionAux.setid_periodo(this.retencion.getid_periodo());	
				retencionAux.setid_anio(this.retencion.getid_anio());	
				retencionAux.setid_mes(this.retencion.getid_mes());	
				retencionAux.setid_asiento_contable(this.retencion.getid_asiento_contable());	
				retencionAux.setid_tipo_retencion(this.retencion.getid_tipo_retencion());	
				retencionAux.setid_cliente(this.retencion.getid_cliente());	
				retencionAux.setporcentaje(this.retencion.getporcentaje());	
				retencionAux.setbase_imponible(this.retencion.getbase_imponible());	
				retencionAux.setvalor(this.retencion.getvalor());	
				retencionAux.setnumero(this.retencion.getnumero());	
				
				if(this.retencion.getid_factura()!=null && this.retencion.getid_factura()>0L) {
					retencionAux.setid_factura(this.retencion.getid_factura());
				} else {
					retencionAux.setid_factura(null);
				}	
				retencionAux.setdescripcion(this.retencion.getdescripcion());	
				retencionAux.setdebito_mone_local(this.retencion.getdebito_mone_local());	
				retencionAux.setcredito_mone_local(this.retencion.getcredito_mone_local());	
				retencionAux.setdebito_mone_extra(this.retencion.getdebito_mone_extra());	
				retencionAux.setcredito_mone_extra(this.retencion.getcredito_mone_extra());	
				retencionAux.setid_moneda(this.retencion.getid_moneda());	
				retencionAux.setcotizacion(this.retencion.getcotizacion());	
				retencionAux.setnombre_benef(this.retencion.getnombre_benef());	
				retencionAux.setdireccion_benef(this.retencion.getdireccion_benef());	
				retencionAux.setruc_benef(this.retencion.getruc_benef());	
				retencionAux.settelefono_benef(this.retencion.gettelefono_benef());	
				retencionAux.setfecha(this.retencion.getfecha());	
				retencionAux.setid_cuenta_contable_retencion(this.retencion.getid_cuenta_contable_retencion());	
				retencionAux.setid_estado_retencion(this.retencion.getid_estado_retencion());	
				retencionAux.setbeneficiario(this.retencion.getbeneficiario());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.retencionSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.retencionSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(retencionAux,retencionLogic.getRetencions());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(retencionAux,retencions);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.retencionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.retencionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.saveRetencions();//WithConnection
						//retencionLogic.getSetVersionRowRetencions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.retencion,retencionAux);
					
					this.refrescarForeignKeysDescripcionesRetencion();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.retencionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								retencionLogic.saveRetencionRelaciones(retencionAux);//WithConnection
								//retencionLogic.getSetVersionRowRetencions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.retencion,retencionAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.retencionSessionBean.getEstaModoGuardarRelaciones() 
									|| this.retencionSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(retencionAux,retencionLogic.getRetencions());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(retencionAux,retencions);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.retencion,retencionAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				retencionAux=new  Retencion();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.retencionSessionBean.getEsGuardarRelacionado() 
					|| (this.retencionSessionBean.getEsGuardarRelacionado() && this.retencion.getId()>=0)) {
						
					retencionAux.setIsNew(false);
				}
				
				retencionAux.setIsDeleted(false);
			
				retencionAux.setId(this.retencion.getId());	
				retencionAux.setVersionRow(this.retencion.getVersionRow());	
				retencionAux.setid_empresa(this.retencion.getid_empresa());	
				retencionAux.setid_sucursal(this.retencion.getid_sucursal());	
				retencionAux.setid_ejercicio(this.retencion.getid_ejercicio());	
				retencionAux.setid_periodo(this.retencion.getid_periodo());	
				retencionAux.setid_anio(this.retencion.getid_anio());	
				retencionAux.setid_mes(this.retencion.getid_mes());	
				retencionAux.setid_asiento_contable(this.retencion.getid_asiento_contable());	
				retencionAux.setid_tipo_retencion(this.retencion.getid_tipo_retencion());	
				retencionAux.setid_cliente(this.retencion.getid_cliente());	
				retencionAux.setporcentaje(this.retencion.getporcentaje());	
				retencionAux.setbase_imponible(this.retencion.getbase_imponible());	
				retencionAux.setvalor(this.retencion.getvalor());	
				retencionAux.setnumero(this.retencion.getnumero());	
				
				if(this.retencion.getid_factura()!=null && this.retencion.getid_factura()>0L) {
					retencionAux.setid_factura(this.retencion.getid_factura());
				} else {
					retencionAux.setid_factura(null);
				}	
				retencionAux.setdescripcion(this.retencion.getdescripcion());	
				retencionAux.setdebito_mone_local(this.retencion.getdebito_mone_local());	
				retencionAux.setcredito_mone_local(this.retencion.getcredito_mone_local());	
				retencionAux.setdebito_mone_extra(this.retencion.getdebito_mone_extra());	
				retencionAux.setcredito_mone_extra(this.retencion.getcredito_mone_extra());	
				retencionAux.setid_moneda(this.retencion.getid_moneda());	
				retencionAux.setcotizacion(this.retencion.getcotizacion());	
				retencionAux.setnombre_benef(this.retencion.getnombre_benef());	
				retencionAux.setdireccion_benef(this.retencion.getdireccion_benef());	
				retencionAux.setruc_benef(this.retencion.getruc_benef());	
				retencionAux.settelefono_benef(this.retencion.gettelefono_benef());	
				retencionAux.setfecha(this.retencion.getfecha());	
				retencionAux.setid_cuenta_contable_retencion(this.retencion.getid_cuenta_contable_retencion());	
				retencionAux.setid_estado_retencion(this.retencion.getid_estado_retencion());	
				retencionAux.setbeneficiario(this.retencion.getbeneficiario());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(retencionAux,retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(retencionAux,retencions);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.retencionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.retencionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.saveRetencions();//WithConnection
						//retencionLogic.getSetVersionRowRetencions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.retencion,retencionAux);
					
					this.refrescarForeignKeysDescripcionesRetencion();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.retencionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								retencionLogic.saveRetencionRelaciones(retencionAux);//WithConnection
								//retencionLogic.getSetVersionRowRetencions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.retencion,retencionAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.retencionSessionBean.getEstaModoGuardarRelaciones() 
									|| this.retencionSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(retencionAux,retencionLogic.getRetencions());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(retencionAux,retencions);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.retencion,retencionAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				retencionAux=new  Retencion();
				
				retencionAux.setIsNew(false);
				retencionAux.setIsChanged(false);
				
				retencionAux.setIsDeleted(true);
				
				retencionAux.setId(this.retencion.getId());	
				retencionAux.setVersionRow(this.retencion.getVersionRow());	
				retencionAux.setid_empresa(this.retencion.getid_empresa());	
				retencionAux.setid_sucursal(this.retencion.getid_sucursal());	
				retencionAux.setid_ejercicio(this.retencion.getid_ejercicio());	
				retencionAux.setid_periodo(this.retencion.getid_periodo());	
				retencionAux.setid_anio(this.retencion.getid_anio());	
				retencionAux.setid_mes(this.retencion.getid_mes());	
				retencionAux.setid_asiento_contable(this.retencion.getid_asiento_contable());	
				retencionAux.setid_tipo_retencion(this.retencion.getid_tipo_retencion());	
				retencionAux.setid_cliente(this.retencion.getid_cliente());	
				retencionAux.setporcentaje(this.retencion.getporcentaje());	
				retencionAux.setbase_imponible(this.retencion.getbase_imponible());	
				retencionAux.setvalor(this.retencion.getvalor());	
				retencionAux.setnumero(this.retencion.getnumero());	
				
				if(this.retencion.getid_factura()!=null && this.retencion.getid_factura()>0L) {
					retencionAux.setid_factura(this.retencion.getid_factura());
				} else {
					retencionAux.setid_factura(null);
				}	
				retencionAux.setdescripcion(this.retencion.getdescripcion());	
				retencionAux.setdebito_mone_local(this.retencion.getdebito_mone_local());	
				retencionAux.setcredito_mone_local(this.retencion.getcredito_mone_local());	
				retencionAux.setdebito_mone_extra(this.retencion.getdebito_mone_extra());	
				retencionAux.setcredito_mone_extra(this.retencion.getcredito_mone_extra());	
				retencionAux.setid_moneda(this.retencion.getid_moneda());	
				retencionAux.setcotizacion(this.retencion.getcotizacion());	
				retencionAux.setnombre_benef(this.retencion.getnombre_benef());	
				retencionAux.setdireccion_benef(this.retencion.getdireccion_benef());	
				retencionAux.setruc_benef(this.retencion.getruc_benef());	
				retencionAux.settelefono_benef(this.retencion.gettelefono_benef());	
				retencionAux.setfecha(this.retencion.getfecha());	
				retencionAux.setid_cuenta_contable_retencion(this.retencion.getid_cuenta_contable_retencion());	
				retencionAux.setid_estado_retencion(this.retencion.getid_estado_retencion());	
				retencionAux.setbeneficiario(this.retencion.getbeneficiario());	
				
				if(this.retencionSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.retencionAux.getId()>=0) {	
						this.retencionsEliminados.add(retencionAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(retencionAux,retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(retencionAux,retencions);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.retencionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.retencionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.saveRetencions();//WithConnection
						//retencionLogic.getSetVersionRowRetencions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.retencionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								retencionLogic.saveRetencionRelaciones(retencionAux);//WithConnection
								//retencionLogic.getSetVersionRowRetencions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.retencionSessionBean.getEstaModoGuardarRelaciones() 
								|| this.retencionSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(retencionAux,retencionLogic.getRetencions());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(retencionAux,retencions);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getRetencions().addAll(this.retencionsEliminados);
					
					retencionLogic.saveRetencions();//WithConnection
					//retencionLogic.getSetVersionRowRetencions();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesRetencion();
				
				this.retencionsEliminados= new ArrayList<Retencion>();		
			}
			
			if(this.retencionSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Retencion GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.retencion=retencionAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessRetencion();
      	}
		
	}	
	
	public void actualizarRelaciones(Retencion retencionLocal) throws Exception {
		
		if(this.retencionSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Retencion retencionLocal) throws Exception {	
		if(this.retencionSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				retencionLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				retencionLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				retencionLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				retencionLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				retencionLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				retencionLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				retencionLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionsForeignKey);

				tiporetencionBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				retencionLocal.setTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey("Formulario");
				this.setActualTipoRetencionForeignKey(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				retencionLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				retencionLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				retencionLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableretencionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableretencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableretencionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableretencionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableretencionsForeignKey);

				cuentacontableretencionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable);

				retencionLocal.setCuentaContableRetencion(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
				this.cargarCombosFrameCuentaContableRetencionsForeignKey("Formulario");
				this.setActualCuentaContableRetencionForeignKey(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoRetencionDetalleFormJInternalFrame.class)) {
				EstadoRetencionBeanSwingJInternalFrame estadoretencionBeanSwingJInternalFrameLocal=(EstadoRetencionBeanSwingJInternalFrame) ((EstadoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadoretencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoRetencion(estadoretencionBeanSwingJInternalFrameLocal.getestadoretencion(),true);
				estadoretencionBeanSwingJInternalFrameLocal.actualizarLista(estadoretencionBeanSwingJInternalFrameLocal.estadoretencion,this.estadoretencionsForeignKey);

				estadoretencionBeanSwingJInternalFrameLocal.actualizarRelaciones(estadoretencionBeanSwingJInternalFrameLocal.estadoretencion);

				retencionLocal.setEstadoRetencion(estadoretencionBeanSwingJInternalFrameLocal.estadoretencion);

				this.addItemDefectoCombosForeignKeyEstadoRetencion();
				this.cargarCombosFrameEstadoRetencionsForeignKey("Formulario");
				this.setActualEstadoRetencionForeignKey(estadoretencionBeanSwingJInternalFrameLocal.estadoretencion.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarRetencionActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = retencionValidator.getInvalidValues(this.retencion);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Retencion retencion,List<Retencion> retencions) throws Exception {
		try	{		
			RetencionConstantesFunciones.actualizarLista(retencion,retencions,this.retencionSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Retencion retencion,List<Retencion> retencions) throws Exception {
		try	{			
			RetencionConstantesFunciones.actualizarSelectedLista(retencion,retencions);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Retencion> retencionsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				retencionsLocal=this.retencionLogic.getRetencions();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				retencionsLocal=this.retencions;
			}
			//ARCHITECTURE
		
			for(Retencion retencionLocal:retencionsLocal) {
				if(this.permiteMantenimiento(retencionLocal) && retencionLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+RetencionConstantesFunciones.getRetencionLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_empresaRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_sucursalRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_ejercicioRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_periodoRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_anioRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_mesRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_asiento_contableRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDTIPORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_tipo_retencionRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_clienteRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.PORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelporcentajeRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.BASEIMPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelbase_imponibleRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.VALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelvalorRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.NUMERO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelnumeroRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_facturaRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldescripcionRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.DEBITOMONELOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_localRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.CREDITOMONELOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_localRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.DEBITOMONEEXTRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_extraRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.CREDITOMONEEXTRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_extraRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_monedaRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcotizacionRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.NOMBREBENEF)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelnombre_benefRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.DIRECCIONBENEF)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldireccion_benefRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.RUCBENEF)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelruc_benefRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.TELEFONOBENEF)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeltelefono_benefRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelfechaRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDCUENTACONTABLERETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_cuenta_contable_retencionRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.IDESTADORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelid_estado_retencionRetencion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RetencionConstantesFunciones.BENEFICIARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelbeneficiarioRetencion,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_empresaRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_sucursalRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_ejercicioRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_periodoRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_anioRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_mesRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_asiento_contableRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_tipo_retencionRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_clienteRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelporcentajeRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelbase_imponibleRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelvalorRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelnumeroRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_facturaRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabeldescripcionRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_localRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_localRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_extraRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_extraRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_monedaRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelcotizacionRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelnombre_benefRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabeldireccion_benefRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelruc_benefRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabeltelefono_benefRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelfechaRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_cuenta_contable_retencionRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelid_estado_retencionRetencion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRetencion.jLabelbeneficiarioRetencion,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoRetencion--;	
		
		
		this.retencionAux=new Retencion();
		
		this.retencionAux.setId(this.iIdNuevoRetencion);
		this.retencionAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.retencionLogic.getRetencions().add(this.retencionAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.retencions.add(this.retencionAux);
		}
		//ARCHITECTURE
		
		this.retencion=this.retencionAux;
		
		if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioRetencion(this.retencion);
			this.setVariablesObjetoActualToFormularioForeignKeyRetencion(this.retencion);
		}
				
		//this.setDefaultControlesRetencion();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyRetencion();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyRetencion();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyRetencion();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualRetencion(this.retencionBean,this.retencion,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(RetencionConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.retencionSessionBean.getConGuardarRelaciones()) {
			classes=RetencionConstantesFunciones.getClassesRelationshipsOfRetencion(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.retencionReturnGeneral=retencionLogic.procesarEventosRetencionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.retencionLogic.getRetencions(),this.retencion,this.retencionParameterGeneral,this.isEsNuevoRetencion,classes);//this.retencionLogic.getRetencion()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanRetencion(this.retencionReturnGeneral,this.retencionBean,false);
		
		if(this.retencionReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyRetencion(this.retencionReturnGeneral.getRetencion());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioRetencion(this.retencionReturnGeneral.getRetencion());
		}
		
		if(this.retencionReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioRetencion(this.retencionReturnGeneral.getRetencion(),classes);//this.retencionBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualRetencion(this.retencion,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyRetencion();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyRetencion();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			RetencionBeanSwingJInternalFrameAdditional.RecargarFormRetencion(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingRetencion(false);
						
			if(retencionSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRetencion();
			}
			
			this.actualizarVisualTableDatosRetencion();
			
			this.jTableDatosRetencion.setRowSelectionInterval(this.getIndiceNuevoRetencion(), this.getIndiceNuevoRetencion());
			
			this.seleccionarFilaTablaRetencionActual();
						
			this.actualizarEstadoCeldasBotonesRetencion("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesRetencion(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarporcentajeRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarbase_imponibleRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarvalorRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarnumeroRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activardescripcionRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activardebito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarcredito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activardebito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarcredito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarcotizacionRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarnombre_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activardireccion_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarruc_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activartelefono_benefRetencion);//
		this.jInternalFrameDetalleFormRetencion.jDateChooserfechaRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarfechaRetencion);//
		this.jInternalFrameDetalleFormRetencion.jTextAreabeneficiarioRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarbeneficiarioRetencion);	
		//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_empresaRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_sucursalRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_ejercicioRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_periodoRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_anioRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_mesRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_asiento_contableRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_tipo_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_clienteRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_facturaRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_monedaRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_cuenta_contable_retencionRetencion);//
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setEnabled(isHabilitar && this.retencionConstantesFunciones.activarid_estado_retencionRetencion);
	};
	
	public void setDefaultControlesRetencion() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoRetencion(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.retencionSessionBean.setConGuardarRelaciones(true);			
			this.retencionSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.setVisible(true);
			
					
		} else {
			//this.retencionSessionBean.setConGuardarRelaciones(false);			
			this.retencionSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoRetencion() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
				if(retencionAux.getId().equals(this.iIdNuevoRetencion)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Retencion retencionAux:this.retencions) {
				if(retencionAux.getId().equals(this.iIdNuevoRetencion)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualRetencion(Retencion retencion,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
				if(retencionAux.getId().equals(retencion.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Retencion retencionAux:this.retencions) {
				if(retencionAux.getId().equals(retencion.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalRetencion(Retencion retencionOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
				if(retencionAux.getRetencionOriginal().getId().equals(retencionOriginal.getId())) {
					existe=true;
					retencionOriginal.setId(retencionAux.getId());
					retencionOriginal.setVersionRow(retencionAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Retencion retencionAux:this.retencions) {
				if(retencionAux.getRetencionOriginal().getId().equals(retencionOriginal.getId())) {
					existe=true;
					retencionOriginal.setId(retencionAux.getId());
					retencionOriginal.setVersionRow(retencionAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosRetencion(Boolean esParaCancelar) throws Exception {
		retencionsAux=new ArrayList<Retencion>();
		retencionAux=new Retencion();
		
		if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
					if(retencionAux.getId()<0) {
						retencionsAux.add(retencionAux);
					}		
				}
				this.iIdNuevoRetencion=0L;
				this.retencionLogic.getRetencions().removeAll(retencionsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Retencion retencionAux:this.retencions) {
					if(retencionAux.getId()<0) {
						retencionsAux.add(retencionAux);
					}		
				}
				this.iIdNuevoRetencion=0L;
				this.retencions.removeAll(retencionsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoRetencion 
					&& this.retencionLogic.getRetencions().size()>0
					) {
					retencionAux=this.retencionLogic.getRetencions().get(this.retencionLogic.getRetencions().size() - 1);
				
					if(retencionAux.getId()<0) {
						this.retencionLogic.getRetencions().remove(retencionAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoRetencion && this.retencions.size()>0) {
					retencionAux=this.retencions.get(this.retencions.size() - 1);
				
					if(retencionAux.getId()<0) {
						this.retencions.remove(retencionAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoRetencion(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(retencion.getId()<0) {
				this.retencionLogic.getRetencions().remove(this.retencion);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(retencion.getId()<0) {
				this.retencions.remove(this.retencion);
			}
		}			
	}
	
	public void setEstadosInicialesRetencion(List<Retencion> retencionsAux) throws Exception {
		RetencionConstantesFunciones.setEstadosInicialesRetencion(retencionsAux);
	}
	
	public void setEstadosInicialesRetencion(Retencion retencionAux) throws Exception {
		RetencionConstantesFunciones.setEstadosInicialesRetencion(retencionAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarRetencionActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarRetencionActual()) {
				if(!this.isEsNuevoRetencion) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoRetencion=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarRetencionActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Retencion ?", "MANTENIMIENTO DE Retencion", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Retencion retencion) throws Exception {
		RetencionConstantesFunciones.seleccionarAsignar(this.retencion,retencion);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarRetencion=this.isPermisoActualizarOriginalRetencion;
			
			
			this.seleccionarAsignar(retencion);
			
			

			idAsientoContableActual=retencion.getid_asiento_contable();
			this.seleccionarAsientoContableActual();

			idClienteActual=retencion.getid_cliente();
			this.seleccionarClienteActual();

			idFacturaActual=retencion.getid_factura();
			this.seleccionarFacturaActual();

			idCuentaContableRetencionActual=retencion.getid_cuenta_contable_retencion();
			this.seleccionarCuentaContableRetencionActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			RetencionConstantesFunciones.quitarEspaciosRetencion(this.retencion,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesRetencion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.retencionSessionBean.setsFuncionBusquedaRapida(this.retencionSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableRetencionActual() throws Exception {
		try	{
			CuentaContable cuentacontableretencionAux=new CuentaContable();

			if(this.idCuentaContableRetencionActual != null && this.idCuentaContableRetencionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableretencionLogic.getEntityWithConnection(this.idCuentaContableRetencionActual);
					cuentacontableretencionAux= cuentacontableretencionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableretencionsForeignKey.add(cuentacontableretencionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoRetencion) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosRetencion(esParaCancelar);				
				this.cancelarNuevoRetencion(esParaCancelar);								
			}
			
			this.retencion=new Retencion();
			
			this.inicializarRetencion();
			
			this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarRetencion() throws Exception {
		try {
			RetencionConstantesFunciones.inicializarRetencion(this.retencion);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.retencionLogic.getRetencions().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteRetencions(String sAccionBusqueda,List<Retencion> retencionsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Retencion"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="RetencionMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("RetencionMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Retencion"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Retenciones");		
		parameters.put("busquedapor", RetencionConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceRetencion=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			RetencionConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			RetencionConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceRetencion=new JRBeanArrayDataSource(RetencionJInternalFrame.TraerRetencionBeans(retencionsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceRetencion);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+RetencionConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+RetencionConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(RetencionBean.TraerRetencionBeans(retencionsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoRetencionActionPerformed(null);
					//this.generarExcelReporteRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesRetencions(sAccionBusqueda,sTipoArchivoReporte,retencionsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRetencions(String sAccionBusqueda,String sTipoArchivoReporte,List<Retencion> retencionsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Retencions");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderRetencion("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Retencion retencion : retencionsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			RetencionConstantesFunciones.generarExcelReporteDataRetencion("NORMAL",row,workbook,retencion,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderRetencion(String sTipo,Row row,Workbook workbook) {
		
		RetencionConstantesFunciones.generarExcelReporteHeaderRetencion(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalRetencions(String sAccionBusqueda,String sTipoArchivoReporte,List<Retencion> retencionsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Retencions");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Retencion retencion : retencionsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(RetencionConstantesFunciones.getRetencionDescripcion(retencion));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDTIPORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDTIPORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.gettiporetencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_PORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_PORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getporcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getbase_imponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_VALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_VALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getvalor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_NUMERO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_NUMERO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getnumero());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getdebito_mone_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getcredito_mone_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getdebito_mone_extra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getcredito_mone_extra());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_NOMBREBENEF))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_NOMBREBENEF);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getnombre_benef());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getdireccion_benef());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_RUCBENEF))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_RUCBENEF);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getruc_benef());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_TELEFONOBENEF))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_TELEFONOBENEF);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.gettelefono_benef());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getcuentacontableretencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_IDESTADORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_IDESTADORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getestadoretencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RetencionConstantesFunciones.LABEL_BENEFICIARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RetencionConstantesFunciones.LABEL_BENEFICIARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(retencion.getbeneficiario());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesRetencions(String sAccionBusqueda,String sTipoArchivoReporte,List<Retencion> retencionsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Retencion> retencionsRespaldo=null;
		
		classes=RetencionConstantesFunciones.getClassesRelationshipsOfRetencion(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.retencionLogic.setDatosCliente(this.datosCliente);
		this.retencionLogic.setDatosDeep(this.datosDeep);
		this.retencionLogic.setIsConDeep(true);
		
		retencionsRespaldo=this.retencionLogic.getRetencions();
		
		this.retencionLogic.setRetencions(retencionsParaReportes);	
		this.retencionLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		retencionsParaReportes=this.retencionLogic.getRetencions();
		this.retencionLogic.setRetencions(retencionsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Retencions");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderRetencion("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Retencion retencion : retencionsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderRetencion("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			RetencionConstantesFunciones.generarExcelReporteDataRetencion("NORMAL",row,workbook,retencion,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(RetencionConstantesFunciones.getRetencionDescripcion(retencion));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoRetencion.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRetencion.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessRetencion() throws Exception {		
		this.startProcessRetencion(true);
	}
	
	public void startProcessRetencion(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasRetencion ,this.jPanelParametrosReportesRetencion, this.jScrollPanelDatosRetencion,this.jPanelPaginacionRetencion, this.jScrollPanelDatosEdicionRetencion, this.jPanelAccionesRetencion,this.jPanelAccionesFormularioRetencion,this.jmenuBarRetencion,this.jmenuBarDetalleRetencion,this.jTtoolBarRetencion,this.jTtoolBarDetalleRetencion);		
		
		final JTabbedPane jTabbedPaneBusquedasRetencion=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesRetencion=this.jPanelParametrosReportesRetencion;
		//final JScrollPane jScrollPanelDatosRetencion=this.jScrollPanelDatosRetencion;
		final JTable jTableDatosRetencion=this.jTableDatosRetencion;		
		final JPanel jPanelPaginacionRetencion=this.jPanelPaginacionRetencion;
		//final JScrollPane jScrollPanelDatosEdicionRetencion=this.jScrollPanelDatosEdicionRetencion;
		final JPanel jPanelAccionesRetencion=this.jPanelAccionesRetencion;
		
		JPanel jPanelCamposAuxiliarRetencion=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarRetencion=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
			jPanelCamposAuxiliarRetencion=this.jInternalFrameDetalleFormRetencion.jPanelCamposRetencion;
			jPanelAccionesFormularioAuxiliarRetencion=this.jInternalFrameDetalleFormRetencion.jPanelAccionesFormularioRetencion;
		}
		
		final JPanel jPanelCamposRetencion=jPanelCamposAuxiliarRetencion;
		final JPanel jPanelAccionesFormularioRetencion=jPanelAccionesFormularioAuxiliarRetencion;
		
		
		final JMenuBar jmenuBarRetencion=new JMenuBar();
		final JMenuBar jmenuBarDetalleRetencion=new JMenuBar();
		final JToolBar jTtoolBarRetencion=new JToolBar();
		final JToolBar jTtoolBarDetalleRetencion=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasRetencion;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesRetencion;
			processRunnable.jTableDatos=jTableDatosRetencion;
			processRunnable.jPanelCampos=jPanelCamposRetencion;
			processRunnable.jPanelPaginacion=jPanelPaginacionRetencion;
			processRunnable.jPanelAcciones=jPanelAccionesRetencion;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioRetencion;
			
			
			processRunnable.jmenuBar=jmenuBarRetencion;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleRetencion;
			processRunnable.jTtoolBar=jTtoolBarRetencion;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleRetencion;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasRetencion ,jPanelParametrosReportesRetencion,jTableDatosRetencion, /*jScrollPanelDatosRetencion,*/jPanelCamposRetencion,jPanelPaginacionRetencion, /*jScrollPanelDatosEdicionRetencion,*/ jPanelAccionesRetencion,jPanelAccionesFormularioRetencion,jmenuBarRetencion,jmenuBarDetalleRetencion,jTtoolBarRetencion,jTtoolBarDetalleRetencion);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasRetencion ,jPanelParametrosReportesRetencion, jScrollPanelDatosRetencion,jPanelPaginacionRetencion, jScrollPanelDatosEdicionRetencion, jPanelAccionesRetencion,jPanelAccionesFormularioRetencion,jmenuBarRetencion,jmenuBarDetalleRetencion,jTtoolBarRetencion,jTtoolBarDetalleRetencion);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessRetencion() {// throws Exception 
		this.finishProcessRetencion(true);
	}
	
	public void finishProcessRetencion(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasRetencion ,this.jPanelParametrosReportesRetencion, this.jScrollPanelDatosRetencion,this.jPanelPaginacionRetencion, this.jScrollPanelDatosEdicionRetencion, this.jPanelAccionesRetencion,this.jPanelAccionesFormularioRetencion,this.jmenuBarRetencion,this.jmenuBarDetalleRetencion,this.jTtoolBarRetencion,this.jTtoolBarDetalleRetencion);		
		
		final JTabbedPane jTabbedPaneBusquedasRetencion=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesRetencion=this.jPanelParametrosReportesRetencion;
		//final JScrollPane jScrollPanelDatosRetencion=this.jScrollPanelDatosRetencion;
		final JTable jTableDatosRetencion=this.jTableDatosRetencion;		
		final JPanel jPanelPaginacionRetencion=this.jPanelPaginacionRetencion;
		//final JScrollPane jScrollPanelDatosEdicionRetencion=this.jScrollPanelDatosEdicionRetencion;
		final JPanel jPanelAccionesRetencion=this.jPanelAccionesRetencion;
		
		JPanel jPanelCamposAuxiliarRetencion=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarRetencion=new JPanel();
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
			jPanelCamposAuxiliarRetencion=this.jInternalFrameDetalleFormRetencion.jPanelCamposRetencion;
			jPanelAccionesFormularioAuxiliarRetencion=this.jInternalFrameDetalleFormRetencion.jPanelAccionesFormularioRetencion;
		}
		
		final JPanel jPanelCamposRetencion=jPanelCamposAuxiliarRetencion;
		final JPanel jPanelAccionesFormularioRetencion=jPanelAccionesFormularioAuxiliarRetencion;
		
		
		final JMenuBar jmenuBarRetencion=new JMenuBar();
		final JMenuBar jmenuBarDetalleRetencion=new JMenuBar();
		final JToolBar jTtoolBarRetencion=new JToolBar();
		final JToolBar jTtoolBarDetalleRetencion=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasRetencion;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesRetencion;
			processRunnable.jTableDatos=jTableDatosRetencion;
			processRunnable.jPanelCampos=jPanelCamposRetencion;
			processRunnable.jPanelPaginacion=jPanelPaginacionRetencion;
			processRunnable.jPanelAcciones=jPanelAccionesRetencion;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioRetencion;
			
			
			processRunnable.jmenuBar=jmenuBarRetencion;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleRetencion;
			processRunnable.jTtoolBar=jTtoolBarRetencion;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleRetencion;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasRetencion ,jPanelParametrosReportesRetencion, jTableDatosRetencion,/*jScrollPanelDatosRetencion,*/jPanelCamposRetencion,jPanelPaginacionRetencion, /*jScrollPanelDatosEdicionRetencion,*/ jPanelAccionesRetencion,jPanelAccionesFormularioRetencion,jmenuBarRetencion,jmenuBarDetalleRetencion,jTtoolBarRetencion,jTtoolBarDetalleRetencion));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesRetencion(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarRetencion(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuRetencion(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarRetencion(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarRetencion,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleRetencion,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuRetencion(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarRetencion,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleRetencion,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.retencionConstantesFunciones.getsFinalQueryRetencion();
		String  finalQueryPaginacionTodos=this.retencionConstantesFunciones.getsFinalQueryRetencion();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=RetencionConstantesFunciones.getArrayColumnasGlobalesNoRetencion(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=RetencionConstantesFunciones.getArrayColumnasGlobalesRetencion(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,RetencionConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.retencionsEliminados= new ArrayList<Retencion>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessRetencion();
		
				///*RetencionSessionBean*/this.retencionSessionBean=new RetencionSessionBean();
			
			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=RetencionConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=RetencionConstantesFunciones.getClassesForeignKeysOfRetencion(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/retencion."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			retencionsAux= new ArrayList<Retencion>();
			
				
			retencionLogic.setDatosCliente(this.datosCliente);
			retencionLogic.setDatosDeep(this.datosDeep);
			retencionLogic.setIsConDeep(true);
			
			
			retencionLogic.getRetencionDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					retencionLogic.getTodosRetencions(finalQueryGlobal,pagination);
					
					//retencionLogic.getTodosRetencionsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(retencionLogic.getRetencions()==null|| retencionLogic.getRetencions().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							retencionsAux= new ArrayList<Retencion>();
							retencionsAux.addAll(retencionLogic.getRetencions());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux= new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							retencionLogic.getTodosRetencions(finalQueryGlobal+"",this.pagination);												
							
							//retencionLogic.getTodosRetencionsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteRetencions("Todos",retencionLogic.getRetencions() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							retencionLogic.setRetencions(new ArrayList<Retencion>());					
							retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idRetencion=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idRetencion=this.idActual;
				
				} else if(this.idRetencionActual!=null && this.idRetencionActual!=0L) {
					idRetencion=idRetencionActual;
				}
				
					
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndicePorId(idRetencion);
				
				this.retencions=new ArrayList<Retencion>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					retencionLogic.getEntity(idRetencion);
					
					//retencionLogic.getEntityWithConnection(idRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					retencionLogic.setRetencions(new ArrayList<Retencion>());
					retencionLogic.getRetencions().add(retencionLogic.getRetencion());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencions=new ArrayList<Retencion>();
					this.retencions.add(retencion);
				}
				
				if(retencionLogic.getRetencion()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdAsientoContable",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdAsientoContable",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdCliente",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdCliente",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableRetencion")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion(id_cuenta_contable_retencionFK_IdCuentaContableRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdCuentaContableRetencion(finalQueryGlobal,pagination,id_cuenta_contable_retencionFK_IdCuentaContableRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion(id_cuenta_contable_retencionFK_IdCuentaContableRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion(id_cuenta_contable_retencionFK_IdCuentaContableRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdCuentaContableRetencion(finalQueryGlobal,pagination,id_cuenta_contable_retencionFK_IdCuentaContableRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion(id_cuenta_contable_retencionFK_IdCuentaContableRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion(id_cuenta_contable_retencionFK_IdCuentaContableRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdCuentaContableRetencion",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdCuentaContableRetencion",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdEjercicio",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdEjercicio",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdEmpresa",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdEmpresa",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoRetencion")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEstadoRetencion(id_estado_retencionFK_IdEstadoRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdEstadoRetencion(finalQueryGlobal,pagination,id_estado_retencionFK_IdEstadoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEstadoRetencion(id_estado_retencionFK_IdEstadoRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEstadoRetencion(id_estado_retencionFK_IdEstadoRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdEstadoRetencion(finalQueryGlobal,pagination,id_estado_retencionFK_IdEstadoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEstadoRetencion(id_estado_retencionFK_IdEstadoRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdEstadoRetencion(id_estado_retencionFK_IdEstadoRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdEstadoRetencion",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdEstadoRetencion",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdFactura",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdFactura",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMoneda")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdMoneda",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdMoneda",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdPeriodo",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdPeriodo",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdSucursal",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdSucursal",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencion")) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					retencionLogic.getRetencionsFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=retencionLogic.getRetencions()==null||retencionLogic.getRetencions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=retencions==null|| retencions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionsAux=new ArrayList<Retencion>();
						retencionsAux.addAll(retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionsAux=new ArrayList<Retencion>();
							retencionsAux.addAll(retencions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							retencionLogic.getRetencionsFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RetencionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRetencions("FK_IdTipoRetencion",retencionLogic.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRetencions("FK_IdTipoRetencion",retencions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionLogic.setRetencions(new ArrayList<Retencion>());
						retencionLogic.getRetencions().addAll(retencionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencions=new ArrayList<Retencion>();
							retencions.addAll(retencionsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesRetencion();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessRetencion();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=retencionLogic.getRetencions().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=retencions.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=retencionLogic.getRetencions().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=retencions.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Retencion retencion) {
		Boolean permite=true;
		
		if(this.retencion.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=RetencionConstantesFunciones.getOrderByListaRetencion();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=RetencionConstantesFunciones.getOrderByListaRetencion();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Retencion retencion:retencionLogic.getRetencions()) {
				if(retencion.getsType().equals(Constantes2.S_TOTALES)) {
					retencionTotales=retencion;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Retencion retencion:this.retencions) {
				if(retencion.getsType().equals(Constantes2.S_TOTALES)) {
					retencionTotales=retencion;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.retencionAux=new Retencion();
			this.retencionAux.setsType(Constantes2.S_TOTALES);
			this.retencionAux.setIsNew(false);
			this.retencionAux.setIsChanged(false);
			this.retencionAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				RetencionConstantesFunciones.TotalizarValoresFilaRetencion(this.retencionLogic.getRetencions(),this.retencionAux);
				
				this.retencionLogic.getRetencions().add(this.retencionAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				RetencionConstantesFunciones.TotalizarValoresFilaRetencion(this.retencions,this.retencionAux);
				
				this.retencions.add(this.retencionAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		retencionTotales=new Retencion();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.retencionLogic.getRetencions().remove(retencionTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.retencions.remove(retencionTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		retencionTotales=new Retencion();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Retencion retencion:retencionLogic.getRetencions()) {
				if(retencion.getsType().equals(Constantes2.S_TOTALES)) {
					retencionTotales=retencion;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				RetencionConstantesFunciones.TotalizarValoresFilaRetencion(this.retencionLogic.getRetencions(),retencionTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Retencion retencion:this.retencions) {
				if(retencion.getsType().equals(Constantes2.S_TOTALES)) {
					retencionTotales=retencion;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				RetencionConstantesFunciones.TotalizarValoresFilaRetencion(this.retencions,retencionTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosRetencion() {
		this.isPermisoTodoRetencion=false;
		this.isPermisoNuevoRetencion=false;
		this.isPermisoActualizarRetencion=false;
		this.isPermisoActualizarOriginalRetencion=false;
		this.isPermisoEliminarRetencion=false;
		this.isPermisoGuardarCambiosRetencion=false;
		this.isPermisoConsultaRetencion=false;
		this.isPermisoBusquedaRetencion=false;
		this.isPermisoReporteRetencion=false;		
		this.isPermisoOrdenRetencion=false;		
		this.isPermisoPaginacionMedioRetencion=false;		
		this.isPermisoPaginacionAltoRetencion=false;
		this.isPermisoPaginacionTodoRetencion=false;
		this.isPermisoCopiarRetencion=false;		
		this.isPermisoVerFormRetencion=false;		
		this.isPermisoDuplicarRetencion=false;		
		this.isPermisoOrdenRetencion=false;		
	}
	
	public void setPermisosUsuarioRetencion(Boolean isPermiso) {
		this.isPermisoTodoRetencion=isPermiso;
		this.isPermisoNuevoRetencion=isPermiso;
		this.isPermisoActualizarRetencion=isPermiso;
		this.isPermisoActualizarOriginalRetencion=isPermiso;
		this.isPermisoEliminarRetencion=isPermiso;
		this.isPermisoGuardarCambiosRetencion=isPermiso;
		this.isPermisoConsultaRetencion=isPermiso;
		this.isPermisoBusquedaRetencion=isPermiso;
		this.isPermisoReporteRetencion=isPermiso;
		this.isPermisoOrdenRetencion=isPermiso;		
		this.isPermisoPaginacionMedioRetencion=isPermiso;		
		this.isPermisoPaginacionAltoRetencion=isPermiso;		
		this.isPermisoPaginacionTodoRetencion=isPermiso;		
		this.isPermisoCopiarRetencion=isPermiso;		
		this.isPermisoVerFormRetencion=isPermiso;		
		this.isPermisoDuplicarRetencion=isPermiso;
		this.isPermisoOrdenRetencion=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioRetencion(Boolean isPermiso) {
		//this.isPermisoTodoRetencion=isPermiso;
		this.isPermisoNuevoRetencion=isPermiso;
		this.isPermisoActualizarRetencion=isPermiso;
		this.isPermisoActualizarOriginalRetencion=isPermiso;
		this.isPermisoEliminarRetencion=isPermiso;
		this.isPermisoGuardarCambiosRetencion=isPermiso;
		//this.isPermisoConsultaRetencion=isPermiso;
		//this.isPermisoBusquedaRetencion=isPermiso;
		//this.isPermisoReporteRetencion=isPermiso;
		//this.isPermisoOrdenRetencion=isPermiso;		
		//this.isPermisoPaginacionMedioRetencion=isPermiso;		
		//this.isPermisoPaginacionAltoRetencion=isPermiso;		
		//this.isPermisoPaginacionTodoRetencion=isPermiso;		
		//this.isPermisoCopiarRetencion=isPermiso;		
		//this.isPermisoDuplicarRetencion=isPermiso;
		//this.isPermisoOrdenRetencion=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioRetencionClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(RetencionJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebRetencion(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioRetencionClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioRetencionClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionRetencionClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioRetencionClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioRetencion() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(RetencionJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.retencionSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, RetencionConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoRetencion=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarRetencion=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalRetencion=this.isPermisoActualizarRetencion;
			this.isPermisoEliminarRetencion=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosRetencion=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaRetencion=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaRetencion=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoRetencion=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteRetencion=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenRetencion=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioRetencion=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoRetencion=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoRetencion=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarRetencion=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormRetencion=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarRetencion=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenRetencion=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.retencionSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosRetencion.setToolTipText(this.jTableDatosRetencion.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioRetencion(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioRetencion(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(RetencionJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(RetencionJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioRetencion() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyRetencionListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.tiporetencionsForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.cuentacontableretencionsForeignKey=new ArrayList();
				this.estadoretencionsForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyRetencionListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(RetencionJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyRetencionListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableretencionsForeignKey==null||this.cuentacontableretencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadoretencionsForeignKey==null||this.estadoretencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoRetencionConstantesFunciones.getArrayColumnasGlobalesEstadoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyRetencionListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			RetencionParameterReturnGeneral retencionReturnGeneral=new RetencionParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_empresaRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_empresaRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_sucursalRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_sucursalRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_ejercicioRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_ejercicioRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_periodoRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_periodoRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_anioRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_anioRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_mesRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_mesRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_asiento_contableRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_asiento_contableRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalTipoRetencion="";

				if(((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_tipo_retencionRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_tipo_retencionRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencion, "");
						finalQueryGlobalTipoRetencion+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencion=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidTipoRetencionActual();
					}
				} else {
					finalQueryGlobalTipoRetencion="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_clienteRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_clienteRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_facturaRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_facturaRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_monedaRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_monedaRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalCuentaContableRetencion="";

				if(((this.cuentacontableretencionsForeignKey==null||this.cuentacontableretencionsForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_cuenta_contable_retencionRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_cuenta_contable_retencionRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableRetencion, "");
						finalQueryGlobalCuentaContableRetencion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableRetencion=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidCuentaContableRetencionActual();
					}
				} else {
					finalQueryGlobalCuentaContableRetencion="NONE";
				}


				String finalQueryGlobalEstadoRetencion="";

				if(((this.estadoretencionsForeignKey==null||this.estadoretencionsForeignKey.size()<=0) && this.retencionConstantesFunciones.cargarid_estado_retencionRetencion)
					 || (this.esRecargarFks && this.retencionConstantesFunciones.cargarid_estado_retencionRetencion)) {

					if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoRetencionConstantesFunciones.getArrayColumnasGlobalesEstadoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoRetencion, "");
						finalQueryGlobalEstadoRetencion+=EstadoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoRetencion=" WHERE " + ConstantesSql.ID + "="+retencionSessionBean.getlidEstadoRetencionActual();
					}
				} else {
					finalQueryGlobalEstadoRetencion="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				retencionReturnGeneral=retencionLogic.cargarCombosLoteForeignKeyRetencion(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalAsientoContable,finalQueryGlobalTipoRetencion,finalQueryGlobalCliente,finalQueryGlobalFactura,finalQueryGlobalMoneda,finalQueryGlobalCuentaContableRetencion,finalQueryGlobalEstadoRetencion);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=retencionReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=retencionReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=retencionReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=retencionReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=retencionReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=retencionReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=retencionReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalTipoRetencion.equals("NONE")) {
				this.tiporetencionsForeignKey=retencionReturnGeneral.gettiporetencionsForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=retencionReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=retencionReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=retencionReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableRetencion.equals("NONE")) {
				this.cuentacontableretencionsForeignKey=retencionReturnGeneral.getcuentacontableretencionsForeignKey();
			}

			if(!finalQueryGlobalEstadoRetencion.equals("NONE")) {
				this.estadoretencionsForeignKey=retencionReturnGeneral.getestadoretencionsForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyRetencion()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyTipoRetencion();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
			this.addItemDefectoCombosForeignKeyEstadoRetencion();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.retencionSessionBean==null) {
				this.retencionSessionBean=new RetencionSessionBean();
			}

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencion()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				TipoRetencion tiporetencion=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencion.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionsForeignKey,tiporetencion,true)) {

					this.tiporetencionsForeignKey.add(0,tiporetencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableRetencion()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {
				CuentaContable cuentacontableretencion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableretencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableretencion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableretencionsForeignKey,cuentacontableretencion,true)) {

					this.cuentacontableretencionsForeignKey.add(0,cuentacontableretencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoRetencion()throws Exception {
		try {

			if(!this.retencionSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRetencion()) {
				EstadoRetencion estadoretencion=new EstadoRetencion();
				EstadoRetencionConstantesFunciones.setEstadoRetencionDescripcion(estadoretencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadoretencion.setId(null);

				if(!EstadoRetencionConstantesFunciones.ExisteEnLista(this.estadoretencionsForeignKey,estadoretencion,true)) {

					this.estadoretencionsForeignKey.add(0,estadoretencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyRetencion()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyRetencion(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyRetencion()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.retencion.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyRetencion();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyRetencion(Retencion retencion)throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(retencion.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(retencion.getid_tipo_retencion(),false,"Formulario");
			this.setActualClienteForeignKey(retencion.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(retencion.getid_factura(),false,"Formulario");
			this.setActualCuentaContableRetencionForeignKey(retencion.getid_cuenta_contable_retencion(),false,"Formulario");
			this.setActualEstadoRetencionForeignKey(retencion.getid_estado_retencion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyRetencion(Retencion retencion,String sTipoEvento)throws Exception {	
		try {
			
			

				if(retencion.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableRetencion")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(retencion.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				if(retencion.getCliente()!=null && !sTipoEvento.equals("id_clienteRetencion")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(retencion.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(retencion.getFactura()!=null && !sTipoEvento.equals("id_facturaRetencion")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(retencion.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(retencion.getCuentaContableRetencion()!=null && !sTipoEvento.equals("id_cuenta_contable_retencionRetencion")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableretencionsForeignKey.add(retencion.getCuentaContableRetencion());

					this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
					this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyRetencion()throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(this.retencionConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(this.retencionConstantesFunciones.getid_tipo_retencion(),false,"Formulario");
			this.setActualClienteForeignKey(this.retencionConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(this.retencionConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualCuentaContableRetencionForeignKey(this.retencionConstantesFunciones.getid_cuenta_contable_retencion(),false,"Formulario");
			this.setActualEstadoRetencionForeignKey(this.retencionConstantesFunciones.getid_estado_retencion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyRetencion()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormRetencion!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormRetencion!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyRetencion()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyRetencion()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroRetencion()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyRetencion()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
			this.cargarCombosFrameEstadoRetencionsForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyRetencion(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoRetencionsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyRetencion()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.getItemCount()>0) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	


























	
	

	public RetencionBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public RetencionBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public RetencionBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.retencionSessionBean=new RetencionSessionBean(); 
		this.retencionConstantesFunciones=new RetencionConstantesFunciones(); 
		this.retencionBean=new Retencion();//(this.retencionConstantesFunciones); 		
		this.retencionReturnGeneral=new RetencionParameterReturnGeneral(); 
		
		this.retencionSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.retencionSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public RetencionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public RetencionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public RetencionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessRetencion(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.retencionConstantesFunciones=new RetencionConstantesFunciones(); 
			this.retencionBean=new Retencion();//this.retencionConstantesFunciones); 			
			this.retencionReturnGeneral=new RetencionParameterReturnGeneral(); 
		
			RetencionBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Retencion Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.retencion=new Retencion();
			this.retencions = new ArrayList<Retencion>();
			this.retencionsAux = new ArrayList<Retencion>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic=new RetencionLogic();
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			//this.retencionSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.retencionSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormRetencion);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoRetencion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoRetencion);	
					}
					
					if(this.jInternalFrameImportacionRetencion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionRetencion);							
					}
					*/
				}
				
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByRetencion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByRetencion);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormRetencion!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormRetencion);
				this.jInternalFrameDetalleFormRetencion.setVisible(false);
				this.jInternalFrameDetalleFormRetencion.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoRetencion!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoRetencion);
					this.jInternalFrameReporteDinamicoRetencion.setVisible(false);
					this.jInternalFrameReporteDinamicoRetencion.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionRetencion!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionRetencion);
					this.jInternalFrameImportacionRetencion.setVisible(false);
					this.jInternalFrameImportacionRetencion.setSelected(false);
				}
				
				*/
			}
			
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByRetencion!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByRetencion);
					this.jInternalFrameOrderByRetencion.setVisible(false);
					this.jInternalFrameOrderByRetencion.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idRetencionActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=RetencionConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.retencionReturnGeneral=new RetencionParameterReturnGeneral();
			
			this.retencionParameterGeneral=new RetencionParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.retencionLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(RetencionJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.retencionSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,RetencionConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.retencionSessionBean.getEsGuardarRelacionado(),this.retencionSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,RetencionConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.retencionSessionBean.getEsGuardarRelacionado(),this.retencionSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaDuplicarRetencion=true;
			this.isVisibilidadCeldaCopiarRetencion=true;
			this.isVisibilidadCeldaVerFormRetencion=true;
			this.isVisibilidadCeldaOrdenRetencion=true;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=false;
			this.isVisibilidadCeldaGuardarRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdCuentaContableRetencion=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoRetencion=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoRetencion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosRetencion();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioRetencion(false);
			
			this.setPermisosUsuarioRetencion();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.retencionSessionBean.getEsGuardarRelacionado() 
				|| (this.retencionSessionBean.getEsGuardarRelacionado() && this.retencionSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioRetencionClasesRelacionadas();
			}
			
			if(this.retencionSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioRetencionClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!RetencionJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosRetencion();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualRetencion();
			}
			
			if(!this.isPermisoBusquedaRetencion) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasRetencion.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.retencionSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioRetencion,this.isPermisoPaginacionMedioRetencion,this.isPermisoPaginacionTodoRetencion);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(RetencionConstantesFunciones.getTiposSeleccionarRetencion());
				
				this.tiposColumnasSelect=RetencionConstantesFunciones.getTiposSeleccionarRetencion(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioRetencion();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioRetencion(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioRetencion(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesRetencion() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.tiporetencionLogic=new TipoRetencionLogic();
			this.clienteLogic=new ClienteLogic();
			this.facturaLogic=new FacturaLogic();
			this.monedaLogic=new MonedaLogic();
			this.cuentacontableretencionLogic=new CuentaContableLogic();
			this.estadoretencionLogic=new EstadoRetencionLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				retencionImplementable= (RetencionImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+RetencionConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				retencionImplementableHome= (RetencionImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+RetencionConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.retencions= new ArrayList<Retencion>();
			this.retencionsEliminados= new ArrayList<Retencion>();
						
			this.isEsNuevoRetencion=false;
			this.esParaAccionDesdeFormularioRetencion=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idAsientoContableActual=0L;
			this.idClienteActual=0L;
			this.idFacturaActual=0L;
			this.idCuentaContableRetencionActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>() ;
			this.estadoretencionsForeignKey=new ArrayList<EstadoRetencion>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyRetencion(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroRetencion();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			RetencionBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=RetencionConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesRetencion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingRetencion(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormRetencion!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioRetencion();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioRetencion();
			}
			
			RetencionBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasRetencion.getTabCount(); i++) {
					this.jTabbedPaneBusquedasRetencion.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasRetencion.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessRetencion(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Retencion: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectRetencion() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesRetencion")) {
				iIndex=this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosRetencion.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessRetencion();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyRetencion(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyRetencion(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyRetencionListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyRetencion();
		
		this.cargarCombosFrameForeignKeyRetencion();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyRetencion();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyRetencion();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencion(this.tiporetencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
				this.cargarCombosFrameCuentaContableRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableRetencion(this.cuentacontableretencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoRetencion();
				this.cargarCombosFrameEstadoRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoRetencion(this.estadoretencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoRetencionActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.retencionSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			
			if(jTableDatosRetencion.getRowCount()>=1) {
				jTableDatosRetencion.removeRowSelectionInterval(0, jTableDatosRetencion.getRowCount()-1);						
			}
			
			this.isEsNuevoRetencion=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoRetencion(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesRetencion(true);			
			//this.retencion=new Retencion();
			//this.retencion.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRetencion(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRetencion() ;
			
			if(RetencionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRetencion(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.retencion);	
			this.actualizarInformacion("INFO_PADRE",false,this.retencion);				
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			if(this.retencionSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Retencion: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarRetencionActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosRetencion.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosRetencion.getSelectedRows().length;			
			}
			
			retencionsSeleccionados=this.getRetencionsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoRetencion--;			
				//Retencion retencionAux= new Retencion();			
				//retencionAux.setId(this.iIdNuevoRetencion);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Retencion retencionOrigen=new Retencion();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Retencion retencionOrigen : retencionsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							retencionOrigen =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							retencionOrigen =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaRetencion();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.retencion.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosRetencion(retencionOrigen,this.retencion,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.retencionLogic.getRetencions().add(this.retencionAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.retencions.add(this.retencionAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaRetencion(false);
				
				this.jTableDatosRetencion.setRowSelectionInterval(this.getIndiceNuevoRetencion(), this.getIndiceNuevoRetencion());
				
				int iLastRow =  this.jTableDatosRetencion.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosRetencion.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosRetencion.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaRetencion(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();									
		
			Retencion retencionOrigen=new Retencion();
			Retencion retencionDestino=new Retencion();
				
			retencionsSeleccionados=this.getRetencionsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosRetencion.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || retencionsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosRetencion.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionOrigen =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						retencionOrigen =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						retencionDestino =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						retencionDestino =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				retencionOrigen =retencionsSeleccionados.get(0);
				retencionDestino =retencionsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosRetencion(retencionOrigen,retencionDestino,true,false);
				
				retencionDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(retencionDestino,retencionLogic.getRetencions());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(retencionDestino,retencions);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaRetencion(false);
				
				//this.jTableDatosRetencion.setRowSelectionInterval(this.getIndiceNuevoRetencion(), this.getIndiceNuevoRetencion());
				
				int iLastRow =  this.jTableDatosRetencion.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosRetencion.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosRetencion.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaRetencion(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormRetencion.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesRetencion.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasRetencion.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesRetencion.setVisible(!isVisible);
			this.jPanelPaginacionRetencion.setVisible(!isVisible);
			this.jPanelAccionesRetencion.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameRetencion();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoRetencion();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionRetencion();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByRetencion();
			
			this.abrirFrameOrderByRetencion();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByRetencion();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleRetencion(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormRetencion);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormRetencion.isMaximum()) {
					this.jInternalFrameDetalleFormRetencion.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormRetencion.setSize(this.jInternalFrameDetalleFormRetencion.iWidthFormulario,this.jInternalFrameDetalleFormRetencion.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormRetencion.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormRetencion.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormRetencion.isMaximum()) {
						this.jInternalFrameDetalleFormRetencion.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormRetencion.jContentPaneDetalleRetencion.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormRetencion.jContentPaneDetalleRetencion.getWidth(),RetencionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormRetencion.jContentPaneDetalleRetencion.getWidth(),RetencionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormRetencion.jContentPaneDetalleRetencion.getWidth(),RetencionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormRetencion.setVisible(true);
	        this.jInternalFrameDetalleFormRetencion.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByRetencion() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByRetencion==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByRetencion=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByRetencion,false,this);
				} else {
					this.jInternalFrameOrderByRetencion=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByRetencion,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByRetencion);
				this.jInternalFrameOrderByRetencion.setVisible(false);
				this.jInternalFrameOrderByRetencion.setSelected(false);
				
				this.jInternalFrameOrderByRetencion.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByRetencion"));
				
				this.inicializarActualizarBindingTablaOrderByRetencion();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionRetencion() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionRetencion==null) {
				
				this.jInternalFrameImportacionRetencion=new ImportacionJInternalFrame(RetencionConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionRetencion);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionRetencion);
				this.jInternalFrameImportacionRetencion.setVisible(false);
				this.jInternalFrameImportacionRetencion.setSelected(false);


				this.jInternalFrameImportacionRetencion.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionRetencion"));
				this.jInternalFrameImportacionRetencion.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionRetencion"));
				this.jInternalFrameImportacionRetencion.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionRetencion"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoRetencion() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoRetencion==null) {
				this.jInternalFrameReporteDinamicoRetencion=new ReporteDinamicoJInternalFrame(RetencionConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoRetencion);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoRetencion);
				this.jInternalFrameReporteDinamicoRetencion.setVisible(false);
				this.jInternalFrameReporteDinamicoRetencion.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoRetencion.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRetencion"));
				this.jInternalFrameReporteDinamicoRetencion.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRetencion"));
				this.jInternalFrameReporteDinamicoRetencion.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRetencion"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRetencion();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	
		
					
	public void cerrarFrameDetalleRetencion() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormRetencion);
			
	       	this.jInternalFrameDetalleFormRetencion.setVisible(false);
	        this.jInternalFrameDetalleFormRetencion.setSelected(false);
			
			//this.jInternalFrameDetalleFormRetencion.dispose();
			//this.jInternalFrameDetalleFormRetencion=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoRetencion() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoRetencion.setVisible(true);
	        this.jInternalFrameReporteDinamicoRetencion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionRetencion() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionRetencion.setVisible(true);
	        this.jInternalFrameImportacionRetencion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	
	
	/*
	public void abrirFrameOrderByRetencion() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByRetencion.setVisible(true);
	        this.jInternalFrameOrderByRetencion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByRetencion() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByRetencion.setVisible(false);
	        this.jInternalFrameOrderByRetencion.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoRetencion() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoRetencion.setVisible(false);
	        this.jInternalFrameReporteDinamicoRetencion.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionRetencion() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionRetencion.setVisible(false);
	        this.jInternalFrameImportacionRetencion.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	

				public void abrirFrameTreeCuentaContableRetencion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableRetencion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
						TitledBorder titledBorderCuentaContableRetencion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableRetencion.setTitle(titledBorderRetencion.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableRetencion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarRetencion(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarRetencion(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesRetencion(true);
			//this.isEsNuevoRetencion=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesRetencion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRetencion(false) ;
			
			if(retencionSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(RetencionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRetencion(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRetencion(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaRetencionActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarRetencion(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesRetencion(true);
			//this.isEsNuevoRetencion=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.retencion.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesRetencion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesRetencion(false) ;
			
			if(RetencionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRetencion(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRetencion(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("AsientoContable")) {
				if(!this.retencionConstantesFunciones.cargarid_asiento_contableRetencion) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRetencion(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.retencionConstantesFunciones.cargarid_clienteRetencion) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRetencion(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.retencionConstantesFunciones.cargarid_facturaRetencion) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRetencion(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("CuentaContableRetencion")) {
				if(!this.retencionConstantesFunciones.cargarid_cuenta_contable_retencionRetencion) {
					this.cargarCombosCuentaContableRetencionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRetencion(false,false);
					this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion (id);

				this.recargarComboTablaCuentaContableRetencion(this.cuentacontableretencionsForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencion(List<TipoRetencion> tiporetencionsForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencion=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDTIPORETENCION));
		TableCellEditor tableCellEditorTipoRetencion =tableColumnTipoRetencion.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencion;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionsForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaCuentaContableRetencion(List<CuentaContable> cuentacontableretencionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableRetencion=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION));
		TableCellEditor tableCellEditorCuentaContableRetencion =tableColumnCuentaContableRetencion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableRetencion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableretencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableretencionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoRetencion(List<EstadoRetencion> estadoretencionsForeignKey)throws Exception{
		TableColumn tableColumnEstadoRetencion=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDESTADORETENCION));
		TableCellEditor tableCellEditorEstadoRetencion =tableColumnEstadoRetencion.getCellEditor();

		EstadoRetencionTableCell estadoretencionTableCellFk=(EstadoRetencionTableCell)tableCellEditorEstadoRetencion;

		if(estadoretencionTableCellFk!=null) {
			estadoretencionTableCellFk.setestadoretencionsForeignKey(estadoretencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRetencion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadoretencionTableCellFk.setRowActual(intSelectedRow);
			//estadoretencionTableCellFk.setestadoretencionsForeignKeyActual(estadoretencionsForeignKey);
		//}


		if(estadoretencionTableCellFk!=null) {
			estadoretencionTableCellFk.RecargarEstadoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion (Long id) throws Exception {
		this.setActualCuentaContableRetencionForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesRetencion(false);
			
			//if(!this.isEsNuevoRetencion) {								
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				
			}
			
			if(this.permiteMantenimiento(this.retencion)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.retencionSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoRetencion=true;
					this.inicializarActualizarBindingTablaRetencion(false);
					this.isEsNuevoRetencion=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoRetencion=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoRetencion=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesRetencion(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRetencion(false);
				
				this.habilitarDeshabilitarControlesRetencion(false);
			
												
				
				if(RetencionJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleRetencion();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoRetencionActionPerformed(evt,retencionSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualRetencion(this.retencion,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,retencionSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.retencion.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarRetencionActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				this.retencion.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				this.retencion.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.retencion)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.retencionSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((RetencionModel) this.jTableDatosRetencion.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoRetencion=true;
				this.inicializarActualizarBindingTablaRetencion(false);
				this.isEsNuevoRetencion=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesRetencion(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRetencion(false);
				
				this.habilitarDeshabilitarControlesRetencion(false);
				
				
				
				if(RetencionJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleRetencion();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarRetencionActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosRetencion.getRowCount()>=1) {
				jTableDatosRetencion.removeRowSelectionInterval(0, jTableDatosRetencion.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesRetencion(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaRetencion(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRetencion(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRetencion(false) ;
			
			this.isEsNuevoRetencion=false;
			
			if(RetencionJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleRetencion();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingRetencion(false);
				
				//SI ES MANUAL
				if(RetencionJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualRetencion();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoRetencion--;			
			//Retencion retencionAux= new Retencion();			
			//retencionAux.setId(this.iIdNuevoRetencion);
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaRetencion();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
			
			this.retencion.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.retencionLogic.getRetencions().add(this.retencionAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.retencions.add(this.retencionAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaRetencion(false);
			
			this.jTableDatosRetencion.setRowSelectionInterval(this.getIndiceNuevoRetencion(), this.getIndiceNuevoRetencion());
			
			int iLastRow =  this.jTableDatosRetencion.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosRetencion.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosRetencion.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaRetencion(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingRetencion(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRetencion(false);
			
			//SI ES MANUAL
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRetencion();
			}
			
			//this.abrirFrameTreeRetencion();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionRetencionActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE RetencionES ?", "MANTENIMIENTO DE Retencion", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionRetencion.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralRetencion();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.retencionReturnGeneral=retencionLogic.procesarImportacionRetencionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.retencionParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarRetencionReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionRetencionActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionRetencion.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionRetencion.setFileImportacion(this.jInternalFrameImportacionRetencion.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionRetencion.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionRetencion.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionRetencion.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionRetencion.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		

		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("RetencionBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"RetencionBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteRetencions("Todos",retencionsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case RetencionConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDTIPORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_PORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_BASEIMPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_seImponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_seImponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_seImponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_seImponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_VALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_NUMERO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mero_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mero_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mero_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mero_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoMoneLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoMoneLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoMoneLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoMoneLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoMoneLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoMoneLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoMoneLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoMoneLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoMoneExtra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoMoneExtra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoMoneExtra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoMoneExtra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoMoneExtra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoMoneExtra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoMoneExtra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoMoneExtra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_NOMBREBENEF:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreBenef_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreBenef_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreBenef_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreBenef_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_DIRECCIONBENEF:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionBenef_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionBenef_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionBenef_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionBenef_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_RUCBENEF:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cBenef_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cBenef_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cBenef_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cBenef_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_TELEFONOBENEF:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefonoBenef_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefonoBenef_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefonoBenef_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefonoBenef_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_IDESTADORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RetencionConstantesFunciones.LABEL_BENEFICIARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_neficiario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_neficiario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_neficiario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_neficiario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoRetencion.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case RetencionConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case RetencionConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case RetencionConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case RetencionConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case RetencionConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case RetencionConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case RetencionConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoria="id_tipo_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case RetencionConstantesFunciones.LABEL_PORCENTAJE:
					sNombreCampoCategoria="porcentaje";
					break;

				case RetencionConstantesFunciones.LABEL_BASEIMPONIBLE:
					sNombreCampoCategoria="base_imponible";
					break;

				case RetencionConstantesFunciones.LABEL_VALOR:
					sNombreCampoCategoria="valor";
					break;

				case RetencionConstantesFunciones.LABEL_NUMERO:
					sNombreCampoCategoria="numero";
					break;

				case RetencionConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case RetencionConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL:
					sNombreCampoCategoria="debito_mone_local";
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL:
					sNombreCampoCategoria="credito_mone_local";
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					sNombreCampoCategoria="debito_mone_extra";
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					sNombreCampoCategoria="credito_mone_extra";
					break;

				case RetencionConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case RetencionConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case RetencionConstantesFunciones.LABEL_NOMBREBENEF:
					sNombreCampoCategoria="nombre_benef";
					break;

				case RetencionConstantesFunciones.LABEL_DIRECCIONBENEF:
					sNombreCampoCategoria="direccion_benef";
					break;

				case RetencionConstantesFunciones.LABEL_RUCBENEF:
					sNombreCampoCategoria="ruc_benef";
					break;

				case RetencionConstantesFunciones.LABEL_TELEFONOBENEF:
					sNombreCampoCategoria="telefono_benef";
					break;

				case RetencionConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					sNombreCampoCategoria="id_cuenta_contable_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_IDESTADORETENCION:
					sNombreCampoCategoria="id_estado_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_BENEFICIARIO:
					sNombreCampoCategoria="beneficiario";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case RetencionConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case RetencionConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case RetencionConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case RetencionConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case RetencionConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case RetencionConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case RetencionConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoriaValor="id_tipo_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case RetencionConstantesFunciones.LABEL_PORCENTAJE:
					sNombreCampoCategoriaValor="porcentaje";
					break;

				case RetencionConstantesFunciones.LABEL_BASEIMPONIBLE:
					sNombreCampoCategoriaValor="base_imponible";
					break;

				case RetencionConstantesFunciones.LABEL_VALOR:
					sNombreCampoCategoriaValor="valor";
					break;

				case RetencionConstantesFunciones.LABEL_NUMERO:
					sNombreCampoCategoriaValor="numero";
					break;

				case RetencionConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case RetencionConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL:
					sNombreCampoCategoriaValor="debito_mone_local";
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL:
					sNombreCampoCategoriaValor="credito_mone_local";
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					sNombreCampoCategoriaValor="debito_mone_extra";
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					sNombreCampoCategoriaValor="credito_mone_extra";
					break;

				case RetencionConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case RetencionConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case RetencionConstantesFunciones.LABEL_NOMBREBENEF:
					sNombreCampoCategoriaValor="nombre_benef";
					break;

				case RetencionConstantesFunciones.LABEL_DIRECCIONBENEF:
					sNombreCampoCategoriaValor="direccion_benef";
					break;

				case RetencionConstantesFunciones.LABEL_RUCBENEF:
					sNombreCampoCategoriaValor="ruc_benef";
					break;

				case RetencionConstantesFunciones.LABEL_TELEFONOBENEF:
					sNombreCampoCategoriaValor="telefono_benef";
					break;

				case RetencionConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_IDESTADORETENCION:
					sNombreCampoCategoriaValor="id_estado_retencion";
					break;

				case RetencionConstantesFunciones.LABEL_BENEFICIARIO:
					sNombreCampoCategoriaValor="beneficiario";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoRetencion.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRetencion.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case RetencionConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case RetencionConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case RetencionConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case RetencionConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case RetencionConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case RetencionConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case RetencionConstantesFunciones.LABEL_IDTIPORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion");
					break;

				case RetencionConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case RetencionConstantesFunciones.LABEL_PORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Porcentaje(%)",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje");
					break;

				case RetencionConstantesFunciones.LABEL_BASEIMPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base Imponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"base_imponible");
					break;

				case RetencionConstantesFunciones.LABEL_VALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor");
					break;

				case RetencionConstantesFunciones.LABEL_NUMERO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero");
					break;

				case RetencionConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case RetencionConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_mone_local");
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_mone_local");
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Extran",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_mone_extra");
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Extran",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_mone_extra");
					break;

				case RetencionConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case RetencionConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case RetencionConstantesFunciones.LABEL_NOMBREBENEF:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_benef");
					break;

				case RetencionConstantesFunciones.LABEL_DIRECCIONBENEF:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_benef");
					break;

				case RetencionConstantesFunciones.LABEL_RUCBENEF:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc_benef");
					break;

				case RetencionConstantesFunciones.LABEL_TELEFONOBENEF:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono_benef");
					break;

				case RetencionConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_retencion");
					break;

				case RetencionConstantesFunciones.LABEL_IDESTADORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_retencion");
					break;

				case RetencionConstantesFunciones.LABEL_BENEFICIARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Beneficiario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"beneficiario");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoRetencionActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Retencions");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case RetencionConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDTIPORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDTIPORETENCION);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.gettiporetencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_PORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_PORCENTAJE);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getporcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_BASEIMPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getbase_imponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_VALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_VALOR);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getvalor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_NUMERO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_NUMERO);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getnumero());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getdebito_mone_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getcredito_mone_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getdebito_mone_extra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getcredito_mone_extra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_NOMBREBENEF:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_NOMBREBENEF);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getnombre_benef());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_DIRECCIONBENEF:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getdireccion_benef());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_RUCBENEF:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_RUCBENEF);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getruc_benef());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_TELEFONOBENEF:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_TELEFONOBENEF);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.gettelefono_benef());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getcuentacontableretencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_IDESTADORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_IDESTADORETENCION);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getestadoretencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RetencionConstantesFunciones.LABEL_BENEFICIARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RetencionConstantesFunciones.LABEL_BENEFICIARIO);
					iRow++;

					for(Retencion retencion:retencionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(retencion.getbeneficiario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelRetencion(row);				
			//	iRow++;
			//}				
			
			//for(Retencion retencionAux:retencionsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelRetencion(retencionAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRetencion(false);
			
			//SI ES MANUAL
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRetencion();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRetencion(false);
			
			//SI ES MANUAL
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualRetencion();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesRetencionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRetencion(false);
			
			//SI ES MANUAL
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualRetencion();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaRetencion() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosRetencion.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosRetencion.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosRetencion.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosRetencion.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosRetencion.setMinimumSize(dimensionMinimum);
		this.jTableDatosRetencion.setMaximumSize(dimensionMaximum);
		this.jTableDatosRetencion.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingRetencion(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingRetencion(esInicializar,true);
	}
	
	public void inicializarActualizarBindingRetencion(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaRetencion(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesRetencion(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasRetencion(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesRetencion(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesRetencion(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !RetencionJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!RetencionJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualRetencion() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaRetencion();
		
		this.inicializarActualizarBindingBotonesManualRetencion(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualRetencion();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesRetencion() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualRetencion(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualRetencion(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosRetencion.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosRetencion.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteRetencion.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormRetencion!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionNuevoRetencion.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionSinCerrarRetencion.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionSinMensajeRetencion.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosRetencion.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosRetencion.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteRetencion.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormRetencion!=null) {
				this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionNuevoRetencion.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionSinCerrarRetencion.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormRetencion.jCheckBoxPostAccionSinMensajeRetencion.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionRetencion.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionRetencion.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesRetencion.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoRetencion!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesRetencion.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesRetencion.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarRetencion.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesRetencion.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoRetencion!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesRetencion.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralRetencion.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesRetencion(Boolean esInicializar) throws Exception {
		try	{	
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualRetencion(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesRetencion() throws Exception {
		try	{
			if(RetencionJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualRetencion();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleRetencion() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualRetencion() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesRetencion.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesRetencion.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesRetencion.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionRetencion.addItem(reporte);
			}
			
			
			if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionRetencion.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionRetencion.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesRetencion.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesRetencion.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarRetencion.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarRetencion.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarRetencion.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRetencion();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRetencion() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoRetencion!=null) {
				this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoRetencion!=null) {
				this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoRetencion!=null) {
				
				if(this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRetencion.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoRetencion.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRetencion.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=RetencionConstantesFunciones.getTiposSeleccionarRetencion(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=RetencionConstantesFunciones.getTiposSeleccionarRetencion(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoRetencion.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoRetencion.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=RetencionConstantesFunciones.getTiposSeleccionarRetencion(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRetencion.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoRetencion.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualRetencion()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableRetencion.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteRetencion.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteRetencion.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.getSelectedItem()!=null){this.id_cuenta_contable_retencionFK_IdCuentaContableRetencion=((CuentaContable)this.jComboBoxid_cuenta_contable_retencionFK_IdCuentaContableRetencionRetencion.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.getSelectedItem()!=null){this.id_estado_retencionFK_IdEstadoRetencion=((EstadoRetencion)this.jComboBoxid_estado_retencionFK_IdEstadoRetencionRetencion.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaRetencion.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaRetencion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.getSelectedItem()!=null){this.id_tipo_retencionFK_IdTipoRetencion=((TipoRetencion)this.jComboBoxid_tipo_retencionFK_IdTipoRetencionRetencion.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasRetencion(Boolean esInicializar) throws Exception {				
		if(RetencionJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualRetencion();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaRetencion() throws Exception {
		this.inicializarActualizarBindingTablaRetencion(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByRetencion() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosRetencionOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencionOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	
	public void inicializarActualizarBindingTablaRetencion(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=retencionLogic.getRetencions().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=retencions.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosRetencion.setModel(new RetencionModel(this.retencionLogic.getRetencions(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosRetencion.setModel(new RetencionModel(this.retencions,this));
			}
			//ARCHITECTURE
			
							
			/*
			
			if(this.jInternalFrameOrderByRetencion!=null && this.jInternalFrameOrderByRetencion.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByRetencion();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+RetencionConstantesFunciones.SCLASSWEBTITULO,retencionConstantesFunciones.resaltarSeleccionarRetencion,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+RetencionConstantesFunciones.SCLASSWEBTITULO,retencionConstantesFunciones.resaltarSeleccionarRetencion,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_ID));

		if(this.retencionConstantesFunciones.mostraridRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltaridRetencion,this.retencionConstantesFunciones.activaridRetencion,iSizeTabla,this,true,"idRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltaridRetencion,this.retencionConstantesFunciones.activaridRetencion,this,true,"idRetencion","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDEMPRESA));

		if(this.retencionConstantesFunciones.mostrarid_empresaRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.retencionConstantesFunciones.resaltarid_empresaRetencion,this,this.retencionConstantesFunciones.activarid_empresaRetencion,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.retencionConstantesFunciones.resaltarid_empresaRetencion,this,this.retencionConstantesFunciones.activarid_empresaRetencion,false,"id_empresaRetencion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.retencionConstantesFunciones.mostrarid_sucursalRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.retencionConstantesFunciones.resaltarid_sucursalRetencion,this,this.retencionConstantesFunciones.activarid_sucursalRetencion,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.retencionConstantesFunciones.resaltarid_sucursalRetencion,this,this.retencionConstantesFunciones.activarid_sucursalRetencion,false,"id_sucursalRetencion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.retencionConstantesFunciones.mostrarid_ejercicioRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.retencionConstantesFunciones.resaltarid_ejercicioRetencion,this,this.retencionConstantesFunciones.activarid_ejercicioRetencion,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.retencionConstantesFunciones.resaltarid_ejercicioRetencion,this,this.retencionConstantesFunciones.activarid_ejercicioRetencion,false,"id_ejercicioRetencion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDPERIODO));

		if(this.retencionConstantesFunciones.mostrarid_periodoRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.retencionConstantesFunciones.resaltarid_periodoRetencion,this,this.retencionConstantesFunciones.activarid_periodoRetencion,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.retencionConstantesFunciones.resaltarid_periodoRetencion,this,this.retencionConstantesFunciones.activarid_periodoRetencion,false,"id_periodoRetencion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDANIO));

		if(this.retencionConstantesFunciones.mostrarid_anioRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.retencionConstantesFunciones.resaltarid_anioRetencion,this,this.retencionConstantesFunciones.activarid_anioRetencion,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.retencionConstantesFunciones.resaltarid_anioRetencion,this,this.retencionConstantesFunciones.activarid_anioRetencion,true,"id_anioRetencion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDMES));

		if(this.retencionConstantesFunciones.mostrarid_mesRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.retencionConstantesFunciones.resaltarid_mesRetencion,this,this.retencionConstantesFunciones.activarid_mesRetencion,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.retencionConstantesFunciones.resaltarid_mesRetencion,this,this.retencionConstantesFunciones.activarid_mesRetencion,true,"id_mesRetencion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.retencionConstantesFunciones.mostrarid_asiento_contableRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.retencionConstantesFunciones.resaltarid_asiento_contableRetencion,this,this.retencionConstantesFunciones.activarid_asiento_contableRetencion,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.retencionConstantesFunciones.resaltarid_asiento_contableRetencion,this,this.retencionConstantesFunciones.activarid_asiento_contableRetencion,true,"id_asiento_contableRetencion","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDTIPORETENCION));

		if(this.retencionConstantesFunciones.mostrarid_tipo_retencionRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDTIPORETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.retencionConstantesFunciones.resaltarid_tipo_retencionRetencion,this,this.retencionConstantesFunciones.activarid_tipo_retencionRetencion,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.retencionConstantesFunciones.resaltarid_tipo_retencionRetencion,this,this.retencionConstantesFunciones.activarid_tipo_retencionRetencion,true,"id_tipo_retencionRetencion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDCLIENTE));

		if(this.retencionConstantesFunciones.mostrarid_clienteRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.retencionConstantesFunciones.resaltarid_clienteRetencion,this,this.retencionConstantesFunciones.activarid_clienteRetencion,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.retencionConstantesFunciones.resaltarid_clienteRetencion,this,this.retencionConstantesFunciones.activarid_clienteRetencion,true,"id_clienteRetencion","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_PORCENTAJE));

		if(this.retencionConstantesFunciones.mostrarporcentajeRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_PORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarporcentajeRetencion,this.retencionConstantesFunciones.activarporcentajeRetencion,iSizeTabla,this,true,"porcentajeRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarporcentajeRetencion,this.retencionConstantesFunciones.activarporcentajeRetencion,this,true,"porcentajeRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_BASEIMPONIBLE));

		if(this.retencionConstantesFunciones.mostrarbase_imponibleRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_BASEIMPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarbase_imponibleRetencion,this.retencionConstantesFunciones.activarbase_imponibleRetencion,iSizeTabla,this,true,"base_imponibleRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarbase_imponibleRetencion,this.retencionConstantesFunciones.activarbase_imponibleRetencion,this,true,"base_imponibleRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_VALOR));

		if(this.retencionConstantesFunciones.mostrarvalorRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_VALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarvalorRetencion,this.retencionConstantesFunciones.activarvalorRetencion,iSizeTabla,this,true,"valorRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarvalorRetencion,this.retencionConstantesFunciones.activarvalorRetencion,this,true,"valorRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_NUMERO));

		if(this.retencionConstantesFunciones.mostrarnumeroRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_NUMERO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltarnumeroRetencion,this.retencionConstantesFunciones.activarnumeroRetencion,iSizeTabla,this,true,"numeroRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarnumeroRetencion,this.retencionConstantesFunciones.activarnumeroRetencion,this,true,"numeroRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDFACTURA));

		if(this.retencionConstantesFunciones.mostrarid_facturaRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.retencionConstantesFunciones.resaltarid_facturaRetencion,this,this.retencionConstantesFunciones.activarid_facturaRetencion,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.retencionConstantesFunciones.resaltarid_facturaRetencion,this,this.retencionConstantesFunciones.activarid_facturaRetencion,true,"id_facturaRetencion","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_DESCRIPCION));

		if(this.retencionConstantesFunciones.mostrardescripcionRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltardescripcionRetencion,this.retencionConstantesFunciones.activardescripcionRetencion,iSizeTabla,this,true,"descripcionRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltardescripcionRetencion,this.retencionConstantesFunciones.activardescripcionRetencion,this,true,"descripcionRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL));

		if(this.retencionConstantesFunciones.mostrardebito_mone_localRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltardebito_mone_localRetencion,this.retencionConstantesFunciones.activardebito_mone_localRetencion,iSizeTabla,this,true,"debito_mone_localRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltardebito_mone_localRetencion,this.retencionConstantesFunciones.activardebito_mone_localRetencion,this,true,"debito_mone_localRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL));

		if(this.retencionConstantesFunciones.mostrarcredito_mone_localRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarcredito_mone_localRetencion,this.retencionConstantesFunciones.activarcredito_mone_localRetencion,iSizeTabla,this,true,"credito_mone_localRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarcredito_mone_localRetencion,this.retencionConstantesFunciones.activarcredito_mone_localRetencion,this,true,"credito_mone_localRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA));

		if(this.retencionConstantesFunciones.mostrardebito_mone_extraRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltardebito_mone_extraRetencion,this.retencionConstantesFunciones.activardebito_mone_extraRetencion,iSizeTabla,this,true,"debito_mone_extraRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltardebito_mone_extraRetencion,this.retencionConstantesFunciones.activardebito_mone_extraRetencion,this,true,"debito_mone_extraRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA));

		if(this.retencionConstantesFunciones.mostrarcredito_mone_extraRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarcredito_mone_extraRetencion,this.retencionConstantesFunciones.activarcredito_mone_extraRetencion,iSizeTabla,this,true,"credito_mone_extraRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarcredito_mone_extraRetencion,this.retencionConstantesFunciones.activarcredito_mone_extraRetencion,this,true,"credito_mone_extraRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_IDMONEDA));

		if(this.retencionConstantesFunciones.mostrarid_monedaRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.retencionConstantesFunciones.resaltarid_monedaRetencion,this,this.retencionConstantesFunciones.activarid_monedaRetencion,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.retencionConstantesFunciones.resaltarid_monedaRetencion,this,this.retencionConstantesFunciones.activarid_monedaRetencion,false,"id_monedaRetencion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_COTIZACION));

		if(this.retencionConstantesFunciones.mostrarcotizacionRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.retencionConstantesFunciones.resaltarcotizacionRetencion,this.retencionConstantesFunciones.activarcotizacionRetencion,iSizeTabla,this,true,"cotizacionRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarcotizacionRetencion,this.retencionConstantesFunciones.activarcotizacionRetencion,this,true,"cotizacionRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_NOMBREBENEF));

		if(this.retencionConstantesFunciones.mostrarnombre_benefRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_NOMBREBENEF,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltarnombre_benefRetencion,this.retencionConstantesFunciones.activarnombre_benefRetencion,iSizeTabla,this,true,"nombre_benefRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarnombre_benefRetencion,this.retencionConstantesFunciones.activarnombre_benefRetencion,this,true,"nombre_benefRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_DIRECCIONBENEF));

		if(this.retencionConstantesFunciones.mostrardireccion_benefRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_DIRECCIONBENEF,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltardireccion_benefRetencion,this.retencionConstantesFunciones.activardireccion_benefRetencion,iSizeTabla,this,true,"direccion_benefRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltardireccion_benefRetencion,this.retencionConstantesFunciones.activardireccion_benefRetencion,this,true,"direccion_benefRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_RUCBENEF));

		if(this.retencionConstantesFunciones.mostrarruc_benefRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_RUCBENEF,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltarruc_benefRetencion,this.retencionConstantesFunciones.activarruc_benefRetencion,iSizeTabla,this,true,"ruc_benefRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltarruc_benefRetencion,this.retencionConstantesFunciones.activarruc_benefRetencion,this,true,"ruc_benefRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRetencion,RetencionConstantesFunciones.LABEL_TELEFONOBENEF));

		if(this.retencionConstantesFunciones.mostrartelefono_benefRetencion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RetencionConstantesFunciones.LABEL_TELEFONOBENEF,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.retencionConstantesFunciones.resaltartelefono_benefRetencion,this.retencionConstantesFunciones.activartelefono_benefRetencion,iSizeTabla,this,true,"telefono_benefRetencion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.retencionConstantesFunciones.resaltartelefono_benefRetencion,this.retencionConstantesFunciones.activartelefono_benefRetencion,this,true,"telefono_benefRetencion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RetencionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.retencionSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosRetencion.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosRetencion.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarRetencion && this.isPermisoGuardarCambiosRetencion) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.retencionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosRetencion.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosRetencion.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarRetencion && this.isPermisoGuardarCambiosRetencion) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarRetencion && this.isPermisoGuardarCambiosRetencion) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosRetencion.moveColumn(this.jTableDatosRetencion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosRetencion.moveColumn(this.jTableDatosRetencion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosRetencion.moveColumn(this.jTableDatosRetencion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosRetencion.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosRetencion.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosRetencion,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosRetencion.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosRetencion.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosRetencion.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosRetencion.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosRetencion.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=retencionLogic.getRetencions().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=retencions.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosRetencion.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosRetencion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosRetencion();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoRetencion=false;
					
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
				if(this.retencionSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormRetencion==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosRetencion.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosRetencion.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.retencion.getsType().equals("DUPLICADO")
				   || this.retencion.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoRetencion=true;
				
				} else {
					this.isEsNuevoRetencion=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.retencionSessionBean.getEsGuardarRelacionado()) {
					if(this.retencion.getId()>=0 && !this.retencion.getIsNew()) {						
						this.isEsNuevoRetencion=false;
						
					} else {
						this.isEsNuevoRetencion=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoRetencion(esRelaciones);						
				
				this.seleccionarRetencion(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.retencion.getId()<0) {
					this.isEsNuevoRetencion=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarRetencion(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarRetencion(evt,rowIndex);
				}	
				
				if(this.retencionSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Retencion: " + this.dDif); 
					}
				}								
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarRetencion(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.retencion)) {
					if(this.retencion.getId()>0) {
						this.retencion.setIsDeleted(true);
						
						this.retencionsEliminados.add(this.retencion);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.retencionLogic.getRetencions().remove(this.retencion);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.retencions.remove(this.retencion);				
					}
					
					
					((RetencionModel) this.jTableDatosRetencion.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaRetencion(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarRetencion(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoRetencion) {
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosRetencion.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosRetencion.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioRetencion(this.retencion);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.retencionConstantesFunciones.cargarid_empresaRetencion || this.retencionConstantesFunciones.event_dependid_empresaRetencion) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.retencion.getid_empresa());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(retencion.getEmpresa()!=null) {
							this.empresasForeignKey.add(retencion.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.retencion.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.retencionConstantesFunciones.cargarid_sucursalRetencion || this.retencionConstantesFunciones.event_dependid_sucursalRetencion) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.retencion.getid_sucursal());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(retencion.getSucursal()!=null) {
							this.sucursalsForeignKey.add(retencion.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.retencion.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.retencionConstantesFunciones.cargarid_ejercicioRetencion || this.retencionConstantesFunciones.event_dependid_ejercicioRetencion) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.retencion.getid_ejercicio());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(retencion.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(retencion.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.retencion.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.retencionConstantesFunciones.cargarid_periodoRetencion || this.retencionConstantesFunciones.event_dependid_periodoRetencion) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.retencion.getid_periodo());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(retencion.getPeriodo()!=null) {
							this.periodosForeignKey.add(retencion.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.retencion.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.retencionConstantesFunciones.cargarid_anioRetencion || this.retencionConstantesFunciones.event_dependid_anioRetencion) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.retencion.getid_anio());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(retencion.getAnio()!=null) {
							this.aniosForeignKey.add(retencion.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.retencion.getid_anio(),false,"Formulario");

					//Mes
					if(!this.retencionConstantesFunciones.cargarid_mesRetencion || this.retencionConstantesFunciones.event_dependid_mesRetencion) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.retencion.getid_mes());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(retencion.getMes()!=null) {
							this.messForeignKey.add(retencion.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.retencion.getid_mes(),false,"Formulario");

					//AsientoContable
					if(!this.retencionConstantesFunciones.cargarid_asiento_contableRetencion || this.retencionConstantesFunciones.event_dependid_asiento_contableRetencion) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.retencion.getid_asiento_contable());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(retencion.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(retencion.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.retencion.getid_asiento_contable(),false,"Formulario");

					//TipoRetencion
					if(!this.retencionConstantesFunciones.cargarid_tipo_retencionRetencion || this.retencionConstantesFunciones.event_dependid_tipo_retencionRetencion) {
						//this.cargarCombosTipoRetencionsForeignKeyLista(" where id="+this.retencion.getid_tipo_retencion());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

						if(retencion.getTipoRetencion()!=null) {
							this.tiporetencionsForeignKey.add(retencion.getTipoRetencion());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencion();
						this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
					}
					this.setActualTipoRetencionForeignKey(this.retencion.getid_tipo_retencion(),false,"Formulario");

					//Cliente
					if(!this.retencionConstantesFunciones.cargarid_clienteRetencion || this.retencionConstantesFunciones.event_dependid_clienteRetencion) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.retencion.getid_cliente());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(retencion.getCliente()!=null) {
							this.clientesForeignKey.add(retencion.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.retencion.getid_cliente(),false,"Formulario");

					//Factura
					if(!this.retencionConstantesFunciones.cargarid_facturaRetencion || this.retencionConstantesFunciones.event_dependid_facturaRetencion) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.retencion.getid_factura());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(retencion.getFactura()!=null) {
							this.facturasForeignKey.add(retencion.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.retencion.getid_factura(),false,"Formulario");

					//Moneda
					if(!this.retencionConstantesFunciones.cargarid_monedaRetencion || this.retencionConstantesFunciones.event_dependid_monedaRetencion) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.retencion.getid_moneda());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(retencion.getMoneda()!=null) {
							this.monedasForeignKey.add(retencion.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.retencion.getid_moneda(),false,"Formulario");

					//CuentaContableRetencion
					if(!this.retencionConstantesFunciones.cargarid_cuenta_contable_retencionRetencion || this.retencionConstantesFunciones.event_dependid_cuenta_contable_retencionRetencion) {
						//this.cargarCombosCuentaContableRetencionsForeignKeyLista(" where id="+this.retencion.getid_cuenta_contable_retencion());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();

						if(retencion.getCuentaContableRetencion()!=null) {
							this.cuentacontableretencionsForeignKey.add(retencion.getCuentaContableRetencion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
						this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
					}
					this.setActualCuentaContableRetencionForeignKey(this.retencion.getid_cuenta_contable_retencion(),false,"Formulario");

					//EstadoRetencion
					if(!this.retencionConstantesFunciones.cargarid_estado_retencionRetencion || this.retencionConstantesFunciones.event_dependid_estado_retencionRetencion) {
						//this.cargarCombosEstadoRetencionsForeignKeyLista(" where id="+this.retencion.getid_estado_retencion());
									//this.inicializarActualizarBindingRetencion(false,false);
						this.estadoretencionsForeignKey=new ArrayList<EstadoRetencion>();

						if(retencion.getEstadoRetencion()!=null) {
							this.estadoretencionsForeignKey.add(retencion.getEstadoRetencion());
						}

						this.addItemDefectoCombosForeignKeyEstadoRetencion();
						this.cargarCombosFrameEstadoRetencionsForeignKey("Todos");
					}
					this.setActualEstadoRetencionForeignKey(this.retencion.getid_estado_retencion(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesRetencion("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesRetencion(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRetencion() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoRetencion(Retencion retencion) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoRetencion(retencion,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoRetencion(Retencion retencion,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioRetencion(retencion);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyRetencion(retencion,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyRetencion(retencion);
	}
	
	public void setVariablesObjetoActualToFormularioRetencion(Retencion retencion) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setText(retencion.getId().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setText(retencion.getporcentaje().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setText(retencion.getbase_imponible().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setText(retencion.getvalor().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setText(retencion.getnumero());
			this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setText(retencion.getdescripcion());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setText(retencion.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setText(retencion.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setText(retencion.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setText(retencion.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setText(retencion.getcotizacion().toString());
			this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setText(retencion.getnombre_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setText(retencion.getdireccion_benef());
			this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setText(retencion.getruc_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setText(retencion.gettelefono_benef());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Retencion retencionLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,retencionLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Retencion retencionLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				retencionLocal=this.retencion;
			} else {
				retencionLocal=this.retencionAnterior;
			}
		}
		
		if(this.permiteMantenimiento(retencionLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoRetencion(retencionLocal,true);
					
					if(retencionSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(retencionLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.retencionSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(retencionLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoRetencion(Retencion retencion,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualRetencion(retencion,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysRetencion(retencion);
	}
	
	public void setVariablesFormularioToObjetoActualRetencion(Retencion retencion,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualRetencion(retencion,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualRetencion(Retencion retencion,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.getText()==null || this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.getText()=="" || this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.getText()=="Id") {
				this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setText("0");
			}

			if(conColumnasBase) {retencion.setId(Long.parseLong(this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelIdRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setporcentaje(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_PORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelporcentajeRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setbase_imponible(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_BASEIMPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelbase_imponibleRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setvalor(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_VALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelvalorRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setnumero(this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_NUMERO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelnumeroRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setdescripcion(this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldescripcionRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setdebito_mone_local(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_localRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setcredito_mone_local(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_localRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setdebito_mone_extra(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldebito_mone_extraRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setcredito_mone_extra(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcredito_mone_extraRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelcotizacionRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setnombre_benef(this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_NOMBREBENEF+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelnombre_benefRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setdireccion_benef(this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_DIRECCIONBENEF+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeldireccion_benefRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.setruc_benef(this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_RUCBENEF+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabelruc_benefRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			retencion.settelefono_benef(this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RetencionConstantesFunciones.LABEL_TELEFONOBENEF+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRetencion.jLabeltelefono_benefRetencion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualRetencion(Retencion retencionBean,Retencion retencion,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosRetencion(Retencion retencionOrigen,Retencion retencion,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && retencionOrigen.getId()!=null && !retencionOrigen.getId().equals(0L))) {retencion.setId(retencionOrigen.getId());}}
			if(conDefault || (!conDefault && retencionOrigen.getporcentaje()!=null && !retencionOrigen.getporcentaje().equals(0.0))) {retencion.setporcentaje(retencionOrigen.getporcentaje());}
			if(conDefault || (!conDefault && retencionOrigen.getbase_imponible()!=null && !retencionOrigen.getbase_imponible().equals(0.0))) {retencion.setbase_imponible(retencionOrigen.getbase_imponible());}
			if(conDefault || (!conDefault && retencionOrigen.getvalor()!=null && !retencionOrigen.getvalor().equals(0.0))) {retencion.setvalor(retencionOrigen.getvalor());}
			if(conDefault || (!conDefault && retencionOrigen.getnumero()!=null && !retencionOrigen.getnumero().equals(""))) {retencion.setnumero(retencionOrigen.getnumero());}
			if(conDefault || (!conDefault && retencionOrigen.getdescripcion()!=null && !retencionOrigen.getdescripcion().equals(""))) {retencion.setdescripcion(retencionOrigen.getdescripcion());}
			if(conDefault || (!conDefault && retencionOrigen.getdebito_mone_local()!=null && !retencionOrigen.getdebito_mone_local().equals(0.0))) {retencion.setdebito_mone_local(retencionOrigen.getdebito_mone_local());}
			if(conDefault || (!conDefault && retencionOrigen.getcredito_mone_local()!=null && !retencionOrigen.getcredito_mone_local().equals(0.0))) {retencion.setcredito_mone_local(retencionOrigen.getcredito_mone_local());}
			if(conDefault || (!conDefault && retencionOrigen.getdebito_mone_extra()!=null && !retencionOrigen.getdebito_mone_extra().equals(0.0))) {retencion.setdebito_mone_extra(retencionOrigen.getdebito_mone_extra());}
			if(conDefault || (!conDefault && retencionOrigen.getcredito_mone_extra()!=null && !retencionOrigen.getcredito_mone_extra().equals(0.0))) {retencion.setcredito_mone_extra(retencionOrigen.getcredito_mone_extra());}
			if(conDefault || (!conDefault && retencionOrigen.getcotizacion()!=null && !retencionOrigen.getcotizacion().equals(0.0))) {retencion.setcotizacion(retencionOrigen.getcotizacion());}
			if(conDefault || (!conDefault && retencionOrigen.getnombre_benef()!=null && !retencionOrigen.getnombre_benef().equals(""))) {retencion.setnombre_benef(retencionOrigen.getnombre_benef());}
			if(conDefault || (!conDefault && retencionOrigen.getdireccion_benef()!=null && !retencionOrigen.getdireccion_benef().equals(""))) {retencion.setdireccion_benef(retencionOrigen.getdireccion_benef());}
			if(conDefault || (!conDefault && retencionOrigen.getruc_benef()!=null && !retencionOrigen.getruc_benef().equals(""))) {retencion.setruc_benef(retencionOrigen.getruc_benef());}
			if(conDefault || (!conDefault && retencionOrigen.gettelefono_benef()!=null && !retencionOrigen.gettelefono_benef().equals(""))) {retencion.settelefono_benef(retencionOrigen.gettelefono_benef());}
			if(conDefault || (!conDefault && retencionOrigen.getfecha()!=null && !retencionOrigen.getfecha().equals(new Date()))) {retencion.setfecha(retencionOrigen.getfecha());}
			if(conDefault || (!conDefault && retencionOrigen.getbeneficiario()!=null && !retencionOrigen.getbeneficiario().equals(""))) {retencion.setbeneficiario(retencionOrigen.getbeneficiario());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioRetencion(Retencion retencion) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setText(retencion.getId().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setText(retencion.getporcentaje().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setText(retencion.getbase_imponible().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setText(retencion.getvalor().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setText(retencion.getnumero());
			this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setText(retencion.getdescripcion());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setText(retencion.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setText(retencion.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setText(retencion.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setText(retencion.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setText(retencion.getcotizacion().toString());
			this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setText(retencion.getnombre_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setText(retencion.getdireccion_benef());
			this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setText(retencion.getruc_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setText(retencion.gettelefono_benef());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioRetencion(RetencionBean retencionBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setText(retencionBean.getId().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setText(retencionBean.getporcentaje().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setText(retencionBean.getbase_imponible().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setText(retencionBean.getvalor().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setText(retencionBean.getnumero());
			this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setText(retencionBean.getdescripcion());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setText(retencionBean.getdebito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setText(retencionBean.getcredito_mone_local().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setText(retencionBean.getdebito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setText(retencionBean.getcredito_mone_extra().toString());
			this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setText(retencionBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setText(retencionBean.getnombre_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setText(retencionBean.getdireccion_benef());
			this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setText(retencionBean.getruc_benef());
			this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setText(retencionBean.gettelefono_benef());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanRetencion(RetencionParameterReturnGeneral retencionReturnGeneral,RetencionBean retencionBean,Boolean conDefault) throws Exception { 
		try {
			Retencion retencionLocal=new Retencion();
			
			retencionLocal=retencionReturnGeneral.getRetencion();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && retencionLocal.getId()!=null && !retencionLocal.getId().equals(0L))) {retencionBean.setId(retencionLocal.getId());}}
			if(conDefault || (!conDefault && retencionLocal.getporcentaje()!=null && !retencionLocal.getporcentaje().equals(0.0))) {retencionBean.setporcentaje(retencionLocal.getporcentaje());}
			if(conDefault || (!conDefault && retencionLocal.getbase_imponible()!=null && !retencionLocal.getbase_imponible().equals(0.0))) {retencionBean.setbase_imponible(retencionLocal.getbase_imponible());}
			if(conDefault || (!conDefault && retencionLocal.getvalor()!=null && !retencionLocal.getvalor().equals(0.0))) {retencionBean.setvalor(retencionLocal.getvalor());}
			if(conDefault || (!conDefault && retencionLocal.getnumero()!=null && !retencionLocal.getnumero().equals(""))) {retencionBean.setnumero(retencionLocal.getnumero());}
			if(conDefault || (!conDefault && retencionLocal.getdescripcion()!=null && !retencionLocal.getdescripcion().equals(""))) {retencionBean.setdescripcion(retencionLocal.getdescripcion());}
			if(conDefault || (!conDefault && retencionLocal.getdebito_mone_local()!=null && !retencionLocal.getdebito_mone_local().equals(0.0))) {retencionBean.setdebito_mone_local(retencionLocal.getdebito_mone_local());}
			if(conDefault || (!conDefault && retencionLocal.getcredito_mone_local()!=null && !retencionLocal.getcredito_mone_local().equals(0.0))) {retencionBean.setcredito_mone_local(retencionLocal.getcredito_mone_local());}
			if(conDefault || (!conDefault && retencionLocal.getdebito_mone_extra()!=null && !retencionLocal.getdebito_mone_extra().equals(0.0))) {retencionBean.setdebito_mone_extra(retencionLocal.getdebito_mone_extra());}
			if(conDefault || (!conDefault && retencionLocal.getcredito_mone_extra()!=null && !retencionLocal.getcredito_mone_extra().equals(0.0))) {retencionBean.setcredito_mone_extra(retencionLocal.getcredito_mone_extra());}
			if(conDefault || (!conDefault && retencionLocal.getcotizacion()!=null && !retencionLocal.getcotizacion().equals(0.0))) {retencionBean.setcotizacion(retencionLocal.getcotizacion());}
			if(conDefault || (!conDefault && retencionLocal.getnombre_benef()!=null && !retencionLocal.getnombre_benef().equals(""))) {retencionBean.setnombre_benef(retencionLocal.getnombre_benef());}
			if(conDefault || (!conDefault && retencionLocal.getdireccion_benef()!=null && !retencionLocal.getdireccion_benef().equals(""))) {retencionBean.setdireccion_benef(retencionLocal.getdireccion_benef());}
			if(conDefault || (!conDefault && retencionLocal.getruc_benef()!=null && !retencionLocal.getruc_benef().equals(""))) {retencionBean.setruc_benef(retencionLocal.getruc_benef());}
			if(conDefault || (!conDefault && retencionLocal.gettelefono_benef()!=null && !retencionLocal.gettelefono_benef().equals(""))) {retencionBean.settelefono_benef(retencionLocal.gettelefono_benef());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxRetencionGenerico(Long idRetencionSeleccionado,JComboBox jComboBoxRetencion,List<Retencion> retencionsLocal)throws Exception {
		try {
			Retencion  retencionTemp=null;

			for(Retencion retencionAux:retencionsLocal) {
				if(retencionAux.getId()!=null && retencionAux.getId().equals(idRetencionSeleccionado)) {
					retencionTemp=retencionAux;
					break;
				}
			}

			jComboBoxRetencion.setSelectedItem(retencionTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxRetencionGenerico(JComboBox jComboBoxRetencion,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxRetencion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxRetencion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxRetencion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxRetencion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxRetencion.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxRetencion.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxRetencion.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxRetencion.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxRetencion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxRetencion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			retencion=(Retencion) retencionLogic.getRetencions().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			retencion =(Retencion) retencions.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getmes_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencion")) {
			//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.gettiporetencion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.gettiporetencion_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getfactura_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableRetencion")) {
			//sDescripcion=this.getActualCuentaContableRetencionForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getcuentacontableretencion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getcuentacontableretencion_descripcion();
			}
		}

		if(sTipo.equals("EstadoRetencion")) {
			//sDescripcion=this.getActualEstadoRetencionForeignKeyDescripcion((Long)value);
			if(!retencion.getIsNew() && !retencion.getIsChanged() && !retencion.getIsDeleted()) {
				sDescripcion=retencion.getestadoretencion_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=retencion.getestadoretencion_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Retencion retencionRow=new Retencion();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			retencionRow=(Retencion) retencionLogic.getRetencions().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			retencionRow=(Retencion) retencions.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualRetencion(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion));			
			this.jButtonDuplicarRetencion.setVisible((this.isVisibilidadCeldaDuplicarRetencion && this.isPermisoDuplicarRetencion));			
			this.jButtonCopiarRetencion.setVisible((this.isVisibilidadCeldaCopiarRetencion && this.isPermisoCopiarRetencion));
			this.jButtonVerFormRetencion.setVisible((this.isVisibilidadCeldaVerFormRetencion && this.isPermisoVerFormRetencion));
			/*
			this.jButtonAbrirOrderByRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));			
			*/
			this.jButtonNuevoRelacionesRetencion.setVisible((this.isVisibilidadCeldaNuevoRelacionesRetencion && this.isPermisoNuevoRetencion));			
			this.jButtonNuevoGuardarCambiosRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion && this.isPermisoGuardarCambiosRetencion));
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.jInternalFrameDetalleFormRetencion.jButtonModificarRetencion.setVisible((this.isVisibilidadCeldaModificarRetencion && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.setVisible((this.isVisibilidadCeldaActualizarRetencion && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.setVisible((this.isVisibilidadCeldaEliminarRetencion && this.isPermisoEliminarRetencion));
			this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.setVisible(this.isVisibilidadCeldaCancelarRetencion);							
			this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.setVisible((this.isVisibilidadCeldaGuardarRetencion && this.isPermisoGuardarCambiosRetencion));			
			
			}
						
			this.jButtonGuardarCambiosTablaRetencion.setVisible((this.isVisibilidadCeldaGuardarCambiosRetencion && this.isPermisoGuardarCambiosRetencion));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion));						
			this.jButtonDuplicarToolBarRetencion.setVisible((this.isVisibilidadCeldaDuplicarRetencion && this.isPermisoDuplicarRetencion));						
			this.jButtonCopiarToolBarRetencion.setVisible((this.isVisibilidadCeldaCopiarRetencion && this.isPermisoCopiarRetencion));			
			this.jButtonVerFormToolBarRetencion.setVisible((this.isVisibilidadCeldaVerFormRetencion && this.isPermisoVerFormRetencion));			
			this.jButtonAbrirOrderByToolBarRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));
			this.jButtonNuevoRelacionesToolBarRetencion.setVisible((this.isVisibilidadCeldaNuevoRelacionesRetencion && this.isPermisoNuevoRetencion));			
			this.jButtonNuevoGuardarCambiosToolBarRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion && this.isPermisoGuardarCambiosRetencion));			
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.jInternalFrameDetalleFormRetencion.jButtonModificarToolBarRetencion.setVisible((this.isVisibilidadCeldaModificarRetencion && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jButtonActualizarToolBarRetencion.setVisible((this.isVisibilidadCeldaActualizarRetencion  && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jButtonEliminarToolBarRetencion.setVisible((this.isVisibilidadCeldaEliminarRetencion && this.isPermisoEliminarRetencion));
			this.jInternalFrameDetalleFormRetencion.jButtonCancelarToolBarRetencion.setVisible(this.isVisibilidadCeldaCancelarRetencion);				
			this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosToolBarRetencion.setVisible((this.isVisibilidadCeldaGuardarRetencion && this.isPermisoGuardarCambiosRetencion));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarRetencion.setVisible((this.isVisibilidadCeldaGuardarCambiosRetencion && this.isPermisoGuardarCambiosRetencion));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion));			
			this.jMenuItemDuplicarRetencion.setVisible((this.isVisibilidadCeldaDuplicarRetencion && this.isPermisoDuplicarRetencion));			
			this.jMenuItemCopiarRetencion.setVisible((this.isVisibilidadCeldaCopiarRetencion && this.isPermisoCopiarRetencion));			
			this.jMenuItemVerFormRetencion.setVisible((this.isVisibilidadCeldaVerFormRetencion && this.isPermisoVerFormRetencion));			
			this.jMenuItemAbrirOrderByRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));			
			//this.jMenuItemMostrarOcultarRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));
			this.jMenuItemDetalleAbrirOrderByRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));			
			//this.jMenuItemDetalleMostrarOcultarRetencion.setVisible((this.isVisibilidadCeldaOrdenRetencion && this.isPermisoOrdenRetencion));			
			this.jMenuItemNuevoRelacionesRetencion.setVisible((this.isVisibilidadCeldaNuevoRelacionesRetencion && this.isPermisoNuevoRetencion));			
			this.jMenuItemNuevoGuardarCambiosRetencion.setVisible((this.isVisibilidadCeldaNuevoRetencion && this.isPermisoNuevoRetencion && this.isPermisoGuardarCambiosRetencion));									
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.jInternalFrameDetalleFormRetencion.jMenuItemModificarRetencion.setVisible((this.isVisibilidadCeldaModificarRetencion && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jMenuItemActualizarRetencion.setVisible((this.isVisibilidadCeldaActualizarRetencion && this.isPermisoActualizarRetencion));	
			this.jInternalFrameDetalleFormRetencion.jMenuItemEliminarRetencion.setVisible((this.isVisibilidadCeldaEliminarRetencion && this.isPermisoEliminarRetencion));
			this.jInternalFrameDetalleFormRetencion.jMenuItemCancelarRetencion.setVisible(this.isVisibilidadCeldaCancelarRetencion);				
			}
			
			this.jMenuItemGuardarCambiosRetencion.setVisible((this.isVisibilidadCeldaGuardarRetencion && this.isPermisoGuardarCambiosRetencion));						
			this.jMenuItemGuardarCambiosTablaRetencion.setVisible((this.isVisibilidadCeldaGuardarCambiosRetencion && this.isPermisoGuardarCambiosRetencion));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoRetencion=this.jButtonNuevoRetencion.isVisible();
			this.isVisibilidadCeldaDuplicarRetencion=this.jButtonDuplicarRetencion.isVisible();
			this.isVisibilidadCeldaCopiarRetencion=this.jButtonCopiarRetencion.isVisible();
			this.isVisibilidadCeldaVerFormRetencion=this.jButtonVerFormRetencion.isVisible();
			/*
			this.isVisibilidadCeldaOrdenRetencion=this.jButtonAbrirOrderByRetencion.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesRetencion=this.jButtonNuevoRelacionesRetencion.isVisible();
			this.isVisibilidadCeldaModificarRetencion=this.jButtonModificarRetencion.isVisible();
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.isVisibilidadCeldaActualizarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.isVisible();
			this.isVisibilidadCeldaEliminarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.isVisible();
			this.isVisibilidadCeldaCancelarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.isVisible();
			this.isVisibilidadCeldaGuardarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosRetencion=this.jButtonGuardarCambiosTablaRetencion.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoRetencion=this.jButtonNuevoToolBarRetencion.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesRetencion=this.jButtonNuevoRelacionesToolBarRetencion.isVisible();
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.isVisibilidadCeldaModificarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonModificarToolBarRetencion.isVisible();
			this.isVisibilidadCeldaActualizarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonActualizarToolBarRetencion.isVisible();
			this.isVisibilidadCeldaEliminarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonEliminarToolBarRetencion.isVisible();
			this.isVisibilidadCeldaCancelarRetencion=this.jInternalFrameDetalleFormRetencion.jButtonCancelarToolBarRetencion.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarRetencion=this.jButtonGuardarCambiosToolBarRetencion.isVisible();
			this.isVisibilidadCeldaGuardarCambiosRetencion=this.jButtonGuardarCambiosTablaToolBarRetencion.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoRetencion=this.jMenuItemNuevoRetencion.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesRetencion=this.jMenuItemNuevoRelacionesRetencion.isVisible();
			
			if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.isVisibilidadCeldaModificarRetencion=this.jInternalFrameDetalleFormRetencion.jMenuItemModificarRetencion.isVisible();
			this.isVisibilidadCeldaActualizarRetencion=this.jInternalFrameDetalleFormRetencion.jMenuItemActualizarRetencion.isVisible();
			this.isVisibilidadCeldaEliminarRetencion=this.jInternalFrameDetalleFormRetencion.jMenuItemEliminarRetencion.isVisible();
			this.isVisibilidadCeldaCancelarRetencion=this.jInternalFrameDetalleFormRetencion.jMenuItemCancelarRetencion.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarRetencion=this.jMenuItemGuardarCambiosRetencion.isVisible();
			this.isVisibilidadCeldaGuardarCambiosRetencion=this.jMenuItemGuardarCambiosTablaRetencion.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesRetencion(Boolean esInicializar) {
		if(RetencionJInternalFrame.ISBINDING_MANUAL) {			
			if(this.retencionSessionBean.getConGuardarRelaciones()) {
				//if(this.retencionSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesRetencion();
			}
			
			this.inicializarActualizarBindingBotonesManualRetencion(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualRetencion() {
		this.jButtonNuevoRetencion.setVisible(this.isPermisoNuevoRetencion);			
		this.jButtonDuplicarRetencion.setVisible(this.isPermisoDuplicarRetencion);			
		this.jButtonCopiarRetencion.setVisible(this.isPermisoCopiarRetencion);			
		this.jButtonVerFormRetencion.setVisible(this.isPermisoVerFormRetencion);			
		/*
		this.jButtonAbrirOrderByRetencion.setVisible(this.isPermisoOrdenRetencion);					
		*/
		this.jButtonNuevoRelacionesRetencion.setVisible(this.isPermisoNuevoRetencion);			
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonModificarRetencion.setVisible(this.isPermisoActualizarRetencion);	
			this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.setVisible(this.isPermisoActualizarRetencion);	
			this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.setVisible(this.isPermisoEliminarRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.setVisible(this.isVisibilidadCeldaCancelarRetencion);						
			this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.setVisible(this.isPermisoGuardarCambiosRetencion);							
		}
		
		this.jButtonGuardarCambiosTablaRetencion.setVisible(this.isPermisoActualizarRetencion);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleRetencion() {
		this.jInternalFrameDetalleFormRetencion.jButtonModificarRetencion.setVisible(this.isPermisoActualizarRetencion);	
		this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.setVisible(this.isPermisoActualizarRetencion);	
		this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.setVisible(this.isPermisoEliminarRetencion);
		this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.setVisible(this.isVisibilidadCeldaCancelarRetencion);							
		this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.setVisible((this.isVisibilidadCeldaGuardarRetencion && this.isPermisoGuardarCambiosRetencion));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosRetencion() {
		if(RetencionJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualRetencion();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesRetencion() {
	}
	
	public void jTableDatosRetencionListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarRetencion(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.retencion.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebRetencion(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.retencion.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderRetencion.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.retencion.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebRetencion(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.retencion.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderRetencion.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.retencion.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebRetencion(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.retencion.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderRetencion.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.retencion.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebRetencion(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.retencion.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderRetencion.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.retencion.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebRetencion(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.retencion.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderRetencion.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.retencion.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebRetencion(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.retencion.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderRetencion.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.retencion.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableRetencionActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRetencion=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosRetencion.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderRetencion.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebRetencion(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.retencion.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderRetencion.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.retencion.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencionRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencion=true;

			idTienePermisotiporetencion=this.tienePermisosUsuarioEnPaginaWebRetencion(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.tiporetencionBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_tipo_retencion()!=null) {
					this.tiporetencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionBeanSwingJInternalFrame.setIdActual(this.retencion.getid_tipo_retencion());
					this.tiporetencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordertiporetencion=(TitledBorder)this.tiporetencionBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencion.setTitle(titledBorderRetencion.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencionRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_tipo_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion = "+this.retencion.getid_tipo_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteRetencionActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRetencion=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosRetencion.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderRetencion.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebRetencion(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.retencion.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderRetencion.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.retencion.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentajeRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getporcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje = "+this.retencion.getporcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbase_imponibleRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getbase_imponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where base_imponible = "+this.retencion.getbase_imponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalorRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getvalor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor = "+this.retencion.getvalor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumeroRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getnumero()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero like '%"+this.retencion.getnumero()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaRetencionActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRetencion=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosRetencion.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderRetencion.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebRetencion(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.retencion.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderRetencion.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.retencion.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.retencion.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_mone_localRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getdebito_mone_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_mone_local = "+this.retencion.getdebito_mone_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_mone_localRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getcredito_mone_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_mone_local = "+this.retencion.getcredito_mone_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_mone_extraRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getdebito_mone_extra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_mone_extra = "+this.retencion.getdebito_mone_extra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_mone_extraRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getcredito_mone_extra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_mone_extra = "+this.retencion.getcredito_mone_extra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebRetencion(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.retencion.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderRetencion.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.retencion.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.retencion.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_benefRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getnombre_benef()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_benef like '%"+this.retencion.getnombre_benef()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_benefRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getdireccion_benef()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_benef like '%"+this.retencion.getdireccion_benef()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonruc_benefRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getruc_benef()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc_benef like '%"+this.retencion.getruc_benef()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefono_benefRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.gettelefono_benef()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono_benef like '%"+this.retencion.gettelefono_benef()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.retencion.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_retencionRetencionActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableretencionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableretencionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableRetencion";

			if(!this.sFinalQueryGeneral_cuentacontableretencion.equals("")) {
				this.cuentacontableretencionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableretencion);
				this.cuentacontableretencionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableretencionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableretencionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableretencionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableRetencion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableretencionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRetencion=null;
			TitledBorder titledBordercuentacontableretencion=null;

			if(!this.jScrollPanelDatosRetencion.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				titledBordercuentacontableretencion=(TitledBorder)this.cuentacontableretencionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion.setTitle(titledBorderRetencion.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_retencionRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableretencion=true;

			idTienePermisocuentacontableretencion=this.tienePermisosUsuarioEnPaginaWebRetencion(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableretencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.cuentacontableretencionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableretencionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_cuenta_contable_retencion()!=null) {
					this.cuentacontableretencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableretencionBeanSwingJInternalFrame.setIdActual(this.retencion.getid_cuenta_contable_retencion());
					this.cuentacontableretencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableretencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableretencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableretencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBordercuentacontableretencion=(TitledBorder)this.cuentacontableretencionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion.setTitle(titledBorderRetencion.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_retencionRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_cuenta_contable_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_retencion = "+this.retencion.getid_cuenta_contable_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_retencionRetencionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadoretencion=true;

			idTienePermisoestadoretencion=this.tienePermisosUsuarioEnPaginaWebRetencion(EstadoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadoretencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRetencion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRetencion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);

				this.estadoretencionBeanSwingJInternalFrame=new EstadoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadoretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadoretencionBeanSwingJInternalFrame.getEstadoRetencionLogic().setConnexion(this.retencionLogic.getConnexion());

				if(this.retencion.getid_estado_retencion()!=null) {
					this.estadoretencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadoretencionBeanSwingJInternalFrame.setIdActual(this.retencion.getid_estado_retencion());
					this.estadoretencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadoretencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadoretencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.estadoretencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRetencion=(TitledBorder)this.jScrollPanelDatosRetencion.getBorder();
				TitledBorder titledBorderestadoretencion=(TitledBorder)this.estadoretencionBeanSwingJInternalFrame.jScrollPanelDatosEstadoRetencion.getBorder();

				titledBorderestadoretencion.setTitle(titledBorderRetencion.getTitle() + " -> Estado Retencion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.retencionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_retencionRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getid_estado_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_retencion = "+this.retencion.getid_estado_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbeneficiarioRetencionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRetencion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRetencion(this.getretencion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.retencion==null) {
						this.retencion = new Retencion();
					}

					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);
				}

				if(this.retencion.getbeneficiario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where beneficiario like '%"+this.retencion.getbeneficiario()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRetencion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameRetencion() {
		if(this.jInternalFrameDetalleFormRetencion!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
			this.jInternalFrameDetalleFormRetencion.setVisible(false);	    			
			this.jInternalFrameDetalleFormRetencion.dispose();
			this.jInternalFrameDetalleFormRetencion=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoRetencion!=null) {
			this.jInternalFrameReporteDinamicoRetencion.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoRetencion.dispose();
			this.jInternalFrameReporteDinamicoRetencion=null;
		}
		
		if(this.jInternalFrameImportacionRetencion!=null) {
			this.jInternalFrameImportacionRetencion.setVisible(false);	    			
			this.jInternalFrameImportacionRetencion.dispose();
			this.jInternalFrameImportacionRetencion=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessRetencion();
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			
			if(sTipo.equals("NuevoRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarRetencion")) {
				jButtonDuplicarRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarRetencion")) {
				jButtonCopiarRetencionActionPerformed(evt);
			} else if(sTipo.equals("VerFormRetencion")) {
				jButtonVerFormRetencionActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarRetencion")) {
				jButtonDuplicarRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarRetencion")) {
				jButtonDuplicarRetencionActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarRetencion")) {
				jButtonModificarRetencionActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarRetencion")) {
				jButtonModificarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarRetencion")) {
				jButtonModificarRetencionActionPerformed(evt);
			} else if(sTipo.equals("ActualizarRetencion")) {
				jButtonActualizarRetencionActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarRetencion")) {
				jButtonActualizarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarRetencion")) {
				jButtonActualizarRetencionActionPerformed(evt);
			} else if(sTipo.equals("EliminarRetencion")) {
				jButtonEliminarRetencionActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarRetencion")) {
				jButtonEliminarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarRetencion")) {
				jButtonEliminarRetencionActionPerformed(evt);
			} else if(sTipo.equals("CancelarRetencion")) {
				jButtonCancelarRetencionActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarRetencion")) {
				jButtonCancelarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarRetencion")) {
				jButtonCancelarRetencionActionPerformed(evt);
			} else if(sTipo.equals("CerrarRetencion")) {
				jButtonCerrarRetencionActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarRetencion")) {
				jButtonCerrarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarRetencion")) {
				jButtonCerrarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarRetencion")) {
				jButtonMostrarOcultarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarRetencion")) {
				jButtonCancelarRetencionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarRetencion")) {
				jButtonCopiarRetencionActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarRetencion")) {
				jButtonVerFormRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarRetencion")) {
				jButtonCopiarRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormRetencion")) {
				jButtonVerFormRetencionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionRetencion")) {
				jButtonRecargarInformacionRetencionActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarRetencion")) {
				jButtonRecargarInformacionRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionRetencion")) {
				jButtonRecargarInformacionRetencionActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresRetencion")) {
				jButtonAnterioresRetencionActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarRetencion")) {
				jButtonAnterioresRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreRetencion")) {
				jButtonAnterioresRetencionActionPerformed(evt);
			} else if(sTipo.equals("SiguientesRetencion")) {
				jButtonSiguientesRetencionActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarRetencion")) {
				jButtonSiguientesRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesRetencion")) {
				jButtonSiguientesRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByRetencion") || sTipo.equals("MenuItemDetalleAbrirOrderByRetencion")) {
				jButtonAbrirOrderByRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarRetencion") || sTipo.equals("MenuItemDetalleMostrarOcultarRetencion")) {
				jButtonMostrarOcultarRetencionActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosRetencion")) {
				jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarRetencion")) {
				jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosRetencion")) {
				jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoRetencion")) {
				jButtonCerrarReporteDinamicoRetencionActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoRetencion")) {
				jButtonGenerarReporteDinamicoRetencionActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoRetencion")) {
				/*
				jButtonGenerarExcelReporteDinamicoRetencionActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionRetencion")) {
				jButtonCerrarImportacionRetencionActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionRetencion")) {
				/*
				jButtonGenerarImportacionRetencionActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionRetencion")) {
				/*
				jButtonAbrirImportacionRetencionActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesRetencion")) {
				jComboBoxTiposAccionesRetencionActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesRetencion")) {
				jComboBoxTiposRelacionesRetencionActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioRetencion")) {
				jComboBoxTiposAccionesRetencionActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarRetencion")) {
				/*
				jComboBoxTiposSeleccionarRetencionActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralRetencion")) {
				jTextFieldValorCampoGeneralRetencionActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByRetencion")) {
				jButtonAbrirOrderByRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarRetencion")) {
				jButtonAbrirOrderByRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByRetencion")) {
				jButtonCerrarOrderByRetencionActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idRetencionBusqueda")) {
				this.jButtonidRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaRetencionUpdate")) {
				this.jButtonid_empresaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaRetencionBusqueda")) {
				this.jButtonid_empresaRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalRetencionUpdate")) {
				this.jButtonid_sucursalRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalRetencionBusqueda")) {
				this.jButtonid_sucursalRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioRetencionUpdate")) {
				this.jButtonid_ejercicioRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioRetencionBusqueda")) {
				this.jButtonid_ejercicioRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoRetencionUpdate")) {
				this.jButtonid_periodoRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoRetencionBusqueda")) {
				this.jButtonid_periodoRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioRetencionUpdate")) {
				this.jButtonid_anioRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioRetencionBusqueda")) {
				this.jButtonid_anioRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesRetencionUpdate")) {
				this.jButtonid_mesRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesRetencionBusqueda")) {
				this.jButtonid_mesRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableRetencion")) {
				this.jButtonid_asiento_contableRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableRetencionUpdate")) {
				this.jButtonid_asiento_contableRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableRetencionBusqueda")) {
				this.jButtonid_asiento_contableRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionRetencionUpdate")) {
				this.jButtonid_tipo_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionRetencionBusqueda")) {
				this.jButtonid_tipo_retencionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteRetencion")) {
				this.jButtonid_clienteRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteRetencionUpdate")) {
				this.jButtonid_clienteRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteRetencionBusqueda")) {
				this.jButtonid_clienteRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentajeRetencionBusqueda")) {
				this.jButtonporcentajeRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base_imponibleRetencionBusqueda")) {
				this.jButtonbase_imponibleRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valorRetencionBusqueda")) {
				this.jButtonvalorRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroRetencionBusqueda")) {
				this.jButtonnumeroRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaRetencion")) {
				this.jButtonid_facturaRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaRetencionUpdate")) {
				this.jButtonid_facturaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaRetencionBusqueda")) {
				this.jButtonid_facturaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionRetencionBusqueda")) {
				this.jButtondescripcionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_localRetencionBusqueda")) {
				this.jButtondebito_mone_localRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_localRetencionBusqueda")) {
				this.jButtoncredito_mone_localRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_extraRetencionBusqueda")) {
				this.jButtondebito_mone_extraRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_extraRetencionBusqueda")) {
				this.jButtoncredito_mone_extraRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaRetencionUpdate")) {
				this.jButtonid_monedaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaRetencionBusqueda")) {
				this.jButtonid_monedaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionRetencionBusqueda")) {
				this.jButtoncotizacionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_benefRetencionBusqueda")) {
				this.jButtonnombre_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_benefRetencionBusqueda")) {
				this.jButtondireccion_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ruc_benefRetencionBusqueda")) {
				this.jButtonruc_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_benefRetencionBusqueda")) {
				this.jButtontelefono_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaRetencionBusqueda")) {
				this.jButtonfechaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencion")) {
				this.jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionArbol")) {
				this.abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionUpdate")) {
				this.jButtonid_cuenta_contable_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionBusqueda")) {
				this.jButtonid_cuenta_contable_retencionRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_retencionRetencionUpdate")) {
				this.jButtonid_estado_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_retencionRetencionBusqueda")) {
				this.jButtonid_estado_retencionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("beneficiarioRetencionBusqueda")) {
				this.jButtonbeneficiarioRetencionBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableRetencion")) {
				this.jButtonid_asiento_contableRetencionActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteRetencion")) {
				this.jButtonid_clienteRetencionActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_retencionRetencion")) {
				this.jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaRetencion")) {
				this.jButtonid_facturaRetencionActionPerformed(evt);
			}
			
			
			;
			
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessRetencion();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Retencion retencionLocal=null;
			
			if(!this.getEsControlTabla()) {
				retencionLocal=this.retencion;
			} else {
				retencionLocal=this.retencionAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
							
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
								
						
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
								
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
							
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
								
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosRetencion")) {
					jCheckBoxSeleccionarTodosRetencionItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosRetencion")) {
					jCheckBoxSeleccionadosRetencionItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarRetencion")) {
					
				}
				
				


				
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
												
				
				


				
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRetencionActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.retencion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.retencion);
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Retencion.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Retencion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRetencionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.retencionAnterior =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.retencionAnterior =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarRetencion")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosRetencionListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosRetencion.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.retencion =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.retencion =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.retencion);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarRetencion")) {
				
				}
				
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarRetencion")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosRetencion.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarRetencion")) {
			
			}
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessRetencion();
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			if(sTipo.equals("NuevoRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarRetencion")) {
				jButtonDuplicarRetencionActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarRetencion")) {
				jButtonCopiarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormRetencion")) {
				jButtonVerFormRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesRetencion")) {
				jButtonNuevoRetencionActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarRetencion")) {
				jButtonModificarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarRetencion")) {
				jButtonActualizarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarRetencion")) {
				jButtonEliminarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarRetencion")) {
				jButtonCancelarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarRetencion")) {
				jButtonCerrarRetencionActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosRetencion")) {
				jButtonGuardarCambiosRetencionActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosRetencion")) {
				jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByRetencion")) {
				jButtonAbrirOrderByRetencionActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionRetencion")) {
				jButtonRecargarInformacionRetencionActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresRetencion")) {
				jButtonAnterioresRetencionActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesRetencion")) {
				jButtonSiguientesRetencionActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idRetencionBusqueda")) {
				this.jButtonidRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaRetencionUpdate")) {
				this.jButtonid_empresaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaRetencionBusqueda")) {
				this.jButtonid_empresaRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalRetencionUpdate")) {
				this.jButtonid_sucursalRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalRetencionBusqueda")) {
				this.jButtonid_sucursalRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioRetencionUpdate")) {
				this.jButtonid_ejercicioRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioRetencionBusqueda")) {
				this.jButtonid_ejercicioRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoRetencionUpdate")) {
				this.jButtonid_periodoRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoRetencionBusqueda")) {
				this.jButtonid_periodoRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioRetencionUpdate")) {
				this.jButtonid_anioRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioRetencionBusqueda")) {
				this.jButtonid_anioRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesRetencionUpdate")) {
				this.jButtonid_mesRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesRetencionBusqueda")) {
				this.jButtonid_mesRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableRetencion")) {
				this.jButtonid_asiento_contableRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableRetencionUpdate")) {
				this.jButtonid_asiento_contableRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableRetencionBusqueda")) {
				this.jButtonid_asiento_contableRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionRetencionUpdate")) {
				this.jButtonid_tipo_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionRetencionBusqueda")) {
				this.jButtonid_tipo_retencionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteRetencion")) {
				this.jButtonid_clienteRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteRetencionUpdate")) {
				this.jButtonid_clienteRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteRetencionBusqueda")) {
				this.jButtonid_clienteRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentajeRetencionBusqueda")) {
				this.jButtonporcentajeRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base_imponibleRetencionBusqueda")) {
				this.jButtonbase_imponibleRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valorRetencionBusqueda")) {
				this.jButtonvalorRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroRetencionBusqueda")) {
				this.jButtonnumeroRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaRetencion")) {
				this.jButtonid_facturaRetencionActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaRetencionUpdate")) {
				this.jButtonid_facturaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaRetencionBusqueda")) {
				this.jButtonid_facturaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionRetencionBusqueda")) {
				this.jButtondescripcionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_localRetencionBusqueda")) {
				this.jButtondebito_mone_localRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_localRetencionBusqueda")) {
				this.jButtoncredito_mone_localRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_mone_extraRetencionBusqueda")) {
				this.jButtondebito_mone_extraRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_mone_extraRetencionBusqueda")) {
				this.jButtoncredito_mone_extraRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaRetencionUpdate")) {
				this.jButtonid_monedaRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaRetencionBusqueda")) {
				this.jButtonid_monedaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionRetencionBusqueda")) {
				this.jButtoncotizacionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_benefRetencionBusqueda")) {
				this.jButtonnombre_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_benefRetencionBusqueda")) {
				this.jButtondireccion_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ruc_benefRetencionBusqueda")) {
				this.jButtonruc_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_benefRetencionBusqueda")) {
				this.jButtontelefono_benefRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaRetencionBusqueda")) {
				this.jButtonfechaRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencion")) {
				this.jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionArbol")) {
				this.abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionUpdate")) {
				this.jButtonid_cuenta_contable_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionRetencionBusqueda")) {
				this.jButtonid_cuenta_contable_retencionRetencionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_retencionRetencionUpdate")) {
				this.jButtonid_estado_retencionRetencionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_retencionRetencionBusqueda")) {
				this.jButtonid_estado_retencionRetencionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("beneficiarioRetencionBusqueda")) {
				this.jButtonbeneficiarioRetencionBusquedaActionPerformed(evt);
			}
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessRetencion();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameRetencion")) {
				closingInternalFrameRetencion();
				
			} else if(sTipo.equals("jButtonCancelarRetencion")) {
				JInternalFrameBase jInternalFrameDetalleFormRetencion = (JInternalFrameBase)evt.getSource();
	            	
	            RetencionBeanSwingJInternalFrame jInternalFrameParent=(RetencionBeanSwingJInternalFrame)jInternalFrameDetalleFormRetencion.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarRetencionActionPerformed(null);
			}
			
			RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.retencion,new Object(),this.retencionParameterGeneral,this.retencionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormRetencion(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormRetencion(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormRetencion(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.retencion)) {
			if(!esControlTabla) {
				if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);			
				}
				
				if(this.retencionSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualRetencion(this.retencion,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.retencionReturnGeneral=retencionLogic.procesarEventosRetencionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.retencionLogic.getRetencions(),this.retencion,this.retencionParameterGeneral,this.isEsNuevoRetencion,classes);//this.retencionLogic.getRetencion()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanRetencion(this.retencionReturnGeneral,this.retencionBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.retencionSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanRetencion(classes,this.retencionReturnGeneral,this.retencionBean,false);
					}
						
					if(this.retencionReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyRetencion(this.retencionReturnGeneral.getRetencion());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioRetencion(this.retencionReturnGeneral.getRetencion());	
					}
						
					if(this.retencionReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioRetencion(this.retencionReturnGeneral.getRetencion(),classes);//this.retencionBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioRetencion(this.retencion,classes);//this.retencionBean);									
				}
			
				if(RetencionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualRetencion(this.retencion,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysRetencion(this.retencion);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.retencionAnterior!=null) {
						this.retencion=this.retencionAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.retencionReturnGeneral=retencionLogic.procesarEventosRetencionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.retencionLogic.getRetencions(),this.retencion,this.retencionParameterGeneral,this.isEsNuevoRetencion,classes);//this.retencionLogic.getRetencion()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.retencionSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.retencionSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.retencionReturnGeneral.getRetencion(),retencionLogic.getRetencions());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.retencionReturnGeneral.getRetencion(),this.retencions);
				}
				//ARCHITECTURE
				
				//this.jTableDatosRetencion.repaint();
				
				//((AbstractTableModel) this.jTableDatosRetencion.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosRetencion();
			}
		}
	}
	
	public void actualizarVisualTableDatosRetencion() throws Exception {
		
		RetencionModel retencionModel=(RetencionModel)this.jTableDatosRetencion.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			retencionModel.retencions=this.retencionLogic.getRetencions();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			retencionModel.retencions=this.retencions;
		}
		
		
		((RetencionModel) this.jTableDatosRetencion.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaRetencion() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getretencionAnterior(),this.retencionLogic.getRetencions());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getretencionAnterior(),this.retencions);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosRetencion();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioRetencion(Retencion retencion,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.retencion,new Object(),generalEntityParameterGeneral,this.retencionReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.retencionSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=RetencionConstantesFunciones.getClassesRelationshipsOfRetencion(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=RetencionConstantesFunciones.getClassesRelationshipsFromStringsOfRetencion(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormRetencion(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				RetencionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.retencion,new Object(),generalEntityParameterGeneral,this.retencionReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioRetencion(RetencionBean retencionBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanRetencion(ArrayList<Classe> classes,RetencionReturnGeneral retencionReturnGeneral,RetencionBean retencionBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualRetencion(Retencion retencion,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.retencion)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormRetencion = new RetencionDetalleFormJInternalFrame(jDesktopPane,this.retencionSessionBean.getConGuardarRelaciones(),this.retencionSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormRetencion);
		this.jInternalFrameDetalleFormRetencion.setVisible(false);
		this.jInternalFrameDetalleFormRetencion.setSelected(false);						
		
		this.jInternalFrameDetalleFormRetencion.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormRetencion.retencionLogic=this.retencionLogic;
		
		this.cargarCombosFrameForeignKeyRetencion("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleRetencion();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleRetencion();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyRetencion("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyRetencion();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormRetencion.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarRetencion"));
		
		this.jInternalFrameDetalleFormRetencion.jButtonModificarRetencion.addActionListener(new ButtonActionListener(this,"ModificarRetencion"));

		/*
		this.jInternalFrameDetalleFormRetencion.jButtonModificarToolBarRetencion.addActionListener(new ButtonActionListener(this,"ModificarToolBarRetencion"));
					
		this.jInternalFrameDetalleFormRetencion.jMenuItemModificarRetencion.addActionListener(new ButtonActionListener(this,"MenuItemModificarRetencion"));		
		
		*/
		
		this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.addActionListener (new ButtonActionListener(this,"ActualizarRetencion"));
		
		/*
		this.jInternalFrameDetalleFormRetencion.jButtonActualizarToolBarRetencion.addActionListener(new ButtonActionListener(this,"ActualizarToolBarRetencion"));
						
		this.jInternalFrameDetalleFormRetencion.jMenuItemActualizarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemActualizarRetencion"));		
		
		*/
		
		this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.addActionListener (new ButtonActionListener(this,"EliminarRetencion"));
		
		/*
		this.jInternalFrameDetalleFormRetencion.jButtonEliminarToolBarRetencion.addActionListener (new ButtonActionListener(this,"EliminarToolBarRetencion"));
								
		this.jInternalFrameDetalleFormRetencion.jMenuItemEliminarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemEliminarRetencion"));		
		
		*/
		
		this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.addActionListener (new ButtonActionListener(this,"CancelarRetencion"));
		
		/*
		this.jInternalFrameDetalleFormRetencion.jButtonCancelarToolBarRetencion.addActionListener (new ButtonActionListener(this,"CancelarToolBarRetencion"));
					
		this.jInternalFrameDetalleFormRetencion.jMenuItemCancelarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemCancelarRetencion"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormRetencion.jMenuItemDetalleCerrarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarRetencion"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosToolBarRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRetencion"));
		*/
		
		/*
		this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosToolBarRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRetencion"));
		*/
		
		
		this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioRetencion"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonidRetencionBusqueda.addActionListener(new ButtonActionListener(this,"idRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_anioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_mesRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRetencionBusqueda"));
		//jButtonid_asiento_contableRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencion.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionBusqueda"));
		//jButtonid_clienteRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencion.addActionListener(new ButtonActionListener(this,"id_clienteRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonporcentajeRetencionBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbase_imponibleRetencionBusqueda.addActionListener(new ButtonActionListener(this,"base_imponibleRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonvalorRetencionBusqueda.addActionListener(new ButtonActionListener(this,"valorRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnumeroRetencionBusqueda.addActionListener(new ButtonActionListener(this,"numeroRetencionBusqueda"));
		//jButtonid_facturaRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencion.addActionListener(new ButtonActionListener(this,"id_facturaRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_facturaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondescripcionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"descripcionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_monedaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncotizacionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnombre_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"nombre_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondireccion_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"direccion_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonruc_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"ruc_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtontelefono_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"telefono_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonfechaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"fechaRetencionBusqueda"));
		//jButtonid_cuenta_contable_retencionRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencion.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencion"));
		//jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbeneficiarioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioRetencionBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesRetencion"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameRetencion"));
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarRetencion"));
		}
		
		this.jTableDatosRetencion.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarRetencion"));
		
		this.jTableDatosRetencion.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarRetencion"));
		
		this.jButtonNuevoRetencion.addActionListener(new ButtonActionListener(this,"NuevoRetencion"));
		
		this.jButtonDuplicarRetencion.addActionListener(new ButtonActionListener(this,"DuplicarRetencion"));
		
		this.jButtonCopiarRetencion.addActionListener(new ButtonActionListener(this,"CopiarRetencion"));
		
		this.jButtonVerFormRetencion.addActionListener(new ButtonActionListener(this,"VerFormRetencion"));
		
		/*
		this.jButtonNuevoToolBarRetencion.addActionListener(new ButtonActionListener(this,"NuevoToolBarRetencion"));
			
		this.jButtonDuplicarToolBarRetencion.addActionListener(new ButtonActionListener(this,"DuplicarToolBarRetencion"));
			
		this.jMenuItemNuevoRetencion.addActionListener (new ButtonActionListener(this,"MenuItemNuevoRetencion"));
			
		this.jMenuItemDuplicarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarRetencion"));		
		*/
		
		this.jButtonNuevoRelacionesRetencion.addActionListener (new ButtonActionListener(this,"NuevoRelacionesRetencion"));
		
		/*
		this.jButtonNuevoRelacionesToolBarRetencion.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarRetencion"));
			
		this.jMenuItemNuevoRelacionesRetencion.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesRetencion"));		
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonModificarRetencion.addActionListener(new ButtonActionListener(this,"ModificarRetencion"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonModificarToolBarRetencion.addActionListener(new ButtonActionListener(this,"ModificarToolBarRetencion"));
			
			this.jInternalFrameDetalleFormRetencion.jMenuItemModificarRetencion.addActionListener(new ButtonActionListener(this,"MenuItemModificarRetencion"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormRetencion.jButtonActualizarRetencion.addActionListener (new ButtonActionListener(this,"ActualizarRetencion"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonActualizarToolBarRetencion.addActionListener(new ButtonActionListener(this,"ActualizarToolBarRetencion"));
				
			this.jInternalFrameDetalleFormRetencion.jMenuItemActualizarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemActualizarRetencion"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonEliminarRetencion.addActionListener (new ButtonActionListener(this,"EliminarRetencion"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonEliminarToolBarRetencion.addActionListener (new ButtonActionListener(this,"EliminarToolBarRetencion"));
						
			this.jInternalFrameDetalleFormRetencion.jMenuItemEliminarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemEliminarRetencion"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonCancelarRetencion.addActionListener (new ButtonActionListener(this,"CancelarRetencion"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonCancelarToolBarRetencion.addActionListener (new ButtonActionListener(this,"CancelarToolBarRetencion"));
			
			this.jInternalFrameDetalleFormRetencion.jMenuItemCancelarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemCancelarRetencion"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarRetencion.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarRetencion"));		
		*/
		
		this.jButtonCerrarRetencion.addActionListener (new ButtonActionListener(this,"CerrarRetencion"));
		
		/*
		this.jButtonCerrarToolBarRetencion.addActionListener (new ButtonActionListener(this,"CerrarToolBarRetencion"));
			
		this.jMenuItemCerrarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemCerrarRetencion"));
			
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jMenuItemDetalleCerrarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarRetencion"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosRetencion"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosToolBarRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRetencion"));
		}
		
		this.jButtonCopiarToolBarRetencion.addActionListener (new ButtonActionListener(this,"CopiarToolBarRetencion"));
			
		this.jButtonVerFormToolBarRetencion.addActionListener (new ButtonActionListener(this,"VerFormToolBarRetencion"));
		
		this.jMenuItemGuardarCambiosRetencion.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosRetencion"));
			
		this.jMenuItemCopiarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemCopiarRetencion"));		
		
		this.jMenuItemVerFormRetencion.addActionListener (new ButtonActionListener(this,"MenuItemVerFormRetencion"));		
		*/
		
		this.jButtonGuardarCambiosTablaRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaRetencion"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarRetencion"));
			
		this.jMenuItemGuardarCambiosTablaRetencion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaRetencion"));		
		*/
		
		/*
		this.jButtonRecargarInformacionRetencion.addActionListener (new ButtonActionListener(this,"RecargarInformacionRetencion"));
					
		this.jButtonRecargarInformacionToolBarRetencion.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarRetencion"));
		
		this.jMenuItemRecargarInformacionRetencion.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionRetencion"));		
		*/
		
		
		this.jButtonAnterioresRetencion.addActionListener (new ButtonActionListener(this,"AnterioresRetencion"));
		
		/*
		this.jButtonAnterioresToolBarRetencion.addActionListener (new ButtonActionListener(this,"AnterioresToolBarRetencion"));
		
		this.jMenuItemAnterioresRetencion.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresRetencion"));		
		*/
		
		this.jButtonSiguientesRetencion.addActionListener (new ButtonActionListener(this,"SiguientesRetencion"));
		
		/*
		this.jButtonSiguientesToolBarRetencion.addActionListener (new ButtonActionListener(this,"SiguientesToolBarRetencion"));
			
		this.jMenuItemSiguientesRetencion.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesRetencion"));
			
		this.jMenuItemAbrirOrderByRetencion.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByRetencion"));
			
		this.jMenuItemMostrarOcultarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarRetencion"));
			
		this.jMenuItemDetalleAbrirOrderByRetencion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByRetencion"));
			
		this.jMenuItemDetalleMostarOcultarRetencion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarRetencion"));		
		*/
		
		this.jButtonNuevoGuardarCambiosRetencion.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosRetencion"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarRetencion.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarRetencion"));
			
		this.jMenuItemNuevoGuardarCambiosRetencion.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosRetencion"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosRetencion.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosRetencion"));

		this.jCheckBoxSeleccionadosRetencion.addItemListener(new CheckBoxItemListener(this,"SeleccionadosRetencion"));
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioRetencion"));
		}
		
		/*
		this.jComboBoxTiposRelacionesRetencion.addActionListener (new ButtonActionListener(this,"TiposRelacionesRetencion"));
			
		this.jComboBoxTiposAccionesRetencion.addActionListener (new ButtonActionListener(this,"TiposAccionesRetencion"));
					
		this.jComboBoxTiposSeleccionarRetencion.addActionListener (new ButtonActionListener(this,"TiposSeleccionarRetencion"));
			
		this.jTextFieldValorCampoGeneralRetencion.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralRetencion"));		
		*/
		
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonidRetencionBusqueda.addActionListener(new ButtonActionListener(this,"idRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_anioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_mesRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRetencionBusqueda"));
		//jButtonid_asiento_contableRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencion.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionBusqueda"));
		//jButtonid_clienteRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencion.addActionListener(new ButtonActionListener(this,"id_clienteRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonporcentajeRetencionBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbase_imponibleRetencionBusqueda.addActionListener(new ButtonActionListener(this,"base_imponibleRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonvalorRetencionBusqueda.addActionListener(new ButtonActionListener(this,"valorRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnumeroRetencionBusqueda.addActionListener(new ButtonActionListener(this,"numeroRetencionBusqueda"));
		//jButtonid_facturaRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencion.addActionListener(new ButtonActionListener(this,"id_facturaRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_facturaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondescripcionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"descripcionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_monedaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncotizacionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnombre_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"nombre_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondireccion_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"direccion_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonruc_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"ruc_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtontelefono_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"telefono_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonfechaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"fechaRetencionBusqueda"));
		//jButtonid_cuenta_contable_retencionRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencion.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencion"));
		//jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbeneficiarioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioRetencionBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonFK_IdAsientoContableRetencion.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableRetencion"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableRetencion.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencion"));

			this.jButtonFK_IdClienteRetencion.addActionListener(new ButtonActionListener(this,"FK_IdClienteRetencion"));

			this.jButtonBuscarFK_IdClienteid_clienteRetencion.addActionListener(new ButtonActionListener(this,"id_clienteRetencion"));

			this.jButtonFK_IdCuentaContableRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableRetencionRetencion"));

			this.jButtonBuscarFK_IdCuentaContableRetencionid_cuenta_contable_retencionRetencion.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencion"));

			this.jButtonFK_IdEstadoRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdEstadoRetencionRetencion"));

			this.jButtonFK_IdFacturaRetencion.addActionListener(new ButtonActionListener(this,"FK_IdFacturaRetencion"));

			this.jButtonBuscarFK_IdFacturaid_facturaRetencion.addActionListener(new ButtonActionListener(this,"id_facturaRetencion"));

			this.jButtonFK_IdTipoRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionRetencion"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoRetencion!=null) {
				this.jInternalFrameReporteDinamicoRetencion.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRetencion"));
				this.jInternalFrameReporteDinamicoRetencion.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRetencion"));
				this.jInternalFrameReporteDinamicoRetencion.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRetencion"));
			}
			
			//this.jButtonCerrarReporteDinamicoRetencion.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRetencion"));				
			//this.jButtonGenerarReporteDinamicoRetencion.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRetencion"));
			//this.jButtonGenerarExcelReporteDinamicoRetencion.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRetencion"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionRetencion!=null) {
				this.jInternalFrameImportacionRetencion.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionRetencion"));
				this.jInternalFrameImportacionRetencion.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionRetencion"));
				this.jInternalFrameImportacionRetencion.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionRetencion"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByRetencion.addActionListener (new ButtonActionListener(this,"AbrirOrderByRetencion"));
			
			this.jButtonAbrirOrderByToolBarRetencion.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarRetencion"));			
			
			if(this.jInternalFrameOrderByRetencion!=null) {
				this.jInternalFrameOrderByRetencion.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByRetencion"));				
			}
			*/
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormRetencion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRetencion.jTabbedPaneRelacionesRetencion.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesRetencion"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameRetencion();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormRetencion.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormRetencion = (JInternalFrameBase)event.getSource();
	            	
	            RetencionBeanSwingJInternalFrame jInternalFrameParent=(RetencionBeanSwingJInternalFrame)jInternalFrameDetalleFormRetencion.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarRetencionActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosRetencion.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosRetencionListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosRetencion.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosRetencion.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRetencion";
		inputMap = this.jButtonNuevoRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoRetencionActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRetencionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesRetencion";
		inputMap = this.jButtonNuevoRelacionesRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoRetencionActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarRetencion";
		inputMap = this.jButtonModificarRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarRetencion";
		inputMap = this.jButtonActualizarRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarRetencion";
		inputMap = this.jButtonEliminarRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarRetencion";
		inputMap = this.jButtonCancelarRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarRetencion";
		inputMap = this.jButtonCerrarRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosRetencion";
		inputMap = this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormRetencion.jButtonGuardarCambiosRetencion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosRetencionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosRetencion.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosRetencionItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesRetencion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesRetencionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarRetencion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarRetencionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralRetencion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralRetencionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonidRetencionBusqueda.addActionListener(new ButtonActionListener(this,"idRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_empresaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_sucursalRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_ejercicioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_periodoRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_anioRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_anioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_mesRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_mesRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRetencionBusqueda"));
		//jButtonid_asiento_contableRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencion.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_tipo_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionRetencionBusqueda"));
		//jButtonid_clienteRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencion.addActionListener(new ButtonActionListener(this,"id_clienteRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonporcentajeRetencionBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbase_imponibleRetencionBusqueda.addActionListener(new ButtonActionListener(this,"base_imponibleRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonvalorRetencionBusqueda.addActionListener(new ButtonActionListener(this,"valorRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnumeroRetencionBusqueda.addActionListener(new ButtonActionListener(this,"numeroRetencionBusqueda"));
		//jButtonid_facturaRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencion.addActionListener(new ButtonActionListener(this,"id_facturaRetencion"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_facturaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondescripcionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"descripcionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_localRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_localRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondebito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"debito_mone_extraRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncredito_mone_extraRetencionBusqueda.addActionListener(new ButtonActionListener(this,"credito_mone_extraRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_monedaRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_monedaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtoncotizacionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonnombre_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"nombre_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtondireccion_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"direccion_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonruc_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"ruc_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtontelefono_benefRetencionBusqueda.addActionListener(new ButtonActionListener(this,"telefono_benefRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonfechaRetencionBusqueda.addActionListener(new ButtonActionListener(this,"fechaRetencionBusqueda"));
		//jButtonid_cuenta_contable_retencionRetencion.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionRetencionActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencion.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencion"));
		//jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionUpdate.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonid_estado_retencionRetencionBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_retencionRetencionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRetencion.jButtonbeneficiarioRetencionBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioRetencionBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableRetencion.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableRetencion"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableRetencion.addActionListener(new ButtonActionListener(this,"id_asiento_contableRetencion"));

		this.jButtonFK_IdClienteRetencion.addActionListener(new ButtonActionListener(this,"FK_IdClienteRetencion"));

		this.jButtonBuscarFK_IdClienteid_clienteRetencion.addActionListener(new ButtonActionListener(this,"id_clienteRetencion"));

		this.jButtonFK_IdCuentaContableRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableRetencionRetencion"));

		this.jButtonBuscarFK_IdCuentaContableRetencionid_cuenta_contable_retencionRetencion.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionRetencion"));

		this.jButtonFK_IdEstadoRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdEstadoRetencionRetencion"));

		this.jButtonFK_IdFacturaRetencion.addActionListener(new ButtonActionListener(this,"FK_IdFacturaRetencion"));

		this.jButtonBuscarFK_IdFacturaid_facturaRetencion.addActionListener(new ButtonActionListener(this,"id_facturaRetencion"));

		this.jButtonFK_IdTipoRetencionRetencion.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionRetencion"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionRetencion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionRetencionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarRetencionActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarRetencion.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosRetencion(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
					retencionAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Retencion retencionAux:retencions) {
					retencionAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosRetencionItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingRetencion(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
						retencionAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Retencion retencionAux:retencions) {
						retencionAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Retencion retencionAux:retencions) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaRetencion(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosRetencion.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosRetencion.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosRetencion,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosRetencionItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingRetencion(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosRetencion.getSelectedRows();
			
			Retencion retencionLocal=new Retencion();
			
			//this.seleccionarTodosRetencion(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					retencionLocal =(Retencion) this.retencionLogic.getRetencions().toArray()[this.jTableDatosRetencion.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					retencionLocal =(Retencion) this.retencions.toArray()[this.jTableDatosRetencion.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				retencionLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
						retencionAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Retencion retencionAux:retencions) {
						retencionAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaRetencion(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosRetencion.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosRetencion.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosRetencion,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualRetencionItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarRetencionParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralRetencionActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingRetencion(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralRetencion.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Retencion retencionAux:this.retencionLogic.getRetencions()) {
				
						if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_PORCENTAJE)) {
							existe=true;
							retencionAux.setporcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE)) {
							existe=true;
							retencionAux.setbase_imponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_VALOR)) {
							existe=true;
							retencionAux.setvalor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NUMERO)) {
							existe=true;
							retencionAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							retencionAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL)) {
							existe=true;
							retencionAux.setdebito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL)) {
							existe=true;
							retencionAux.setcredito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA)) {
							existe=true;
							retencionAux.setdebito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA)) {
							existe=true;
							retencionAux.setcredito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							retencionAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NOMBREBENEF)) {
							existe=true;
							retencionAux.setnombre_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF)) {
							existe=true;
							retencionAux.setdireccion_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_RUCBENEF)) {
							existe=true;
							retencionAux.setruc_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_TELEFONOBENEF)) {
							existe=true;
							retencionAux.settelefono_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							retencionAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_BENEFICIARIO)) {
							existe=true;
							retencionAux.setbeneficiario(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Retencion retencionAux:retencions) {
					
						if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_PORCENTAJE)) {
							existe=true;
							retencionAux.setporcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE)) {
							existe=true;
							retencionAux.setbase_imponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_VALOR)) {
							existe=true;
							retencionAux.setvalor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NUMERO)) {
							existe=true;
							retencionAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							retencionAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL)) {
							existe=true;
							retencionAux.setdebito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL)) {
							existe=true;
							retencionAux.setcredito_mone_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA)) {
							existe=true;
							retencionAux.setdebito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA)) {
							existe=true;
							retencionAux.setcredito_mone_extra(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							retencionAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NOMBREBENEF)) {
							existe=true;
							retencionAux.setnombre_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF)) {
							existe=true;
							retencionAux.setdireccion_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_RUCBENEF)) {
							existe=true;
							retencionAux.setruc_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_TELEFONOBENEF)) {
							existe=true;
							retencionAux.settelefono_benef(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							retencionAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_BENEFICIARIO)) {
							existe=true;
							retencionAux.setbeneficiario(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaRetencion(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesRetencionActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingRetencion(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioRetencion=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesRetencion.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteRetencion) {				
					conSplash=true;//false;										
					
					//this.startProcessRetencion(conSplash);
				
					this.generarReporteRetencionsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoRetencionsSeleccionados();
				//this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoRetencionsSeleccionados(false);
				//this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoRetencionsSeleccionados(true);
				//this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessRetencion();
				
				this.exportarRetencionsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionRetencions();
				//this.importarRetencions();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessRetencion();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelRetencionsSeleccionados();
				//this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Retencion", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessRetencion();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoRetencion)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyRetencion(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
				}	
			} 			
			else if(RetencionBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteRetencion) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessRetencion(conSplash);
					
						//this.actualizarParametrosGeneralRetencion();
						
						this.generarReporteProcesoAccionRetencionsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(RetencionBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO RetencionES SELECCIONADOS?", "MANTENIMIENTO DE Retencion", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessRetencion();
				
						this.actualizarParametrosGeneralRetencion();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.retencionReturnGeneral=retencionLogic.procesarAccionRetencionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.retencionLogic.getRetencions(),this.retencionParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarRetencionReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralRetencion();
					
					RetencionBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarRetencionReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesRetencion.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormRetencion.jComboBoxTiposAccionesFormularioRetencion.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessRetencion(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesRetencionActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessRetencion();
			
			if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
			Retencion retencion=new Retencion();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingRetencion(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesRetencion.getSelectedItem();
			*/
			
			
			
			retencionsSeleccionados=this.getRetencionsSeleccionados(true);
			//this.sTipoAccion;
			
			if(retencionsSeleccionados.size()==1) {
				for(Retencion retencionAux:retencionsSeleccionados) {
					retencion=retencionAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessRetencion();
			
      		//this.finishProcessRetencion(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarRetencionReturnGeneral() throws Exception {
		if(this.retencionReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.retencionReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.retencionReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.retencionReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.retencionReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.retencionReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingRetencion(false);
		}
		
		if(this.retencionReturnGeneral.getConRetornoLista() || this.retencionReturnGeneral.getConRetornoObjeto()) {
			if(this.retencionReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.retencionLogic.setRetencions(this.retencionReturnGeneral.getRetencions());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.retencionReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.retencionLogic.setRetencion(this.retencionReturnGeneral.getRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingRetencion(false);
		}
	}
	
	public void actualizarParametrosGeneralRetencion() throws Exception {
		
		
	}
	
	public ArrayList<Retencion> getRetencionsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioRetencion) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Retencion retencionAux:retencionLogic.getRetencions()) {
					if(retencionAux.getIsSelected()) {
						retencionsSeleccionados.add(retencionAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Retencion retencionAux:this.retencions) {
					if(retencionAux.getIsSelected()) {
						retencionsSeleccionados.add(retencionAux);				
					}
				}
			}
			
			if(retencionsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						retencionsSeleccionados.addAll(this.retencionLogic.getRetencions());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						retencionsSeleccionados.addAll(this.retencions);				
					}
				}
			}
		} else {
			retencionsSeleccionados.add(this.retencion);
		}
		
		return retencionsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteRetencionsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalRetencionsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoRetencionsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoRetencionsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoRetencionsSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Retencion",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteRetencions("Todos",retencionsSeleccionados);
		
	}	
	
	public void generarReporteNormalRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteRetencions("Todos",retencionsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionRetencionsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteRetencions("Todos",retencionsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoRetencion();
		*/
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoRetencion();
		*/
		
		//this.generarReporteRetencions("Todos",retencionsSeleccionados ,retencionImplementable,retencionImplementableHome);
	}
	
	public void mostrarImportacionRetencions() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionRetencion();
		
		this.abrirFrameImportacionRetencion();		
		*/
			
		//this.generarReporteRetencions("Todos",retencionsSeleccionados ,retencionImplementable,retencionImplementableHome);
	}
	
	public void importarRetencions() throws Exception {		
	
	}
	
	public void exportarRetencionsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelRetencionsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoRetencionsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlRetencionsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Retencion",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarRetencion(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Retencion retencionAux:retencionsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarRetencion(retencionAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//retencionAux.setsDetalleGeneralEntityReporte(retencionAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarRetencion(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDTIPORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_PORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_BASEIMPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_VALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_NUMERO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_NOMBREBENEF;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_DIRECCIONBENEF;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_RUCBENEF;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_TELEFONOBENEF;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_IDESTADORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RetencionConstantesFunciones.LABEL_BENEFICIARIO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarRetencion(Retencion retencion,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=retencion.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.gettiporetencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getporcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getbase_imponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getvalor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getnumero();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getdebito_mone_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getcredito_mone_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getdebito_mone_extra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getcredito_mone_extra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getnombre_benef();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getdireccion_benef();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getruc_benef();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.gettelefono_benef();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getcuentacontableretencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getestadoretencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=retencion.getbeneficiario();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Retencions");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelRetencion(row);				
				iRow++;
			}				
			
			for(Retencion retencionAux:retencionsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelRetencion(retencionAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlRetencionsSeleccionados() throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();		
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"retencion.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("retencions");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("retencion");
			//elementRoot.appendChild(element);
		
			for(Retencion retencionAux:retencionsSeleccionados) {
				element = document.createElement("retencion");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlRetencion(retencionAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.retencionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Retencion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelRetencion(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDTIPORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_PORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_BASEIMPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_VALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_NUMERO);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONELOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONELOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_DEBITOMONEEXTRA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_CREDITOMONEEXTRA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_NOMBREBENEF);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_RUCBENEF);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_TELEFONOBENEF);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_IDESTADORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(RetencionConstantesFunciones.LABEL_BENEFICIARIO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelRetencion(Retencion retencion,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.gettiporetencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getporcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getbase_imponible());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getvalor());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getnumero());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getdebito_mone_local());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getcredito_mone_local());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getdebito_mone_extra());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getcredito_mone_extra());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getnombre_benef());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getdireccion_benef());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getruc_benef());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.gettelefono_benef());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getcuentacontableretencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getestadoretencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(retencion.getbeneficiario());				
	}
	
	public void setFilaDatosExportarXmlRetencion(Retencion retencion,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(RetencionConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(retencion.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(RetencionConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(retencion.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(RetencionConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(retencion.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(RetencionConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(retencion.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(RetencionConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(retencion.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(RetencionConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(retencion.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(RetencionConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(retencion.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(RetencionConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(retencion.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementasientocontable_descripcion = document.createElement(RetencionConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(retencion.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementtiporetencion_descripcion = document.createElement(RetencionConstantesFunciones.IDTIPORETENCION);
		elementtiporetencion_descripcion.appendChild(document.createTextNode(retencion.gettiporetencion_descripcion()));
		element.appendChild(elementtiporetencion_descripcion);

		Element elementcliente_descripcion = document.createElement(RetencionConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(retencion.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementporcentaje = document.createElement(RetencionConstantesFunciones.PORCENTAJE);
		elementporcentaje.appendChild(document.createTextNode(retencion.getporcentaje().toString().trim()));
		element.appendChild(elementporcentaje);

		Element elementbase_imponible = document.createElement(RetencionConstantesFunciones.BASEIMPONIBLE);
		elementbase_imponible.appendChild(document.createTextNode(retencion.getbase_imponible().toString().trim()));
		element.appendChild(elementbase_imponible);

		Element elementvalor = document.createElement(RetencionConstantesFunciones.VALOR);
		elementvalor.appendChild(document.createTextNode(retencion.getvalor().toString().trim()));
		element.appendChild(elementvalor);

		Element elementnumero = document.createElement(RetencionConstantesFunciones.NUMERO);
		elementnumero.appendChild(document.createTextNode(retencion.getnumero().trim()));
		element.appendChild(elementnumero);

		Element elementfactura_descripcion = document.createElement(RetencionConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(retencion.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementdescripcion = document.createElement(RetencionConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(retencion.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementdebito_mone_local = document.createElement(RetencionConstantesFunciones.DEBITOMONELOCAL);
		elementdebito_mone_local.appendChild(document.createTextNode(retencion.getdebito_mone_local().toString().trim()));
		element.appendChild(elementdebito_mone_local);

		Element elementcredito_mone_local = document.createElement(RetencionConstantesFunciones.CREDITOMONELOCAL);
		elementcredito_mone_local.appendChild(document.createTextNode(retencion.getcredito_mone_local().toString().trim()));
		element.appendChild(elementcredito_mone_local);

		Element elementdebito_mone_extra = document.createElement(RetencionConstantesFunciones.DEBITOMONEEXTRA);
		elementdebito_mone_extra.appendChild(document.createTextNode(retencion.getdebito_mone_extra().toString().trim()));
		element.appendChild(elementdebito_mone_extra);

		Element elementcredito_mone_extra = document.createElement(RetencionConstantesFunciones.CREDITOMONEEXTRA);
		elementcredito_mone_extra.appendChild(document.createTextNode(retencion.getcredito_mone_extra().toString().trim()));
		element.appendChild(elementcredito_mone_extra);

		Element elementmoneda_descripcion = document.createElement(RetencionConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(retencion.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementcotizacion = document.createElement(RetencionConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(retencion.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementnombre_benef = document.createElement(RetencionConstantesFunciones.NOMBREBENEF);
		elementnombre_benef.appendChild(document.createTextNode(retencion.getnombre_benef().trim()));
		element.appendChild(elementnombre_benef);

		Element elementdireccion_benef = document.createElement(RetencionConstantesFunciones.DIRECCIONBENEF);
		elementdireccion_benef.appendChild(document.createTextNode(retencion.getdireccion_benef().trim()));
		element.appendChild(elementdireccion_benef);

		Element elementruc_benef = document.createElement(RetencionConstantesFunciones.RUCBENEF);
		elementruc_benef.appendChild(document.createTextNode(retencion.getruc_benef().trim()));
		element.appendChild(elementruc_benef);

		Element elementtelefono_benef = document.createElement(RetencionConstantesFunciones.TELEFONOBENEF);
		elementtelefono_benef.appendChild(document.createTextNode(retencion.gettelefono_benef().trim()));
		element.appendChild(elementtelefono_benef);

		Element elementfecha = document.createElement(RetencionConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(retencion.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementcuentacontableretencion_descripcion = document.createElement(RetencionConstantesFunciones.IDCUENTACONTABLERETENCION);
		elementcuentacontableretencion_descripcion.appendChild(document.createTextNode(retencion.getcuentacontableretencion_descripcion()));
		element.appendChild(elementcuentacontableretencion_descripcion);

		Element elementestadoretencion_descripcion = document.createElement(RetencionConstantesFunciones.IDESTADORETENCION);
		elementestadoretencion_descripcion.appendChild(document.createTextNode(retencion.getestadoretencion_descripcion()));
		element.appendChild(elementestadoretencion_descripcion);

		Element elementbeneficiario = document.createElement(RetencionConstantesFunciones.BENEFICIARIO);
		elementbeneficiario.appendChild(document.createTextNode(retencion.getbeneficiario().trim()));
		element.appendChild(elementbeneficiario);
	}
	
	public void generarReporteGroupGenericoRetencionsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Retencion> retencionsSeleccionados=new ArrayList<Retencion>();
		
		retencionsSeleccionados=this.getRetencionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoRetencion(retencionsSeleccionados);
		
		this.generarReporteRetencions("Todos",retencionsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoRetencion(ArrayList<Retencion> retencionsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Retencion retencionAux:retencionsSeleccionados) {
				retencionAux.setsDetalleGeneralEntityReporte(retencionAux.toString());
			
				if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDTIPORETENCION)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.gettiporetencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NUMERO)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getnumero());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_NOMBREBENEF)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getnombre_benef());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_DIRECCIONBENEF)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getdireccion_benef());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_RUCBENEF)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getruc_benef());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_TELEFONOBENEF)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.gettelefono_benef());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(retencionAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getcuentacontableretencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_IDESTADORETENCION)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getestadoretencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RetencionConstantesFunciones.LABEL_BENEFICIARIO)) {
					existe=true;
					retencionAux.setsDescripcionGeneralEntityReporte1(retencionAux.getbeneficiario());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RetencionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesRetencion(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoRetencion=true;
				this.isVisibilidadCeldaNuevoRelacionesRetencion=true;
				this.isVisibilidadCeldaGuardarCambiosRetencion=true;
			}
			
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=true;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=true;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=true;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=true;
			this.isVisibilidadCeldaEliminarRetencion=true;
			this.isVisibilidadCeldaCancelarRetencion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=true;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=true;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=false;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoRetencion=true;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=true;
			this.isVisibilidadCeldaGuardarCambiosRetencion=true;
			this.isVisibilidadCeldaModificarRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=true;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=false;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
			this.isVisibilidadCeldaModificarRetencion=true;
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
			this.isVisibilidadCeldaCancelarRetencion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRetencion=false;
				} else {
					this.isVisibilidadCeldaGuardarRetencion=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(RetencionJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoRetencion=true;
			this.isVisibilidadCeldaNuevoRelacionesRetencion=true;
			this.isVisibilidadCeldaGuardarCambiosRetencion=true;
		} else {
			this.actualizarEstadoPanelsRetencion(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarRetencion=false;
			//this.isVisibilidadCeldaVerFormRetencion=false;
			this.isVisibilidadCeldaDuplicarRetencion=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!retencionSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
		} else {
			this.isVisibilidadCeldaNuevoRetencion=false;
			this.isVisibilidadCeldaGuardarCambiosRetencion=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(retencionSessionBean.getEsGuardarRelacionado()) {
			if(!retencionSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesRetencion=false;												
			}
			
			this.jButtonCerrarRetencion.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesRetencion=false;
		}
		
		if(!this.permiteMantenimiento(this.retencion)) {
			this.isVisibilidadCeldaActualizarRetencion=false;
			this.isVisibilidadCeldaEliminarRetencion=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesRetencion() {
	}
	
	public void actualizarEstadoPanelsRetencion(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(true);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(false);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(false);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(false);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(true);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(true);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionRetencion!=null) {
				this.jScrollPanelDatosEdicionRetencion.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosRetencion!=null) {
				this.jScrollPanelDatosRetencion.setVisible(true);
			}
			
			if(this.jPanelPaginacionRetencion!=null) {
				this.jPanelPaginacionRetencion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.retencionSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasRetencion!=null) {
					this.jTabbedPaneBusquedasRetencion.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.retencionSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasRetencion!=null) {
				this.jTabbedPaneBusquedasRetencion.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesRetencion!=null) {
				this.jPanelParametrosReportesRetencion.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoRetencion(Boolean isParaTipoRetencion){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionNegation=!isParaTipoRetencion;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoRetencion;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdAsientoContable=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdAsientoContable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCuentaContableRetencion(Boolean isParaCuentaContableRetencion){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableRetencionNegation=!isParaCuentaContableRetencion;

			this.isVisibilidadFK_IdAsientoContable=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaCuentaContableRetencion;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEstadoRetencion(Boolean isParaEstadoRetencion){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoRetencionNegation=!isParaEstadoRetencion;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoRetencionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdAsientoContableRetencion);}

			this.isVisibilidadFK_IdCliente=isParaEstadoRetencionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdClienteRetencion);}

			this.isVisibilidadFK_IdCuentaContableRetencion=isParaEstadoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdCuentaContableRetencionRetencion);}

			this.isVisibilidadFK_IdEstadoRetencion=isParaEstadoRetencion;
			if(!this.isVisibilidadFK_IdEstadoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdEstadoRetencionRetencion);}

			this.isVisibilidadFK_IdFactura=isParaEstadoRetencionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdFacturaRetencion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaEstadoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasRetencion.remove(jPanelFK_IdTipoRetencionRetencion);}
		}
		*/
	}
	
	
	
	

	public String registrarSesionRetencionParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(retencionSessionBean==null) {
				retencionSessionBean=new RetencionSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(retencionSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.retencionFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(RetencionConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionRetencion(true);
			//asientocontableSessionBean.setlidRetencionActual(this.idRetencionActual);

			retencionSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRetencion(true);
			retencionSessionBean.setlIdRetencionActualForeignKey(this.idRetencionActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionRetencionParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(retencionSessionBean==null) {
				retencionSessionBean=new RetencionSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(retencionSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.retencionFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(RetencionConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionRetencion(true);
			//clienteSessionBean.setlidRetencionActual(this.idRetencionActual);

			retencionSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRetencion(true);
			retencionSessionBean.setlIdRetencionActualForeignKey(this.idRetencionActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionRetencionParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(retencionSessionBean==null) {
				retencionSessionBean=new RetencionSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(retencionSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.retencionFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(RetencionConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionRetencion(true);
			//facturaSessionBean.setlidRetencionActual(this.idRetencionActual);

			retencionSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRetencion(true);
			retencionSessionBean.setlIdRetencionActualForeignKey(this.idRetencionActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionRetencionParaBusquedaCuentaContableRetencions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(retencionSessionBean==null) {
				retencionSessionBean=new RetencionSessionBean();
			}

			if(cuentacontableretencionSessionBean==null) {
				cuentacontableretencionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableretencionSessionBean.setsPathNavegacionActual(retencionSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableretencionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableretencionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableretencionSessionBean.getisPaginaPopup();
			cuentacontableretencionSessionBean.setisPaginaPopup(false);
			cuentacontableretencionSessionBean.setEstaModoBusqueda(true);
			cuentacontableretencionSessionBean.setsFuncionBusquedaRapida("window.opener.retencionFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion(TO_REPLACE);");
			cuentacontableretencionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableretencionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(RetencionConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionRetencion(true);
			//cuentacontableSessionBean.setlidRetencionActual(this.idRetencionActual);

			retencionSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRetencion(true);
			retencionSessionBean.setlIdRetencionActualForeignKey(this.idRetencionActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//RetencionSessionBean retencionSessionBean=new RetencionSessionBean();
		
		if(this.retencionSessionBean==null) {
			this.retencionSessionBean=new RetencionSessionBean();
		}
		
		this.retencionSessionBean.setsUltimaBusquedaRetencion(this.getsAccionBusqueda());
		this.retencionSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.retencionSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			retencionSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			retencionSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableRetencion")) {
			retencionSessionBean.setid_cuenta_contable_retencion(this.getid_cuenta_contable_retencionFK_IdCuentaContableRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			retencionSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			retencionSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoRetencion")) {
			retencionSessionBean.setid_estado_retencion(this.getid_estado_retencionFK_IdEstadoRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			retencionSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
			retencionSessionBean.setid_moneda(this.getid_monedaFK_IdMoneda());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			retencionSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			retencionSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
			retencionSessionBean.setid_tipo_retencion(this.getid_tipo_retencionFK_IdTipoRetencion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//RetencionSessionBean retencionSessionBean=new RetencionSessionBean();
		
		if(this.retencionSessionBean==null) {
			this.retencionSessionBean=new RetencionSessionBean();
		}
		
		if(this.retencionSessionBean.getsUltimaBusquedaRetencion()!=null&&!this.retencionSessionBean.getsUltimaBusquedaRetencion().equals("")) {
			this.setsAccionBusqueda(retencionSessionBean.getsUltimaBusquedaRetencion());
			this.setiNumeroPaginacion(retencionSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(retencionSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(retencionSessionBean.getid_asiento_contable());
				retencionSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(retencionSessionBean.getid_cliente());
				retencionSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableRetencion")) {
				this.setid_cuenta_contable_retencionFK_IdCuentaContableRetencion(retencionSessionBean.getid_cuenta_contable_retencion());
				retencionSessionBean.setid_cuenta_contable_retencion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(retencionSessionBean.getid_ejercicio());
				retencionSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(retencionSessionBean.getid_empresa());
				retencionSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoRetencion")) {
				this.setid_estado_retencionFK_IdEstadoRetencion(retencionSessionBean.getid_estado_retencion());
				retencionSessionBean.setid_estado_retencion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(retencionSessionBean.getid_factura());
				retencionSessionBean.setid_factura(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
				this.setid_monedaFK_IdMoneda(retencionSessionBean.getid_moneda());
				retencionSessionBean.setid_moneda(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(retencionSessionBean.getid_periodo());
				retencionSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(retencionSessionBean.getid_sucursal());
				retencionSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
				this.setid_tipo_retencionFK_IdTipoRetencion(retencionSessionBean.getid_tipo_retencion());
				retencionSessionBean.setid_tipo_retencion(-1L);
			}
		}
		
		this.retencionSessionBean.setsUltimaBusquedaRetencion("");
		this.retencionSessionBean.setiNumeroPaginacion(RetencionConstantesFunciones.INUMEROPAGINACION);
		this.retencionSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaRetencion(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioRetencion() {
		this.updateBorderResaltarBusquedasFormularioRetencion();
		this.updateVisibilidadBusquedasFormularioRetencion();
		this.updateHabilitarBusquedasFormularioRetencion();
	}
	
	public void updateBorderResaltarBusquedasFormularioRetencion() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasRetencion.getComponents().length>0) {
	

		if(this.retencionConstantesFunciones.resaltarFK_IdAsientoContableRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdAsientoContableRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdAsientoContableRetencion);
			}
		}

		if(this.retencionConstantesFunciones.resaltarFK_IdClienteRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdClienteRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdClienteRetencion);
			}
		}

		if(this.retencionConstantesFunciones.resaltarFK_IdCuentaContableRetencionRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdCuentaContableRetencionRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdCuentaContableRetencionRetencion);
			}
		}

		if(this.retencionConstantesFunciones.resaltarFK_IdEstadoRetencionRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdEstadoRetencionRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdEstadoRetencionRetencion);
			}
		}

		if(this.retencionConstantesFunciones.resaltarFK_IdFacturaRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdFacturaRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdFacturaRetencion);
			}
		}

		if(this.retencionConstantesFunciones.resaltarFK_IdTipoRetencionRetencion!=null) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdTipoRetencionRetencion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdTipoRetencionRetencion);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioRetencion() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasRetencion.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdAsientoContableRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdAsientoContableRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdAsientoContableRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdClienteRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdClienteRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdClienteRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdCuentaContableRetencionRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdCuentaContableRetencionRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdCuentaContableRetencionRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdEstadoRetencionRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdEstadoRetencionRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdEstadoRetencionRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdFacturaRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdFacturaRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdFacturaRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdTipoRetencionRetencion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.retencionConstantesFunciones.mostrarFK_IdTipoRetencionRetencion);
			if(!this.retencionConstantesFunciones.mostrarFK_IdTipoRetencionRetencion && index>-1) {
				this.jTabbedPaneBusquedasRetencion.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioRetencion() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasRetencion.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdAsientoContableRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdAsientoContableRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdAsientoContableRetencion);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdClienteRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdClienteRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdClienteRetencion);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdCuentaContableRetencionRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdCuentaContableRetencionRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdCuentaContableRetencionRetencion);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdEstadoRetencionRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdEstadoRetencionRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdEstadoRetencionRetencion);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdFacturaRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdFacturaRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdFacturaRetencion);
			}

			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdTipoRetencionRetencion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.retencionConstantesFunciones.activarFK_IdTipoRetencionRetencion);
				this.jTabbedPaneBusquedasRetencion.setEnabledAt(index,this.retencionConstantesFunciones.activarFK_IdTipoRetencionRetencion);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaRetencion(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdAsientoContableRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdAsientoContableRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdAsientoContableRetencion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdClienteRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdClienteRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdClienteRetencion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableRetencion")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdCuentaContableRetencionRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdCuentaContableRetencionRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdCuentaContableRetencionRetencion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoRetencion")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdEstadoRetencionRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdEstadoRetencionRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdEstadoRetencionRetencion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdFacturaRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdFacturaRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdFacturaRetencion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencion")) {
			index= this.jTabbedPaneBusquedasRetencion.indexOfComponent(this.jPanelFK_IdTipoRetencionRetencion);

			this.jTabbedPaneBusquedasRetencion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRetencion.getComponent(index);

			this.retencionConstantesFunciones.setResaltarFK_IdTipoRetencionRetencion(resaltar);

			jPanel.setBorder(this.retencionConstantesFunciones.resaltarFK_IdTipoRetencionRetencion);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarRetencion.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioRetencion() throws Exception {

		if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioRetencion();
		this.updateVisibilidadResaltarControlesFormularioRetencion();
		this.updateHabilitarResaltarControlesFormularioRetencion();
		
	}
	
	public void updateBorderResaltarControlesFormularioRetencion() throws Exception {
		if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.retencionConstantesFunciones.resaltaridRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setBorder(this.retencionConstantesFunciones.resaltaridRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_empresaRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_empresaRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_sucursalRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_sucursalRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_ejercicioRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_ejercicioRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_periodoRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_periodoRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_anioRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_anioRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_mesRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_mesRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_asiento_contableRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_asiento_contableRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_tipo_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_tipo_retencionRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_clienteRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_clienteRetencion);}
		if(this.retencionConstantesFunciones.resaltarporcentajeRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setBorder(this.retencionConstantesFunciones.resaltarporcentajeRetencion);}
		if(this.retencionConstantesFunciones.resaltarbase_imponibleRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setBorder(this.retencionConstantesFunciones.resaltarbase_imponibleRetencion);}
		if(this.retencionConstantesFunciones.resaltarvalorRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setBorder(this.retencionConstantesFunciones.resaltarvalorRetencion);}
		if(this.retencionConstantesFunciones.resaltarnumeroRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setBorder(this.retencionConstantesFunciones.resaltarnumeroRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_facturaRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_facturaRetencion);}
		if(this.retencionConstantesFunciones.resaltardescripcionRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setBorder(this.retencionConstantesFunciones.resaltardescripcionRetencion);}
		if(this.retencionConstantesFunciones.resaltardebito_mone_localRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setBorder(this.retencionConstantesFunciones.resaltardebito_mone_localRetencion);}
		if(this.retencionConstantesFunciones.resaltarcredito_mone_localRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setBorder(this.retencionConstantesFunciones.resaltarcredito_mone_localRetencion);}
		if(this.retencionConstantesFunciones.resaltardebito_mone_extraRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setBorder(this.retencionConstantesFunciones.resaltardebito_mone_extraRetencion);}
		if(this.retencionConstantesFunciones.resaltarcredito_mone_extraRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setBorder(this.retencionConstantesFunciones.resaltarcredito_mone_extraRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_monedaRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_monedaRetencion);}
		if(this.retencionConstantesFunciones.resaltarcotizacionRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setBorder(this.retencionConstantesFunciones.resaltarcotizacionRetencion);}
		if(this.retencionConstantesFunciones.resaltarnombre_benefRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setBorder(this.retencionConstantesFunciones.resaltarnombre_benefRetencion);}
		if(this.retencionConstantesFunciones.resaltardireccion_benefRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setBorder(this.retencionConstantesFunciones.resaltardireccion_benefRetencion);}
		if(this.retencionConstantesFunciones.resaltarruc_benefRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setBorder(this.retencionConstantesFunciones.resaltarruc_benefRetencion);}
		if(this.retencionConstantesFunciones.resaltartelefono_benefRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setBorder(this.retencionConstantesFunciones.resaltartelefono_benefRetencion);}
		if(this.retencionConstantesFunciones.resaltarfechaRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jDateChooserfechaRetencion.setBorder(this.retencionConstantesFunciones.resaltarfechaRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_cuenta_contable_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_cuenta_contable_retencionRetencion);}
		if(this.retencionConstantesFunciones.resaltarid_estado_retencionRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setBorder(this.retencionConstantesFunciones.resaltarid_estado_retencionRetencion);}
		if(this.retencionConstantesFunciones.resaltarbeneficiarioRetencion!=null && this.jInternalFrameDetalleFormRetencion!=null) {this.jInternalFrameDetalleFormRetencion.jTextAreabeneficiarioRetencion.setBorder(this.retencionConstantesFunciones.resaltarbeneficiarioRetencion);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioRetencion() throws Exception {		
		if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
	
		//this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setVisible(this.retencionConstantesFunciones.mostraridRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelidRetencion.setVisible(this.retencionConstantesFunciones.mostraridRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_empresaRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_empresaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_empresaRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_sucursalRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_sucursalRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_sucursalRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_ejercicioRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_ejercicioRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_ejercicioRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_periodoRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_periodoRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_periodoRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_anioRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_anioRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_anioRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_mesRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_mesRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_mesRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_asiento_contableRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_asiento_contableRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_asiento_contableRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_asiento_contableRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_tipo_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_tipo_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_tipo_retencionRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_clienteRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_clienteRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_clienteRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_clienteRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setVisible(this.retencionConstantesFunciones.mostrarporcentajeRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelporcentajeRetencion.setVisible(this.retencionConstantesFunciones.mostrarporcentajeRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setVisible(this.retencionConstantesFunciones.mostrarbase_imponibleRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelbase_imponibleRetencion.setVisible(this.retencionConstantesFunciones.mostrarbase_imponibleRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setVisible(this.retencionConstantesFunciones.mostrarvalorRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelvalorRetencion.setVisible(this.retencionConstantesFunciones.mostrarvalorRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setVisible(this.retencionConstantesFunciones.mostrarnumeroRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelnumeroRetencion.setVisible(this.retencionConstantesFunciones.mostrarnumeroRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_facturaRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_facturaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_facturaRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_facturaRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setVisible(this.retencionConstantesFunciones.mostrardescripcionRetencion);
		this.jInternalFrameDetalleFormRetencion.jPaneldescripcionRetencion.setVisible(this.retencionConstantesFunciones.mostrardescripcionRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setVisible(this.retencionConstantesFunciones.mostrardebito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jPaneldebito_mone_localRetencion.setVisible(this.retencionConstantesFunciones.mostrardebito_mone_localRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setVisible(this.retencionConstantesFunciones.mostrarcredito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelcredito_mone_localRetencion.setVisible(this.retencionConstantesFunciones.mostrarcredito_mone_localRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setVisible(this.retencionConstantesFunciones.mostrardebito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jPaneldebito_mone_extraRetencion.setVisible(this.retencionConstantesFunciones.mostrardebito_mone_extraRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setVisible(this.retencionConstantesFunciones.mostrarcredito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelcredito_mone_extraRetencion.setVisible(this.retencionConstantesFunciones.mostrarcredito_mone_extraRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_monedaRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_monedaRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_monedaRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setVisible(this.retencionConstantesFunciones.mostrarcotizacionRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelcotizacionRetencion.setVisible(this.retencionConstantesFunciones.mostrarcotizacionRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrarnombre_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelnombre_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrarnombre_benefRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrardireccion_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jPaneldireccion_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrardireccion_benefRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrarruc_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelruc_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrarruc_benefRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrartelefono_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jPaneltelefono_benefRetencion.setVisible(this.retencionConstantesFunciones.mostrartelefono_benefRetencion);
		//this.jInternalFrameDetalleFormRetencion.jDateChooserfechaRetencion.setVisible(this.retencionConstantesFunciones.mostrarfechaRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelfechaRetencion.setVisible(this.retencionConstantesFunciones.mostrarfechaRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_cuenta_contable_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_cuenta_contable_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_cuenta_contable_retencionRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_cuenta_contable_retencionRetencion);
		//this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_estado_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelid_estado_retencionRetencion.setVisible(this.retencionConstantesFunciones.mostrarid_estado_retencionRetencion);
		//this.jInternalFrameDetalleFormRetencion.jTextAreabeneficiarioRetencion.setVisible(this.retencionConstantesFunciones.mostrarbeneficiarioRetencion);
		this.jInternalFrameDetalleFormRetencion.jPanelbeneficiarioRetencion.setVisible(this.retencionConstantesFunciones.mostrarbeneficiarioRetencion);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioRetencion() throws Exception {
		if(this.jInternalFrameDetalleFormRetencion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormRetencion!=null) {
	
		this.jInternalFrameDetalleFormRetencion.jLabelidRetencion.setEnabled(this.retencionConstantesFunciones.activaridRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_empresaRetencion.setEnabled(this.retencionConstantesFunciones.activarid_empresaRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_sucursalRetencion.setEnabled(this.retencionConstantesFunciones.activarid_sucursalRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_ejercicioRetencion.setEnabled(this.retencionConstantesFunciones.activarid_ejercicioRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_periodoRetencion.setEnabled(this.retencionConstantesFunciones.activarid_periodoRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_anioRetencion.setEnabled(this.retencionConstantesFunciones.activarid_anioRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_mesRetencion.setEnabled(this.retencionConstantesFunciones.activarid_mesRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_asiento_contableRetencion.setEnabled(this.retencionConstantesFunciones.activarid_asiento_contableRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_asiento_contableRetencion.setEnabled(this.retencionConstantesFunciones.activarid_asiento_contableRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_tipo_retencionRetencion.setEnabled(this.retencionConstantesFunciones.activarid_tipo_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_clienteRetencion.setEnabled(this.retencionConstantesFunciones.activarid_clienteRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_clienteRetencion.setEnabled(this.retencionConstantesFunciones.activarid_clienteRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldporcentajeRetencion.setEnabled(this.retencionConstantesFunciones.activarporcentajeRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldbase_imponibleRetencion.setEnabled(this.retencionConstantesFunciones.activarbase_imponibleRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldvalorRetencion.setEnabled(this.retencionConstantesFunciones.activarvalorRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldnumeroRetencion.setEnabled(this.retencionConstantesFunciones.activarnumeroRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_facturaRetencion.setEnabled(this.retencionConstantesFunciones.activarid_facturaRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_facturaRetencion.setEnabled(this.retencionConstantesFunciones.activarid_facturaRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreadescripcionRetencion.setEnabled(this.retencionConstantesFunciones.activardescripcionRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_localRetencion.setEnabled(this.retencionConstantesFunciones.activardebito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_localRetencion.setEnabled(this.retencionConstantesFunciones.activarcredito_mone_localRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFielddebito_mone_extraRetencion.setEnabled(this.retencionConstantesFunciones.activardebito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcredito_mone_extraRetencion.setEnabled(this.retencionConstantesFunciones.activarcredito_mone_extraRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_monedaRetencion.setEnabled(this.retencionConstantesFunciones.activarid_monedaRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldcotizacionRetencion.setEnabled(this.retencionConstantesFunciones.activarcotizacionRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreanombre_benefRetencion.setEnabled(this.retencionConstantesFunciones.activarnombre_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreadireccion_benefRetencion.setEnabled(this.retencionConstantesFunciones.activardireccion_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextFieldruc_benefRetencion.setEnabled(this.retencionConstantesFunciones.activarruc_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreatelefono_benefRetencion.setEnabled(this.retencionConstantesFunciones.activartelefono_benefRetencion);
		this.jInternalFrameDetalleFormRetencion.jDateChooserfechaRetencion.setEnabled(this.retencionConstantesFunciones.activarfechaRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_cuenta_contable_retencionRetencion.setEnabled(this.retencionConstantesFunciones.activarid_cuenta_contable_retencionRetencion);
			this.jInternalFrameDetalleFormRetencion.jButtonid_cuenta_contable_retencionRetencion.setEnabled(this.retencionConstantesFunciones.activarid_cuenta_contable_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jComboBoxid_estado_retencionRetencion.setEnabled(this.retencionConstantesFunciones.activarid_estado_retencionRetencion);
		this.jInternalFrameDetalleFormRetencion.jTextAreabeneficiarioRetencion.setEnabled(this.retencionConstantesFunciones.activarbeneficiarioRetencion);
		}
	}
	
		
}