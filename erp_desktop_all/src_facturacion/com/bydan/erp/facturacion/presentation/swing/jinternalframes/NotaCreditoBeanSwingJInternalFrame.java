/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.NotaCreditoConstantesFunciones;
import com.bydan.erp.facturacion.util.NotaCreditoParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.NotaCreditoParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.NotaCreditoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class NotaCreditoBeanSwingJInternalFrame extends NotaCreditoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(NotaCreditoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<NotaCredito> notacreditoValidator = new ClassValidator<NotaCredito>(NotaCredito.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public NotaCredito notacredito;	
	public NotaCredito notacreditoAux;
	public NotaCredito notacreditoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public NotaCredito notacreditoTotales;
	public Long idNotaCreditoActual;
	public Long iIdNuevoNotaCredito=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboResponsable="";

	public List<Responsable> responsablesForeignKey;

	public List<Responsable> getresponsablesForeignKey() {
		return responsablesForeignKey;
	}

	public void setresponsablesForeignKey(List<Responsable> responsablesForeignKey) {
		this.responsablesForeignKey = responsablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Responsable responsableForeignKey;

	public Responsable getresponsableForeignKey() {
		return responsableForeignKey;
	}

	public void setresponsableForeignKey(Responsable responsableForeignKey) {
		this.responsableForeignKey = responsableForeignKey;
	}

	public String sFinalQueryComboEstadoNotaCredito="";

	public List<EstadoNotaCredito> estadonotacreditosForeignKey;

	public List<EstadoNotaCredito> getestadonotacreditosForeignKey() {
		return estadonotacreditosForeignKey;
	}

	public void setestadonotacreditosForeignKey(List<EstadoNotaCredito> estadonotacreditosForeignKey) {
		this.estadonotacreditosForeignKey = estadonotacreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoNotaCredito estadonotacreditoForeignKey;

	public EstadoNotaCredito getestadonotacreditoForeignKey() {
		return estadonotacreditoForeignKey;
	}

	public void setestadonotacreditoForeignKey(EstadoNotaCredito estadonotacreditoForeignKey) {
		this.estadonotacreditoForeignKey = estadonotacreditoForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

	public String sFinalQueryComboTransporte="";

	public List<Transporte> transportesForeignKey;

	public List<Transporte> gettransportesForeignKey() {
		return transportesForeignKey;
	}

	public void settransportesForeignKey(List<Transporte> transportesForeignKey) {
		this.transportesForeignKey = transportesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transporte transporteForeignKey;

	public Transporte gettransporteForeignKey() {
		return transporteForeignKey;
	}

	public void settransporteForeignKey(Transporte transporteForeignKey) {
		this.transporteForeignKey = transporteForeignKey;
	}

	public String sFinalQueryComboTransportista="";

	public List<Transportista> transportistasForeignKey;

	public List<Transportista> gettransportistasForeignKey() {
		return transportistasForeignKey;
	}

	public void settransportistasForeignKey(List<Transportista> transportistasForeignKey) {
		this.transportistasForeignKey = transportistasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transportista transportistaForeignKey;

	public Transportista gettransportistaForeignKey() {
		return transportistaForeignKey;
	}

	public void settransportistaForeignKey(Transportista transportistaForeignKey) {
		this.transportistaForeignKey = transportistaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idVendedorActual=0L;

	public Long getidVendedorActual() {
		return idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual= idVendedorActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	
	

	public Boolean isTienePermisosDetaNotaCredito=false;

	public Boolean getIsTienePermisosDetaNotaCredito() {
		return isTienePermisosDetaNotaCredito;
	}

	public void setIsTienePermisosDetaNotaCredito(Boolean isTienePermisosDetaNotaCredito) {
		this.isTienePermisosDetaNotaCredito= isTienePermisosDetaNotaCredito;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoNotaCredito;
	public Boolean isPermisoNuevoNotaCredito;
	public Boolean isPermisoActualizarNotaCredito;
	public Boolean isPermisoActualizarOriginalNotaCredito;
	public Boolean isPermisoEliminarNotaCredito;
	public Boolean isPermisoGuardarCambiosNotaCredito;
	public Boolean isPermisoConsultaNotaCredito;
	public Boolean isPermisoBusquedaNotaCredito;
	public Boolean isPermisoReporteNotaCredito;
	public Boolean isPermisoPaginacionMedioNotaCredito;
	public Boolean isPermisoPaginacionAltoNotaCredito;
	public Boolean isPermisoPaginacionTodoNotaCredito;
	public Boolean isPermisoCopiarNotaCredito;
	public Boolean isPermisoVerFormNotaCredito;
	public Boolean isPermisoDuplicarNotaCredito;
	public Boolean isPermisoOrdenNotaCredito;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public NotaCreditoParameterReturnGeneral notacreditoReturnGeneral;
	public NotaCreditoParameterReturnGeneral notacreditoParameterGeneral;
	
	

	public DetaNotaCreditoLogic detanotacreditoLogic=null;

	public DetaNotaCreditoLogic getDetaNotaCreditoLogic() {
		return detanotacreditoLogic;
	}

	public void setDetaNotaCreditoLogic(DetaNotaCreditoLogic detanotacreditoLogic) {
		this.detanotacreditoLogic = detanotacreditoLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoNotaCredito=false;
	public Boolean esParaAccionDesdeFormularioNotaCredito=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected NotaCreditoSessionBeanAdditional notacreditoSessionBeanAdditional=null;
	
	public NotaCreditoSessionBeanAdditional getNotaCreditoSessionBeanAdditional() {
		return this.notacreditoSessionBeanAdditional;
	}
	
	public void setNotaCreditoSessionBeanAdditional(NotaCreditoSessionBeanAdditional notacreditoSessionBeanAdditional) {
		try {
			this.notacreditoSessionBeanAdditional=notacreditoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected NotaCreditoBeanSwingJInternalFrameAdditional notacreditoBeanSwingJInternalFrameAdditional=null;
	//public class NotaCreditoBeanSwingJInternalFrame
	
	public NotaCreditoBeanSwingJInternalFrameAdditional getNotaCreditoBeanSwingJInternalFrameAdditional() {
		return this.notacreditoBeanSwingJInternalFrameAdditional;
	}
	
	public void setNotaCreditoBeanSwingJInternalFrameAdditional(NotaCreditoBeanSwingJInternalFrameAdditional notacreditoBeanSwingJInternalFrameAdditional) {
		try {
			this.notacreditoBeanSwingJInternalFrameAdditional=notacreditoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public NotaCreditoLogic notacreditoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public NotaCredito notacreditoBean;
	public NotaCreditoConstantesFunciones notacreditoConstantesFunciones;
	//public NotaCreditoParameterReturnGeneral notacreditoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public MonedaLogic monedaLogic;
	public EmpleadoLogic empleadoLogic;
	public FormatoLogic formatoLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public ClienteLogic clienteLogic;
	public FacturaLogic facturaLogic;
	public VendedorLogic vendedorLogic;
	public ResponsableLogic responsableLogic;
	public EstadoNotaCreditoLogic estadonotacreditoLogic;
	public CentroCostoLogic centrocostoLogic;
	public TipoCambioLogic tipocambioLogic;
	public TransporteLogic transporteLogic;
	public TransportistaLogic transportistaLogic;
	
	//PARAMETROS
	
	
	//public List<NotaCredito> notacreditos;	
	//public List<NotaCredito> notacreditosEliminados;
	//public List<NotaCredito> notacreditosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoNotaCredito=false;
	public Boolean isVisibilidadCeldaDuplicarNotaCredito=true;
	public Boolean isVisibilidadCeldaCopiarNotaCredito=true;
	public Boolean isVisibilidadCeldaVerFormNotaCredito=true;
	public Boolean isVisibilidadCeldaOrdenNotaCredito=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
	public Boolean isVisibilidadCeldaModificarNotaCredito=false;
	public Boolean isVisibilidadCeldaActualizarNotaCredito=false;
	public Boolean isVisibilidadCeldaEliminarNotaCredito=false;
	public Boolean isVisibilidadCeldaCancelarNotaCredito=false;
	public Boolean isVisibilidadCeldaGuardarNotaCredito=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosNotaCredito=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNumeroPreImpreso=false;
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdNotaCredito=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdResponsable=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdTransporte=false;
	public Boolean isVisibilidadFK_IdTransportista=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoNotaCredito() {
		return this.iIdNuevoNotaCredito;
	}

	public void setiIdNuevoNotaCredito(Long iIdNuevoNotaCredito) {
		this.iIdNuevoNotaCredito = iIdNuevoNotaCredito;
	}
	
	public Long getidNotaCreditoActual() {
		return this.idNotaCreditoActual;
	}

	public void setidNotaCreditoActual(Long idNotaCreditoActual) {
		this.idNotaCreditoActual = idNotaCreditoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public NotaCredito getnotacredito() {
		return this.notacredito;
	}

	public void setnotacredito(NotaCredito notacredito) {
		this.notacredito = notacredito;
	}
	
	public NotaCredito getnotacreditoAux() {
		return this.notacreditoAux;
	}

	public void setnotacreditoAux(NotaCredito notacreditoAux) {
		this.notacreditoAux = notacreditoAux;
	}				
	
	public NotaCredito getnotacreditoAnterior() {
		return this.notacreditoAnterior;
	}

	public void setnotacreditoAnterior(NotaCredito notacreditoAnterior) {
		this.notacreditoAnterior = notacreditoAnterior;
	}	
	
	public NotaCredito getnotacreditoTotales() {
		return this.notacreditoTotales;
	}

	public void setnotacreditoTotales(NotaCredito notacreditoTotales) {
		this.notacreditoTotales = notacreditoTotales;
	}	
	
	public NotaCredito getnotacreditoBean() {
		return this.notacreditoBean;
	}

	public void setnotacreditoBean(NotaCredito notacreditoBean) {
		this.notacreditoBean = notacreditoBean;
	}	
	
	public NotaCreditoParameterReturnGeneral getnotacreditoReturnGeneral() {
		return this.notacreditoReturnGeneral;
	}

	public void setnotacreditoReturnGeneral(NotaCreditoParameterReturnGeneral notacreditoReturnGeneral) {
		this.notacreditoReturnGeneral = notacreditoReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String numeroBusquedaPorNumeroPreImpreso="";

	public String getnumeroBusquedaPorNumeroPreImpreso() {
		return this.numeroBusquedaPorNumeroPreImpreso;
	}

	public void setnumeroBusquedaPorNumeroPreImpreso(String numeroBusquedaPorNumeroPreImpreso) {
		this.numeroBusquedaPorNumeroPreImpreso = numeroBusquedaPorNumeroPreImpreso;
	}

	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_formatoFK_IdFormato=null;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_estado_nota_creditoFK_IdNotaCredito=-1L;

	public Long getid_estado_nota_creditoFK_IdNotaCredito() {
		return this.id_estado_nota_creditoFK_IdNotaCredito;
	}

	public void setid_estado_nota_creditoFK_IdNotaCredito(Long id_estado_nota_creditoFK_IdNotaCredito) {
		this.id_estado_nota_creditoFK_IdNotaCredito = id_estado_nota_creditoFK_IdNotaCredito;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_responsableFK_IdResponsable=-1L;

	public Long getid_responsableFK_IdResponsable() {
		return this.id_responsableFK_IdResponsable;
	}

	public void setid_responsableFK_IdResponsable(Long id_responsableFK_IdResponsable) {
		this.id_responsableFK_IdResponsable = id_responsableFK_IdResponsable;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_transporteFK_IdTransporte=null;

	public Long getid_transporteFK_IdTransporte() {
		return this.id_transporteFK_IdTransporte;
	}

	public void setid_transporteFK_IdTransporte(Long id_transporteFK_IdTransporte) {
		this.id_transporteFK_IdTransporte = id_transporteFK_IdTransporte;
	}

	public Long id_transportistaFK_IdTransportista=null;

	public Long getid_transportistaFK_IdTransportista() {
		return this.id_transportistaFK_IdTransportista;
	}

	public void setid_transportistaFK_IdTransportista(Long id_transportistaFK_IdTransportista) {
		this.id_transportistaFK_IdTransportista = id_transportistaFK_IdTransportista;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=null;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public NotaCreditoLogic getNotaCreditoLogic()	{		
		return notacreditoLogic;
	}

	public void setNotaCreditoLogic(NotaCreditoLogic notacreditoLogic) {
		this.notacreditoLogic = notacreditoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoNotaCredito() {
		return isEsNuevoNotaCredito;
	}

	public void setIsEsNuevoNotaCredito(Boolean isEsNuevoNotaCredito) {
		this.isEsNuevoNotaCredito = isEsNuevoNotaCredito;
	}

	public Boolean getEsParaAccionDesdeFormularioNotaCredito() {
		return esParaAccionDesdeFormularioNotaCredito;
	}
	
	public void setEsParaAccionDesdeFormularioNotaCredito(Boolean esParaAccionDesdeFormularioNotaCredito) {
		this.esParaAccionDesdeFormularioNotaCredito = esParaAccionDesdeFormularioNotaCredito;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(notacreditoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(notacreditoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(notacreditoSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(notacreditoSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(notacreditoSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(notacreditoSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(notacreditoSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(notacreditoSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(notacreditoSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Formato formatoNulo = new Formato();

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.formatosForeignKey.add(0, formatoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(notacreditoSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(notacreditoSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(notacreditoSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(notacreditoSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Vendedor vendedorNulo = new Vendedor();

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.vendedorsForeignKey.add(0, vendedorNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(notacreditoSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosResponsablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.responsablesForeignKey=new ArrayList<Responsable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Responsable responsableNulo = new Responsable();

			ResponsableLogic responsableLogic=new ResponsableLogic();

			//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//responsableLogic.getResponsableDataAccess().setIsForForeingKeyData(true);

					responsableLogic.getTodosResponsablesWithConnection(sFinalQuery,new Pagination());

					this.responsablesForeignKey=responsableLogic.getResponsables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.responsablesForeignKey.add(0, responsableNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaResponsable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					responsableLogic.getEntityWithConnection(notacreditoSessionBean.getlidResponsableActual());
					this.responsablesForeignKey.add(responsableLogic.getResponsable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoNotaCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadonotacreditosForeignKey=new ArrayList<EstadoNotaCredito>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoNotaCreditoLogic estadonotacreditoLogic=new EstadoNotaCreditoLogic();

			//estadonotacreditoLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadonotacreditoLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

					estadonotacreditoLogic.getTodosEstadoNotaCreditosWithConnection(sFinalQuery,new Pagination());

					this.estadonotacreditosForeignKey=estadonotacreditoLogic.getEstadoNotaCreditos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoNotaCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadonotacreditoLogic.getEntityWithConnection(notacreditoSessionBean.getlidEstadoNotaCreditoActual());
					this.estadonotacreditosForeignKey.add(estadonotacreditoLogic.getEstadoNotaCredito());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(notacreditoSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambio tipocambioNulo = new TipoCambio();

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipocambiosForeignKey.add(0, tipocambioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(notacreditoSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportesForeignKey=new ArrayList<Transporte>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transporte transporteNulo = new Transporte();

			TransporteLogic transporteLogic=new TransporteLogic();

			//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transporteLogic.getTransporteDataAccess().setIsForForeingKeyData(true);

					transporteLogic.getTodosTransportesWithConnection(sFinalQuery,new Pagination());

					this.transportesForeignKey=transporteLogic.getTransportes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportesForeignKey.add(0, transporteNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransporte(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transporteLogic.getEntityWithConnection(notacreditoSessionBean.getlidTransporteActual());
					this.transportesForeignKey.add(transporteLogic.getTransporte());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransportistasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transportistasForeignKey=new ArrayList<Transportista>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Transportista transportistaNulo = new Transportista();

			TransportistaLogic transportistaLogic=new TransportistaLogic();

			//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transportistaLogic.getTransportistaDataAccess().setIsForForeingKeyData(true);

					transportistaLogic.getTodosTransportistasWithConnection(sFinalQuery,new Pagination());

					this.transportistasForeignKey=transportistaLogic.getTransportistas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.transportistasForeignKey.add(0, transportistaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransportista(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transportistaLogic.getEntityWithConnection(notacreditoSessionBean.getlidTransportistaActual());
					this.transportistasForeignKey.add(transportistaLogic.getTransportista());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaNotaCredito.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaNotaCreditoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaNotaCreditoGenerico!=null && jComboBoxid_empresaNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_empresaNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalNotaCredito.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalNotaCreditoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalNotaCreditoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalNotaCreditoGenerico!=null && jComboBoxid_sucursalNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioNotaCredito.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioNotaCreditoGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioNotaCreditoGenerico!=null && jComboBoxid_ejercicioNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoNotaCredito.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoNotaCreditoGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoNotaCreditoGenerico!=null && jComboBoxid_periodoNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_periodoNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioNotaCredito.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioNotaCreditoGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioNotaCreditoGenerico!=null && jComboBoxid_anioNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_anioNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesNotaCredito.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesNotaCreditoGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesNotaCreditoGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesNotaCreditoGenerico!=null && jComboBoxid_mesNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_mesNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioNotaCredito.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioNotaCreditoGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioNotaCreditoGenerico!=null && jComboBoxid_usuarioNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_usuarioNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaNotaCredito.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaNotaCreditoGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaNotaCreditoGenerico!=null && jComboBoxid_monedaNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_monedaNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoNotaCredito.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoNotaCreditoGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoNotaCreditoGenerico!=null && jComboBoxid_empleadoNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_empleadoNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoNotaCredito.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoNotaCreditoGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoNotaCreditoGenerico!=null && jComboBoxid_formatoNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_formatoNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioNotaCredito.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioNotaCreditoGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioNotaCreditoGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioNotaCreditoGenerico!=null && jComboBoxid_tipo_precioNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteNotaCredito.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteNotaCredito!=null) {
						jComboBoxid_clienteFK_IdClienteNotaCredito.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteNotaCredito!=null) {
							//jComboBoxid_clienteFK_IdClienteNotaCredito.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteNotaCredito.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteNotaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteNotaCreditoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteNotaCreditoGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteNotaCreditoGenerico!=null && jComboBoxid_clienteNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_clienteNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaNotaCredito.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaNotaCredito!=null) {
						jComboBoxid_facturaFK_IdFacturaNotaCredito.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaNotaCredito!=null) {
							//jComboBoxid_facturaFK_IdFacturaNotaCredito.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaNotaCredito.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaNotaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaNotaCreditoGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaNotaCreditoGenerico!=null && jComboBoxid_facturaNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_facturaNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorNotaCredito.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorNotaCredito!=null) {
						jComboBoxid_vendedorFK_IdVendedorNotaCredito.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorNotaCredito!=null) {
							//jComboBoxid_vendedorFK_IdVendedorNotaCredito.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorNotaCredito.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorNotaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorNotaCreditoGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorNotaCreditoGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorNotaCreditoGenerico!=null && jComboBoxid_vendedorNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_vendedorNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualResponsableForeignKey(Long idResponsableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(responsableTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setResponsable(responsableTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setSelectedItem(responsableTemp);
					}
				} else {
					//jComboBoxid_responsableNotaCredito.setSelectedItem(responsableTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualResponsableForeignKeyDescripcion(Long idResponsableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}


			sDescripcion=ResponsableConstantesFunciones.getResponsableDescripcion(responsableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualResponsableForeignKeyGenerico(Long idResponsableSeleccionado,JComboBox jComboBoxid_responsableNotaCreditoGenerico)throws Exception
	{
		try
		{
			Responsable  responsableTemp=null;

			for(Responsable responsableAux:responsablesForeignKey) {
				if(responsableAux.getId()!=null && responsableAux.getId().equals(idResponsableSeleccionado)) {
					responsableTemp=responsableAux;
					break;
				}
			}

			if(responsableTemp!=null) {
				jComboBoxid_responsableNotaCreditoGenerico.setSelectedItem(responsableTemp);
			} else {
				if(jComboBoxid_responsableNotaCreditoGenerico!=null && jComboBoxid_responsableNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_responsableNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoNotaCreditoForeignKey(Long idEstadoNotaCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditoTemp=null;

			for(EstadoNotaCredito estadonotacreditoAux:estadonotacreditosForeignKey) {
				if(estadonotacreditoAux.getId()!=null && estadonotacreditoAux.getId().equals(idEstadoNotaCreditoSeleccionado)) {
					estadonotacreditoTemp=estadonotacreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadonotacreditoTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setEstadoNotaCredito(estadonotacreditoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setSelectedItem(estadonotacreditoTemp);
					}
				} else {
					//jComboBoxid_estado_nota_creditoNotaCredito.setSelectedItem(estadonotacreditoTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoNotaCreditoForeignKeyDescripcion(Long idEstadoNotaCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoNotaCredito  estadonotacreditoTemp=null;

			for(EstadoNotaCredito estadonotacreditoAux:estadonotacreditosForeignKey) {
				if(estadonotacreditoAux.getId()!=null && estadonotacreditoAux.getId().equals(idEstadoNotaCreditoSeleccionado)) {
					estadonotacreditoTemp=estadonotacreditoAux;
					break;
				}
			}


			sDescripcion=EstadoNotaCreditoConstantesFunciones.getEstadoNotaCreditoDescripcion(estadonotacreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoNotaCreditoForeignKeyGenerico(Long idEstadoNotaCreditoSeleccionado,JComboBox jComboBoxid_estado_nota_creditoNotaCreditoGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditoTemp=null;

			for(EstadoNotaCredito estadonotacreditoAux:estadonotacreditosForeignKey) {
				if(estadonotacreditoAux.getId()!=null && estadonotacreditoAux.getId().equals(idEstadoNotaCreditoSeleccionado)) {
					estadonotacreditoTemp=estadonotacreditoAux;
					break;
				}
			}

			if(estadonotacreditoTemp!=null) {
				jComboBoxid_estado_nota_creditoNotaCreditoGenerico.setSelectedItem(estadonotacreditoTemp);
			} else {
				if(jComboBoxid_estado_nota_creditoNotaCreditoGenerico!=null && jComboBoxid_estado_nota_creditoNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_estado_nota_creditoNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoNotaCredito.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoNotaCreditoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoNotaCreditoGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoNotaCreditoGenerico!=null && jComboBoxid_centro_costoNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioNotaCredito.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioNotaCreditoGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioNotaCreditoGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioNotaCreditoGenerico!=null && jComboBoxid_tipo_cambioNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransporteForeignKey(Long idTransporteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transporteTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setTransporte(transporteTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setSelectedItem(transporteTemp);
					}
				} else {
					//jComboBoxid_transporteNotaCredito.setSelectedItem(transporteTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransporteForeignKeyDescripcion(Long idTransporteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}


			sDescripcion=TransporteConstantesFunciones.getTransporteDescripcion(transporteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransporteForeignKeyGenerico(Long idTransporteSeleccionado,JComboBox jComboBoxid_transporteNotaCreditoGenerico)throws Exception
	{
		try
		{
			Transporte  transporteTemp=null;

			for(Transporte transporteAux:transportesForeignKey) {
				if(transporteAux.getId()!=null && transporteAux.getId().equals(idTransporteSeleccionado)) {
					transporteTemp=transporteAux;
					break;
				}
			}

			if(transporteTemp!=null) {
				jComboBoxid_transporteNotaCreditoGenerico.setSelectedItem(transporteTemp);
			} else {
				if(jComboBoxid_transporteNotaCreditoGenerico!=null && jComboBoxid_transporteNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_transporteNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransportistaForeignKey(Long idTransportistaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transportistaTemp!=null) {

					if(this.notacredito!=null) {
						this.notacredito.setTransportista(transportistaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setSelectedItem(transportistaTemp);
					}
				} else {
					//jComboBoxid_transportistaNotaCredito.setSelectedItem(transportistaTemp);
					if(this.jInternalFrameDetalleFormNotaCredito!=null) {
						if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){
					if(transportistaTemp!=null && jComboBoxid_transportistaFK_IdTransportistaNotaCredito!=null) {
						jComboBoxid_transportistaFK_IdTransportistaNotaCredito.setSelectedItem(transportistaTemp);
					} else {
						if(jComboBoxid_transportistaFK_IdTransportistaNotaCredito!=null) {
							//jComboBoxid_transportistaFK_IdTransportistaNotaCredito.setSelectedItem(transportistaTemp);
							if(jComboBoxid_transportistaFK_IdTransportistaNotaCredito.getItemCount()>0) {
								jComboBoxid_transportistaFK_IdTransportistaNotaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransportistaForeignKeyDescripcion(Long idTransportistaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}


			sDescripcion=TransportistaConstantesFunciones.getTransportistaDescripcion(transportistaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransportistaForeignKeyGenerico(Long idTransportistaSeleccionado,JComboBox jComboBoxid_transportistaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaTemp=null;

			for(Transportista transportistaAux:transportistasForeignKey) {
				if(transportistaAux.getId()!=null && transportistaAux.getId().equals(idTransportistaSeleccionado)) {
					transportistaTemp=transportistaAux;
					break;
				}
			}

			if(transportistaTemp!=null) {
				jComboBoxid_transportistaNotaCreditoGenerico.setSelectedItem(transportistaTemp);
			} else {
				if(jComboBoxid_transportistaNotaCreditoGenerico!=null && jComboBoxid_transportistaNotaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_transportistaNotaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_empresaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaNotaCreditoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaNotaCreditoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				notacredito.setid_empresa(empresaAux.getId());
				notacredito.setempresa_descripcion(NotaCreditoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				notacredito.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_sucursalNotaCreditoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalNotaCreditoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalNotaCreditoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				notacredito.setid_sucursal(sucursalAux.getId());
				notacredito.setsucursal_descripcion(NotaCreditoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				notacredito.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_ejercicioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioNotaCreditoGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioNotaCreditoGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				notacredito.setid_ejercicio(ejercicioAux.getId());
				notacredito.setejercicio_descripcion(NotaCreditoConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				notacredito.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_periodoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoNotaCreditoGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoNotaCreditoGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				notacredito.setid_periodo(periodoAux.getId());
				notacredito.setperiodo_descripcion(NotaCreditoConstantesFunciones.getPeriodoDescripcion(periodoAux));
				notacredito.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_anioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioNotaCreditoGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioNotaCreditoGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				notacredito.setid_anio(anioAux.getId());
				notacredito.setanio_descripcion(NotaCreditoConstantesFunciones.getAnioDescripcion(anioAux));
				notacredito.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_mesNotaCreditoGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesNotaCreditoGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesNotaCreditoGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				notacredito.setid_mes(mesAux.getId());
				notacredito.setmes_descripcion(NotaCreditoConstantesFunciones.getMesDescripcion(mesAux));
				notacredito.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_usuarioNotaCreditoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioNotaCreditoGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioNotaCreditoGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				notacredito.setid_usuario(usuarioAux.getId());
				notacredito.setusuario_descripcion(NotaCreditoConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				notacredito.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_monedaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaNotaCreditoGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaNotaCreditoGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				notacredito.setid_moneda(monedaAux.getId());
				notacredito.setmoneda_descripcion(NotaCreditoConstantesFunciones.getMonedaDescripcion(monedaAux));
				notacredito.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_empleadoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoNotaCreditoGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoNotaCreditoGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				notacredito.setid_empleado(empleadoAux.getId());
				notacredito.setempleado_descripcion(NotaCreditoConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				notacredito.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_formatoNotaCreditoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoNotaCreditoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoNotaCreditoGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				notacredito.setid_formato(formatoAux.getId());
				notacredito.setformato_descripcion(NotaCreditoConstantesFunciones.getFormatoDescripcion(formatoAux));
				notacredito.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_tipo_precioNotaCreditoGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioNotaCreditoGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioNotaCreditoGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				notacredito.setid_tipo_precio(tipoprecioAux.getId());
				notacredito.settipoprecio_descripcion(NotaCreditoConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				notacredito.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_clienteNotaCreditoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteNotaCreditoGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteNotaCreditoGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				notacredito.setid_cliente(clienteAux.getId());
				notacredito.setcliente_descripcion(NotaCreditoConstantesFunciones.getClienteDescripcion(clienteAux));
				notacredito.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_facturaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaNotaCreditoGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaNotaCreditoGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				notacredito.setid_factura(facturaAux.getId());
				notacredito.setfactura_descripcion(NotaCreditoConstantesFunciones.getFacturaDescripcion(facturaAux));
				notacredito.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_vendedorNotaCreditoGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorNotaCreditoGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorNotaCreditoGenerico.getSelectedItem();
			}

			if(vendedorAux!=null) {
				notacredito.setid_vendedor(vendedorAux.getId());
				notacredito.setvendedor_descripcion(NotaCreditoConstantesFunciones.getVendedorDescripcion(vendedorAux));
				notacredito.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarResponsableForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_responsableNotaCreditoGenerico)throws Exception
	{
		try
		{
			Responsable  responsableAux=new Responsable();

			if(jComboBoxid_responsableNotaCreditoGenerico==null) {
				responsableAux=(Responsable)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.getSelectedItem();
			} else {
				responsableAux=(Responsable)jComboBoxid_responsableNotaCreditoGenerico.getSelectedItem();
			}

			if(responsableAux!=null && responsableAux.getId()!=null) {
				notacredito.setid_responsable(responsableAux.getId());
				notacredito.setresponsable_descripcion(NotaCreditoConstantesFunciones.getResponsableDescripcion(responsableAux));
				notacredito.setResponsable(responsableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoNotaCreditoForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_estado_nota_creditoNotaCreditoGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditoAux=new EstadoNotaCredito();

			if(jComboBoxid_estado_nota_creditoNotaCreditoGenerico==null) {
				estadonotacreditoAux=(EstadoNotaCredito)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.getSelectedItem();
			} else {
				estadonotacreditoAux=(EstadoNotaCredito)jComboBoxid_estado_nota_creditoNotaCreditoGenerico.getSelectedItem();
			}

			if(estadonotacreditoAux!=null && estadonotacreditoAux.getId()!=null) {
				notacredito.setid_estado_nota_credito(estadonotacreditoAux.getId());
				notacredito.setestadonotacredito_descripcion(NotaCreditoConstantesFunciones.getEstadoNotaCreditoDescripcion(estadonotacreditoAux));
				notacredito.setEstadoNotaCredito(estadonotacreditoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_centro_costoNotaCreditoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoNotaCreditoGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoNotaCreditoGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				notacredito.setid_centro_costo(centrocostoAux.getId());
				notacredito.setcentrocosto_descripcion(NotaCreditoConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				notacredito.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_tipo_cambioNotaCreditoGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioNotaCreditoGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioNotaCreditoGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				notacredito.setid_tipo_cambio(tipocambioAux.getId());
				notacredito.settipocambio_descripcion(NotaCreditoConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				notacredito.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransporteForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_transporteNotaCreditoGenerico)throws Exception
	{
		try
		{
			Transporte  transporteAux=new Transporte();

			if(jComboBoxid_transporteNotaCreditoGenerico==null) {
				transporteAux=(Transporte)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.getSelectedItem();
			} else {
				transporteAux=(Transporte)jComboBoxid_transporteNotaCreditoGenerico.getSelectedItem();
			}

			if(transporteAux!=null) {
				notacredito.setid_transporte(transporteAux.getId());
				notacredito.settransporte_descripcion(NotaCreditoConstantesFunciones.getTransporteDescripcion(transporteAux));
				notacredito.setTransporte(transporteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransportistaForeignKey(NotaCredito notacredito,JComboBox jComboBoxid_transportistaNotaCreditoGenerico)throws Exception
	{
		try
		{
			Transportista  transportistaAux=new Transportista();

			if(jComboBoxid_transportistaNotaCreditoGenerico==null) {
				transportistaAux=(Transportista)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.getSelectedItem();
			} else {
				transportistaAux=(Transportista)jComboBoxid_transportistaNotaCreditoGenerico.getSelectedItem();
			}

			if(transportistaAux!=null) {
				notacredito.setid_transportista(transportistaAux.getId());
				notacredito.settransportista_descripcion(NotaCreditoConstantesFunciones.getTransportistaDescripcion(transportistaAux));
				notacredito.setTransportista(transportistaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCredito.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteNotaCredito.addItem(cliente);
							}
						}

						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaNotaCredito.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaNotaCredito.addItem(factura);
							}
						}

						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.addItem(vendedor);
							}
						}

						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameResponsablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingResponsable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.removeAllItems();

							for(Responsable responsable:this.responsablesForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.addItem(responsable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoNotaCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoNotaCredito=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.removeAllItems();

							for(EstadoNotaCredito estadonotacredito:this.estadonotacreditosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.addItem(estadonotacredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransporte=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.removeAllItems();

							for(Transporte transporte:this.transportesForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.addItem(transporte);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransportistasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransportista=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.addItem(transportista);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCredito!=null) { 
					}

					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransportista") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.removeAllItems();

							for(Transportista transportista:this.transportistasForeignKey) {
								this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.addItem(transportista);
							}
						}

						if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteNotaCredito.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaNotaCredito.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaNotaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameResponsableForeignKey(Responsable responsable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setSelectedItem(responsable);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoNotaCreditoForeignKey(EstadoNotaCredito estadonotacredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setSelectedItem(estadonotacredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransporteForeignKey(Transporte transporte,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setSelectedItem(transporte);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransportistaForeignKey(Transportista transportista,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setSelectedItem(transportista);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCredito!=null) {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.setSelectedItem(transportista);
						} else {
							this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesNotaCredito() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			NotaCreditoConstantesFunciones.refrescarForeignKeysDescripcionesNotaCredito(this.notacreditoLogic.getNotaCreditos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			NotaCreditoConstantesFunciones.refrescarForeignKeysDescripcionesNotaCredito(this.notacreditos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Responsable.class));
		classes.add(new Classe(EstadoNotaCredito.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(TipoCambio.class));
		classes.add(new Classe(Transporte.class));
		classes.add(new Classe(Transportista.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//notacreditoLogic.setNotaCreditos(this.notacreditos);
			notacreditoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public NotaCreditoParameterReturnGeneral getNotaCreditoParameterGeneral() {
		return this.notacreditoParameterGeneral;
	}
	
	public void setNotaCreditoParameterGeneral(NotaCreditoParameterReturnGeneral notacreditoParameterGeneral) {
		this.notacreditoParameterGeneral = notacreditoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoNotaCredito() {
		return isPermisoTodoNotaCredito;
	}

	public void setIsPermisoTodoNotaCredito(Boolean isPermisoTodoNotaCredito) {
		this.isPermisoTodoNotaCredito = isPermisoTodoNotaCredito;
	}

	public Boolean getIsPermisoNuevoNotaCredito() {
		return isPermisoNuevoNotaCredito;
	}

	public void setIsPermisoNuevoNotaCredito(Boolean isPermisoNuevoNotaCredito) {
		this.isPermisoNuevoNotaCredito = isPermisoNuevoNotaCredito;
	}

	public Boolean getIsPermisoActualizarNotaCredito() {
		return isPermisoActualizarNotaCredito;
	}

	public void setIsPermisoActualizarNotaCredito(Boolean isPermisoActualizarNotaCredito) {
		this.isPermisoActualizarNotaCredito = isPermisoActualizarNotaCredito;
	}

	public Boolean getIsPermisoEliminarNotaCredito() {
		return isPermisoEliminarNotaCredito;
	}

	public void setIsPermisoEliminarNotaCredito(Boolean isPermisoEliminarNotaCredito) {
		this.isPermisoEliminarNotaCredito = isPermisoEliminarNotaCredito;
	}

	public Boolean getIsPermisoGuardarCambiosNotaCredito() {
		return isPermisoGuardarCambiosNotaCredito;
	}

	public void setIsPermisoGuardarCambiosNotaCredito(Boolean isPermisoGuardarCambiosNotaCredito) {
		this.isPermisoGuardarCambiosNotaCredito = isPermisoGuardarCambiosNotaCredito;
	}
	
	public Boolean getIsPermisoConsultaNotaCredito() {
		return isPermisoConsultaNotaCredito;
	}

	public void setIsPermisoConsultaNotaCredito(Boolean isPermisoConsultaNotaCredito) {
		this.isPermisoConsultaNotaCredito = isPermisoConsultaNotaCredito;
	}

	public Boolean getIsPermisoBusquedaNotaCredito() {
		return isPermisoBusquedaNotaCredito;
	}

	public void setIsPermisoBusquedaNotaCredito(Boolean isPermisoBusquedaNotaCredito) {
		this.isPermisoBusquedaNotaCredito = isPermisoBusquedaNotaCredito;
	}

	public Boolean getIsPermisoReporteNotaCredito() {
		return isPermisoReporteNotaCredito;
	}

	public void setIsPermisoReporteNotaCredito(Boolean isPermisoReporteNotaCredito) {
		this.isPermisoReporteNotaCredito = isPermisoReporteNotaCredito;
	}
	
	public Boolean getIsPermisoPaginacionMedioNotaCredito() {
		return isPermisoPaginacionMedioNotaCredito;
	}

	public void setIsPermisoPaginacionMedioNotaCredito(Boolean isPermisoPaginacionMedioNotaCredito) {
		this.isPermisoPaginacionMedioNotaCredito = isPermisoPaginacionMedioNotaCredito;
	}
	
	public Boolean getIsPermisoPaginacionTodoNotaCredito() {
		return isPermisoPaginacionTodoNotaCredito;
	}

	public void setIsPermisoPaginacionTodoNotaCredito(Boolean isPermisoPaginacionTodoNotaCredito) {
		this.isPermisoPaginacionTodoNotaCredito = isPermisoPaginacionTodoNotaCredito;
	}
	
	public Boolean getIsPermisoPaginacionAltoNotaCredito() {
		return isPermisoPaginacionAltoNotaCredito;
	}

	public void setIsPermisoPaginacionAltoNotaCredito(Boolean isPermisoPaginacionAltoNotaCredito) {
		this.isPermisoPaginacionAltoNotaCredito = isPermisoPaginacionAltoNotaCredito;
	}
	
	public Boolean getIsPermisoCopiarNotaCredito() {
		return isPermisoCopiarNotaCredito;
	}

	public void setIsPermisoCopiarNotaCredito(Boolean isPermisoCopiarNotaCredito) {
		this.isPermisoCopiarNotaCredito = isPermisoCopiarNotaCredito;
	}
	
	public Boolean getIsPermisoVerFormNotaCredito() {
		return isPermisoVerFormNotaCredito;
	}

	public void setIsPermisoVerFormNotaCredito(Boolean isPermisoVerFormNotaCredito) {
		this.isPermisoVerFormNotaCredito = isPermisoVerFormNotaCredito;
	}
	
	public Boolean getIsPermisoDuplicarNotaCredito() {
		return isPermisoDuplicarNotaCredito;
	}

	public void setIsPermisoDuplicarNotaCredito(Boolean isPermisoDuplicarNotaCredito) {
		this.isPermisoDuplicarNotaCredito = isPermisoDuplicarNotaCredito;
	}
	
	public Boolean getIsPermisoOrdenNotaCredito() {
		return isPermisoOrdenNotaCredito;
	}

	public void setIsPermisoOrdenNotaCredito(Boolean isPermisoOrdenNotaCredito) {
		this.isPermisoOrdenNotaCredito = isPermisoOrdenNotaCredito;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoNotaCredito() {
		return isVisibilidadCeldaNuevoNotaCredito;
	}

	public void setIsVisibilidadCeldaNuevoNotaCredito(Boolean isVisibilidadCeldaNuevoNotaCredito) {
		this.isVisibilidadCeldaNuevoNotaCredito = isVisibilidadCeldaNuevoNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarNotaCredito() {
		return isVisibilidadCeldaDuplicarNotaCredito;
	}

	public void setIsVisibilidadCeldaDuplicarNotaCredito(Boolean isVisibilidadCeldaDuplicarNotaCredito) {
		this.isVisibilidadCeldaDuplicarNotaCredito = isVisibilidadCeldaDuplicarNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarNotaCredito() {
		return isVisibilidadCeldaCopiarNotaCredito;
	}

	public void setIsVisibilidadCeldaCopiarNotaCredito(Boolean isVisibilidadCeldaCopiarNotaCredito) {
		this.isVisibilidadCeldaCopiarNotaCredito = isVisibilidadCeldaCopiarNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormNotaCredito() {
		return isVisibilidadCeldaVerFormNotaCredito;
	}

	public void setIsVisibilidadCeldaVerFormNotaCredito(Boolean isVisibilidadCeldaVerFormNotaCredito) {
		this.isVisibilidadCeldaVerFormNotaCredito = isVisibilidadCeldaVerFormNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenNotaCredito() {
		return isVisibilidadCeldaOrdenNotaCredito;
	}

	public void setIsVisibilidadCeldaOrdenNotaCredito(Boolean isVisibilidadCeldaOrdenNotaCredito) {
		this.isVisibilidadCeldaOrdenNotaCredito = isVisibilidadCeldaOrdenNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesNotaCredito() {
		return isVisibilidadCeldaNuevoRelacionesNotaCredito;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesNotaCredito(Boolean isVisibilidadCeldaNuevoRelacionesNotaCredito) {
		this.isVisibilidadCeldaNuevoRelacionesNotaCredito = isVisibilidadCeldaNuevoRelacionesNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaModificarNotaCredito() {
		return isVisibilidadCeldaModificarNotaCredito;
	}

	public void setIsVisibilidadCeldaModificarNotaCredito(Boolean isVisibilidadCeldaModificarNotaCredito) {
		this.isVisibilidadCeldaModificarNotaCredito = isVisibilidadCeldaModificarNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarNotaCredito() {
		return isVisibilidadCeldaActualizarNotaCredito;
	}

	public void setIsVisibilidadCeldaActualizarNotaCredito(Boolean isVisibilidadCeldaActualizarNotaCredito) {
		this.isVisibilidadCeldaActualizarNotaCredito = isVisibilidadCeldaActualizarNotaCredito;
	}

	public Boolean getIsVisibilidadCeldaEliminarNotaCredito() {
		return isVisibilidadCeldaEliminarNotaCredito;
	}

	public void setIsVisibilidadCeldaEliminarNotaCredito(Boolean isVisibilidadCeldaEliminarNotaCredito) {
		this.isVisibilidadCeldaEliminarNotaCredito = isVisibilidadCeldaEliminarNotaCredito;
	}

	public Boolean getIsVisibilidadCeldaCancelarNotaCredito() {
		return isVisibilidadCeldaCancelarNotaCredito;
	}

	public void setIsVisibilidadCeldaCancelarNotaCredito(Boolean isVisibilidadCeldaCancelarNotaCredito) {
		this.isVisibilidadCeldaCancelarNotaCredito = isVisibilidadCeldaCancelarNotaCredito;
	}

	public Boolean getIsVisibilidadCeldaGuardarNotaCredito() {
		return isVisibilidadCeldaGuardarNotaCredito;
	}

	public void setIsVisibilidadCeldaGuardarNotaCredito(Boolean isVisibilidadCeldaGuardarNotaCredito) {
		this.isVisibilidadCeldaGuardarNotaCredito = isVisibilidadCeldaGuardarNotaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosNotaCredito() {
		return isVisibilidadCeldaGuardarCambiosNotaCredito;
	}

	public void setIsVisibilidadCeldaGuardarCambiosNotaCredito(Boolean isVisibilidadCeldaGuardarCambiosNotaCredito) {
		this.isVisibilidadCeldaGuardarCambiosNotaCredito = isVisibilidadCeldaGuardarCambiosNotaCredito;
	}
		
	public NotaCreditoSessionBean getnotacreditoSessionBean() {
		return this.notacreditoSessionBean;
	}
	
	public void setnotacreditoSessionBean(NotaCreditoSessionBean notacreditoSessionBean) {
		this.notacreditoSessionBean=notacreditoSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNumeroPreImpreso() {
		return this.isVisibilidadBusquedaPorNumeroPreImpreso;
	}

	public void setisVisibilidadBusquedaPorNumeroPreImpreso(Boolean isVisibilidadBusquedaPorNumeroPreImpreso) {
		this.isVisibilidadBusquedaPorNumeroPreImpreso=isVisibilidadBusquedaPorNumeroPreImpreso;
	}

	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdNotaCredito() {
		return this.isVisibilidadFK_IdNotaCredito;
	}

	public void setisVisibilidadFK_IdNotaCredito(Boolean isVisibilidadFK_IdNotaCredito) {
		this.isVisibilidadFK_IdNotaCredito=isVisibilidadFK_IdNotaCredito;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdResponsable() {
		return this.isVisibilidadFK_IdResponsable;
	}

	public void setisVisibilidadFK_IdResponsable(Boolean isVisibilidadFK_IdResponsable) {
		this.isVisibilidadFK_IdResponsable=isVisibilidadFK_IdResponsable;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdTransporte() {
		return this.isVisibilidadFK_IdTransporte;
	}

	public void setisVisibilidadFK_IdTransporte(Boolean isVisibilidadFK_IdTransporte) {
		this.isVisibilidadFK_IdTransporte=isVisibilidadFK_IdTransporte;
	}

	public Boolean getisVisibilidadFK_IdTransportista() {
		return this.isVisibilidadFK_IdTransportista;
	}

	public void setisVisibilidadFK_IdTransportista(Boolean isVisibilidadFK_IdTransportista) {
		this.isVisibilidadFK_IdTransportista=isVisibilidadFK_IdTransportista;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysNotaCredito(NotaCredito notacredito)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(notacredito,null);
				this.setActualParaGuardarSucursalForeignKey(notacredito,null);
				this.setActualParaGuardarEjercicioForeignKey(notacredito,null);
				this.setActualParaGuardarPeriodoForeignKey(notacredito,null);
				this.setActualParaGuardarAnioForeignKey(notacredito,null);
				this.setActualParaGuardarMesForeignKey(notacredito,null);
				this.setActualParaGuardarUsuarioForeignKey(notacredito,null);
				this.setActualParaGuardarMonedaForeignKey(notacredito,null);
				this.setActualParaGuardarEmpleadoForeignKey(notacredito,null);
				this.setActualParaGuardarFormatoForeignKey(notacredito,null);
				this.setActualParaGuardarTipoPrecioForeignKey(notacredito,null);
				this.setActualParaGuardarClienteForeignKey(notacredito,null);
				this.setActualParaGuardarFacturaForeignKey(notacredito,null);
				this.setActualParaGuardarVendedorForeignKey(notacredito,null);
				this.setActualParaGuardarResponsableForeignKey(notacredito,null);
				this.setActualParaGuardarEstadoNotaCreditoForeignKey(notacredito,null);
				this.setActualParaGuardarCentroCostoForeignKey(notacredito,null);
				this.setActualParaGuardarTipoCambioForeignKey(notacredito,null);
				this.setActualParaGuardarTransporteForeignKey(notacredito,null);
				this.setActualParaGuardarTransportistaForeignKey(notacredito,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(NotaCredito notacredito,NotaCredito notacreditoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalNotaCredito(notacredito);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		notacreditoAux.setId(notacredito.getId());
		notacreditoAux.setVersionRow(notacredito.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessNotaCredito();
		
			int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = notacreditoValidator.getInvalidValues(this.notacredito);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			notacreditoLogic.setDatosCliente(datosCliente);
			notacreditoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				notacreditoAux=new  NotaCredito();
				
				notacreditoAux.setIsNew(true);
				notacreditoAux.setIsChanged(true);
				
				notacreditoAux.setNotaCreditoOriginal(this.notacredito);
				
				notacreditoAux.setId(this.notacredito.getId());	
				notacreditoAux.setVersionRow(this.notacredito.getVersionRow());	
				notacreditoAux.setid_empresa(this.notacredito.getid_empresa());	
				notacreditoAux.setid_sucursal(this.notacredito.getid_sucursal());	
				notacreditoAux.setid_ejercicio(this.notacredito.getid_ejercicio());	
				notacreditoAux.setid_periodo(this.notacredito.getid_periodo());	
				notacreditoAux.setid_anio(this.notacredito.getid_anio());	
				notacreditoAux.setid_mes(this.notacredito.getid_mes());	
				notacreditoAux.setid_usuario(this.notacredito.getid_usuario());	
				notacreditoAux.setcodigo(this.notacredito.getcodigo());	
				notacreditoAux.setnumero(this.notacredito.getnumero());	
				notacreditoAux.setfecha_emision(this.notacredito.getfecha_emision());	
				notacreditoAux.setnumero_dias(this.notacredito.getnumero_dias());	
				notacreditoAux.setfecha_vencimiento(this.notacredito.getfecha_vencimiento());	
				notacreditoAux.setid_moneda(this.notacredito.getid_moneda());	
				notacreditoAux.setcotizacion(this.notacredito.getcotizacion());	
				notacreditoAux.setid_empleado(this.notacredito.getid_empleado());	
				
				if(this.notacredito.getid_formato()!=null && this.notacredito.getid_formato()>0L) {
					notacreditoAux.setid_formato(this.notacredito.getid_formato());
				} else {
					notacreditoAux.setid_formato(null);
				}	
				notacreditoAux.setid_tipo_precio(this.notacredito.getid_tipo_precio());	
				notacreditoAux.setid_cliente(this.notacredito.getid_cliente());	
				notacreditoAux.setid_factura(this.notacredito.getid_factura());	
				notacreditoAux.setdireccion(this.notacredito.getdireccion());	
				notacreditoAux.settelefono(this.notacredito.gettelefono());	
				notacreditoAux.setruc(this.notacredito.getruc());	
				
				if(this.notacredito.getid_vendedor()!=null && this.notacredito.getid_vendedor()>0L) {
					notacreditoAux.setid_vendedor(this.notacredito.getid_vendedor());
				} else {
					notacreditoAux.setid_vendedor(null);
				}	
				
				if(this.notacredito.getid_responsable()!=null && this.notacredito.getid_responsable()>0L) {
					notacreditoAux.setid_responsable(this.notacredito.getid_responsable());
				} else {
					notacreditoAux.setid_responsable(null);
				}	
				notacreditoAux.setid_estado_nota_credito(this.notacredito.getid_estado_nota_credito());	
				notacreditoAux.setdescripcion(this.notacredito.getdescripcion());	
				notacreditoAux.setdescuento_porcentaje(this.notacredito.getdescuento_porcentaje());	
				notacreditoAux.settotal_iva(this.notacredito.gettotal_iva());	
				notacreditoAux.setsuman(this.notacredito.getsuman());	
				notacreditoAux.setdescuento_valor(this.notacredito.getdescuento_valor());	
				notacreditoAux.settotal_sin_iva(this.notacredito.gettotal_sin_iva());	
				notacreditoAux.settotal_descuento(this.notacredito.gettotal_descuento());	
				notacreditoAux.setflete(this.notacredito.getflete());	
				notacreditoAux.settotal(this.notacredito.gettotal());	
				notacreditoAux.setsub_total(this.notacredito.getsub_total());	
				notacreditoAux.setotro(this.notacredito.getotro());	
				notacreditoAux.setiva(this.notacredito.getiva());	
				notacreditoAux.setfinanciamiento(this.notacredito.getfinanciamiento());	
				notacreditoAux.setice(this.notacredito.getice());	
				notacreditoAux.setotro_valor(this.notacredito.getotro_valor());	
				notacreditoAux.setretencion(this.notacredito.getretencion());	
				notacreditoAux.setfecha(this.notacredito.getfecha());	
				notacreditoAux.setes_cliente(this.notacredito.getes_cliente());	
				
				if(this.notacredito.getid_centro_costo()!=null && this.notacredito.getid_centro_costo()>0L) {
					notacreditoAux.setid_centro_costo(this.notacredito.getid_centro_costo());
				} else {
					notacreditoAux.setid_centro_costo(null);
				}	
				
				if(this.notacredito.getid_tipo_cambio()!=null && this.notacredito.getid_tipo_cambio()>0L) {
					notacreditoAux.setid_tipo_cambio(this.notacredito.getid_tipo_cambio());
				} else {
					notacreditoAux.setid_tipo_cambio(null);
				}	
				
				if(this.notacredito.getid_transporte()!=null && this.notacredito.getid_transporte()>0L) {
					notacreditoAux.setid_transporte(this.notacredito.getid_transporte());
				} else {
					notacreditoAux.setid_transporte(null);
				}	
				
				if(this.notacredito.getid_transportista()!=null && this.notacredito.getid_transportista()>0L) {
					notacreditoAux.setid_transportista(this.notacredito.getid_transportista());
				} else {
					notacreditoAux.setid_transportista(null);
				}	
				notacreditoAux.setfecha_cliente(this.notacredito.getfecha_cliente());	
				notacreditoAux.setfecha_autorizacion(this.notacredito.getfecha_autorizacion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditoAux,notacreditos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.saveNotaCreditos();//WithConnection
						//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);
					
					this.refrescarForeignKeysDescripcionesNotaCredito();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos().addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos.addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditoLogic.saveNotaCreditoRelaciones(notacreditoAux,this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());//WithConnection
								//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.setDetaNotaCreditos(new ArrayList<DetaNotaCredito>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos= new ArrayList<DetaNotaCredito>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditoAux.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditoAux,notacreditos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				notacreditoAux=new  NotaCredito();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.notacreditoSessionBean.getEsGuardarRelacionado() 
					|| (this.notacreditoSessionBean.getEsGuardarRelacionado() && this.notacredito.getId()>=0)) {
						
					notacreditoAux.setIsNew(false);
				}
				
				notacreditoAux.setIsDeleted(false);
			
				notacreditoAux.setId(this.notacredito.getId());	
				notacreditoAux.setVersionRow(this.notacredito.getVersionRow());	
				notacreditoAux.setid_empresa(this.notacredito.getid_empresa());	
				notacreditoAux.setid_sucursal(this.notacredito.getid_sucursal());	
				notacreditoAux.setid_ejercicio(this.notacredito.getid_ejercicio());	
				notacreditoAux.setid_periodo(this.notacredito.getid_periodo());	
				notacreditoAux.setid_anio(this.notacredito.getid_anio());	
				notacreditoAux.setid_mes(this.notacredito.getid_mes());	
				notacreditoAux.setid_usuario(this.notacredito.getid_usuario());	
				notacreditoAux.setcodigo(this.notacredito.getcodigo());	
				notacreditoAux.setnumero(this.notacredito.getnumero());	
				notacreditoAux.setfecha_emision(this.notacredito.getfecha_emision());	
				notacreditoAux.setnumero_dias(this.notacredito.getnumero_dias());	
				notacreditoAux.setfecha_vencimiento(this.notacredito.getfecha_vencimiento());	
				notacreditoAux.setid_moneda(this.notacredito.getid_moneda());	
				notacreditoAux.setcotizacion(this.notacredito.getcotizacion());	
				notacreditoAux.setid_empleado(this.notacredito.getid_empleado());	
				
				if(this.notacredito.getid_formato()!=null && this.notacredito.getid_formato()>0L) {
					notacreditoAux.setid_formato(this.notacredito.getid_formato());
				} else {
					notacreditoAux.setid_formato(null);
				}	
				notacreditoAux.setid_tipo_precio(this.notacredito.getid_tipo_precio());	
				notacreditoAux.setid_cliente(this.notacredito.getid_cliente());	
				notacreditoAux.setid_factura(this.notacredito.getid_factura());	
				notacreditoAux.setdireccion(this.notacredito.getdireccion());	
				notacreditoAux.settelefono(this.notacredito.gettelefono());	
				notacreditoAux.setruc(this.notacredito.getruc());	
				
				if(this.notacredito.getid_vendedor()!=null && this.notacredito.getid_vendedor()>0L) {
					notacreditoAux.setid_vendedor(this.notacredito.getid_vendedor());
				} else {
					notacreditoAux.setid_vendedor(null);
				}	
				
				if(this.notacredito.getid_responsable()!=null && this.notacredito.getid_responsable()>0L) {
					notacreditoAux.setid_responsable(this.notacredito.getid_responsable());
				} else {
					notacreditoAux.setid_responsable(null);
				}	
				notacreditoAux.setid_estado_nota_credito(this.notacredito.getid_estado_nota_credito());	
				notacreditoAux.setdescripcion(this.notacredito.getdescripcion());	
				notacreditoAux.setdescuento_porcentaje(this.notacredito.getdescuento_porcentaje());	
				notacreditoAux.settotal_iva(this.notacredito.gettotal_iva());	
				notacreditoAux.setsuman(this.notacredito.getsuman());	
				notacreditoAux.setdescuento_valor(this.notacredito.getdescuento_valor());	
				notacreditoAux.settotal_sin_iva(this.notacredito.gettotal_sin_iva());	
				notacreditoAux.settotal_descuento(this.notacredito.gettotal_descuento());	
				notacreditoAux.setflete(this.notacredito.getflete());	
				notacreditoAux.settotal(this.notacredito.gettotal());	
				notacreditoAux.setsub_total(this.notacredito.getsub_total());	
				notacreditoAux.setotro(this.notacredito.getotro());	
				notacreditoAux.setiva(this.notacredito.getiva());	
				notacreditoAux.setfinanciamiento(this.notacredito.getfinanciamiento());	
				notacreditoAux.setice(this.notacredito.getice());	
				notacreditoAux.setotro_valor(this.notacredito.getotro_valor());	
				notacreditoAux.setretencion(this.notacredito.getretencion());	
				notacreditoAux.setfecha(this.notacredito.getfecha());	
				notacreditoAux.setes_cliente(this.notacredito.getes_cliente());	
				
				if(this.notacredito.getid_centro_costo()!=null && this.notacredito.getid_centro_costo()>0L) {
					notacreditoAux.setid_centro_costo(this.notacredito.getid_centro_costo());
				} else {
					notacreditoAux.setid_centro_costo(null);
				}	
				
				if(this.notacredito.getid_tipo_cambio()!=null && this.notacredito.getid_tipo_cambio()>0L) {
					notacreditoAux.setid_tipo_cambio(this.notacredito.getid_tipo_cambio());
				} else {
					notacreditoAux.setid_tipo_cambio(null);
				}	
				
				if(this.notacredito.getid_transporte()!=null && this.notacredito.getid_transporte()>0L) {
					notacreditoAux.setid_transporte(this.notacredito.getid_transporte());
				} else {
					notacreditoAux.setid_transporte(null);
				}	
				
				if(this.notacredito.getid_transportista()!=null && this.notacredito.getid_transportista()>0L) {
					notacreditoAux.setid_transportista(this.notacredito.getid_transportista());
				} else {
					notacreditoAux.setid_transportista(null);
				}	
				notacreditoAux.setfecha_cliente(this.notacredito.getfecha_cliente());	
				notacreditoAux.setfecha_autorizacion(this.notacredito.getfecha_autorizacion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditoAux,notacreditos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.saveNotaCreditos();//WithConnection
						//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);
					
					this.refrescarForeignKeysDescripcionesNotaCredito();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos().addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos.addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						}
						//ARCHITECTURE
						
						if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditoLogic.saveNotaCreditoRelaciones(notacreditoAux,this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());//WithConnection
								//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.setDetaNotaCreditos(new ArrayList<DetaNotaCredito>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos= new ArrayList<DetaNotaCredito>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditoAux.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditoAux,notacreditos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacredito,notacreditoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				notacreditoAux=new  NotaCredito();
				
				notacreditoAux.setIsNew(false);
				notacreditoAux.setIsChanged(false);
				
				notacreditoAux.setIsDeleted(true);
				
				notacreditoAux.setId(this.notacredito.getId());	
				notacreditoAux.setVersionRow(this.notacredito.getVersionRow());	
				notacreditoAux.setid_empresa(this.notacredito.getid_empresa());	
				notacreditoAux.setid_sucursal(this.notacredito.getid_sucursal());	
				notacreditoAux.setid_ejercicio(this.notacredito.getid_ejercicio());	
				notacreditoAux.setid_periodo(this.notacredito.getid_periodo());	
				notacreditoAux.setid_anio(this.notacredito.getid_anio());	
				notacreditoAux.setid_mes(this.notacredito.getid_mes());	
				notacreditoAux.setid_usuario(this.notacredito.getid_usuario());	
				notacreditoAux.setcodigo(this.notacredito.getcodigo());	
				notacreditoAux.setnumero(this.notacredito.getnumero());	
				notacreditoAux.setfecha_emision(this.notacredito.getfecha_emision());	
				notacreditoAux.setnumero_dias(this.notacredito.getnumero_dias());	
				notacreditoAux.setfecha_vencimiento(this.notacredito.getfecha_vencimiento());	
				notacreditoAux.setid_moneda(this.notacredito.getid_moneda());	
				notacreditoAux.setcotizacion(this.notacredito.getcotizacion());	
				notacreditoAux.setid_empleado(this.notacredito.getid_empleado());	
				
				if(this.notacredito.getid_formato()!=null && this.notacredito.getid_formato()>0L) {
					notacreditoAux.setid_formato(this.notacredito.getid_formato());
				} else {
					notacreditoAux.setid_formato(null);
				}	
				notacreditoAux.setid_tipo_precio(this.notacredito.getid_tipo_precio());	
				notacreditoAux.setid_cliente(this.notacredito.getid_cliente());	
				notacreditoAux.setid_factura(this.notacredito.getid_factura());	
				notacreditoAux.setdireccion(this.notacredito.getdireccion());	
				notacreditoAux.settelefono(this.notacredito.gettelefono());	
				notacreditoAux.setruc(this.notacredito.getruc());	
				
				if(this.notacredito.getid_vendedor()!=null && this.notacredito.getid_vendedor()>0L) {
					notacreditoAux.setid_vendedor(this.notacredito.getid_vendedor());
				} else {
					notacreditoAux.setid_vendedor(null);
				}	
				
				if(this.notacredito.getid_responsable()!=null && this.notacredito.getid_responsable()>0L) {
					notacreditoAux.setid_responsable(this.notacredito.getid_responsable());
				} else {
					notacreditoAux.setid_responsable(null);
				}	
				notacreditoAux.setid_estado_nota_credito(this.notacredito.getid_estado_nota_credito());	
				notacreditoAux.setdescripcion(this.notacredito.getdescripcion());	
				notacreditoAux.setdescuento_porcentaje(this.notacredito.getdescuento_porcentaje());	
				notacreditoAux.settotal_iva(this.notacredito.gettotal_iva());	
				notacreditoAux.setsuman(this.notacredito.getsuman());	
				notacreditoAux.setdescuento_valor(this.notacredito.getdescuento_valor());	
				notacreditoAux.settotal_sin_iva(this.notacredito.gettotal_sin_iva());	
				notacreditoAux.settotal_descuento(this.notacredito.gettotal_descuento());	
				notacreditoAux.setflete(this.notacredito.getflete());	
				notacreditoAux.settotal(this.notacredito.gettotal());	
				notacreditoAux.setsub_total(this.notacredito.getsub_total());	
				notacreditoAux.setotro(this.notacredito.getotro());	
				notacreditoAux.setiva(this.notacredito.getiva());	
				notacreditoAux.setfinanciamiento(this.notacredito.getfinanciamiento());	
				notacreditoAux.setice(this.notacredito.getice());	
				notacreditoAux.setotro_valor(this.notacredito.getotro_valor());	
				notacreditoAux.setretencion(this.notacredito.getretencion());	
				notacreditoAux.setfecha(this.notacredito.getfecha());	
				notacreditoAux.setes_cliente(this.notacredito.getes_cliente());	
				
				if(this.notacredito.getid_centro_costo()!=null && this.notacredito.getid_centro_costo()>0L) {
					notacreditoAux.setid_centro_costo(this.notacredito.getid_centro_costo());
				} else {
					notacreditoAux.setid_centro_costo(null);
				}	
				
				if(this.notacredito.getid_tipo_cambio()!=null && this.notacredito.getid_tipo_cambio()>0L) {
					notacreditoAux.setid_tipo_cambio(this.notacredito.getid_tipo_cambio());
				} else {
					notacreditoAux.setid_tipo_cambio(null);
				}	
				
				if(this.notacredito.getid_transporte()!=null && this.notacredito.getid_transporte()>0L) {
					notacreditoAux.setid_transporte(this.notacredito.getid_transporte());
				} else {
					notacreditoAux.setid_transporte(null);
				}	
				
				if(this.notacredito.getid_transportista()!=null && this.notacredito.getid_transportista()>0L) {
					notacreditoAux.setid_transportista(this.notacredito.getid_transportista());
				} else {
					notacreditoAux.setid_transportista(null);
				}	
				notacreditoAux.setfecha_cliente(this.notacredito.getfecha_cliente());	
				notacreditoAux.setfecha_autorizacion(this.notacredito.getfecha_autorizacion());	
				
				if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.notacreditoAux.getId()>=0) {	
						this.notacreditosEliminados.add(notacreditoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditoAux,notacreditos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.saveNotaCreditos();//WithConnection
						//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos().addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos.addAll(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditosEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditoLogic.saveNotaCreditoRelaciones(notacreditoAux,this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());//WithConnection
								//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.setDetaNotaCreditos(new ArrayList<DetaNotaCredito>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos= new ArrayList<DetaNotaCredito>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditoAux.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.notacreditoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(notacreditoAux,notacreditoLogic.getNotaCreditos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(notacreditoAux,notacreditos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNotaCreditos().addAll(this.notacreditosEliminados);
					
					notacreditoLogic.saveNotaCreditos();//WithConnection
					//notacreditoLogic.getSetVersionRowNotaCreditos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesNotaCredito();
				
				this.notacreditosEliminados= new ArrayList<NotaCredito>();		
			}
			
			if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Nota Credito GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.notacredito=notacreditoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessNotaCredito();
      	}
		
	}	
	
	public void actualizarRelaciones(NotaCredito notacreditoLocal) throws Exception {
		
		if(this.notacreditoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				notacreditoLocal.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());
			
			} else {
			
				notacreditoLocal.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditos);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(NotaCredito notacreditoLocal) throws Exception {	
		if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				notacreditoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				notacreditoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				notacreditoLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				notacreditoLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				notacreditoLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				notacreditoLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				notacreditoLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				notacreditoLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				notacreditoLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				notacreditoLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				notacreditoLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				notacreditoLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				notacreditoLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				notacreditoLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ResponsableDetalleFormJInternalFrame.class)) {
				ResponsableBeanSwingJInternalFrame responsableBeanSwingJInternalFrameLocal=(ResponsableBeanSwingJInternalFrame) ((ResponsableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				responsableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoResponsable(responsableBeanSwingJInternalFrameLocal.getresponsable(),true);
				responsableBeanSwingJInternalFrameLocal.actualizarLista(responsableBeanSwingJInternalFrameLocal.responsable,this.responsablesForeignKey);

				responsableBeanSwingJInternalFrameLocal.actualizarRelaciones(responsableBeanSwingJInternalFrameLocal.responsable);

				notacreditoLocal.setResponsable(responsableBeanSwingJInternalFrameLocal.responsable);

				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey("Formulario");
				this.setActualResponsableForeignKey(responsableBeanSwingJInternalFrameLocal.responsable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoNotaCreditoDetalleFormJInternalFrame.class)) {
				EstadoNotaCreditoBeanSwingJInternalFrame estadonotacreditoBeanSwingJInternalFrameLocal=(EstadoNotaCreditoBeanSwingJInternalFrame) ((EstadoNotaCreditoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadonotacreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoNotaCredito(estadonotacreditoBeanSwingJInternalFrameLocal.getestadonotacredito(),true);
				estadonotacreditoBeanSwingJInternalFrameLocal.actualizarLista(estadonotacreditoBeanSwingJInternalFrameLocal.estadonotacredito,this.estadonotacreditosForeignKey);

				estadonotacreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(estadonotacreditoBeanSwingJInternalFrameLocal.estadonotacredito);

				notacreditoLocal.setEstadoNotaCredito(estadonotacreditoBeanSwingJInternalFrameLocal.estadonotacredito);

				this.addItemDefectoCombosForeignKeyEstadoNotaCredito();
				this.cargarCombosFrameEstadoNotaCreditosForeignKey("Formulario");
				this.setActualEstadoNotaCreditoForeignKey(estadonotacreditoBeanSwingJInternalFrameLocal.estadonotacredito.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				notacreditoLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				notacreditoLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransporteDetalleFormJInternalFrame.class)) {
				TransporteBeanSwingJInternalFrame transporteBeanSwingJInternalFrameLocal=(TransporteBeanSwingJInternalFrame) ((TransporteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transporteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransporte(transporteBeanSwingJInternalFrameLocal.gettransporte(),true);
				transporteBeanSwingJInternalFrameLocal.actualizarLista(transporteBeanSwingJInternalFrameLocal.transporte,this.transportesForeignKey);

				transporteBeanSwingJInternalFrameLocal.actualizarRelaciones(transporteBeanSwingJInternalFrameLocal.transporte);

				notacreditoLocal.setTransporte(transporteBeanSwingJInternalFrameLocal.transporte);

				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey("Formulario");
				this.setActualTransporteForeignKey(transporteBeanSwingJInternalFrameLocal.transporte.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransportistaDetalleFormJInternalFrame.class)) {
				TransportistaBeanSwingJInternalFrame transportistaBeanSwingJInternalFrameLocal=(TransportistaBeanSwingJInternalFrame) ((TransportistaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transportistaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransportista(transportistaBeanSwingJInternalFrameLocal.gettransportista(),true);
				transportistaBeanSwingJInternalFrameLocal.actualizarLista(transportistaBeanSwingJInternalFrameLocal.transportista,this.transportistasForeignKey);

				transportistaBeanSwingJInternalFrameLocal.actualizarRelaciones(transportistaBeanSwingJInternalFrameLocal.transportista);

				notacreditoLocal.setTransportista(transportistaBeanSwingJInternalFrameLocal.transportista);

				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey("Formulario");
				this.setActualTransportistaForeignKey(transportistaBeanSwingJInternalFrameLocal.transportista.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarNotaCreditoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = notacreditoValidator.getInvalidValues(this.notacredito);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(NotaCredito notacredito,List<NotaCredito> notacreditos) throws Exception {
		try	{		
			NotaCreditoConstantesFunciones.actualizarLista(notacredito,notacreditos,this.notacreditoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(NotaCredito notacredito,List<NotaCredito> notacreditos) throws Exception {
		try	{			
			NotaCreditoConstantesFunciones.actualizarSelectedLista(notacredito,notacreditos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<NotaCredito> notacreditosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				notacreditosLocal=this.notacreditoLogic.getNotaCreditos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				notacreditosLocal=this.notacreditos;
			}
			//ARCHITECTURE
		
			for(NotaCredito notacreditoLocal:notacreditosLocal) {
				if(this.permiteMantenimiento(notacreditoLocal) && notacreditoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+NotaCreditoConstantesFunciones.getNotaCreditoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_empresaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_sucursalNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_ejercicioNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_periodoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_anioNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_mesNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_usuarioNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelcodigoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.NUMEROPREIMPRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelnumeroNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_emisionNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.NUMERODIAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelnumero_diasNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_vencimientoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_monedaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelcotizacionNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_empleadoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_formatoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_tipo_precioNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_clienteNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_facturaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.DIRECCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldireccionNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.TELEFONO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltelefonoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelrucNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_vendedorNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDRESPONSABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_responsableNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDESTADONOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_estado_nota_creditoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescripcionNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.DESCUENTOPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_porcentajeNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_ivaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.SUMAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelsumanNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_valorNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.TOTALSINIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_sin_ivaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.TOTALDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_descuentoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfleteNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotalNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelsub_totalNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.OTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelotroNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelivaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FINANCIAMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfinanciamientoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeliceNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.OTROVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelotro_valorNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.RETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelretencionNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfechaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.ESCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeles_clienteNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_centro_costoNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_tipo_cambioNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDTRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_transporteNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.IDTRANSPORTISTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelid_transportistaNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FECHACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_clienteNotaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoConstantesFunciones.FECHAAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_autorizacionNotaCredito,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_empresaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_sucursalNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_ejercicioNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_periodoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_anioNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_mesNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_usuarioNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelcodigoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelnumeroNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_emisionNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelnumero_diasNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_vencimientoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_monedaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelcotizacionNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_empleadoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_formatoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_tipo_precioNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_clienteNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_facturaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeldireccionNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeltelefonoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelrucNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_vendedorNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_responsableNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_estado_nota_creditoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeldescripcionNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_porcentajeNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_ivaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelsumanNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_valorNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_sin_ivaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_descuentoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfleteNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeltotalNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelsub_totalNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelotroNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelivaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfinanciamientoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeliceNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelotro_valorNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelretencionNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfechaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabeles_clienteNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_centro_costoNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_tipo_cambioNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_transporteNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelid_transportistaNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_clienteNotaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_autorizacionNotaCredito,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetaNotaCredito")) {
			if(this.notacredito==null) {
				this.notacredito= new NotaCredito();
			}

			if(this.notacreditoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoNotaCredito
				this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.getdetanotacredito().setNotaCredito(this.notacredito);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoNotaCredito--;	
		
		
		this.notacreditoAux=new NotaCredito();
		
		this.notacreditoAux.setId(this.iIdNuevoNotaCredito);
		this.notacreditoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacreditoLogic.getNotaCreditos().add(this.notacreditoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.notacreditos.add(this.notacreditoAux);
		}
		//ARCHITECTURE
		
		this.notacredito=this.notacreditoAux;
		
		if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioNotaCredito(this.notacredito);
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCredito(this.notacredito);
		}
				
		//this.setDefaultControlesNotaCredito();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyNotaCredito();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyNotaCredito();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCredito();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCredito(this.notacreditoBean,this.notacredito,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(NotaCreditoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
			classes=NotaCreditoConstantesFunciones.getClassesRelationshipsOfNotaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.notacreditoReturnGeneral=notacreditoLogic.procesarEventosNotaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditoLogic.getNotaCreditos(),this.notacredito,this.notacreditoParameterGeneral,this.isEsNuevoNotaCredito,classes);//this.notacreditoLogic.getNotaCredito()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanNotaCredito(this.notacreditoReturnGeneral,this.notacreditoBean,false);
		
		if(this.notacreditoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCredito(this.notacreditoReturnGeneral.getNotaCredito());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioNotaCredito(this.notacreditoReturnGeneral.getNotaCredito());
		}
		
		if(this.notacreditoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioNotaCredito(this.notacreditoReturnGeneral.getNotaCredito(),classes);//this.notacreditoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyNotaCredito();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyNotaCredito();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoBeanSwingJInternalFrameAdditional.RecargarFormNotaCredito(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingNotaCredito(false);
						
			if(notacreditoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.getEsGuardarRelacionado() && DetaNotaCreditoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaNotaCreditoActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCredito();
			}
			
			this.actualizarVisualTableDatosNotaCredito();
			
			this.jTableDatosNotaCredito.setRowSelectionInterval(this.getIndiceNuevoNotaCredito(), this.getIndiceNuevoNotaCredito());
			
			this.seleccionarFilaTablaNotaCreditoActual();
						
			this.actualizarEstadoCeldasBotonesNotaCredito("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesNotaCredito(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarcodigoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarnumeroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfecha_emisionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarnumero_diasNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfecha_vencimientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarcotizacionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activardireccionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activartelefonoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarrucNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activardescripcionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activardescuento_porcentajeNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activartotal_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarsumanNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activardescuento_valorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activartotal_sin_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activartotal_descuentoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfleteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activartotalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarsub_totalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarotroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfinanciamientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activariceNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarotro_valorNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldretencionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarretencionNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfechaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfechaNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jCheckBoxes_clienteNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activares_clienteNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_clienteNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfecha_clienteNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_autorizacionNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarfecha_autorizacionNotaCredito);	
		//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_empresaNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_sucursalNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_ejercicioNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_periodoNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_anioNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_mesNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_usuarioNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_monedaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_empleadoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_formatoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_tipo_precioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_facturaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_vendedorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_responsableNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_estado_nota_creditoNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_centro_costoNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_tipo_cambioNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_transporteNotaCredito);//
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setEnabled(isHabilitar && this.notacreditoConstantesFunciones.activarid_transportistaNotaCredito);
	};
	
	public void setDefaultControlesNotaCredito() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoNotaCredito(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.notacreditoSessionBean.setConGuardarRelaciones(true);			
			this.notacreditoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.notacreditoSessionBean.setConGuardarRelaciones(false);			
			this.notacreditoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoNotaCredito() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
				if(notacreditoAux.getId().equals(this.iIdNuevoNotaCredito)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCredito notacreditoAux:this.notacreditos) {
				if(notacreditoAux.getId().equals(this.iIdNuevoNotaCredito)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualNotaCredito(NotaCredito notacredito,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
				if(notacreditoAux.getId().equals(notacredito.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCredito notacreditoAux:this.notacreditos) {
				if(notacreditoAux.getId().equals(notacredito.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalNotaCredito(NotaCredito notacreditoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
				if(notacreditoAux.getNotaCreditoOriginal().getId().equals(notacreditoOriginal.getId())) {
					existe=true;
					notacreditoOriginal.setId(notacreditoAux.getId());
					notacreditoOriginal.setVersionRow(notacreditoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCredito notacreditoAux:this.notacreditos) {
				if(notacreditoAux.getNotaCreditoOriginal().getId().equals(notacreditoOriginal.getId())) {
					existe=true;
					notacreditoOriginal.setId(notacreditoAux.getId());
					notacreditoOriginal.setVersionRow(notacreditoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosNotaCredito(Boolean esParaCancelar) throws Exception {
		notacreditosAux=new ArrayList<NotaCredito>();
		notacreditoAux=new NotaCredito();
		
		if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
					if(notacreditoAux.getId()<0) {
						notacreditosAux.add(notacreditoAux);
					}		
				}
				this.iIdNuevoNotaCredito=0L;
				this.notacreditoLogic.getNotaCreditos().removeAll(notacreditosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCredito notacreditoAux:this.notacreditos) {
					if(notacreditoAux.getId()<0) {
						notacreditosAux.add(notacreditoAux);
					}		
				}
				this.iIdNuevoNotaCredito=0L;
				this.notacreditos.removeAll(notacreditosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoNotaCredito 
					&& this.notacreditoLogic.getNotaCreditos().size()>0
					) {
					notacreditoAux=this.notacreditoLogic.getNotaCreditos().get(this.notacreditoLogic.getNotaCreditos().size() - 1);
				
					if(notacreditoAux.getId()<0) {
						this.notacreditoLogic.getNotaCreditos().remove(notacreditoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoNotaCredito && this.notacreditos.size()>0) {
					notacreditoAux=this.notacreditos.get(this.notacreditos.size() - 1);
				
					if(notacreditoAux.getId()<0) {
						this.notacreditos.remove(notacreditoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoNotaCredito(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(notacredito.getId()<0) {
				this.notacreditoLogic.getNotaCreditos().remove(this.notacredito);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(notacredito.getId()<0) {
				this.notacreditos.remove(this.notacredito);
			}
		}			
	}
	
	public void setEstadosInicialesNotaCredito(List<NotaCredito> notacreditosAux) throws Exception {
		NotaCreditoConstantesFunciones.setEstadosInicialesNotaCredito(notacreditosAux);
	}
	
	public void setEstadosInicialesNotaCredito(NotaCredito notacreditoAux) throws Exception {
		NotaCreditoConstantesFunciones.setEstadosInicialesNotaCredito(notacreditoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarNotaCreditoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarNotaCreditoActual()) {
				if(!this.isEsNuevoNotaCredito) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoNotaCredito=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarNotaCreditoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Nota Credito ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(NotaCredito notacredito) throws Exception {
		NotaCreditoConstantesFunciones.seleccionarAsignar(this.notacredito,notacredito);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarNotaCredito=this.isPermisoActualizarOriginalNotaCredito;
			
			
			this.seleccionarAsignar(notacredito);
			
			

			idEmpleadoActual=notacredito.getid_empleado();
			this.seleccionarEmpleadoActual();

			idClienteActual=notacredito.getid_cliente();
			this.seleccionarClienteActual();

			idFacturaActual=notacredito.getid_factura();
			this.seleccionarFacturaActual();

			idVendedorActual=notacredito.getid_vendedor();
			this.seleccionarVendedorActual();

			idCentroCostoActual=notacredito.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idTipoCambioActual=notacredito.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoConstantesFunciones.quitarEspaciosNotaCredito(this.notacredito,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesNotaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.notacreditoSessionBean.setsFuncionBusquedaRapida(this.notacreditoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarVendedorActual() throws Exception {
		try	{
			Vendedor vendedorAux=new Vendedor();

			if(this.idVendedorActual != null && this.idVendedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(this.idVendedorActual);
					vendedorAux= vendedorLogic.getVendedor();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				vendedorsForeignKey=new ArrayList<Vendedor>();
				vendedorsForeignKey.add(vendedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoNotaCredito) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosNotaCredito(esParaCancelar);				
				this.cancelarNuevoNotaCredito(esParaCancelar);								
			}
			
			this.notacredito=new NotaCredito();
			
			this.inicializarNotaCredito();
			
			this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarNotaCredito() throws Exception {
		try {
			NotaCreditoConstantesFunciones.inicializarNotaCredito(this.notacredito);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.notacreditoLogic.getNotaCreditos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteNotaCreditos(String sAccionBusqueda,List<NotaCredito> notacreditosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="NotaCredito"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="NotaCreditoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("NotaCreditoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="NotaCredito"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Nota Creditos");		
		parameters.put("busquedapor", NotaCreditoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetaNotaCredito.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					NotaCreditoLogic notacreditoLogicAuxiliar=new NotaCreditoLogic();
					notacreditoLogicAuxiliar.setDatosCliente(notacreditoLogic.getDatosCliente());				
					notacreditoLogicAuxiliar.setNotaCreditos(notacreditosParaReportes);
					
					notacreditoLogicAuxiliar.cargarRelacionesLoteForeignKeyNotaCreditoWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					notacreditosParaReportes=notacreditoLogicAuxiliar.getNotaCreditos();
					
					//notacreditoLogic.getNewConnexionToDeep();
					
					//for (NotaCredito notacredito:notacreditosParaReportes) {
					//	notacreditoLogic.deepLoad(notacredito, false, DeepLoadType.INCLUDE, classes);
					//}						
					//notacreditoLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//notacreditoLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetaNotaCredito = AuxiliarReportes.class.getResourceAsStream("DetaNotaCreditoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detanotacredito", reportFileDetaNotaCredito);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceNotaCredito=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			NotaCreditoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			NotaCreditoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceNotaCredito=new JRBeanArrayDataSource(NotaCreditoJInternalFrame.TraerNotaCreditoBeans(notacreditosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceNotaCredito);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+NotaCreditoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+NotaCreditoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(NotaCreditoBean.TraerNotaCreditoBeans(notacreditosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoNotaCreditoActionPerformed(null);
					//this.generarExcelReporteNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesNotaCreditos(sAccionBusqueda,sTipoArchivoReporte,notacreditosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteNotaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCredito> notacreditosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCredito("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(NotaCredito notacredito : notacreditosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			NotaCreditoConstantesFunciones.generarExcelReporteDataNotaCredito("NORMAL",row,workbook,notacredito,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderNotaCredito(String sTipo,Row row,Workbook workbook) {
		
		NotaCreditoConstantesFunciones.generarExcelReporteHeaderNotaCredito(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalNotaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCredito> notacreditosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(NotaCredito notacredito : notacreditosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(NotaCreditoConstantesFunciones.getNotaCreditoDescripcion(notacredito));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getnumero());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getnumero_dias());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_DIRECCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DIRECCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getdireccion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_TELEFONO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TELEFONO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettelefono());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getresponsable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getestadonotacredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getdescuento_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_SUMAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUMAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getsuman());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettotal_sin_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettotal_descuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_OTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getotro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfinanciamiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_OTROVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTROVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getotro_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_RETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getretencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(notacredito.getes_cliente()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettransporte_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.gettransportista_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfecha_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacredito.getfecha_autorizacion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesNotaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCredito> notacreditosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<NotaCredito> notacreditosRespaldo=null;
		
		classes=NotaCreditoConstantesFunciones.getClassesRelationshipsOfNotaCredito(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.notacreditoLogic.setDatosCliente(this.datosCliente);
		this.notacreditoLogic.setDatosDeep(this.datosDeep);
		this.notacreditoLogic.setIsConDeep(true);
		
		notacreditosRespaldo=this.notacreditoLogic.getNotaCreditos();
		
		this.notacreditoLogic.setNotaCreditos(notacreditosParaReportes);	
		this.notacreditoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		notacreditosParaReportes=this.notacreditoLogic.getNotaCreditos();
		this.notacreditoLogic.setNotaCreditos(notacreditosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCredito("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(NotaCredito notacredito : notacreditosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderNotaCredito("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			NotaCreditoConstantesFunciones.generarExcelReporteDataNotaCredito("NORMAL",row,workbook,notacredito,cellStyleDataAux);
		
			
			


				//DetaNotaCredito
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetaNotaCreditoConstantesFunciones.SCLASSWEBTITULO))) {

				if(notacredito.getDetaNotaCreditos()!=null && notacredito.getDetaNotaCreditos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetaNotaCreditoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetaNotaCreditoConstantesFunciones.generarExcelReporteHeaderDetaNotaCredito("RELACIONADO",row,workbook);
				}

				if(notacredito.getDetaNotaCreditos()!=null) {
					i2=0;
					for(DetaNotaCredito detanotacredito : notacredito.getDetaNotaCreditos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetaNotaCreditoConstantesFunciones.generarExcelReporteDataDetaNotaCredito("RELACIONADO",row,workbook,detanotacredito,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(NotaCreditoConstantesFunciones.getNotaCreditoDescripcion(notacredito));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCredito.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessNotaCredito() throws Exception {		
		this.startProcessNotaCredito(true);
	}
	
	public void startProcessNotaCredito(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasNotaCredito ,this.jPanelParametrosReportesNotaCredito, this.jScrollPanelDatosNotaCredito,this.jPanelPaginacionNotaCredito, this.jScrollPanelDatosEdicionNotaCredito, this.jPanelAccionesNotaCredito,this.jPanelAccionesFormularioNotaCredito,this.jmenuBarNotaCredito,this.jmenuBarDetalleNotaCredito,this.jTtoolBarNotaCredito,this.jTtoolBarDetalleNotaCredito);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCredito=this.jTabbedPaneBusquedasNotaCredito; 
		
		final JPanel jPanelParametrosReportesNotaCredito=this.jPanelParametrosReportesNotaCredito;
		//final JScrollPane jScrollPanelDatosNotaCredito=this.jScrollPanelDatosNotaCredito;
		final JTable jTableDatosNotaCredito=this.jTableDatosNotaCredito;		
		final JPanel jPanelPaginacionNotaCredito=this.jPanelPaginacionNotaCredito;
		//final JScrollPane jScrollPanelDatosEdicionNotaCredito=this.jScrollPanelDatosEdicionNotaCredito;
		final JPanel jPanelAccionesNotaCredito=this.jPanelAccionesNotaCredito;
		
		JPanel jPanelCamposAuxiliarNotaCredito=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarNotaCredito=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			jPanelCamposAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jPanelCamposNotaCredito;
			jPanelAccionesFormularioAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jPanelAccionesFormularioNotaCredito;
		}
		
		final JPanel jPanelCamposNotaCredito=jPanelCamposAuxiliarNotaCredito;
		final JPanel jPanelAccionesFormularioNotaCredito=jPanelAccionesFormularioAuxiliarNotaCredito;
		
		
		final JMenuBar jmenuBarNotaCredito=this.jmenuBarNotaCredito;
		final JToolBar jTtoolBarNotaCredito=this.jTtoolBarNotaCredito;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarNotaCredito=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCredito=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			jmenuBarDetalleAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jmenuBarDetalleNotaCredito;
			jTtoolBarDetalleAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jTtoolBarDetalleNotaCredito;
		}
		
		final JMenuBar jmenuBarDetalleNotaCredito=jmenuBarDetalleAuxiliarNotaCredito;
		final JToolBar jTtoolBarDetalleNotaCredito=jTtoolBarDetalleAuxiliarNotaCredito;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCredito;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCredito;
			processRunnable.jTableDatos=jTableDatosNotaCredito;
			processRunnable.jPanelCampos=jPanelCamposNotaCredito;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCredito;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCredito;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCredito;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCredito;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCredito;
			processRunnable.jTtoolBar=jTtoolBarNotaCredito;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCredito;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCredito ,jPanelParametrosReportesNotaCredito,jTableDatosNotaCredito, /*jScrollPanelDatosNotaCredito,*/jPanelCamposNotaCredito,jPanelPaginacionNotaCredito, /*jScrollPanelDatosEdicionNotaCredito,*/ jPanelAccionesNotaCredito,jPanelAccionesFormularioNotaCredito,jmenuBarNotaCredito,jmenuBarDetalleNotaCredito,jTtoolBarNotaCredito,jTtoolBarDetalleNotaCredito);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCredito ,jPanelParametrosReportesNotaCredito, jScrollPanelDatosNotaCredito,jPanelPaginacionNotaCredito, jScrollPanelDatosEdicionNotaCredito, jPanelAccionesNotaCredito,jPanelAccionesFormularioNotaCredito,jmenuBarNotaCredito,jmenuBarDetalleNotaCredito,jTtoolBarNotaCredito,jTtoolBarDetalleNotaCredito);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessNotaCredito() {// throws Exception 
		this.finishProcessNotaCredito(true);
	}
	
	public void finishProcessNotaCredito(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasNotaCredito ,this.jPanelParametrosReportesNotaCredito, this.jScrollPanelDatosNotaCredito,this.jPanelPaginacionNotaCredito, this.jScrollPanelDatosEdicionNotaCredito, this.jPanelAccionesNotaCredito,this.jPanelAccionesFormularioNotaCredito,this.jmenuBarNotaCredito,this.jmenuBarDetalleNotaCredito,this.jTtoolBarNotaCredito,this.jTtoolBarDetalleNotaCredito);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCredito=this.jTabbedPaneBusquedasNotaCredito; 
		
		final JPanel jPanelParametrosReportesNotaCredito=this.jPanelParametrosReportesNotaCredito;
		//final JScrollPane jScrollPanelDatosNotaCredito=this.jScrollPanelDatosNotaCredito;
		final JTable jTableDatosNotaCredito=this.jTableDatosNotaCredito;		
		final JPanel jPanelPaginacionNotaCredito=this.jPanelPaginacionNotaCredito;
		//final JScrollPane jScrollPanelDatosEdicionNotaCredito=this.jScrollPanelDatosEdicionNotaCredito;
		final JPanel jPanelAccionesNotaCredito=this.jPanelAccionesNotaCredito;
		
		JPanel jPanelCamposAuxiliarNotaCredito=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarNotaCredito=new JPanel();
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			jPanelCamposAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jPanelCamposNotaCredito;
			jPanelAccionesFormularioAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jPanelAccionesFormularioNotaCredito;
		}
		
		final JPanel jPanelCamposNotaCredito=jPanelCamposAuxiliarNotaCredito;
		final JPanel jPanelAccionesFormularioNotaCredito=jPanelAccionesFormularioAuxiliarNotaCredito;
		
		
		final JMenuBar jmenuBarNotaCredito=this.jmenuBarNotaCredito;		
		final JToolBar jTtoolBarNotaCredito=this.jTtoolBarNotaCredito;
				
		JMenuBar jmenuBarDetalleAuxiliarNotaCredito=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCredito=new JToolBar();
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			jmenuBarDetalleAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jmenuBarDetalleNotaCredito;
			jTtoolBarDetalleAuxiliarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jTtoolBarDetalleNotaCredito;		
		}
		
		final JMenuBar jmenuBarDetalleNotaCredito=jmenuBarDetalleAuxiliarNotaCredito;
		final JToolBar jTtoolBarDetalleNotaCredito=jTtoolBarDetalleAuxiliarNotaCredito;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCredito;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCredito;
			processRunnable.jTableDatos=jTableDatosNotaCredito;
			processRunnable.jPanelCampos=jPanelCamposNotaCredito;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCredito;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCredito;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCredito;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCredito;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCredito;
			processRunnable.jTtoolBar=jTtoolBarNotaCredito;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCredito;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasNotaCredito ,jPanelParametrosReportesNotaCredito, jTableDatosNotaCredito,/*jScrollPanelDatosNotaCredito,*/jPanelCamposNotaCredito,jPanelPaginacionNotaCredito, /*jScrollPanelDatosEdicionNotaCredito,*/ jPanelAccionesNotaCredito,jPanelAccionesFormularioNotaCredito,jmenuBarNotaCredito,jmenuBarDetalleNotaCredito,jTtoolBarNotaCredito,jTtoolBarDetalleNotaCredito));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesNotaCredito(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarNotaCredito(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuNotaCredito(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarNotaCredito(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarNotaCredito,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleNotaCredito,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuNotaCredito(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarNotaCredito,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleNotaCredito,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.notacreditoConstantesFunciones.getsFinalQueryNotaCredito();
		String  finalQueryPaginacionTodos=this.notacreditoConstantesFunciones.getsFinalQueryNotaCredito();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=NotaCreditoConstantesFunciones.getArrayColumnasGlobalesNoNotaCredito(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=NotaCreditoConstantesFunciones.getArrayColumnasGlobalesNotaCredito(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,NotaCreditoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.notacreditosEliminados= new ArrayList<NotaCredito>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessNotaCredito();
		
				///*NotaCreditoSessionBean*/this.notacreditoSessionBean=new NotaCreditoSessionBean();
			
			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=NotaCreditoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=NotaCreditoConstantesFunciones.getClassesForeignKeysOfNotaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/notacredito."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			notacreditosAux= new ArrayList<NotaCredito>();
			
				
			notacreditoLogic.setDatosCliente(this.datosCliente);
			notacreditoLogic.setDatosDeep(this.datosDeep);
			notacreditoLogic.setIsConDeep(true);
			
			
			notacreditoLogic.getNotaCreditoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					notacreditoLogic.getTodosNotaCreditos(finalQueryGlobal,pagination);
					
					//notacreditoLogic.getTodosNotaCreditosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(notacreditoLogic.getNotaCreditos()==null|| notacreditoLogic.getNotaCreditos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditosAux= new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux= new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditoLogic.getTodosNotaCreditos(finalQueryGlobal+"",this.pagination);												
							
							//notacreditoLogic.getTodosNotaCreditosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteNotaCreditos("Todos",notacreditoLogic.getNotaCreditos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());					
							notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idNotaCredito=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idNotaCredito=this.idActual;
				
				} else if(this.idNotaCreditoActual!=null && this.idNotaCreditoActual!=0L) {
					idNotaCredito=idNotaCreditoActual;
				}
				
					
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndicePorId(idNotaCredito);
				
				this.notacreditos=new ArrayList<NotaCredito>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					notacreditoLogic.getEntity(idNotaCredito);
					
					//notacreditoLogic.getEntityWithConnection(idNotaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
					notacreditoLogic.getNotaCreditos().add(notacreditoLogic.getNotaCredito());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditos=new ArrayList<NotaCredito>();
					this.notacreditos.add(notacredito);
				}
				
				if(notacreditoLogic.getNotaCredito()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("BusquedaPorCodigo",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("BusquedaPorCodigo",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNumeroPreImpreso")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numeroBusquedaPorNumeroPreImpreso);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosBusquedaPorNumeroPreImpreso(finalQueryGlobal,pagination,numeroBusquedaPorNumeroPreImpreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numeroBusquedaPorNumeroPreImpreso);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numeroBusquedaPorNumeroPreImpreso);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosBusquedaPorNumeroPreImpreso(finalQueryGlobal,pagination,numeroBusquedaPorNumeroPreImpreso);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numeroBusquedaPorNumeroPreImpreso);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroPreImpreso(numeroBusquedaPorNumeroPreImpreso);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("BusquedaPorNumeroPreImpreso",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("BusquedaPorNumeroPreImpreso",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdCliente",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdCliente",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdEjercicio",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdEjercicio",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdEmpresa",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdEmpresa",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdFactura",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdFactura",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdPeriodo",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdPeriodo",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdSucursal",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdSucursal",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransportista")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdTransportista(finalQueryGlobal,pagination,id_transportistaFK_IdTransportista);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdTransportista(id_transportistaFK_IdTransportista);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdTransportista",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdTransportista",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdUsuario",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdUsuario",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditoLogic.getNotaCreditosFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditoLogic.getNotaCreditos()==null||notacreditoLogic.getNotaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditos==null|| notacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditosAux=new ArrayList<NotaCredito>();
						notacreditosAux.addAll(notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditosAux=new ArrayList<NotaCredito>();
							notacreditosAux.addAll(notacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditoLogic.getNotaCreditosFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditos("FK_IdVendedor",notacreditoLogic.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditos("FK_IdVendedor",notacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoLogic.setNotaCreditos(new ArrayList<NotaCredito>());
						notacreditoLogic.getNotaCreditos().addAll(notacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditos=new ArrayList<NotaCredito>();
							notacreditos.addAll(notacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesNotaCredito();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessNotaCredito();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditoLogic.getNotaCreditos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditoLogic.getNotaCreditos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(NotaCredito notacredito) {
		Boolean permite=true;
		
		if(this.notacredito.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=NotaCreditoConstantesFunciones.getOrderByListaNotaCredito();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=NotaCreditoConstantesFunciones.getOrderByListaNotaCredito();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCredito notacredito:notacreditoLogic.getNotaCreditos()) {
				if(notacredito.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditoTotales=notacredito;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCredito notacredito:this.notacreditos) {
				if(notacredito.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditoTotales=notacredito;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.notacreditoAux=new NotaCredito();
			this.notacreditoAux.setsType(Constantes2.S_TOTALES);
			this.notacreditoAux.setIsNew(false);
			this.notacreditoAux.setIsChanged(false);
			this.notacreditoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				NotaCreditoConstantesFunciones.TotalizarValoresFilaNotaCredito(this.notacreditoLogic.getNotaCreditos(),this.notacreditoAux);
				
				this.notacreditoLogic.getNotaCreditos().add(this.notacreditoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				NotaCreditoConstantesFunciones.TotalizarValoresFilaNotaCredito(this.notacreditos,this.notacreditoAux);
				
				this.notacreditos.add(this.notacreditoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		notacreditoTotales=new NotaCredito();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditoLogic.getNotaCreditos().remove(notacreditoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditos.remove(notacreditoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		notacreditoTotales=new NotaCredito();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCredito notacredito:notacreditoLogic.getNotaCreditos()) {
				if(notacredito.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditoTotales=notacredito;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoConstantesFunciones.TotalizarValoresFilaNotaCredito(this.notacreditoLogic.getNotaCreditos(),notacreditoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCredito notacredito:this.notacreditos) {
				if(notacredito.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditoTotales=notacredito;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoConstantesFunciones.TotalizarValoresFilaNotaCredito(this.notacreditos,notacreditoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getNotaCreditosBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosBusquedaPorNumeroPreImpreso()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroPreImpreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdNotaCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdNotaCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdResponsable()throws Exception {
		try {
			sAccionBusqueda="FK_IdResponsable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdTipoCambio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCambio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdTransporte()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransporte";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdTransportista()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransportista";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditosFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getNotaCreditosBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosBusquedaPorNumeroPreImpreso(String sFinalQuery,String numero)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosBusquedaPorNumeroPreImpreso(sFinalQuery,this.pagination,numero);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdNotaCredito(String sFinalQuery,Long id_estado_nota_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdNotaCredito(sFinalQuery,this.pagination,id_estado_nota_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdResponsable(String sFinalQuery,Long id_responsable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdResponsable(sFinalQuery,this.pagination,id_responsable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdTipoCambio(String sFinalQuery,Long id_tipo_cambio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdTipoCambio(sFinalQuery,this.pagination,id_tipo_cambio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdTransporte(String sFinalQuery,Long id_transporte)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdTransporte(sFinalQuery,this.pagination,id_transporte);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdTransportista(String sFinalQuery,Long id_transportista)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdTransportista(sFinalQuery,this.pagination,id_transportista);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditosFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLogic.getNotaCreditosFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosNotaCredito() {
		this.isPermisoTodoNotaCredito=false;
		this.isPermisoNuevoNotaCredito=false;
		this.isPermisoActualizarNotaCredito=false;
		this.isPermisoActualizarOriginalNotaCredito=false;
		this.isPermisoEliminarNotaCredito=false;
		this.isPermisoGuardarCambiosNotaCredito=false;
		this.isPermisoConsultaNotaCredito=false;
		this.isPermisoBusquedaNotaCredito=false;
		this.isPermisoReporteNotaCredito=false;		
		this.isPermisoOrdenNotaCredito=false;		
		this.isPermisoPaginacionMedioNotaCredito=false;		
		this.isPermisoPaginacionAltoNotaCredito=false;
		this.isPermisoPaginacionTodoNotaCredito=false;
		this.isPermisoCopiarNotaCredito=false;		
		this.isPermisoVerFormNotaCredito=false;		
		this.isPermisoDuplicarNotaCredito=false;		
		this.isPermisoOrdenNotaCredito=false;		
	}
	
	public void setPermisosUsuarioNotaCredito(Boolean isPermiso) {
		this.isPermisoTodoNotaCredito=isPermiso;
		this.isPermisoNuevoNotaCredito=isPermiso;
		this.isPermisoActualizarNotaCredito=isPermiso;
		this.isPermisoActualizarOriginalNotaCredito=isPermiso;
		this.isPermisoEliminarNotaCredito=isPermiso;
		this.isPermisoGuardarCambiosNotaCredito=isPermiso;
		this.isPermisoConsultaNotaCredito=isPermiso;
		this.isPermisoBusquedaNotaCredito=isPermiso;
		this.isPermisoReporteNotaCredito=isPermiso;
		this.isPermisoOrdenNotaCredito=isPermiso;		
		this.isPermisoPaginacionMedioNotaCredito=isPermiso;		
		this.isPermisoPaginacionAltoNotaCredito=isPermiso;		
		this.isPermisoPaginacionTodoNotaCredito=isPermiso;		
		this.isPermisoCopiarNotaCredito=isPermiso;		
		this.isPermisoVerFormNotaCredito=isPermiso;		
		this.isPermisoDuplicarNotaCredito=isPermiso;
		this.isPermisoOrdenNotaCredito=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioNotaCredito(Boolean isPermiso) {
		//this.isPermisoTodoNotaCredito=isPermiso;
		this.isPermisoNuevoNotaCredito=isPermiso;
		this.isPermisoActualizarNotaCredito=isPermiso;
		this.isPermisoActualizarOriginalNotaCredito=isPermiso;
		this.isPermisoEliminarNotaCredito=isPermiso;
		this.isPermisoGuardarCambiosNotaCredito=isPermiso;
		//this.isPermisoConsultaNotaCredito=isPermiso;
		//this.isPermisoBusquedaNotaCredito=isPermiso;
		//this.isPermisoReporteNotaCredito=isPermiso;
		//this.isPermisoOrdenNotaCredito=isPermiso;		
		//this.isPermisoPaginacionMedioNotaCredito=isPermiso;		
		//this.isPermisoPaginacionAltoNotaCredito=isPermiso;		
		//this.isPermisoPaginacionTodoNotaCredito=isPermiso;		
		//this.isPermisoCopiarNotaCredito=isPermiso;		
		//this.isPermisoDuplicarNotaCredito=isPermiso;
		//this.isPermisoOrdenNotaCredito=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetaNotaCreditoConstantesFunciones.SNOMBREOPCION);
		
		if(NotaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetaNotaCredito=false;
		this.isTienePermisosDetaNotaCredito=this.verificarGetPermisosUsuarioOpcionNotaCreditoClaseRelacionada(this.opcionsRelacionadas,DetaNotaCreditoConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebNotaCredito(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetaNotaCredito=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioNotaCreditoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionNotaCreditoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioNotaCreditoClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetaNotaCredito && this.jInternalFrameDetalleFormNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.remove(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioNotaCredito() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(NotaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, NotaCreditoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoNotaCredito=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarNotaCredito=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalNotaCredito=this.isPermisoActualizarNotaCredito;
			this.isPermisoEliminarNotaCredito=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosNotaCredito=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaNotaCredito=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaNotaCredito=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoNotaCredito=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteNotaCredito=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCredito=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioNotaCredito=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoNotaCredito=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoNotaCredito=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarNotaCredito=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormNotaCredito=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarNotaCredito=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCredito=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosNotaCredito.setToolTipText(this.jTableDatosNotaCredito.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioNotaCredito(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioNotaCredito(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(NotaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(NotaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioNotaCredito() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetaNotaCredito && this.notacreditoConstantesFunciones.mostrarDetaNotaCreditoNotaCredito && !NotaCreditoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Deta Nota Credito");
			reporte.setsDescripcion("Deta Nota Credito");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyNotaCreditoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.responsablesForeignKey=new ArrayList();
				this.estadonotacreditosForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
				this.transportesForeignKey=new ArrayList();
				this.transportistasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyNotaCreditoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(NotaCreditoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyNotaCreditoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoNotaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ResponsableConstantesFunciones.SFINALQUERY;

				this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadonotacreditosForeignKey==null||this.estadonotacreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoNotaCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransporteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportistaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransportistaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyNotaCreditoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			NotaCreditoParameterReturnGeneral notacreditoReturnGeneral=new NotaCreditoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_empresaNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_empresaNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_sucursalNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_sucursalNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_ejercicioNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_ejercicioNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_periodoNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_periodoNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_anioNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_anioNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_mesNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_mesNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_usuarioNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_usuarioNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_monedaNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_monedaNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_empleadoNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_empleadoNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_formatoNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_formatoNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_tipo_precioNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_tipo_precioNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_clienteNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_clienteNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_facturaNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_facturaNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_vendedorNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_vendedorNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalResponsable="";

				if(((this.responsablesForeignKey==null||this.responsablesForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_responsableNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_responsableNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ResponsableConstantesFunciones.getArrayColumnasGlobalesResponsable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalResponsable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableConstantesFunciones.TABLENAME);

						finalQueryGlobalResponsable=Funciones.GetFinalQueryAppend(finalQueryGlobalResponsable, "");
						finalQueryGlobalResponsable+=ResponsableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosResponsablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalResponsable=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidResponsableActual();
					}
				} else {
					finalQueryGlobalResponsable="NONE";
				}


				String finalQueryGlobalEstadoNotaCredito="";

				if(((this.estadonotacreditosForeignKey==null||this.estadonotacreditosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_estado_nota_creditoNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_estado_nota_creditoNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoNotaCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoNotaCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoNotaCredito, "");
						finalQueryGlobalEstadoNotaCredito+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoNotaCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoNotaCredito=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidEstadoNotaCreditoActual();
					}
				} else {
					finalQueryGlobalEstadoNotaCredito="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_centro_costoNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_centro_costoNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_tipo_cambioNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_tipo_cambioNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}


				String finalQueryGlobalTransporte="";

				if(((this.transportesForeignKey==null||this.transportesForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_transporteNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_transporteNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransporteConstantesFunciones.getArrayColumnasGlobalesTransporte(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransporte=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransporteConstantesFunciones.TABLENAME);

						finalQueryGlobalTransporte=Funciones.GetFinalQueryAppend(finalQueryGlobalTransporte, "");
						finalQueryGlobalTransporte+=TransporteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransporte=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidTransporteActual();
					}
				} else {
					finalQueryGlobalTransporte="NONE";
				}


				String finalQueryGlobalTransportista="";

				if(((this.transportistasForeignKey==null||this.transportistasForeignKey.size()<=0) && this.notacreditoConstantesFunciones.cargarid_transportistaNotaCredito)
					 || (this.esRecargarFks && this.notacreditoConstantesFunciones.cargarid_transportistaNotaCredito)) {

					if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransportistaConstantesFunciones.getArrayColumnasGlobalesTransportista(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransportista=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransportistaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransportista=Funciones.GetFinalQueryAppend(finalQueryGlobalTransportista, "");
						finalQueryGlobalTransportista+=TransportistaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransportistasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransportista=" WHERE " + ConstantesSql.ID + "="+notacreditoSessionBean.getlidTransportistaActual();
					}
				} else {
					finalQueryGlobalTransportista="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				notacreditoReturnGeneral=notacreditoLogic.cargarCombosLoteForeignKeyNotaCredito(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalMoneda,finalQueryGlobalEmpleado,finalQueryGlobalFormato,finalQueryGlobalTipoPrecio,finalQueryGlobalCliente,finalQueryGlobalFactura,finalQueryGlobalVendedor,finalQueryGlobalResponsable,finalQueryGlobalEstadoNotaCredito,finalQueryGlobalCentroCosto,finalQueryGlobalTipoCambio,finalQueryGlobalTransporte,finalQueryGlobalTransportista);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=notacreditoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=notacreditoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=notacreditoReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=notacreditoReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=notacreditoReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=notacreditoReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=notacreditoReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=notacreditoReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=notacreditoReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=notacreditoReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=notacreditoReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=notacreditoReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=notacreditoReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=notacreditoReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalResponsable.equals("NONE")) {
				this.responsablesForeignKey=notacreditoReturnGeneral.getresponsablesForeignKey();
			}

			if(!finalQueryGlobalEstadoNotaCredito.equals("NONE")) {
				this.estadonotacreditosForeignKey=notacreditoReturnGeneral.getestadonotacreditosForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=notacreditoReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=notacreditoReturnGeneral.gettipocambiosForeignKey();
			}

			if(!finalQueryGlobalTransporte.equals("NONE")) {
				this.transportesForeignKey=notacreditoReturnGeneral.gettransportesForeignKey();
			}

			if(!finalQueryGlobalTransportista.equals("NONE")) {
				this.transportistasForeignKey=notacreditoReturnGeneral.gettransportistasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyNotaCredito()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyResponsable();
			this.addItemDefectoCombosForeignKeyEstadoNotaCredito();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyTipoCambio();
			this.addItemDefectoCombosForeignKeyTransporte();
			this.addItemDefectoCombosForeignKeyTransportista();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyResponsable()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionResponsable()) {
				Responsable responsable=new Responsable();
				ResponsableConstantesFunciones.setResponsableDescripcion(responsable,Constantes.SMENSAJE_ESCOJA_OPCION);
				responsable.setId(null);

				if(!ResponsableConstantesFunciones.ExisteEnLista(this.responsablesForeignKey,responsable,true)) {

					this.responsablesForeignKey.add(0,responsable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoNotaCredito()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCredito()) {
				EstadoNotaCredito estadonotacredito=new EstadoNotaCredito();
				EstadoNotaCreditoConstantesFunciones.setEstadoNotaCreditoDescripcion(estadonotacredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadonotacredito.setId(null);

				if(!EstadoNotaCreditoConstantesFunciones.ExisteEnLista(this.estadonotacreditosForeignKey,estadonotacredito,true)) {

					this.estadonotacreditosForeignKey.add(0,estadonotacredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransporte()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransporte()) {
				Transporte transporte=new Transporte();
				TransporteConstantesFunciones.setTransporteDescripcion(transporte,Constantes.SMENSAJE_ESCOJA_OPCION);
				transporte.setId(null);

				if(!TransporteConstantesFunciones.ExisteEnLista(this.transportesForeignKey,transporte,true)) {

					this.transportesForeignKey.add(0,transporte);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransportista()throws Exception {
		try {

			if(!this.notacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTransportista()) {
				Transportista transportista=new Transportista();
				TransportistaConstantesFunciones.setTransportistaDescripcion(transportista,Constantes.SMENSAJE_ESCOJA_OPCION);
				transportista.setId(null);

				if(!TransportistaConstantesFunciones.ExisteEnLista(this.transportistasForeignKey,transportista,true)) {

					this.transportistasForeignKey.add(0,transportista);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyNotaCredito()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyNotaCredito(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyNotaCredito()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.notacredito.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacredito.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacredito.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacredito.setfecha_cliente(this.parametroGeneralUsuario.getfecha_sistema());
				this.notacredito.setfecha_autorizacion(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCredito();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyNotaCredito(NotaCredito notacredito)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(notacredito.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(notacredito.getid_formato(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(notacredito.getid_tipo_precio(),false,"Formulario");
			this.setActualClienteForeignKey(notacredito.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(notacredito.getid_factura(),false,"Formulario");
			this.setActualVendedorForeignKey(notacredito.getid_vendedor(),false,"Formulario");
			this.setActualResponsableForeignKey(notacredito.getid_responsable(),false,"Formulario");
			this.setActualEstadoNotaCreditoForeignKey(notacredito.getid_estado_nota_credito(),false,"Formulario");
			this.setActualCentroCostoForeignKey(notacredito.getid_centro_costo(),false,"Formulario");
			this.setActualTipoCambioForeignKey(notacredito.getid_tipo_cambio(),false,"Formulario");
			this.setActualTransporteForeignKey(notacredito.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(notacredito.getid_transportista(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyNotaCredito(NotaCredito notacredito,String sTipoEvento)throws Exception {	
		try {
			
			

				if(notacredito.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(notacredito.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(notacredito.getCliente()!=null && !sTipoEvento.equals("id_clienteNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(notacredito.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(notacredito.getFactura()!=null && !sTipoEvento.equals("id_facturaNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(notacredito.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(notacredito.getVendedor()!=null && !sTipoEvento.equals("id_vendedorNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.vendedorsForeignKey=new ArrayList<Vendedor>();
					this.vendedorsForeignKey.add(notacredito.getVendedor());

					this.addItemDefectoCombosForeignKeyVendedor();
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				if(notacredito.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(notacredito.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(notacredito.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioNotaCredito")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(notacredito.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyNotaCredito()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.notacreditoConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualFormatoForeignKey(this.notacreditoConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.notacreditoConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualClienteForeignKey(this.notacreditoConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(this.notacreditoConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualVendedorForeignKey(this.notacreditoConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualResponsableForeignKey(this.notacreditoConstantesFunciones.getid_responsable(),false,"Formulario");
			this.setActualEstadoNotaCreditoForeignKey(this.notacreditoConstantesFunciones.getid_estado_nota_credito(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.notacreditoConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualTipoCambioForeignKey(this.notacreditoConstantesFunciones.getid_tipo_cambio(),false,"Formulario");
			this.setActualTransporteForeignKey(this.notacreditoConstantesFunciones.getid_transporte(),false,"Formulario");
			this.setActualTransportistaForeignKey(this.notacreditoConstantesFunciones.getid_transportista(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCredito()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormNotaCredito!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormNotaCredito!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyNotaCredito()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyNotaCredito()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroNotaCredito()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyNotaCredito()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameResponsablesForeignKey("Todos");
			this.cargarCombosFrameEstadoNotaCreditosForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");
			this.cargarCombosFrameTransportesForeignKey("Todos");
			this.cargarCombosFrameTransportistasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyNotaCredito(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoNotaCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyNotaCredito()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	








































	
	

	public NotaCreditoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public NotaCreditoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public NotaCreditoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.notacreditoSessionBean=new NotaCreditoSessionBean(); 
		this.notacreditoConstantesFunciones=new NotaCreditoConstantesFunciones(); 
		this.notacreditoBean=new NotaCredito();//(this.notacreditoConstantesFunciones); 		
		this.notacreditoReturnGeneral=new NotaCreditoParameterReturnGeneral(); 
		
		this.notacreditoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.notacreditoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public NotaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public NotaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public NotaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessNotaCredito(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.notacreditoConstantesFunciones=new NotaCreditoConstantesFunciones(); 
			this.notacreditoBean=new NotaCredito();//this.notacreditoConstantesFunciones); 			
			this.notacreditoReturnGeneral=new NotaCreditoParameterReturnGeneral(); 
		
			NotaCreditoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Nota Credito Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.notacredito=new NotaCredito();
			this.notacreditos = new ArrayList<NotaCredito>();
			this.notacreditosAux = new ArrayList<NotaCredito>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic=new NotaCreditoLogic();
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			//this.notacreditoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.notacreditoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormNotaCredito);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCredito);	
					}
					
					if(this.jInternalFrameImportacionNotaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCredito);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByNotaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByNotaCredito);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormNotaCredito!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCredito);
				this.jInternalFrameDetalleFormNotaCredito.setVisible(false);
				this.jInternalFrameDetalleFormNotaCredito.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCredito);
					this.jInternalFrameReporteDinamicoNotaCredito.setVisible(false);
					this.jInternalFrameReporteDinamicoNotaCredito.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionNotaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionNotaCredito);
					this.jInternalFrameImportacionNotaCredito.setVisible(false);
					this.jInternalFrameImportacionNotaCredito.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByNotaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByNotaCredito);
					this.jInternalFrameOrderByNotaCredito.setVisible(false);
					this.jInternalFrameOrderByNotaCredito.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idNotaCreditoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=NotaCreditoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.notacreditoReturnGeneral=new NotaCreditoParameterReturnGeneral();
			
			this.notacreditoParameterGeneral=new NotaCreditoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.notacreditoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(NotaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetaNotaCreditoConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditoSessionBean.getEsGuardarRelacionado(),this.notacreditoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditoSessionBean.getEsGuardarRelacionado(),this.notacreditoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaDuplicarNotaCredito=true;
			this.isVisibilidadCeldaCopiarNotaCredito=true;
			this.isVisibilidadCeldaVerFormNotaCredito=true;
			this.isVisibilidadCeldaOrdenNotaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=false;
			this.isVisibilidadCeldaGuardarNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNumeroPreImpreso=true;
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdNotaCredito=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdResponsable=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdTransporte=true;
			this.isVisibilidadFK_IdTransportista=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosNotaCredito();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioNotaCredito(false);
			
			this.setPermisosUsuarioNotaCredito();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditoSessionBean.getEsGuardarRelacionado() 
				|| (this.notacreditoSessionBean.getEsGuardarRelacionado() && this.notacreditoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioNotaCreditoClasesRelacionadas();
			}
			
			if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioNotaCreditoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosNotaCredito();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualNotaCredito();
			}
			
			if(!this.isPermisoBusquedaNotaCredito) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasNotaCredito.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioNotaCredito,this.isPermisoPaginacionMedioNotaCredito,this.isPermisoPaginacionTodoNotaCredito);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(NotaCreditoConstantesFunciones.getTiposSeleccionarNotaCredito());
				
				this.tiposColumnasSelect=NotaCreditoConstantesFunciones.getTiposSeleccionarNotaCredito(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectNotaCredito();				
				//this.tiposRelacionesSelect=NotaCreditoConstantesFunciones.getTiposRelacionesNotaCredito(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioNotaCredito();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioNotaCredito(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioNotaCredito(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCredito() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detanotacreditoLogic=new DetaNotaCreditoLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.monedaLogic=new MonedaLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.formatoLogic=new FormatoLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.clienteLogic=new ClienteLogic();
			this.facturaLogic=new FacturaLogic();
			this.vendedorLogic=new VendedorLogic();
			this.responsableLogic=new ResponsableLogic();
			this.estadonotacreditoLogic=new EstadoNotaCreditoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			this.transporteLogic=new TransporteLogic();
			this.transportistaLogic=new TransportistaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				notacreditoImplementable= (NotaCreditoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				notacreditoImplementableHome= (NotaCreditoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.notacreditos= new ArrayList<NotaCredito>();
			this.notacreditosEliminados= new ArrayList<NotaCredito>();
						
			this.isEsNuevoNotaCredito=false;
			this.esParaAccionDesdeFormularioNotaCredito=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idEmpleadoActual=0L;
			this.idClienteActual=0L;
			this.idFacturaActual=0L;
			this.idVendedorActual=0L;
			this.idCentroCostoActual=0L;
			this.idTipoCambioActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.responsablesForeignKey=new ArrayList<Responsable>() ;
			this.estadonotacreditosForeignKey=new ArrayList<EstadoNotaCredito>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			this.transportesForeignKey=new ArrayList<Transporte>() ;
			this.transportistasForeignKey=new ArrayList<Transportista>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyNotaCredito(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroNotaCredito();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			NotaCreditoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=NotaCreditoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesNotaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingNotaCredito(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioNotaCredito();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioNotaCredito();
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasNotaCredito.getTabCount(); i++) {
					this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessNotaCredito(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga NotaCredito: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectNotaCredito() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetaNotaCreditoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetaNotaCreditoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesNotaCredito")) {
				iIndex=this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();	
				
				

				if(sTitle.equals("Deta Nota Creditos")) {
					if(!DetaNotaCreditoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessNotaCredito();

						this.cargarParteTabPanelRelacionadaDetaNotaCredito(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessNotaCredito();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetaNotaCredito(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormNotaCredito.cargarSessionConBeanSwingJInternalFrameDetaNotaCredito(false,true,iIndex);
		this.jButtonDetaNotaCreditoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetaNotaCredito();

		//this.jTabbedPaneRelacionesNotaCredito.updateUI();
		//this.jTabbedPaneRelacionesNotaCredito.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesNotaCredito.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetaNotaCredito")) {
				int row=this.jTableDatosNotaCredito.getSelectedRow();
				jButtonDetaNotaCreditoActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Deta Nota Credito")) {

					if(this.isTienePermisosDetaNotaCredito && this.notacreditoConstantesFunciones.mostrarDetaNotaCreditoNotaCredito && !NotaCreditoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Deta Nota Creditos"+"("+DetaNotaCreditoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Deta Nota Creditos");

						if(notacreditoConstantesFunciones.resaltarDetaNotaCreditoNotaCredito!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(notacreditoConstantesFunciones.resaltarDetaNotaCreditoNotaCredito);
						}

						jmenuItem.setEnabled(this.notacreditoConstantesFunciones.activarDetaNotaCreditoNotaCredito);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetaNotaCredito"));

						

						this.jInternalFrameDetalleFormNotaCredito.jmenuDetalleNotaCredito.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyNotaCredito(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyNotaCredito(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyNotaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyNotaCreditoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyNotaCredito();
		
		this.cargarCombosFrameForeignKeyNotaCredito();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyNotaCredito();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyNotaCredito();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyResponsableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyResponsable();
				this.cargarCombosFrameResponsablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaResponsable(this.responsablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoNotaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoNotaCredito();
				this.cargarCombosFrameEstadoNotaCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoNotaCredito(this.estadonotacreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransporte(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransporteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransporte();
				this.cargarCombosFrameTransportesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransporte(this.transportesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransportista(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransportistaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransportista();
				this.cargarCombosFrameTransportistasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransportista(this.transportistasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoNotaCreditoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			
			if(jTableDatosNotaCredito.getRowCount()>=1) {
				jTableDatosNotaCredito.removeRowSelectionInterval(0, jTableDatosNotaCredito.getRowCount()-1);						
			}
			
			this.isEsNuevoNotaCredito=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoNotaCredito(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesNotaCredito(true);			
			//this.notacredito=new NotaCredito();
			//this.notacredito.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCredito(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCredito() ;
			
			if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCredito(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.notacredito);	
			this.actualizarInformacion("INFO_PADRE",false,this.notacredito);				
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar NotaCredito: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarNotaCreditoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosNotaCredito.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosNotaCredito.getSelectedRows().length;			
			}
			
			notacreditosSeleccionados=this.getNotaCreditosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoNotaCredito--;			
				//NotaCredito notacreditoAux= new NotaCredito();			
				//notacreditoAux.setId(this.iIdNuevoNotaCredito);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//NotaCredito notacreditoOrigen=new NotaCredito();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(NotaCredito notacreditoOrigen : notacreditosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							notacreditoOrigen =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditoOrigen =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaNotaCredito();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.notacredito.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosNotaCredito(notacreditoOrigen,this.notacredito,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditoLogic.getNotaCreditos().add(this.notacreditoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditos.add(this.notacreditoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaNotaCredito(false);
				
				this.jTableDatosNotaCredito.setRowSelectionInterval(this.getIndiceNuevoNotaCredito(), this.getIndiceNuevoNotaCredito());
				
				int iLastRow =  this.jTableDatosNotaCredito.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCredito.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCredito.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCredito(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();									
		
			NotaCredito notacreditoOrigen=new NotaCredito();
			NotaCredito notacreditoDestino=new NotaCredito();
				
			notacreditosSeleccionados=this.getNotaCreditosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosNotaCredito.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || notacreditosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosNotaCredito.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoOrigen =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditoOrigen =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditoDestino =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditoDestino =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				notacreditoOrigen =notacreditosSeleccionados.get(0);
				notacreditoDestino =notacreditosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosNotaCredito(notacreditoOrigen,notacreditoDestino,true,false);
				
				notacreditoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditoDestino,notacreditoLogic.getNotaCreditos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditoDestino,notacreditos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaNotaCredito(false);
				
				//this.jTableDatosNotaCredito.setRowSelectionInterval(this.getIndiceNuevoNotaCredito(), this.getIndiceNuevoNotaCredito());
				
				int iLastRow =  this.jTableDatosNotaCredito.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCredito.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCredito.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCredito(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormNotaCredito.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesNotaCredito.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasNotaCredito.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesNotaCredito.setVisible(!isVisible);
			this.jPanelPaginacionNotaCredito.setVisible(!isVisible);
			this.jPanelAccionesNotaCredito.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameNotaCredito();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoNotaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionNotaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByNotaCredito();
			
			this.abrirFrameOrderByNotaCredito();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByNotaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleNotaCredito(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCredito);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormNotaCredito.isMaximum()) {
					this.jInternalFrameDetalleFormNotaCredito.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormNotaCredito.setSize(this.jInternalFrameDetalleFormNotaCredito.iWidthFormulario,this.jInternalFrameDetalleFormNotaCredito.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormNotaCredito.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormNotaCredito.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormNotaCredito.isMaximum()) {
						this.jInternalFrameDetalleFormNotaCredito.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormNotaCredito.jContentPaneDetalleNotaCredito.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormNotaCredito.jContentPaneDetalleNotaCredito.getWidth(),NotaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormNotaCredito.jContentPaneDetalleNotaCredito.getWidth(),NotaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormNotaCredito.jContentPaneDetalleNotaCredito.getWidth(),NotaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetaNotaCreditoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetaNotaCredito();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormNotaCredito.setVisible(true);
	        this.jInternalFrameDetalleFormNotaCredito.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByNotaCredito() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByNotaCredito==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByNotaCredito=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCredito,false,this);
				} else {
					this.jInternalFrameOrderByNotaCredito=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCredito,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByNotaCredito);
				this.jInternalFrameOrderByNotaCredito.setVisible(false);
				this.jInternalFrameOrderByNotaCredito.setSelected(false);
				
				this.jInternalFrameOrderByNotaCredito.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCredito"));
				
				this.inicializarActualizarBindingTablaOrderByNotaCredito();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionNotaCredito() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionNotaCredito==null) {
				
				this.jInternalFrameImportacionNotaCredito=new ImportacionJInternalFrame(NotaCreditoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCredito);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionNotaCredito);
				this.jInternalFrameImportacionNotaCredito.setVisible(false);
				this.jInternalFrameImportacionNotaCredito.setSelected(false);


				this.jInternalFrameImportacionNotaCredito.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCredito"));
				this.jInternalFrameImportacionNotaCredito.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCredito"));
				this.jInternalFrameImportacionNotaCredito.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCredito"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoNotaCredito() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoNotaCredito==null) {
				this.jInternalFrameReporteDinamicoNotaCredito=new ReporteDinamicoJInternalFrame(NotaCreditoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCredito);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCredito);
				this.jInternalFrameReporteDinamicoNotaCredito.setVisible(false);
				this.jInternalFrameReporteDinamicoNotaCredito.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCredito"));
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCredito"));
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCredito"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCredito();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetaNotaCredito() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCredito.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormNotaCredito.jContentPaneDetalleNotaCredito.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCredito.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCredito.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCredito.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleNotaCredito() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCredito);
			
	       	this.jInternalFrameDetalleFormNotaCredito.setVisible(false);
	        this.jInternalFrameDetalleFormNotaCredito.setSelected(false);
			
			//this.jInternalFrameDetalleFormNotaCredito.dispose();
			//this.jInternalFrameDetalleFormNotaCredito=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoNotaCredito() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoNotaCredito.setVisible(true);
	        this.jInternalFrameReporteDinamicoNotaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionNotaCredito() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionNotaCredito.setVisible(true);
	        this.jInternalFrameImportacionNotaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByNotaCredito() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByNotaCredito.setVisible(true);
	        this.jInternalFrameOrderByNotaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByNotaCredito() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByNotaCredito.setVisible(false);
	        this.jInternalFrameOrderByNotaCredito.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoNotaCredito() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoNotaCredito.setVisible(false);
	        this.jInternalFrameReporteDinamicoNotaCredito.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionNotaCredito() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionNotaCredito.setVisible(false);
	        this.jInternalFrameImportacionNotaCredito.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderNotaCredito.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderNotaCredito.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarNotaCredito(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarNotaCredito(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesNotaCredito(true);
			//this.isEsNuevoNotaCredito=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesNotaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCredito(false) ;
			
			if(notacreditoSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.getEsGuardarRelacionado() && DetaNotaCreditoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetaNotaCreditoActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCredito(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCredito(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaNotaCreditoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarNotaCredito(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesNotaCredito(true);
			//this.isEsNuevoNotaCredito=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.notacredito.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesNotaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesNotaCredito(false) ;
			
			if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCredito(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCredito(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Empleado")) {
				if(!this.notacreditoConstantesFunciones.cargarid_empleadoNotaCredito) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.notacreditoConstantesFunciones.cargarid_clienteNotaCredito) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.notacreditoConstantesFunciones.cargarid_facturaNotaCredito) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("Vendedor")) {
				if(!this.notacreditoConstantesFunciones.cargarid_vendedorNotaCredito) {
					this.cargarCombosVendedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_vendedor (id);

				this.recargarComboTablaVendedor(this.vendedorsForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.notacreditoConstantesFunciones.cargarid_centro_costoNotaCredito) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("TipoCambio")) {
				if(!this.notacreditoConstantesFunciones.cargarid_tipo_cambioNotaCredito) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCredito(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaResponsable(List<Responsable> responsablesForeignKey)throws Exception{
		TableColumn tableColumnResponsable=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE));
		TableCellEditor tableCellEditorResponsable =tableColumnResponsable.getCellEditor();

		ResponsableTableCell responsableTableCellFk=(ResponsableTableCell)tableCellEditorResponsable;

		if(responsableTableCellFk!=null) {
			responsableTableCellFk.setresponsablesForeignKey(responsablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//responsableTableCellFk.setRowActual(intSelectedRow);
			//responsableTableCellFk.setresponsablesForeignKeyActual(responsablesForeignKey);
		//}


		if(responsableTableCellFk!=null) {
			responsableTableCellFk.RecargarResponsablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoNotaCredito(List<EstadoNotaCredito> estadonotacreditosForeignKey)throws Exception{
		TableColumn tableColumnEstadoNotaCredito=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO));
		TableCellEditor tableCellEditorEstadoNotaCredito =tableColumnEstadoNotaCredito.getCellEditor();

		EstadoNotaCreditoTableCell estadonotacreditoTableCellFk=(EstadoNotaCreditoTableCell)tableCellEditorEstadoNotaCredito;

		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.setestadonotacreditosForeignKey(estadonotacreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadonotacreditoTableCellFk.setRowActual(intSelectedRow);
			//estadonotacreditoTableCellFk.setestadonotacreditosForeignKeyActual(estadonotacreditosForeignKey);
		//}


		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.RecargarEstadoNotaCreditosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransporte(List<Transporte> transportesForeignKey)throws Exception{
		TableColumn tableColumnTransporte=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE));
		TableCellEditor tableCellEditorTransporte =tableColumnTransporte.getCellEditor();

		TransporteTableCell transporteTableCellFk=(TransporteTableCell)tableCellEditorTransporte;

		if(transporteTableCellFk!=null) {
			transporteTableCellFk.settransportesForeignKey(transportesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transporteTableCellFk.setRowActual(intSelectedRow);
			//transporteTableCellFk.settransportesForeignKeyActual(transportesForeignKey);
		//}


		if(transporteTableCellFk!=null) {
			transporteTableCellFk.RecargarTransportesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransportista(List<Transportista> transportistasForeignKey)throws Exception{
		TableColumn tableColumnTransportista=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA));
		TableCellEditor tableCellEditorTransportista =tableColumnTransportista.getCellEditor();

		TransportistaTableCell transportistaTableCellFk=(TransportistaTableCell)tableCellEditorTransportista;

		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.settransportistasForeignKey(transportistasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transportistaTableCellFk.setRowActual(intSelectedRow);
			//transportistaTableCellFk.settransportistasForeignKeyActual(transportistasForeignKey);
		//}


		if(transportistaTableCellFk!=null) {
			transportistaTableCellFk.RecargarTransportistasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_vendedor (Long id) throws Exception {
		this.setActualVendedorForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesNotaCredito(false);
			
			//if(!this.isEsNuevoNotaCredito) {								
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				
			}
			
			if(this.permiteMantenimiento(this.notacredito)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoNotaCredito=true;
					this.inicializarActualizarBindingTablaNotaCredito(false);
					this.isEsNuevoNotaCredito=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoNotaCredito=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoNotaCredito=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCredito(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCredito(false);
				
				this.habilitarDeshabilitarControlesNotaCredito(false);
			
												
				
				if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleNotaCredito();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoNotaCreditoActionPerformed(evt,notacreditoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualNotaCredito(this.notacredito,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,notacreditoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.notacredito.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				this.notacredito.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				this.notacredito.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.notacredito)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((NotaCreditoModel) this.jTableDatosNotaCredito.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoNotaCredito=true;
				this.inicializarActualizarBindingTablaNotaCredito(false);
				this.isEsNuevoNotaCredito=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCredito(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCredito(false);
				
				this.habilitarDeshabilitarControlesNotaCredito(false);
				
				
				
				if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleNotaCredito();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarNotaCreditoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosNotaCredito.getRowCount()>=1) {
				jTableDatosNotaCredito.removeRowSelectionInterval(0, jTableDatosNotaCredito.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesNotaCredito(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaNotaCredito(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCredito(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCredito(false) ;
			
			this.isEsNuevoNotaCredito=false;
			
			if(NotaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleNotaCredito();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingNotaCredito(false);
				
				//SI ES MANUAL
				if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualNotaCredito();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoNotaCredito--;			
			//NotaCredito notacreditoAux= new NotaCredito();			
			//notacreditoAux.setId(this.iIdNuevoNotaCredito);
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaNotaCredito();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
			
			this.notacredito.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.notacreditoLogic.getNotaCreditos().add(this.notacreditoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.notacreditos.add(this.notacreditoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaNotaCredito(false);
			
			this.jTableDatosNotaCredito.setRowSelectionInterval(this.getIndiceNuevoNotaCredito(), this.getIndiceNuevoNotaCredito());
			
			int iLastRow =  this.jTableDatosNotaCredito.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosNotaCredito.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosNotaCredito.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaNotaCredito(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingNotaCredito(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCredito(false);
			
			//SI ES MANUAL
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCredito();
			}
			
			//this.abrirFrameTreeNotaCredito();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Nota CreditoS ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionNotaCredito.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralNotaCredito();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.notacreditoReturnGeneral=notacreditoLogic.procesarImportacionNotaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.notacreditoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarNotaCreditoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionNotaCredito.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionNotaCredito.setFileImportacion(this.jInternalFrameImportacionNotaCredito.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionNotaCredito.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionNotaCredito.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionNotaCredito.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionNotaCredito.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		

		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("NotaCreditoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"NotaCreditoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroPreImpreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroPreImpreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroPreImpreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroPreImpreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMERODIAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDias_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDias_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDias_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDias_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_DIRECCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_TELEFONO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefono_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefono_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefono_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefono_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Responsable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Responsable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Responsable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Responsable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_SUMAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_man_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_man_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_man_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_man_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talSinIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talSinIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talSinIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talSinIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_OTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nanciamiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nanciamiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nanciamiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nanciamiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_OTROVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_roValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_roValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_roValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_roValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_RETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_ESCLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transportista_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transportista_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transportista_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transportista_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoNotaCredito.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case NotaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case NotaCreditoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoria="numero";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoria="numero_dias";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case NotaCreditoConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoria="direccion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoria="telefono";
					break;

				case NotaCreditoConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoria="id_responsable";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO:
					sNombreCampoCategoria="id_estado_nota_credito";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoria="descuento_porcentaje";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoria="suman";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoria="total_sin_iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoria="total_descuento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTRO:
					sNombreCampoCategoria="otro";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoria="financiamiento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTROVALOR:
					sNombreCampoCategoria="otro_valor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoria="retencion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case NotaCreditoConstantesFunciones.LABEL_ESCLIENTE:
					sNombreCampoCategoria="es_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoria="id_transporte";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoria="id_transportista";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoria="fecha_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoria="fecha_autorizacion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case NotaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case NotaCreditoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					sNombreCampoCategoriaValor="numero";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMERODIAS:
					sNombreCampoCategoriaValor="numero_dias";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case NotaCreditoConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoriaValor="direccion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoriaValor="telefono";
					break;

				case NotaCreditoConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE:
					sNombreCampoCategoriaValor="id_responsable";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO:
					sNombreCampoCategoriaValor="id_estado_nota_credito";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoriaValor="descuento_porcentaje";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUMAN:
					sNombreCampoCategoriaValor="suman";
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoriaValor="total_sin_iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO:
					sNombreCampoCategoriaValor="total_descuento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTRO:
					sNombreCampoCategoriaValor="otro";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoriaValor="financiamiento";
					break;

				case NotaCreditoConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTROVALOR:
					sNombreCampoCategoriaValor="otro_valor";
					break;

				case NotaCreditoConstantesFunciones.LABEL_RETENCION:
					sNombreCampoCategoriaValor="retencion";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case NotaCreditoConstantesFunciones.LABEL_ESCLIENTE:
					sNombreCampoCategoriaValor="es_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE:
					sNombreCampoCategoriaValor="id_transporte";
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA:
					sNombreCampoCategoriaValor="id_transportista";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE:
					sNombreCampoCategoriaValor="fecha_cliente";
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION:
					sNombreCampoCategoriaValor="fecha_autorizacion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case NotaCreditoConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Preimpreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMERODIAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Dias",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_dias");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case NotaCreditoConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case NotaCreditoConstantesFunciones.LABEL_DIRECCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion");
					break;

				case NotaCreditoConstantesFunciones.LABEL_TELEFONO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono");
					break;

				case NotaCreditoConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Responsable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_responsable");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_nota_credito");
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_porcentaje");
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Con Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUMAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Suman",sNombreCampoCategoria,sNombreCampoCategoriaValor,"suman");
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dscto Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_sin_iva");
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_descuento");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otro");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Financiamiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"financiamiento");
					break;

				case NotaCreditoConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTROVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otro Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otro_valor");
					break;

				case NotaCreditoConstantesFunciones.LABEL_RETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"retencion");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case NotaCreditoConstantesFunciones.LABEL_ESCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_cliente");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transporte");
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transportista",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transportista");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_cliente");
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_autorizacion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("NotaCreditos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case NotaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getnumero());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_NUMERODIAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getnumero_dias());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_DIRECCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DIRECCION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getdireccion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_TELEFONO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TELEFONO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettelefono());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RUC);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getresponsable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getestadonotacredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getdescuento_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUMAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUMAN);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getsuman());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettotal_sin_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettotal_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTRO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getotro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IVA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfinanciamiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ICE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_OTROVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTROVALOR);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getotro_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_RETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RETENCION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getretencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_ESCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getes_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettransporte_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.gettransportista_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfecha_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION);
					iRow++;

					for(NotaCredito notacredito:notacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacredito.getfecha_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelNotaCredito(row);				
			//	iRow++;
			//}				
			
			//for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelNotaCredito(notacreditoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCredito(false);
			
			//SI ES MANUAL
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCredito();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCredito(false);
			
			//SI ES MANUAL
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCredito();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesNotaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCredito(false);
			
			//SI ES MANUAL
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCredito();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaNotaCredito() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosNotaCredito.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosNotaCredito.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosNotaCredito.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosNotaCredito.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosNotaCredito.setMinimumSize(dimensionMinimum);
		this.jTableDatosNotaCredito.setMaximumSize(dimensionMaximum);
		this.jTableDatosNotaCredito.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingNotaCredito(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingNotaCredito(esInicializar,true);
	}
	
	public void inicializarActualizarBindingNotaCredito(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaNotaCredito(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesNotaCredito(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasNotaCredito(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCredito(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesNotaCredito(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualNotaCredito() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaNotaCredito();
		
		this.inicializarActualizarBindingBotonesManualNotaCredito(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCredito();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCredito() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCredito(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCredito(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosNotaCredito.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosNotaCredito.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteNotaCredito.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormNotaCredito!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionNuevoNotaCredito.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionSinCerrarNotaCredito.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionSinMensajeNotaCredito.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosNotaCredito.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosNotaCredito.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteNotaCredito.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormNotaCredito!=null) {
				this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionNuevoNotaCredito.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionSinCerrarNotaCredito.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormNotaCredito.jCheckBoxPostAccionSinMensajeNotaCredito.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionNotaCredito.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionNotaCredito.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesNotaCredito.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesNotaCredito.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesNotaCredito.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarNotaCredito.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesNotaCredito.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesNotaCredito.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralNotaCredito.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesNotaCredito(Boolean esInicializar) throws Exception {
		try	{	
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCredito(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesNotaCredito() throws Exception {
		try	{
			if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCredito();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCredito() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCredito() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesNotaCredito.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesNotaCredito.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesNotaCredito.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionNotaCredito.addItem(reporte);
			}
			
			
			if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionNotaCredito.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionNotaCredito.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesNotaCredito.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesNotaCredito.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarNotaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarNotaCredito.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarNotaCredito.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCredito();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCredito() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
				this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
				this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
				
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCredito.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=NotaCreditoConstantesFunciones.getTiposSeleccionarNotaCredito(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=NotaCreditoConstantesFunciones.getTiposSeleccionarNotaCredito(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=NotaCreditoConstantesFunciones.getTiposSeleccionarNotaCredito(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCredito.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoNotaCredito.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualNotaCredito()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextFieldcodigoBusquedaPorCodigoNotaCredito.getText();
		this.numeroBusquedaPorNumeroPreImpreso=this.jTextFieldnumeroBusquedaPorNumeroPreImpresoNotaCredito.getText();
		if(this.jComboBoxid_clienteFK_IdClienteNotaCredito.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteNotaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaNotaCredito.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaNotaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.getSelectedItem()!=null){this.id_transportistaFK_IdTransportista=((Transportista)this.jComboBoxid_transportistaFK_IdTransportistaNotaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorNotaCredito.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasNotaCredito(Boolean esInicializar) throws Exception {				
		if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCredito();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaNotaCredito() throws Exception {
		this.inicializarActualizarBindingTablaNotaCredito(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByNotaCredito() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosNotaCreditoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaNotaCredito(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=notacreditoLogic.getNotaCreditos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=notacreditos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosNotaCredito.setModel(new NotaCreditoModel(this.notacreditoLogic.getNotaCreditos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosNotaCredito.setModel(new NotaCreditoModel(this.notacreditos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByNotaCredito!=null && this.jInternalFrameOrderByNotaCredito.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByNotaCredito();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+NotaCreditoConstantesFunciones.SCLASSWEBTITULO,notacreditoConstantesFunciones.resaltarSeleccionarNotaCredito,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+NotaCreditoConstantesFunciones.SCLASSWEBTITULO,notacreditoConstantesFunciones.resaltarSeleccionarNotaCredito,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_ID));

		if(this.notacreditoConstantesFunciones.mostraridNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltaridNotaCredito,this.notacreditoConstantesFunciones.activaridNotaCredito,iSizeTabla,this,true,"idNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltaridNotaCredito,this.notacreditoConstantesFunciones.activaridNotaCredito,this,true,"idNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.notacreditoConstantesFunciones.mostrarid_empresaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.notacreditoConstantesFunciones.resaltarid_empresaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_empresaNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.notacreditoConstantesFunciones.resaltarid_empresaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_empresaNotaCredito,false,"id_empresaNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.notacreditoConstantesFunciones.mostrarid_sucursalNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditoConstantesFunciones.resaltarid_sucursalNotaCredito,this,this.notacreditoConstantesFunciones.activarid_sucursalNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditoConstantesFunciones.resaltarid_sucursalNotaCredito,this,this.notacreditoConstantesFunciones.activarid_sucursalNotaCredito,false,"id_sucursalNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.notacreditoConstantesFunciones.mostrarid_ejercicioNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.notacreditoConstantesFunciones.resaltarid_ejercicioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_ejercicioNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.notacreditoConstantesFunciones.resaltarid_ejercicioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_ejercicioNotaCredito,false,"id_ejercicioNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDPERIODO));

		if(this.notacreditoConstantesFunciones.mostrarid_periodoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.notacreditoConstantesFunciones.resaltarid_periodoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_periodoNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.notacreditoConstantesFunciones.resaltarid_periodoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_periodoNotaCredito,false,"id_periodoNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDANIO));

		if(this.notacreditoConstantesFunciones.mostrarid_anioNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.notacreditoConstantesFunciones.resaltarid_anioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_anioNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.notacreditoConstantesFunciones.resaltarid_anioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_anioNotaCredito,true,"id_anioNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDMES));

		if(this.notacreditoConstantesFunciones.mostrarid_mesNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.notacreditoConstantesFunciones.resaltarid_mesNotaCredito,this,this.notacreditoConstantesFunciones.activarid_mesNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.notacreditoConstantesFunciones.resaltarid_mesNotaCredito,this,this.notacreditoConstantesFunciones.activarid_mesNotaCredito,true,"id_mesNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDUSUARIO));

		if(this.notacreditoConstantesFunciones.mostrarid_usuarioNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditoConstantesFunciones.resaltarid_usuarioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_usuarioNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditoConstantesFunciones.resaltarid_usuarioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_usuarioNotaCredito,false,"id_usuarioNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_CODIGO));

		if(this.notacreditoConstantesFunciones.mostrarcodigoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltarcodigoNotaCredito,this.notacreditoConstantesFunciones.activarcodigoNotaCredito,iSizeTabla,this,true,"codigoNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarcodigoNotaCredito,this.notacreditoConstantesFunciones.activarcodigoNotaCredito,this,true,"codigoNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO));

		if(this.notacreditoConstantesFunciones.mostrarnumeroNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltarnumeroNotaCredito,this.notacreditoConstantesFunciones.activarnumeroNotaCredito,iSizeTabla,this,true,"numeroNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarnumeroNotaCredito,this.notacreditoConstantesFunciones.activarnumeroNotaCredito,this,true,"numeroNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_FECHAEMISION));

		if(this.notacreditoConstantesFunciones.mostrarfecha_emisionNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.notacreditoConstantesFunciones.resaltarfecha_emisionNotaCredito,this.notacreditoConstantesFunciones.activarfecha_emisionNotaCredito,iSizeTabla,this,true,"fecha_emisionNotaCredito","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.notacreditoConstantesFunciones.resaltarfecha_emisionNotaCredito,this.notacreditoConstantesFunciones.activarfecha_emisionNotaCredito,this,true,"fecha_emisionNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_NUMERODIAS));

		if(this.notacreditoConstantesFunciones.mostrarnumero_diasNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_NUMERODIAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarnumero_diasNotaCredito,this.notacreditoConstantesFunciones.activarnumero_diasNotaCredito,iSizeTabla,this,true,"numero_diasNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarnumero_diasNotaCredito,this.notacreditoConstantesFunciones.activarnumero_diasNotaCredito,this,true,"numero_diasNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.notacreditoConstantesFunciones.mostrarfecha_vencimientoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.notacreditoConstantesFunciones.resaltarfecha_vencimientoNotaCredito,this.notacreditoConstantesFunciones.activarfecha_vencimientoNotaCredito,iSizeTabla,this,true,"fecha_vencimientoNotaCredito","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.notacreditoConstantesFunciones.resaltarfecha_vencimientoNotaCredito,this.notacreditoConstantesFunciones.activarfecha_vencimientoNotaCredito,this,true,"fecha_vencimientoNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDMONEDA));

		if(this.notacreditoConstantesFunciones.mostrarid_monedaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.notacreditoConstantesFunciones.resaltarid_monedaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_monedaNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.notacreditoConstantesFunciones.resaltarid_monedaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_monedaNotaCredito,false,"id_monedaNotaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_COTIZACION));

		if(this.notacreditoConstantesFunciones.mostrarcotizacionNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarcotizacionNotaCredito,this.notacreditoConstantesFunciones.activarcotizacionNotaCredito,iSizeTabla,this,true,"cotizacionNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarcotizacionNotaCredito,this.notacreditoConstantesFunciones.activarcotizacionNotaCredito,this,true,"cotizacionNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.notacreditoConstantesFunciones.mostrarid_empleadoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.notacreditoConstantesFunciones.resaltarid_empleadoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_empleadoNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.notacreditoConstantesFunciones.resaltarid_empleadoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_empleadoNotaCredito,true,"id_empleadoNotaCredito","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDFORMATO));

		if(this.notacreditoConstantesFunciones.mostrarid_formatoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.notacreditoConstantesFunciones.resaltarid_formatoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_formatoNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.notacreditoConstantesFunciones.resaltarid_formatoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_formatoNotaCredito,true,"id_formatoNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.notacreditoConstantesFunciones.mostrarid_tipo_precioNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditoConstantesFunciones.resaltarid_tipo_precioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_tipo_precioNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditoConstantesFunciones.resaltarid_tipo_precioNotaCredito,this,this.notacreditoConstantesFunciones.activarid_tipo_precioNotaCredito,true,"id_tipo_precioNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDCLIENTE));

		if(this.notacreditoConstantesFunciones.mostrarid_clienteNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.notacreditoConstantesFunciones.resaltarid_clienteNotaCredito,this,this.notacreditoConstantesFunciones.activarid_clienteNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.notacreditoConstantesFunciones.resaltarid_clienteNotaCredito,this,this.notacreditoConstantesFunciones.activarid_clienteNotaCredito,true,"id_clienteNotaCredito","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDFACTURA));

		if(this.notacreditoConstantesFunciones.mostrarid_facturaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.notacreditoConstantesFunciones.resaltarid_facturaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_facturaNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.notacreditoConstantesFunciones.resaltarid_facturaNotaCredito,this,this.notacreditoConstantesFunciones.activarid_facturaNotaCredito,true,"id_facturaNotaCredito","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_DIRECCION));

		if(this.notacreditoConstantesFunciones.mostrardireccionNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_DIRECCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltardireccionNotaCredito,this.notacreditoConstantesFunciones.activardireccionNotaCredito,iSizeTabla,this,true,"direccionNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltardireccionNotaCredito,this.notacreditoConstantesFunciones.activardireccionNotaCredito,this,true,"direccionNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_TELEFONO));

		if(this.notacreditoConstantesFunciones.mostrartelefonoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_TELEFONO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltartelefonoNotaCredito,this.notacreditoConstantesFunciones.activartelefonoNotaCredito,iSizeTabla,this,true,"telefonoNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltartelefonoNotaCredito,this.notacreditoConstantesFunciones.activartelefonoNotaCredito,this,true,"telefonoNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_RUC));

		if(this.notacreditoConstantesFunciones.mostrarrucNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltarrucNotaCredito,this.notacreditoConstantesFunciones.activarrucNotaCredito,iSizeTabla,this,true,"rucNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarrucNotaCredito,this.notacreditoConstantesFunciones.activarrucNotaCredito,this,true,"rucNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.notacreditoConstantesFunciones.mostrarid_vendedorNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.notacreditoConstantesFunciones.resaltarid_vendedorNotaCredito,this,this.notacreditoConstantesFunciones.activarid_vendedorNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.notacreditoConstantesFunciones.resaltarid_vendedorNotaCredito,this,this.notacreditoConstantesFunciones.activarid_vendedorNotaCredito,true,"id_vendedorNotaCredito","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE));

		if(this.notacreditoConstantesFunciones.mostrarid_responsableNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ResponsableTableCell(this.responsablesForeignKey,this.notacreditoConstantesFunciones.resaltarid_responsableNotaCredito,this,this.notacreditoConstantesFunciones.activarid_responsableNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new ResponsableTableCell(this.responsablesForeignKey,this.notacreditoConstantesFunciones.resaltarid_responsableNotaCredito,this,this.notacreditoConstantesFunciones.activarid_responsableNotaCredito,true,"id_responsableNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO));

		if(this.notacreditoConstantesFunciones.mostrarid_estado_nota_creditoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoNotaCreditoTableCell(this.estadonotacreditosForeignKey,this.notacreditoConstantesFunciones.resaltarid_estado_nota_creditoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_estado_nota_creditoNotaCredito,iSizeTabla));
			tableColumn.setCellEditor(new EstadoNotaCreditoTableCell(this.estadonotacreditosForeignKey,this.notacreditoConstantesFunciones.resaltarid_estado_nota_creditoNotaCredito,this,this.notacreditoConstantesFunciones.activarid_estado_nota_creditoNotaCredito,true,"id_estado_nota_creditoNotaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_DESCRIPCION));

		if(this.notacreditoConstantesFunciones.mostrardescripcionNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditoConstantesFunciones.resaltardescripcionNotaCredito,this.notacreditoConstantesFunciones.activardescripcionNotaCredito,iSizeTabla,this,true,"descripcionNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltardescripcionNotaCredito,this.notacreditoConstantesFunciones.activardescripcionNotaCredito,this,true,"descripcionNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE));

		if(this.notacreditoConstantesFunciones.mostrardescuento_porcentajeNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltardescuento_porcentajeNotaCredito,this.notacreditoConstantesFunciones.activardescuento_porcentajeNotaCredito,iSizeTabla,this,true,"descuento_porcentajeNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltardescuento_porcentajeNotaCredito,this.notacreditoConstantesFunciones.activardescuento_porcentajeNotaCredito,this,true,"descuento_porcentajeNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_TOTALIVA));

		if(this.notacreditoConstantesFunciones.mostrartotal_ivaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltartotal_ivaNotaCredito,this.notacreditoConstantesFunciones.activartotal_ivaNotaCredito,iSizeTabla,this,true,"total_ivaNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltartotal_ivaNotaCredito,this.notacreditoConstantesFunciones.activartotal_ivaNotaCredito,this,true,"total_ivaNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_SUMAN));

		if(this.notacreditoConstantesFunciones.mostrarsumanNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_SUMAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarsumanNotaCredito,this.notacreditoConstantesFunciones.activarsumanNotaCredito,iSizeTabla,this,true,"sumanNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarsumanNotaCredito,this.notacreditoConstantesFunciones.activarsumanNotaCredito,this,true,"sumanNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.notacreditoConstantesFunciones.mostrardescuento_valorNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltardescuento_valorNotaCredito,this.notacreditoConstantesFunciones.activardescuento_valorNotaCredito,iSizeTabla,this,true,"descuento_valorNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltardescuento_valorNotaCredito,this.notacreditoConstantesFunciones.activardescuento_valorNotaCredito,this,true,"descuento_valorNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA));

		if(this.notacreditoConstantesFunciones.mostrartotal_sin_ivaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltartotal_sin_ivaNotaCredito,this.notacreditoConstantesFunciones.activartotal_sin_ivaNotaCredito,iSizeTabla,this,true,"total_sin_ivaNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltartotal_sin_ivaNotaCredito,this.notacreditoConstantesFunciones.activartotal_sin_ivaNotaCredito,this,true,"total_sin_ivaNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO));

		if(this.notacreditoConstantesFunciones.mostrartotal_descuentoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltartotal_descuentoNotaCredito,this.notacreditoConstantesFunciones.activartotal_descuentoNotaCredito,iSizeTabla,this,true,"total_descuentoNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltartotal_descuentoNotaCredito,this.notacreditoConstantesFunciones.activartotal_descuentoNotaCredito,this,true,"total_descuentoNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_FLETE));

		if(this.notacreditoConstantesFunciones.mostrarfleteNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_FLETE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarfleteNotaCredito,this.notacreditoConstantesFunciones.activarfleteNotaCredito,iSizeTabla,this,true,"fleteNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarfleteNotaCredito,this.notacreditoConstantesFunciones.activarfleteNotaCredito,this,true,"fleteNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_TOTAL));

		if(this.notacreditoConstantesFunciones.mostrartotalNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltartotalNotaCredito,this.notacreditoConstantesFunciones.activartotalNotaCredito,iSizeTabla,this,true,"totalNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltartotalNotaCredito,this.notacreditoConstantesFunciones.activartotalNotaCredito,this,true,"totalNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_SUBTOTAL));

		if(this.notacreditoConstantesFunciones.mostrarsub_totalNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarsub_totalNotaCredito,this.notacreditoConstantesFunciones.activarsub_totalNotaCredito,iSizeTabla,this,true,"sub_totalNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarsub_totalNotaCredito,this.notacreditoConstantesFunciones.activarsub_totalNotaCredito,this,true,"sub_totalNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_OTRO));

		if(this.notacreditoConstantesFunciones.mostrarotroNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_OTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarotroNotaCredito,this.notacreditoConstantesFunciones.activarotroNotaCredito,iSizeTabla,this,true,"otroNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarotroNotaCredito,this.notacreditoConstantesFunciones.activarotroNotaCredito,this,true,"otroNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_IVA));

		if(this.notacreditoConstantesFunciones.mostrarivaNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarivaNotaCredito,this.notacreditoConstantesFunciones.activarivaNotaCredito,iSizeTabla,this,true,"ivaNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarivaNotaCredito,this.notacreditoConstantesFunciones.activarivaNotaCredito,this,true,"ivaNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO));

		if(this.notacreditoConstantesFunciones.mostrarfinanciamientoNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarfinanciamientoNotaCredito,this.notacreditoConstantesFunciones.activarfinanciamientoNotaCredito,iSizeTabla,this,true,"financiamientoNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarfinanciamientoNotaCredito,this.notacreditoConstantesFunciones.activarfinanciamientoNotaCredito,this,true,"financiamientoNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_ICE));

		if(this.notacreditoConstantesFunciones.mostrariceNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltariceNotaCredito,this.notacreditoConstantesFunciones.activariceNotaCredito,iSizeTabla,this,true,"iceNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltariceNotaCredito,this.notacreditoConstantesFunciones.activariceNotaCredito,this,true,"iceNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,NotaCreditoConstantesFunciones.LABEL_OTROVALOR));

		if(this.notacreditoConstantesFunciones.mostrarotro_valorNotaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoConstantesFunciones.LABEL_OTROVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditoConstantesFunciones.resaltarotro_valorNotaCredito,this.notacreditoConstantesFunciones.activarotro_valorNotaCredito,iSizeTabla,this,true,"otro_valorNotaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditoConstantesFunciones.resaltarotro_valorNotaCredito,this.notacreditoConstantesFunciones.activarotro_valorNotaCredito,this,true,"otro_valorNotaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.notacreditoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetaNotaCredito && this.notacreditoConstantesFunciones.mostrarDetaNotaCreditoNotaCredito && !NotaCreditoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Deta Nota Creditos");
				tableColumn.setHeaderValue("Deta Nota Creditos");
				tableColumn.setCellRenderer(new DetaNotaCreditoTableCell(notacreditoConstantesFunciones.resaltarDetaNotaCreditoNotaCredito,this,this.notacreditoConstantesFunciones.activarDetaNotaCreditoNotaCredito));
				tableColumn.setCellEditor(new DetaNotaCreditoTableCell(notacreditoConstantesFunciones.resaltarDetaNotaCreditoNotaCredito,this,this.notacreditoConstantesFunciones.activarDetaNotaCreditoNotaCredito));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosNotaCredito.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosNotaCredito.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosNotaCredito.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarNotaCredito && this.isPermisoGuardarCambiosNotaCredito) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.notacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosNotaCredito.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.notacreditoSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosNotaCredito.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosNotaCredito.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCredito && this.isPermisoGuardarCambiosNotaCredito) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditoSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCredito && this.isPermisoGuardarCambiosNotaCredito) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosNotaCredito.moveColumn(this.jTableDatosNotaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosNotaCredito.moveColumn(this.jTableDatosNotaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditoSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosNotaCredito.moveColumn(this.jTableDatosNotaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosNotaCredito.moveColumn(this.jTableDatosNotaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosNotaCredito.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosNotaCredito.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosNotaCredito,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosNotaCredito.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosNotaCredito.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosNotaCredito.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosNotaCredito.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosNotaCredito.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=notacreditoLogic.getNotaCreditos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=notacreditos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosNotaCredito.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosNotaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosNotaCredito();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoNotaCredito=false;
					
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
				if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormNotaCredito==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCredito.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.notacredito.getsType().equals("DUPLICADO")
				   || this.notacredito.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoNotaCredito=true;
				
				} else {
					this.isEsNuevoNotaCredito=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					if(this.notacredito.getId()>=0 && !this.notacredito.getIsNew()) {						
						this.isEsNuevoNotaCredito=false;
						
					} else {
						this.isEsNuevoNotaCredito=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoNotaCredito(esRelaciones);						
				
				this.seleccionarNotaCredito(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.notacredito.getId()<0) {
					this.isEsNuevoNotaCredito=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarNotaCredito(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarNotaCredito(evt,rowIndex);
				}	
				
				if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion NotaCredito: " + this.dDif); 
					}
				}								
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarNotaCredito(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.notacredito)) {
					if(this.notacredito.getId()>0) {
						this.notacredito.setIsDeleted(true);
						
						this.notacreditosEliminados.add(this.notacredito);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditoLogic.getNotaCreditos().remove(this.notacredito);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditos.remove(this.notacredito);				
					}
					
					
					((NotaCreditoModel) this.jTableDatosNotaCredito.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCredito(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarNotaCredito(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoNotaCredito) {
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCredito.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCredito.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioNotaCredito(this.notacredito);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.notacreditoConstantesFunciones.cargarid_empresaNotaCredito || this.notacreditoConstantesFunciones.event_dependid_empresaNotaCredito) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.notacredito.getid_empresa());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(notacredito.getEmpresa()!=null) {
							this.empresasForeignKey.add(notacredito.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.notacredito.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.notacreditoConstantesFunciones.cargarid_sucursalNotaCredito || this.notacreditoConstantesFunciones.event_dependid_sucursalNotaCredito) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.notacredito.getid_sucursal());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(notacredito.getSucursal()!=null) {
							this.sucursalsForeignKey.add(notacredito.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.notacredito.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.notacreditoConstantesFunciones.cargarid_ejercicioNotaCredito || this.notacreditoConstantesFunciones.event_dependid_ejercicioNotaCredito) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.notacredito.getid_ejercicio());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(notacredito.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(notacredito.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.notacredito.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.notacreditoConstantesFunciones.cargarid_periodoNotaCredito || this.notacreditoConstantesFunciones.event_dependid_periodoNotaCredito) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.notacredito.getid_periodo());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(notacredito.getPeriodo()!=null) {
							this.periodosForeignKey.add(notacredito.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.notacredito.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.notacreditoConstantesFunciones.cargarid_anioNotaCredito || this.notacreditoConstantesFunciones.event_dependid_anioNotaCredito) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.notacredito.getid_anio());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(notacredito.getAnio()!=null) {
							this.aniosForeignKey.add(notacredito.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.notacredito.getid_anio(),false,"Formulario");

					//Mes
					if(!this.notacreditoConstantesFunciones.cargarid_mesNotaCredito || this.notacreditoConstantesFunciones.event_dependid_mesNotaCredito) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.notacredito.getid_mes());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(notacredito.getMes()!=null) {
							this.messForeignKey.add(notacredito.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.notacredito.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.notacreditoConstantesFunciones.cargarid_usuarioNotaCredito || this.notacreditoConstantesFunciones.event_dependid_usuarioNotaCredito) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.notacredito.getid_usuario());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(notacredito.getUsuario()!=null) {
							this.usuariosForeignKey.add(notacredito.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.notacredito.getid_usuario(),false,"Formulario");

					//Moneda
					if(!this.notacreditoConstantesFunciones.cargarid_monedaNotaCredito || this.notacreditoConstantesFunciones.event_dependid_monedaNotaCredito) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.notacredito.getid_moneda());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(notacredito.getMoneda()!=null) {
							this.monedasForeignKey.add(notacredito.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.notacredito.getid_moneda(),false,"Formulario");

					//Empleado
					if(!this.notacreditoConstantesFunciones.cargarid_empleadoNotaCredito || this.notacreditoConstantesFunciones.event_dependid_empleadoNotaCredito) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.notacredito.getid_empleado());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(notacredito.getEmpleado()!=null) {
							this.empleadosForeignKey.add(notacredito.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.notacredito.getid_empleado(),false,"Formulario");

					//Formato
					if(!this.notacreditoConstantesFunciones.cargarid_formatoNotaCredito || this.notacreditoConstantesFunciones.event_dependid_formatoNotaCredito) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.notacredito.getid_formato());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(notacredito.getFormato()!=null) {
							this.formatosForeignKey.add(notacredito.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.notacredito.getid_formato(),false,"Formulario");

					//TipoPrecio
					if(!this.notacreditoConstantesFunciones.cargarid_tipo_precioNotaCredito || this.notacreditoConstantesFunciones.event_dependid_tipo_precioNotaCredito) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.notacredito.getid_tipo_precio());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(notacredito.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(notacredito.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.notacredito.getid_tipo_precio(),false,"Formulario");

					//Cliente
					if(!this.notacreditoConstantesFunciones.cargarid_clienteNotaCredito || this.notacreditoConstantesFunciones.event_dependid_clienteNotaCredito) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.notacredito.getid_cliente());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(notacredito.getCliente()!=null) {
							this.clientesForeignKey.add(notacredito.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.notacredito.getid_cliente(),false,"Formulario");

					//Factura
					if(!this.notacreditoConstantesFunciones.cargarid_facturaNotaCredito || this.notacreditoConstantesFunciones.event_dependid_facturaNotaCredito) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.notacredito.getid_factura());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(notacredito.getFactura()!=null) {
							this.facturasForeignKey.add(notacredito.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.notacredito.getid_factura(),false,"Formulario");

					//Vendedor
					if(!this.notacreditoConstantesFunciones.cargarid_vendedorNotaCredito || this.notacreditoConstantesFunciones.event_dependid_vendedorNotaCredito) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.notacredito.getid_vendedor());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(notacredito.getVendedor()!=null) {
							this.vendedorsForeignKey.add(notacredito.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.notacredito.getid_vendedor(),false,"Formulario");

					//Responsable
					if(!this.notacreditoConstantesFunciones.cargarid_responsableNotaCredito || this.notacreditoConstantesFunciones.event_dependid_responsableNotaCredito) {
						//this.cargarCombosResponsablesForeignKeyLista(" where id="+this.notacredito.getid_responsable());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.responsablesForeignKey=new ArrayList<Responsable>();

						if(notacredito.getResponsable()!=null) {
							this.responsablesForeignKey.add(notacredito.getResponsable());
						}

						this.addItemDefectoCombosForeignKeyResponsable();
						this.cargarCombosFrameResponsablesForeignKey("Todos");
					}
					this.setActualResponsableForeignKey(this.notacredito.getid_responsable(),false,"Formulario");

					//EstadoNotaCredito
					if(!this.notacreditoConstantesFunciones.cargarid_estado_nota_creditoNotaCredito || this.notacreditoConstantesFunciones.event_dependid_estado_nota_creditoNotaCredito) {
						//this.cargarCombosEstadoNotaCreditosForeignKeyLista(" where id="+this.notacredito.getid_estado_nota_credito());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.estadonotacreditosForeignKey=new ArrayList<EstadoNotaCredito>();

						if(notacredito.getEstadoNotaCredito()!=null) {
							this.estadonotacreditosForeignKey.add(notacredito.getEstadoNotaCredito());
						}

						this.addItemDefectoCombosForeignKeyEstadoNotaCredito();
						this.cargarCombosFrameEstadoNotaCreditosForeignKey("Todos");
					}
					this.setActualEstadoNotaCreditoForeignKey(this.notacredito.getid_estado_nota_credito(),false,"Formulario");

					//CentroCosto
					if(!this.notacreditoConstantesFunciones.cargarid_centro_costoNotaCredito || this.notacreditoConstantesFunciones.event_dependid_centro_costoNotaCredito) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.notacredito.getid_centro_costo());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(notacredito.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(notacredito.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.notacredito.getid_centro_costo(),false,"Formulario");

					//TipoCambio
					if(!this.notacreditoConstantesFunciones.cargarid_tipo_cambioNotaCredito || this.notacreditoConstantesFunciones.event_dependid_tipo_cambioNotaCredito) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.notacredito.getid_tipo_cambio());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(notacredito.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(notacredito.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.notacredito.getid_tipo_cambio(),false,"Formulario");

					//Transporte
					if(!this.notacreditoConstantesFunciones.cargarid_transporteNotaCredito || this.notacreditoConstantesFunciones.event_dependid_transporteNotaCredito) {
						//this.cargarCombosTransportesForeignKeyLista(" where id="+this.notacredito.getid_transporte());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.transportesForeignKey=new ArrayList<Transporte>();

						if(notacredito.getTransporte()!=null) {
							this.transportesForeignKey.add(notacredito.getTransporte());
						}

						this.addItemDefectoCombosForeignKeyTransporte();
						this.cargarCombosFrameTransportesForeignKey("Todos");
					}
					this.setActualTransporteForeignKey(this.notacredito.getid_transporte(),false,"Formulario");

					//Transportista
					if(!this.notacreditoConstantesFunciones.cargarid_transportistaNotaCredito || this.notacreditoConstantesFunciones.event_dependid_transportistaNotaCredito) {
						//this.cargarCombosTransportistasForeignKeyLista(" where id="+this.notacredito.getid_transportista());
									//this.inicializarActualizarBindingNotaCredito(false,false);
						this.transportistasForeignKey=new ArrayList<Transportista>();

						if(notacredito.getTransportista()!=null) {
							this.transportistasForeignKey.add(notacredito.getTransportista());
						}

						this.addItemDefectoCombosForeignKeyTransportista();
						this.cargarCombosFrameTransportistasForeignKey("Todos");
					}
					this.setActualTransportistaForeignKey(this.notacredito.getid_transportista(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesNotaCredito("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesNotaCredito(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCredito() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCredito(NotaCredito notacredito) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoNotaCredito(notacredito,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCredito(NotaCredito notacredito,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioNotaCredito(notacredito);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyNotaCredito(notacredito,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyNotaCredito(notacredito);
	}
	
	public void setVariablesObjetoActualToFormularioNotaCredito(NotaCredito notacredito) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setText(notacredito.getId().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setText(notacredito.getcodigo());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setText(notacredito.getnumero());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setDate(notacredito.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setText(notacredito.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setDate(notacredito.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setText(notacredito.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setText(notacredito.getdireccion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setText(notacredito.gettelefono());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setText(notacredito.getruc());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setText(notacredito.getdescripcion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setText(notacredito.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setText(notacredito.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setText(notacredito.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setText(notacredito.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setText(notacredito.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setText(notacredito.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setText(notacredito.getflete().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setText(notacredito.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setText(notacredito.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setText(notacredito.getotro().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setText(notacredito.getiva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setText(notacredito.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setText(notacredito.getice().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setText(notacredito.getotro_valor().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,NotaCredito notacreditoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,notacreditoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,NotaCredito notacreditoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				notacreditoLocal=this.notacredito;
			} else {
				notacreditoLocal=this.notacreditoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(notacreditoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoNotaCredito(notacreditoLocal,true);
					
					if(notacreditoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(notacreditoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(notacreditoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoNotaCredito(NotaCredito notacredito,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCredito(notacredito,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(notacredito);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCredito(NotaCredito notacredito,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCredito(notacredito,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCredito(NotaCredito notacredito,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.getText()==null || this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.getText()=="" || this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.getText()=="Id") {
				this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setText("0");
			}

			if(conColumnasBase) {notacredito.setId(Long.parseLong(this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelIdNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setcodigo(this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelcodigoNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setnumero(this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelnumeroNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setfecha_emision(this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_emisionNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setnumero_dias(Integer.parseInt(this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_NUMERODIAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelnumero_diasNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setfecha_vencimiento(this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfecha_vencimientoNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelcotizacionNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setdireccion(this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_DIRECCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldireccionNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.settelefono(this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_TELEFONO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltelefonoNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setruc(this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelrucNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setdescripcion(this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescripcionNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setdescuento_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_porcentajeNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_ivaNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setsuman(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_SUMAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelsumanNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeldescuento_valorNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.settotal_sin_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_sin_ivaNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.settotal_descuento(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotal_descuentoNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setflete(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_FLETE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfleteNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.settotal(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeltotalNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelsub_totalNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setotro(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_OTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelotroNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setiva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelivaNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setfinanciamiento(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelfinanciamientoNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setice(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabeliceNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacredito.setotro_valor(Double.parseDouble(this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoConstantesFunciones.LABEL_OTROVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCredito.jLabelotro_valorNotaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCredito(NotaCredito notacreditoBean,NotaCredito notacredito,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosNotaCredito(NotaCredito notacreditoOrigen,NotaCredito notacredito,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditoOrigen.getId()!=null && !notacreditoOrigen.getId().equals(0L))) {notacredito.setId(notacreditoOrigen.getId());}}
			if(conDefault || (!conDefault && notacreditoOrigen.getcodigo()!=null && !notacreditoOrigen.getcodigo().equals(""))) {notacredito.setcodigo(notacreditoOrigen.getcodigo());}
			if(conDefault || (!conDefault && notacreditoOrigen.getnumero()!=null && !notacreditoOrigen.getnumero().equals(""))) {notacredito.setnumero(notacreditoOrigen.getnumero());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfecha_emision()!=null && !notacreditoOrigen.getfecha_emision().equals(new Date()))) {notacredito.setfecha_emision(notacreditoOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && notacreditoOrigen.getnumero_dias()!=null && !notacreditoOrigen.getnumero_dias().equals(0))) {notacredito.setnumero_dias(notacreditoOrigen.getnumero_dias());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfecha_vencimiento()!=null && !notacreditoOrigen.getfecha_vencimiento().equals(new Date()))) {notacredito.setfecha_vencimiento(notacreditoOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && notacreditoOrigen.getcotizacion()!=null && !notacreditoOrigen.getcotizacion().equals(0.0))) {notacredito.setcotizacion(notacreditoOrigen.getcotizacion());}
			if(conDefault || (!conDefault && notacreditoOrigen.getdireccion()!=null && !notacreditoOrigen.getdireccion().equals(""))) {notacredito.setdireccion(notacreditoOrigen.getdireccion());}
			if(conDefault || (!conDefault && notacreditoOrigen.gettelefono()!=null && !notacreditoOrigen.gettelefono().equals(""))) {notacredito.settelefono(notacreditoOrigen.gettelefono());}
			if(conDefault || (!conDefault && notacreditoOrigen.getruc()!=null && !notacreditoOrigen.getruc().equals(""))) {notacredito.setruc(notacreditoOrigen.getruc());}
			if(conDefault || (!conDefault && notacreditoOrigen.getdescripcion()!=null && !notacreditoOrigen.getdescripcion().equals(""))) {notacredito.setdescripcion(notacreditoOrigen.getdescripcion());}
			if(conDefault || (!conDefault && notacreditoOrigen.getdescuento_porcentaje()!=null && !notacreditoOrigen.getdescuento_porcentaje().equals(0.0))) {notacredito.setdescuento_porcentaje(notacreditoOrigen.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && notacreditoOrigen.gettotal_iva()!=null && !notacreditoOrigen.gettotal_iva().equals(0.0))) {notacredito.settotal_iva(notacreditoOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditoOrigen.getsuman()!=null && !notacreditoOrigen.getsuman().equals(0.0))) {notacredito.setsuman(notacreditoOrigen.getsuman());}
			if(conDefault || (!conDefault && notacreditoOrigen.getdescuento_valor()!=null && !notacreditoOrigen.getdescuento_valor().equals(0.0))) {notacredito.setdescuento_valor(notacreditoOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && notacreditoOrigen.gettotal_sin_iva()!=null && !notacreditoOrigen.gettotal_sin_iva().equals(0.0))) {notacredito.settotal_sin_iva(notacreditoOrigen.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditoOrigen.gettotal_descuento()!=null && !notacreditoOrigen.gettotal_descuento().equals(0.0))) {notacredito.settotal_descuento(notacreditoOrigen.gettotal_descuento());}
			if(conDefault || (!conDefault && notacreditoOrigen.getflete()!=null && !notacreditoOrigen.getflete().equals(0.0))) {notacredito.setflete(notacreditoOrigen.getflete());}
			if(conDefault || (!conDefault && notacreditoOrigen.gettotal()!=null && !notacreditoOrigen.gettotal().equals(0.0))) {notacredito.settotal(notacreditoOrigen.gettotal());}
			if(conDefault || (!conDefault && notacreditoOrigen.getsub_total()!=null && !notacreditoOrigen.getsub_total().equals(0.0))) {notacredito.setsub_total(notacreditoOrigen.getsub_total());}
			if(conDefault || (!conDefault && notacreditoOrigen.getotro()!=null && !notacreditoOrigen.getotro().equals(0.0))) {notacredito.setotro(notacreditoOrigen.getotro());}
			if(conDefault || (!conDefault && notacreditoOrigen.getiva()!=null && !notacreditoOrigen.getiva().equals(0.0))) {notacredito.setiva(notacreditoOrigen.getiva());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfinanciamiento()!=null && !notacreditoOrigen.getfinanciamiento().equals(0.0))) {notacredito.setfinanciamiento(notacreditoOrigen.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditoOrigen.getice()!=null && !notacreditoOrigen.getice().equals(0.0))) {notacredito.setice(notacreditoOrigen.getice());}
			if(conDefault || (!conDefault && notacreditoOrigen.getotro_valor()!=null && !notacreditoOrigen.getotro_valor().equals(0.0))) {notacredito.setotro_valor(notacreditoOrigen.getotro_valor());}
			if(conDefault || (!conDefault && notacreditoOrigen.getretencion()!=null && !notacreditoOrigen.getretencion().equals(0.0))) {notacredito.setretencion(notacreditoOrigen.getretencion());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfecha()!=null && !notacreditoOrigen.getfecha().equals(new Date()))) {notacredito.setfecha(notacreditoOrigen.getfecha());}
			if(conDefault || (!conDefault && notacreditoOrigen.getes_cliente()!=null && !notacreditoOrigen.getes_cliente().equals(false))) {notacredito.setes_cliente(notacreditoOrigen.getes_cliente());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfecha_cliente()!=null && !notacreditoOrigen.getfecha_cliente().equals(new Date()))) {notacredito.setfecha_cliente(notacreditoOrigen.getfecha_cliente());}
			if(conDefault || (!conDefault && notacreditoOrigen.getfecha_autorizacion()!=null && !notacreditoOrigen.getfecha_autorizacion().equals(new Date()))) {notacredito.setfecha_autorizacion(notacreditoOrigen.getfecha_autorizacion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCredito(NotaCredito notacredito) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setText(notacredito.getId().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setText(notacredito.getcodigo());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setText(notacredito.getnumero());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setDate(notacredito.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setText(notacredito.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setDate(notacredito.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setText(notacredito.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setText(notacredito.getdireccion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setText(notacredito.gettelefono());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setText(notacredito.getruc());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setText(notacredito.getdescripcion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setText(notacredito.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setText(notacredito.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setText(notacredito.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setText(notacredito.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setText(notacredito.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setText(notacredito.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setText(notacredito.getflete().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setText(notacredito.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setText(notacredito.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setText(notacredito.getotro().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setText(notacredito.getiva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setText(notacredito.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setText(notacredito.getice().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setText(notacredito.getotro_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCredito(NotaCreditoBean notacreditoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setText(notacreditoBean.getId().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setText(notacreditoBean.getcodigo());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setText(notacreditoBean.getnumero());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setDate(notacreditoBean.getfecha_emision());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setText(notacreditoBean.getnumero_dias().toString());
			this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setDate(notacreditoBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setText(notacreditoBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setText(notacreditoBean.getdireccion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setText(notacreditoBean.gettelefono());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setText(notacreditoBean.getruc());
			this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setText(notacreditoBean.getdescripcion());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setText(notacreditoBean.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setText(notacreditoBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setText(notacreditoBean.getsuman().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setText(notacreditoBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setText(notacreditoBean.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setText(notacreditoBean.gettotal_descuento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setText(notacreditoBean.getflete().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setText(notacreditoBean.gettotal().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setText(notacreditoBean.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setText(notacreditoBean.getotro().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setText(notacreditoBean.getiva().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setText(notacreditoBean.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setText(notacreditoBean.getice().toString());
			this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setText(notacreditoBean.getotro_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanNotaCredito(NotaCreditoParameterReturnGeneral notacreditoReturnGeneral,NotaCreditoBean notacreditoBean,Boolean conDefault) throws Exception { 
		try {
			NotaCredito notacreditoLocal=new NotaCredito();
			
			notacreditoLocal=notacreditoReturnGeneral.getNotaCredito();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditoLocal.getId()!=null && !notacreditoLocal.getId().equals(0L))) {notacreditoBean.setId(notacreditoLocal.getId());}}
			if(conDefault || (!conDefault && notacreditoLocal.getcodigo()!=null && !notacreditoLocal.getcodigo().equals(""))) {notacreditoBean.setcodigo(notacreditoLocal.getcodigo());}
			if(conDefault || (!conDefault && notacreditoLocal.getnumero()!=null && !notacreditoLocal.getnumero().equals(""))) {notacreditoBean.setnumero(notacreditoLocal.getnumero());}
			if(conDefault || (!conDefault && notacreditoLocal.getfecha_emision()!=null && !notacreditoLocal.getfecha_emision().equals(new Date()))) {notacreditoBean.setfecha_emision(notacreditoLocal.getfecha_emision());}
			if(conDefault || (!conDefault && notacreditoLocal.getnumero_dias()!=null && !notacreditoLocal.getnumero_dias().equals(0))) {notacreditoBean.setnumero_dias(notacreditoLocal.getnumero_dias());}
			if(conDefault || (!conDefault && notacreditoLocal.getfecha_vencimiento()!=null && !notacreditoLocal.getfecha_vencimiento().equals(new Date()))) {notacreditoBean.setfecha_vencimiento(notacreditoLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && notacreditoLocal.getcotizacion()!=null && !notacreditoLocal.getcotizacion().equals(0.0))) {notacreditoBean.setcotizacion(notacreditoLocal.getcotizacion());}
			if(conDefault || (!conDefault && notacreditoLocal.getdireccion()!=null && !notacreditoLocal.getdireccion().equals(""))) {notacreditoBean.setdireccion(notacreditoLocal.getdireccion());}
			if(conDefault || (!conDefault && notacreditoLocal.gettelefono()!=null && !notacreditoLocal.gettelefono().equals(""))) {notacreditoBean.settelefono(notacreditoLocal.gettelefono());}
			if(conDefault || (!conDefault && notacreditoLocal.getruc()!=null && !notacreditoLocal.getruc().equals(""))) {notacreditoBean.setruc(notacreditoLocal.getruc());}
			if(conDefault || (!conDefault && notacreditoLocal.getdescripcion()!=null && !notacreditoLocal.getdescripcion().equals(""))) {notacreditoBean.setdescripcion(notacreditoLocal.getdescripcion());}
			if(conDefault || (!conDefault && notacreditoLocal.getdescuento_porcentaje()!=null && !notacreditoLocal.getdescuento_porcentaje().equals(0.0))) {notacreditoBean.setdescuento_porcentaje(notacreditoLocal.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && notacreditoLocal.gettotal_iva()!=null && !notacreditoLocal.gettotal_iva().equals(0.0))) {notacreditoBean.settotal_iva(notacreditoLocal.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditoLocal.getsuman()!=null && !notacreditoLocal.getsuman().equals(0.0))) {notacreditoBean.setsuman(notacreditoLocal.getsuman());}
			if(conDefault || (!conDefault && notacreditoLocal.getdescuento_valor()!=null && !notacreditoLocal.getdescuento_valor().equals(0.0))) {notacreditoBean.setdescuento_valor(notacreditoLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && notacreditoLocal.gettotal_sin_iva()!=null && !notacreditoLocal.gettotal_sin_iva().equals(0.0))) {notacreditoBean.settotal_sin_iva(notacreditoLocal.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditoLocal.gettotal_descuento()!=null && !notacreditoLocal.gettotal_descuento().equals(0.0))) {notacreditoBean.settotal_descuento(notacreditoLocal.gettotal_descuento());}
			if(conDefault || (!conDefault && notacreditoLocal.getflete()!=null && !notacreditoLocal.getflete().equals(0.0))) {notacreditoBean.setflete(notacreditoLocal.getflete());}
			if(conDefault || (!conDefault && notacreditoLocal.gettotal()!=null && !notacreditoLocal.gettotal().equals(0.0))) {notacreditoBean.settotal(notacreditoLocal.gettotal());}
			if(conDefault || (!conDefault && notacreditoLocal.getsub_total()!=null && !notacreditoLocal.getsub_total().equals(0.0))) {notacreditoBean.setsub_total(notacreditoLocal.getsub_total());}
			if(conDefault || (!conDefault && notacreditoLocal.getotro()!=null && !notacreditoLocal.getotro().equals(0.0))) {notacreditoBean.setotro(notacreditoLocal.getotro());}
			if(conDefault || (!conDefault && notacreditoLocal.getiva()!=null && !notacreditoLocal.getiva().equals(0.0))) {notacreditoBean.setiva(notacreditoLocal.getiva());}
			if(conDefault || (!conDefault && notacreditoLocal.getfinanciamiento()!=null && !notacreditoLocal.getfinanciamiento().equals(0.0))) {notacreditoBean.setfinanciamiento(notacreditoLocal.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditoLocal.getice()!=null && !notacreditoLocal.getice().equals(0.0))) {notacreditoBean.setice(notacreditoLocal.getice());}
			if(conDefault || (!conDefault && notacreditoLocal.getotro_valor()!=null && !notacreditoLocal.getotro_valor().equals(0.0))) {notacreditoBean.setotro_valor(notacreditoLocal.getotro_valor());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxNotaCreditoGenerico(Long idNotaCreditoSeleccionado,JComboBox jComboBoxNotaCredito,List<NotaCredito> notacreditosLocal)throws Exception {
		try {
			NotaCredito  notacreditoTemp=null;

			for(NotaCredito notacreditoAux:notacreditosLocal) {
				if(notacreditoAux.getId()!=null && notacreditoAux.getId().equals(idNotaCreditoSeleccionado)) {
					notacreditoTemp=notacreditoAux;
					break;
				}
			}

			jComboBoxNotaCredito.setSelectedItem(notacreditoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxNotaCreditoGenerico(JComboBox jComboBoxNotaCredito,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxNotaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxNotaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCredito.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxNotaCredito.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCredito.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxNotaCredito.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxNotaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxNotaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetaNotaCredito")) {
			jButtonDetaNotaCreditoActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacredito=(NotaCredito) notacreditoLogic.getNotaCreditos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacredito =(NotaCredito) notacreditos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getempleado_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getformato_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getfactura_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Responsable")) {
			//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getresponsable_descripcion();
			} else {
				//sDescripcion=this.getActualResponsableForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getresponsable_descripcion();
			}
		}

		if(sTipo.equals("EstadoNotaCredito")) {
			//sDescripcion=this.getActualEstadoNotaCreditoForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getestadonotacredito_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoNotaCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getestadonotacredito_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.gettipocambio_descripcion();
			}
		}

		if(sTipo.equals("Transporte")) {
			//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.gettransporte_descripcion();
			} else {
				//sDescripcion=this.getActualTransporteForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.gettransporte_descripcion();
			}
		}

		if(sTipo.equals("Transportista")) {
			//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
			if(!notacredito.getIsNew() && !notacredito.getIsChanged() && !notacredito.getIsDeleted()) {
				sDescripcion=notacredito.gettransportista_descripcion();
			} else {
				//sDescripcion=this.getActualTransportistaForeignKeyDescripcion((Long)value);
				sDescripcion=notacredito.gettransportista_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		NotaCredito notacreditoRow=new NotaCredito();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditoRow=(NotaCredito) notacreditoLogic.getNotaCreditos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacreditoRow=(NotaCredito) notacreditos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetaNotaCreditoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,NotaCredito notacredito) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormNotaCredito==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito = (NotaCredito)this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.notacredito = (NotaCredito)this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(notacredito!=null) {
						this.notacredito = notacredito;
					} else {
						this.notacredito = new NotaCredito();
					}
				}

				if(this.isTienePermisosDetaNotaCredito && this.permiteMantenimiento(this.notacredito)) {
					DetaNotaCreditoBeanSwingJInternalFrame detanotacreditoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup=new DetaNotaCreditoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detanotacreditoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup;
					} else {
						detanotacreditoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame;
					}

					List<NotaCredito> notacreditos=new ArrayList<NotaCredito>();
					notacreditos.add(this.notacredito);
					if(!esRelacionado) {
						//detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.setConGuardarRelaciones(false);
						//detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detanotacreditoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormNotaCredito.cargarDetaNotaCreditoBeanSwingJInternalFrame(notacreditos,this.notacredito,detanotacreditoBeanSwingJInternalFrame,/*conInicializar,*/detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.getConGuardarRelaciones(),detanotacreditoBeanSwingJInternalFrame.detanotacreditoSessionBean.getEsGuardarRelacionado());
					detanotacreditoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detanotacreditoBeanSwingJInternalFrame.actualizarEstadoPanelsDetaNotaCredito("no_relacionado");

						detanotacreditoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetaNotaCreditoConstantesFunciones.ITAMANIOFILATABLA + (DetaNotaCreditoConstantesFunciones.ITAMANIOFILATABLA/2));

						detanotacreditoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
						TitledBorder titledBorderDetaNotaCredito=(TitledBorder)detanotacreditoBeanSwingJInternalFrame.jScrollPanelDatosDetaNotaCredito.getBorder();

						titledBorderDetaNotaCredito.setTitle(titledBorderNotaCredito.getTitle() + " -> Deta Nota Credito");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detanotacreditoBeanSwingJInternalFrame);
						}

						detanotacreditoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detanotacreditoBeanSwingJInternalFrame);

						detanotacreditoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.notacreditoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Deta Nota Credito",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualNotaCredito(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito));			
			this.jButtonDuplicarNotaCredito.setVisible((this.isVisibilidadCeldaDuplicarNotaCredito && this.isPermisoDuplicarNotaCredito));			
			this.jButtonCopiarNotaCredito.setVisible((this.isVisibilidadCeldaCopiarNotaCredito && this.isPermisoCopiarNotaCredito));
			this.jButtonVerFormNotaCredito.setVisible((this.isVisibilidadCeldaVerFormNotaCredito && this.isPermisoVerFormNotaCredito));
			
			this.jButtonAbrirOrderByNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));			
			
			this.jButtonNuevoRelacionesNotaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCredito && this.isPermisoNuevoNotaCredito));			
			this.jButtonNuevoGuardarCambiosNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito && this.isPermisoGuardarCambiosNotaCredito));
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonModificarNotaCredito.setVisible((this.isVisibilidadCeldaModificarNotaCredito && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.setVisible((this.isVisibilidadCeldaActualizarNotaCredito && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.setVisible((this.isVisibilidadCeldaEliminarNotaCredito && this.isPermisoEliminarNotaCredito));
			this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.setVisible(this.isVisibilidadCeldaCancelarNotaCredito);							
			this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.setVisible((this.isVisibilidadCeldaGuardarNotaCredito && this.isPermisoGuardarCambiosNotaCredito));			
			
			}
						
			this.jButtonGuardarCambiosTablaNotaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCredito && this.isPermisoGuardarCambiosNotaCredito));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito));						
			this.jButtonDuplicarToolBarNotaCredito.setVisible((this.isVisibilidadCeldaDuplicarNotaCredito && this.isPermisoDuplicarNotaCredito));						
			this.jButtonCopiarToolBarNotaCredito.setVisible((this.isVisibilidadCeldaCopiarNotaCredito && this.isPermisoCopiarNotaCredito));			
			this.jButtonVerFormToolBarNotaCredito.setVisible((this.isVisibilidadCeldaVerFormNotaCredito && this.isPermisoVerFormNotaCredito));			
			this.jButtonAbrirOrderByToolBarNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));
			this.jButtonNuevoRelacionesToolBarNotaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCredito && this.isPermisoNuevoNotaCredito));			
			this.jButtonNuevoGuardarCambiosToolBarNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito && this.isPermisoGuardarCambiosNotaCredito));			
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonModificarToolBarNotaCredito.setVisible((this.isVisibilidadCeldaModificarNotaCredito && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarToolBarNotaCredito.setVisible((this.isVisibilidadCeldaActualizarNotaCredito  && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarToolBarNotaCredito.setVisible((this.isVisibilidadCeldaEliminarNotaCredito && this.isPermisoEliminarNotaCredito));
			this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarToolBarNotaCredito.setVisible(this.isVisibilidadCeldaCancelarNotaCredito);				
			this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosToolBarNotaCredito.setVisible((this.isVisibilidadCeldaGuardarNotaCredito && this.isPermisoGuardarCambiosNotaCredito));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarNotaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCredito && this.isPermisoGuardarCambiosNotaCredito));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito));			
			this.jMenuItemDuplicarNotaCredito.setVisible((this.isVisibilidadCeldaDuplicarNotaCredito && this.isPermisoDuplicarNotaCredito));			
			this.jMenuItemCopiarNotaCredito.setVisible((this.isVisibilidadCeldaCopiarNotaCredito && this.isPermisoCopiarNotaCredito));			
			this.jMenuItemVerFormNotaCredito.setVisible((this.isVisibilidadCeldaVerFormNotaCredito && this.isPermisoVerFormNotaCredito));			
			this.jMenuItemAbrirOrderByNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));			
			//this.jMenuItemMostrarOcultarNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));
			this.jMenuItemDetalleAbrirOrderByNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));			
			//this.jMenuItemDetalleMostrarOcultarNotaCredito.setVisible((this.isVisibilidadCeldaOrdenNotaCredito && this.isPermisoOrdenNotaCredito));			
			this.jMenuItemNuevoRelacionesNotaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCredito && this.isPermisoNuevoNotaCredito));			
			this.jMenuItemNuevoGuardarCambiosNotaCredito.setVisible((this.isVisibilidadCeldaNuevoNotaCredito && this.isPermisoNuevoNotaCredito && this.isPermisoGuardarCambiosNotaCredito));									
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemModificarNotaCredito.setVisible((this.isVisibilidadCeldaModificarNotaCredito && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemActualizarNotaCredito.setVisible((this.isVisibilidadCeldaActualizarNotaCredito && this.isPermisoActualizarNotaCredito));	
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemEliminarNotaCredito.setVisible((this.isVisibilidadCeldaEliminarNotaCredito && this.isPermisoEliminarNotaCredito));
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemCancelarNotaCredito.setVisible(this.isVisibilidadCeldaCancelarNotaCredito);				
			}
			
			this.jMenuItemGuardarCambiosNotaCredito.setVisible((this.isVisibilidadCeldaGuardarNotaCredito && this.isPermisoGuardarCambiosNotaCredito));						
			this.jMenuItemGuardarCambiosTablaNotaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCredito && this.isPermisoGuardarCambiosNotaCredito));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoNotaCredito=this.jButtonNuevoNotaCredito.isVisible();
			this.isVisibilidadCeldaDuplicarNotaCredito=this.jButtonDuplicarNotaCredito.isVisible();
			this.isVisibilidadCeldaCopiarNotaCredito=this.jButtonCopiarNotaCredito.isVisible();
			this.isVisibilidadCeldaVerFormNotaCredito=this.jButtonVerFormNotaCredito.isVisible();
			
			this.isVisibilidadCeldaOrdenNotaCredito=this.jButtonAbrirOrderByNotaCredito.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=this.jButtonNuevoRelacionesNotaCredito.isVisible();
			this.isVisibilidadCeldaModificarNotaCredito=this.jButtonModificarNotaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.isVisibilidadCeldaActualizarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.isVisible();
			this.isVisibilidadCeldaEliminarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.isVisible();
			this.isVisibilidadCeldaCancelarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.isVisible();
			this.isVisibilidadCeldaGuardarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=this.jButtonGuardarCambiosTablaNotaCredito.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoNotaCredito=this.jButtonNuevoToolBarNotaCredito.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=this.jButtonNuevoRelacionesToolBarNotaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.isVisibilidadCeldaModificarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonModificarToolBarNotaCredito.isVisible();
			this.isVisibilidadCeldaActualizarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarToolBarNotaCredito.isVisible();
			this.isVisibilidadCeldaEliminarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarToolBarNotaCredito.isVisible();
			this.isVisibilidadCeldaCancelarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarToolBarNotaCredito.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCredito=this.jButtonGuardarCambiosToolBarNotaCredito.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=this.jButtonGuardarCambiosTablaToolBarNotaCredito.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoNotaCredito=this.jMenuItemNuevoNotaCredito.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=this.jMenuItemNuevoRelacionesNotaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.isVisibilidadCeldaModificarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jMenuItemModificarNotaCredito.isVisible();
			this.isVisibilidadCeldaActualizarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jMenuItemActualizarNotaCredito.isVisible();
			this.isVisibilidadCeldaEliminarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jMenuItemEliminarNotaCredito.isVisible();
			this.isVisibilidadCeldaCancelarNotaCredito=this.jInternalFrameDetalleFormNotaCredito.jMenuItemCancelarNotaCredito.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCredito=this.jMenuItemGuardarCambiosNotaCredito.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=this.jMenuItemGuardarCambiosTablaNotaCredito.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesNotaCredito(Boolean esInicializar) {
		if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
				//if(this.notacreditoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCredito();
			}
			
			this.inicializarActualizarBindingBotonesManualNotaCredito(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualNotaCredito() {
		this.jButtonNuevoNotaCredito.setVisible(this.isPermisoNuevoNotaCredito);			
		this.jButtonDuplicarNotaCredito.setVisible(this.isPermisoDuplicarNotaCredito);			
		this.jButtonCopiarNotaCredito.setVisible(this.isPermisoCopiarNotaCredito);			
		this.jButtonVerFormNotaCredito.setVisible(this.isPermisoVerFormNotaCredito);			
		
		this.jButtonAbrirOrderByNotaCredito.setVisible(this.isPermisoOrdenNotaCredito);					
		
		this.jButtonNuevoRelacionesNotaCredito.setVisible(this.isPermisoNuevoNotaCredito);			
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonModificarNotaCredito.setVisible(this.isPermisoActualizarNotaCredito);	
			this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.setVisible(this.isPermisoActualizarNotaCredito);	
			this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.setVisible(this.isPermisoEliminarNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.setVisible(this.isVisibilidadCeldaCancelarNotaCredito);						
			this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.setVisible(this.isPermisoGuardarCambiosNotaCredito);							
		}
		
		this.jButtonGuardarCambiosTablaNotaCredito.setVisible(this.isPermisoActualizarNotaCredito);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCredito() {
		this.jInternalFrameDetalleFormNotaCredito.jButtonModificarNotaCredito.setVisible(this.isPermisoActualizarNotaCredito);	
		this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.setVisible(this.isPermisoActualizarNotaCredito);	
		this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.setVisible(this.isPermisoEliminarNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.setVisible(this.isVisibilidadCeldaCancelarNotaCredito);							
		this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.setVisible((this.isVisibilidadCeldaGuardarNotaCredito && this.isPermisoGuardarCambiosNotaCredito));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosNotaCredito() {
		if(NotaCreditoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualNotaCredito();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesNotaCredito() {
	}
	
	public void jTableDatosNotaCreditoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarNotaCredito(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.notacredito.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebNotaCredito(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderNotaCredito.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.notacredito.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebNotaCredito(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderNotaCredito.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.notacredito.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebNotaCredito(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderNotaCredito.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.notacredito.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebNotaCredito(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderNotaCredito.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.notacredito.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebNotaCredito(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderNotaCredito.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.notacredito.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebNotaCredito(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderNotaCredito.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.notacredito.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebNotaCredito(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderNotaCredito.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.notacredito.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.notacredito.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumeroNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getnumero()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero like '%"+this.notacredito.getnumero()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.notacredito.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_diasNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getnumero_dias()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_dias = "+this.notacredito.getnumero_dias().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.notacredito.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebNotaCredito(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderNotaCredito.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.notacredito.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.notacredito.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderNotaCredito.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebNotaCredito(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderNotaCredito.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.notacredito.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebNotaCredito(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderNotaCredito.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.notacredito.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebNotaCredito(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderNotaCredito.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.notacredito.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCredito.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebNotaCredito(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCredito.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.notacredito.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderNotaCredito.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebNotaCredito(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderNotaCredito.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.notacredito.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getdireccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion like '%"+this.notacredito.getdireccion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefonoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.gettelefono()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono like '%"+this.notacredito.gettelefono()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.notacredito.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="Vendedor";

			if(!this.sFinalQueryGeneral_vendedor.equals("")) {
				this.vendedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_vendedor);
				this.vendedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.vendedorBeanSwingJInternalFrame.procesarBusqueda(this.vendedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingVendedor(false);
			}

			if(!this.sFinalQueryComboVendedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBordervendedor=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCredito.getTitle() + " -> Vendedor");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_vendedorNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebNotaCredito(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCredito.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.notacredito.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_responsableNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoresponsable=true;

			idTienePermisoresponsable=this.tienePermisosUsuarioEnPaginaWebNotaCredito(ResponsableConstantesFunciones.CLASSNAME);

			if(idTienePermisoresponsable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.responsableBeanSwingJInternalFrame=new ResponsableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.responsableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.responsableBeanSwingJInternalFrame.getResponsableLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_responsable()!=null) {
					this.responsableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.responsableBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_responsable());
					this.responsableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.responsableBeanSwingJInternalFrame.inicializarActualizarBindingTablaResponsable();
				}

				JInternalFrameBase jinternalFrame =this.responsableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderresponsable=(TitledBorder)this.responsableBeanSwingJInternalFrame.jScrollPanelDatosResponsable.getBorder();

				titledBorderresponsable.setTitle(titledBorderNotaCredito.getTitle() + " -> Responsable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_responsableNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_responsable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_responsable = "+this.notacredito.getid_responsable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_nota_creditoNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadonotacredito=true;

			idTienePermisoestadonotacredito=this.tienePermisosUsuarioEnPaginaWebNotaCredito(EstadoNotaCreditoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadonotacredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.estadonotacreditoBeanSwingJInternalFrame=new EstadoNotaCreditoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadonotacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadonotacreditoBeanSwingJInternalFrame.getEstadoNotaCreditoLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_estado_nota_credito()!=null) {
					this.estadonotacreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadonotacreditoBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_estado_nota_credito());
					this.estadonotacreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadonotacreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadonotacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoNotaCredito();
				}

				JInternalFrameBase jinternalFrame =this.estadonotacreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBorderestadonotacredito=(TitledBorder)this.estadonotacreditoBeanSwingJInternalFrame.jScrollPanelDatosEstadoNotaCredito.getBorder();

				titledBorderestadonotacredito.setTitle(titledBorderNotaCredito.getTitle() + " -> Estado Nota Credito");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_nota_creditoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_estado_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_nota_credito = "+this.notacredito.getid_estado_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.notacredito.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_porcentajeNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getdescuento_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_porcentaje = "+this.notacredito.getdescuento_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.notacredito.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsumanNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getsuman()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where suman = "+this.notacredito.getsuman().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.notacredito.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_sin_ivaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.gettotal_sin_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_sin_iva = "+this.notacredito.gettotal_sin_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_descuentoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.gettotal_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_descuento = "+this.notacredito.gettotal_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.notacredito.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.notacredito.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.notacredito.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotroNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getotro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otro = "+this.notacredito.getotro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.notacredito.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfinanciamientoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfinanciamiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where financiamiento = "+this.notacredito.getfinanciamiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.notacredito.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotro_valorNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getotro_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otro_valor = "+this.notacredito.getotro_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonretencionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getretencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where retencion = "+this.notacredito.getretencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.notacredito.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_clienteNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getes_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_cliente = "+this.notacredito.getes_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderNotaCredito.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebNotaCredito(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderNotaCredito.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.notacredito.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCredito=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosNotaCredito.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderNotaCredito.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebNotaCredito(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderNotaCredito.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.notacredito.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transporteNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransporte=true;

			idTienePermisotransporte=this.tienePermisosUsuarioEnPaginaWebNotaCredito(TransporteConstantesFunciones.CLASSNAME);

			if(idTienePermisotransporte) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.transporteBeanSwingJInternalFrame=new TransporteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transporteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transporteBeanSwingJInternalFrame.getTransporteLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_transporte()!=null) {
					this.transporteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transporteBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_transporte());
					this.transporteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transporteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransporte();
				}

				JInternalFrameBase jinternalFrame =this.transporteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordertransporte=(TitledBorder)this.transporteBeanSwingJInternalFrame.jScrollPanelDatosTransporte.getBorder();

				titledBordertransporte.setTitle(titledBorderNotaCredito.getTitle() + " -> Transporte");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transporteNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transporte = "+this.notacredito.getid_transporte().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transportistaNotaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransportista=true;

			idTienePermisotransportista=this.tienePermisosUsuarioEnPaginaWebNotaCredito(TransportistaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransportista) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);

				this.transportistaBeanSwingJInternalFrame=new TransportistaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transportistaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transportistaBeanSwingJInternalFrame.getTransportistaLogic().setConnexion(this.notacreditoLogic.getConnexion());

				if(this.notacredito.getid_transportista()!=null) {
					this.transportistaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transportistaBeanSwingJInternalFrame.setIdActual(this.notacredito.getid_transportista());
					this.transportistaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transportistaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransportista();
				}

				JInternalFrameBase jinternalFrame =this.transportistaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCredito=(TitledBorder)this.jScrollPanelDatosNotaCredito.getBorder();
				TitledBorder titledBordertransportista=(TitledBorder)this.transportistaBeanSwingJInternalFrame.jScrollPanelDatosTransportista.getBorder();

				titledBordertransportista.setTitle(titledBorderNotaCredito.getTitle() + " -> Transportista");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transportistaNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getid_transportista()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transportista = "+this.notacredito.getid_transportista().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_clienteNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfecha_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_cliente = '"+Funciones2.getStringPostgresDate(this.notacredito.getfecha_cliente())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_autorizacionNotaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.getnotacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacredito==null) {
						this.notacredito = new NotaCredito();
					}

					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);
				}

				if(this.notacredito.getfecha_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_autorizacion = '"+Funciones2.getStringPostgresDate(this.notacredito.getfecha_autorizacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosBusquedaPorCodigo();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNumeroPreImpresoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosBusquedaPorNumeroPreImpreso();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAnioNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdAnio();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdCentroCosto();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdCliente();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdEjercicio();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdEmpleado();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdEmpresa();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdFactura();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdFormato();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdMes();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdMoneda();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdNotaCreditoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdNotaCredito();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdPeriodo();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdResponsableNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdResponsable();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdSucursal();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCambioNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdTipoCambio();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdTipoPrecio();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransporteNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdTransporte();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransportistaNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdTransportista();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdUsuario();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorNotaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCredito(false,false);

			this.getNotaCreditosFK_IdVendedor();

			this.inicializarActualizarBindingNotaCredito(false);

			//if(NotaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameNotaCredito() {
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
		

		if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
			this.jInternalFrameDetalleFormNotaCredito.setVisible(false);	    			
			this.jInternalFrameDetalleFormNotaCredito.dispose();
			this.jInternalFrameDetalleFormNotaCredito=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
			this.jInternalFrameReporteDinamicoNotaCredito.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoNotaCredito.dispose();
			this.jInternalFrameReporteDinamicoNotaCredito=null;
		}
		
		if(this.jInternalFrameImportacionNotaCredito!=null) {
			this.jInternalFrameImportacionNotaCredito.setVisible(false);	    			
			this.jInternalFrameImportacionNotaCredito.dispose();
			this.jInternalFrameImportacionNotaCredito=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessNotaCredito();
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			
			if(sTipo.equals("NuevoNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarNotaCredito")) {
				jButtonDuplicarNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarNotaCredito")) {
				jButtonCopiarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("VerFormNotaCredito")) {
				jButtonVerFormNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarNotaCredito")) {
				jButtonDuplicarNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarNotaCredito")) {
				jButtonDuplicarNotaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarNotaCredito")) {
				jButtonModificarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarNotaCredito")) {
				jButtonModificarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarNotaCredito")) {
				jButtonModificarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarNotaCredito")) {
				jButtonActualizarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarNotaCredito")) {
				jButtonActualizarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarNotaCredito")) {
				jButtonActualizarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("EliminarNotaCredito")) {
				jButtonEliminarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarNotaCredito")) {
				jButtonEliminarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarNotaCredito")) {
				jButtonEliminarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CancelarNotaCredito")) {
				jButtonCancelarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarNotaCredito")) {
				jButtonCancelarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarNotaCredito")) {
				jButtonCancelarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CerrarNotaCredito")) {
				jButtonCerrarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarNotaCredito")) {
				jButtonCerrarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarNotaCredito")) {
				jButtonCerrarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarNotaCredito")) {
				jButtonMostrarOcultarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarNotaCredito")) {
				jButtonCancelarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarNotaCredito")) {
				jButtonCopiarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarNotaCredito")) {
				jButtonVerFormNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarNotaCredito")) {
				jButtonCopiarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormNotaCredito")) {
				jButtonVerFormNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionNotaCredito")) {
				jButtonRecargarInformacionNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarNotaCredito")) {
				jButtonRecargarInformacionNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionNotaCredito")) {
				jButtonRecargarInformacionNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresNotaCredito")) {
				jButtonAnterioresNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarNotaCredito")) {
				jButtonAnterioresNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreNotaCredito")) {
				jButtonAnterioresNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesNotaCredito")) {
				jButtonSiguientesNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarNotaCredito")) {
				jButtonSiguientesNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesNotaCredito")) {
				jButtonSiguientesNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByNotaCredito") || sTipo.equals("MenuItemDetalleAbrirOrderByNotaCredito")) {
				jButtonAbrirOrderByNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarNotaCredito") || sTipo.equals("MenuItemDetalleMostrarOcultarNotaCredito")) {
				jButtonMostrarOcultarNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCredito")) {
				jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarNotaCredito")) {
				jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosNotaCredito")) {
				jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoNotaCredito")) {
				jButtonCerrarReporteDinamicoNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoNotaCredito")) {
				jButtonGenerarReporteDinamicoNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoNotaCredito")) {
				
				jButtonGenerarExcelReporteDinamicoNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionNotaCredito")) {
				jButtonCerrarImportacionNotaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionNotaCredito")) {
				
				jButtonGenerarImportacionNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionNotaCredito")) {
				
				jButtonAbrirImportacionNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesNotaCredito")) {
				jComboBoxTiposAccionesNotaCreditoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesNotaCredito")) {
				jComboBoxTiposRelacionesNotaCreditoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioNotaCredito")) {
				jComboBoxTiposAccionesNotaCreditoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarNotaCredito")) {
				
				jComboBoxTiposSeleccionarNotaCreditoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralNotaCredito")) {
				jTextFieldValorCampoGeneralNotaCreditoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByNotaCredito")) {
				jButtonAbrirOrderByNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarNotaCredito")) {
				jButtonAbrirOrderByNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByNotaCredito")) {
				jButtonCerrarOrderByNotaCreditoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoBusqueda")) {
				this.jButtonidNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoUpdate")) {
				this.jButtonid_empresaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoBusqueda")) {
				this.jButtonid_empresaNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoUpdate")) {
				this.jButtonid_sucursalNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoBusqueda")) {
				this.jButtonid_sucursalNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoUpdate")) {
				this.jButtonid_ejercicioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoBusqueda")) {
				this.jButtonid_ejercicioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoUpdate")) {
				this.jButtonid_periodoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoBusqueda")) {
				this.jButtonid_periodoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioNotaCreditoUpdate")) {
				this.jButtonid_anioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioNotaCreditoBusqueda")) {
				this.jButtonid_anioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesNotaCreditoUpdate")) {
				this.jButtonid_mesNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesNotaCreditoBusqueda")) {
				this.jButtonid_mesNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoUpdate")) {
				this.jButtonid_usuarioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoBusqueda")) {
				this.jButtonid_usuarioNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoNotaCreditoBusqueda")) {
				this.jButtoncodigoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroNotaCreditoBusqueda")) {
				this.jButtonnumeroNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionNotaCreditoBusqueda")) {
				this.jButtonfecha_emisionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasNotaCreditoBusqueda")) {
				this.jButtonnumero_diasNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoNotaCreditoBusqueda")) {
				this.jButtonfecha_vencimientoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoUpdate")) {
				this.jButtonid_monedaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoBusqueda")) {
				this.jButtonid_monedaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionNotaCreditoBusqueda")) {
				this.jButtoncotizacionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoNotaCredito")) {
				this.jButtonid_empleadoNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoUpdate")) {
				this.jButtonid_empleadoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoBusqueda")) {
				this.jButtonid_empleadoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoUpdate")) {
				this.jButtonid_formatoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoBusqueda")) {
				this.jButtonid_formatoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCredito")) {
				this.jButtonid_clienteNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoUpdate")) {
				this.jButtonid_clienteNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoBusqueda")) {
				this.jButtonid_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaNotaCredito")) {
				this.jButtonid_facturaNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoUpdate")) {
				this.jButtonid_facturaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoBusqueda")) {
				this.jButtonid_facturaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionNotaCreditoBusqueda")) {
				this.jButtondireccionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoNotaCreditoBusqueda")) {
				this.jButtontelefonoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucNotaCreditoBusqueda")) {
				this.jButtonrucNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCredito")) {
				this.jButtonid_vendedorNotaCreditoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoUpdate")) {
				this.jButtonid_vendedorNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoBusqueda")) {
				this.jButtonid_vendedorNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoUpdate")) {
				this.jButtonid_responsableNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoBusqueda")) {
				this.jButtonid_responsableNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoUpdate")) {
				this.jButtonid_estado_nota_creditoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoBusqueda")) {
				this.jButtonid_estado_nota_creditoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionNotaCreditoBusqueda")) {
				this.jButtondescripcionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeNotaCreditoBusqueda")) {
				this.jButtondescuento_porcentajeNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoBusqueda")) {
				this.jButtontotal_ivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanNotaCreditoBusqueda")) {
				this.jButtonsumanNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorNotaCreditoBusqueda")) {
				this.jButtondescuento_valorNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoNotaCreditoBusqueda")) {
				this.jButtontotal_descuentoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoBusqueda")) {
				this.jButtonfleteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoBusqueda")) {
				this.jButtontotalNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoBusqueda")) {
				this.jButtonsub_totalNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otroNotaCreditoBusqueda")) {
				this.jButtonotroNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoBusqueda")) {
				this.jButtonivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoBusqueda")) {
				this.jButtoniceNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otro_valorNotaCreditoBusqueda")) {
				this.jButtonotro_valorNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionNotaCreditoBusqueda")) {
				this.jButtonretencionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoBusqueda")) {
				this.jButtonfechaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_clienteNotaCreditoBusqueda")) {
				this.jButtones_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoNotaCredito")) {
				this.jButtonid_centro_costoNotaCreditoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoUpdate")) {
				this.jButtonid_centro_costoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoBusqueda")) {
				this.jButtonid_centro_costoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCredito")) {
				this.jButtonid_tipo_cambioNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoUpdate")) {
				this.jButtonid_tipo_cambioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoBusqueda")) {
				this.jButtonid_tipo_cambioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoUpdate")) {
				this.jButtonid_transporteNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoBusqueda")) {
				this.jButtonid_transporteNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoUpdate")) {
				this.jButtonid_transportistaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoBusqueda")) {
				this.jButtonid_transportistaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteNotaCreditoBusqueda")) {
				this.jButtonfecha_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionNotaCreditoBusqueda")) {
				this.jButtonfecha_autorizacionNotaCreditoBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteNotaCredito")) {
				this.jButtonid_clienteNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaNotaCredito")) {
				this.jButtonid_facturaNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("id_vendedorNotaCredito")) {
				this.jButtonid_vendedorNotaCreditoActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorCodigoNotaCredito")) {
				this.jButtonBusquedaPorCodigoNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNumeroPreImpresoNotaCredito")) {
				this.jButtonBusquedaPorNumeroPreImpresoNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteNotaCredito")) {
				this.jButtonFK_IdClienteNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaNotaCredito")) {
				this.jButtonFK_IdFacturaNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransportistaNotaCredito")) {
				this.jButtonFK_IdTransportistaNotaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorNotaCredito")) {
				this.jButtonFK_IdVendedorNotaCreditoActionPerformed(evt);
			}
			
			;
			
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessNotaCredito();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			NotaCredito notacreditoLocal=null;
			
			if(!this.getEsControlTabla()) {
				notacreditoLocal=this.notacredito;
			} else {
				notacreditoLocal=this.notacreditoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
							
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
								
						
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
								
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
							
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
								
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosNotaCredito")) {
					jCheckBoxSeleccionarTodosNotaCreditoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosNotaCredito")) {
					jCheckBoxSeleccionadosNotaCreditoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarNotaCredito")) {
					
				}
				
				


				
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
												
				
				


				
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacredito);
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCredito.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditoAnterior =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarNotaCredito")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosNotaCreditoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosNotaCredito.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.notacredito =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.notacredito =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.notacredito);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarNotaCredito")) {
				
				}
				
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarNotaCredito")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosNotaCredito.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarNotaCredito")) {
			
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessNotaCredito();
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			if(sTipo.equals("NuevoNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarNotaCredito")) {
				jButtonDuplicarNotaCreditoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarNotaCredito")) {
				jButtonCopiarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormNotaCredito")) {
				jButtonVerFormNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesNotaCredito")) {
				jButtonNuevoNotaCreditoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarNotaCredito")) {
				jButtonModificarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarNotaCredito")) {
				jButtonActualizarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarNotaCredito")) {
				jButtonEliminarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarNotaCredito")) {
				jButtonCancelarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarNotaCredito")) {
				jButtonCerrarNotaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosNotaCredito")) {
				jButtonGuardarCambiosNotaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCredito")) {
				jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByNotaCredito")) {
				jButtonAbrirOrderByNotaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionNotaCredito")) {
				jButtonRecargarInformacionNotaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresNotaCredito")) {
				jButtonAnterioresNotaCreditoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesNotaCredito")) {
				jButtonSiguientesNotaCreditoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoBusqueda")) {
				this.jButtonidNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoUpdate")) {
				this.jButtonid_empresaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoBusqueda")) {
				this.jButtonid_empresaNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoUpdate")) {
				this.jButtonid_sucursalNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoBusqueda")) {
				this.jButtonid_sucursalNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoUpdate")) {
				this.jButtonid_ejercicioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioNotaCreditoBusqueda")) {
				this.jButtonid_ejercicioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoUpdate")) {
				this.jButtonid_periodoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoNotaCreditoBusqueda")) {
				this.jButtonid_periodoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioNotaCreditoUpdate")) {
				this.jButtonid_anioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioNotaCreditoBusqueda")) {
				this.jButtonid_anioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesNotaCreditoUpdate")) {
				this.jButtonid_mesNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesNotaCreditoBusqueda")) {
				this.jButtonid_mesNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoUpdate")) {
				this.jButtonid_usuarioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoBusqueda")) {
				this.jButtonid_usuarioNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoNotaCreditoBusqueda")) {
				this.jButtoncodigoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numeroNotaCreditoBusqueda")) {
				this.jButtonnumeroNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionNotaCreditoBusqueda")) {
				this.jButtonfecha_emisionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_diasNotaCreditoBusqueda")) {
				this.jButtonnumero_diasNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoNotaCreditoBusqueda")) {
				this.jButtonfecha_vencimientoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoUpdate")) {
				this.jButtonid_monedaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaNotaCreditoBusqueda")) {
				this.jButtonid_monedaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionNotaCreditoBusqueda")) {
				this.jButtoncotizacionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoNotaCredito")) {
				this.jButtonid_empleadoNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoUpdate")) {
				this.jButtonid_empleadoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoNotaCreditoBusqueda")) {
				this.jButtonid_empleadoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoUpdate")) {
				this.jButtonid_formatoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoBusqueda")) {
				this.jButtonid_formatoNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCredito")) {
				this.jButtonid_clienteNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoUpdate")) {
				this.jButtonid_clienteNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoBusqueda")) {
				this.jButtonid_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaNotaCredito")) {
				this.jButtonid_facturaNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoUpdate")) {
				this.jButtonid_facturaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaNotaCreditoBusqueda")) {
				this.jButtonid_facturaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionNotaCreditoBusqueda")) {
				this.jButtondireccionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoNotaCreditoBusqueda")) {
				this.jButtontelefonoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucNotaCreditoBusqueda")) {
				this.jButtonrucNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCredito")) {
				this.jButtonid_vendedorNotaCreditoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoUpdate")) {
				this.jButtonid_vendedorNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoBusqueda")) {
				this.jButtonid_vendedorNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoUpdate")) {
				this.jButtonid_responsableNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsableNotaCreditoBusqueda")) {
				this.jButtonid_responsableNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoUpdate")) {
				this.jButtonid_estado_nota_creditoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_creditoNotaCreditoBusqueda")) {
				this.jButtonid_estado_nota_creditoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionNotaCreditoBusqueda")) {
				this.jButtondescripcionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeNotaCreditoBusqueda")) {
				this.jButtondescuento_porcentajeNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoBusqueda")) {
				this.jButtontotal_ivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sumanNotaCreditoBusqueda")) {
				this.jButtonsumanNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorNotaCreditoBusqueda")) {
				this.jButtondescuento_valorNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_descuentoNotaCreditoBusqueda")) {
				this.jButtontotal_descuentoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoBusqueda")) {
				this.jButtonfleteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoBusqueda")) {
				this.jButtontotalNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoBusqueda")) {
				this.jButtonsub_totalNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otroNotaCreditoBusqueda")) {
				this.jButtonotroNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoBusqueda")) {
				this.jButtonivaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoBusqueda")) {
				this.jButtoniceNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otro_valorNotaCreditoBusqueda")) {
				this.jButtonotro_valorNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("retencionNotaCreditoBusqueda")) {
				this.jButtonretencionNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoBusqueda")) {
				this.jButtonfechaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_clienteNotaCreditoBusqueda")) {
				this.jButtones_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoNotaCredito")) {
				this.jButtonid_centro_costoNotaCreditoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoUpdate")) {
				this.jButtonid_centro_costoNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoNotaCreditoBusqueda")) {
				this.jButtonid_centro_costoNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCredito")) {
				this.jButtonid_tipo_cambioNotaCreditoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoUpdate")) {
				this.jButtonid_tipo_cambioNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioNotaCreditoBusqueda")) {
				this.jButtonid_tipo_cambioNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoUpdate")) {
				this.jButtonid_transporteNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transporteNotaCreditoBusqueda")) {
				this.jButtonid_transporteNotaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoUpdate")) {
				this.jButtonid_transportistaNotaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transportistaNotaCreditoBusqueda")) {
				this.jButtonid_transportistaNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_clienteNotaCreditoBusqueda")) {
				this.jButtonfecha_clienteNotaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_autorizacionNotaCreditoBusqueda")) {
				this.jButtonfecha_autorizacionNotaCreditoBusquedaActionPerformed(evt);
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessNotaCredito();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameNotaCredito")) {
				closingInternalFrameNotaCredito();
				
			} else if(sTipo.equals("jButtonCancelarNotaCredito")) {
				JInternalFrameBase jInternalFrameDetalleFormNotaCredito = (JInternalFrameBase)evt.getSource();
	            	
	            NotaCreditoBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCredito.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarNotaCreditoActionPerformed(null);
			}
			
			NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacredito,new Object(),this.notacreditoParameterGeneral,this.notacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormNotaCredito(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormNotaCredito(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormNotaCredito(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.notacredito)) {
			if(!esControlTabla) {
				if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);			
				}
				
				if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualNotaCredito(this.notacredito,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditoReturnGeneral=notacreditoLogic.procesarEventosNotaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditoLogic.getNotaCreditos(),this.notacredito,this.notacreditoParameterGeneral,this.isEsNuevoNotaCredito,classes);//this.notacreditoLogic.getNotaCredito()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanNotaCredito(this.notacreditoReturnGeneral,this.notacreditoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanNotaCredito(classes,this.notacreditoReturnGeneral,this.notacreditoBean,false);
					}
						
					if(this.notacreditoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyNotaCredito(this.notacreditoReturnGeneral.getNotaCredito());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioNotaCredito(this.notacreditoReturnGeneral.getNotaCredito());	
					}
						
					if(this.notacreditoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioNotaCredito(this.notacreditoReturnGeneral.getNotaCredito(),classes);//this.notacreditoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioNotaCredito(this.notacredito,classes);//this.notacreditoBean);									
				}
			
				if(NotaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualNotaCredito(this.notacredito,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCredito(this.notacredito);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.notacreditoAnterior!=null) {
						this.notacredito=this.notacreditoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditoReturnGeneral=notacreditoLogic.procesarEventosNotaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditoLogic.getNotaCreditos(),this.notacredito,this.notacreditoParameterGeneral,this.isEsNuevoNotaCredito,classes);//this.notacreditoLogic.getNotaCredito()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.notacreditoReturnGeneral.getNotaCredito(),notacreditoLogic.getNotaCreditos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.notacreditoReturnGeneral.getNotaCredito(),this.notacreditos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosNotaCredito.repaint();
				
				//((AbstractTableModel) this.jTableDatosNotaCredito.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosNotaCredito();
			}
		}
	}
	
	public void actualizarVisualTableDatosNotaCredito() throws Exception {
		
		NotaCreditoModel notacreditoModel=(NotaCreditoModel)this.jTableDatosNotaCredito.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditoModel.notacreditos=this.notacreditoLogic.getNotaCreditos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			notacreditoModel.notacreditos=this.notacreditos;
		}
		
		
		((NotaCreditoModel) this.jTableDatosNotaCredito.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaNotaCredito() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getnotacreditoAnterior(),this.notacreditoLogic.getNotaCreditos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getnotacreditoAnterior(),this.notacreditos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosNotaCredito();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioNotaCredito(NotaCredito notacredito,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCredito.class)) {
					this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.setDetaNotaCreditos(notacredito.getDetaNotaCreditos());
					this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaNotaCredito(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacredito,new Object(),generalEntityParameterGeneral,this.notacreditoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.notacreditoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=NotaCreditoConstantesFunciones.getClassesRelationshipsOfNotaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=NotaCreditoConstantesFunciones.getClassesRelationshipsFromStringsOfNotaCredito(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormNotaCredito(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				NotaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacredito,new Object(),generalEntityParameterGeneral,this.notacreditoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioNotaCredito(NotaCreditoBean notacreditoBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCredito.class)) {
					this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.setDetaNotaCreditos(notacredito.getDetaNotaCreditos());
					this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetaNotaCredito(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanNotaCredito(ArrayList<Classe> classes,NotaCreditoReturnGeneral notacreditoReturnGeneral,NotaCreditoBean notacreditoBean,Boolean conDefault) throws Exception {
		
			this.notacreditoBean.setDetaNotaCreditos(notacreditoReturnGeneral.getNotaCredito().getDetaNotaCreditos());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualNotaCredito(NotaCredito notacredito,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetaNotaCredito.class)) {
					notacredito.setDetaNotaCreditos(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoBeanSwingJInternalFrame.detanotacreditoLogic.getDetaNotaCreditos());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.notacredito)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormNotaCredito = new NotaCreditoDetalleFormJInternalFrame(jDesktopPane,this.notacreditoSessionBean.getConGuardarRelaciones(),this.notacreditoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.setVisible(false);
		this.jInternalFrameDetalleFormNotaCredito.setSelected(false);						
		
		this.jInternalFrameDetalleFormNotaCredito.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormNotaCredito.notacreditoLogic=this.notacreditoLogic;
		
		this.cargarCombosFrameForeignKeyNotaCredito("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCredito();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCredito();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyNotaCredito("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyNotaCredito();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormNotaCredito.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCredito"));
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonModificarNotaCredito.addActionListener(new ButtonActionListener(this,"ModificarNotaCredito"));

		
		this.jInternalFrameDetalleFormNotaCredito.jButtonModificarToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCredito"));
					
		this.jInternalFrameDetalleFormNotaCredito.jMenuItemModificarNotaCredito.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.addActionListener (new ButtonActionListener(this,"ActualizarNotaCredito"));
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCredito"));
						
		this.jInternalFrameDetalleFormNotaCredito.jMenuItemActualizarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.addActionListener (new ButtonActionListener(this,"EliminarNotaCredito"));
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCredito"));
								
		this.jInternalFrameDetalleFormNotaCredito.jMenuItemEliminarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.addActionListener (new ButtonActionListener(this,"CancelarNotaCredito"));
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCredito"));
					
		this.jInternalFrameDetalleFormNotaCredito.jMenuItemCancelarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCredito"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jMenuItemDetalleCerrarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCredito"));
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCredito"));
		
		
		
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCredito"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonidNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncodigoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumeroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_emisionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumero_diasNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_vencimientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncotizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoBusqueda"));
		//jButtonid_empleadoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCredito.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoBusqueda"));
		//jButtonid_clienteNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCredito.addActionListener(new ButtonActionListener(this,"id_clienteNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoBusqueda"));
		//jButtonid_facturaNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCredito.addActionListener(new ButtonActionListener(this,"id_facturaNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondireccionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontelefonoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonrucNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoBusqueda"));
		//jButtonid_vendedorNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCredito.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCredito"));
		//jButtonid_vendedorNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescripcionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_porcentajeNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsumanNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_sin_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_descuentoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfleteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsub_totalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfinanciamientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoniceNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotro_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonretencionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfechaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtones_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteNotaCreditoBusqueda"));
		//jButtonid_centro_costoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCredito.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCredito"));
		//jButtonid_centro_costoNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoBusqueda"));
		//jButtonid_tipo_cambioNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCredito.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_autorizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCredito"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameNotaCredito"));
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCredito"));
		}
		
		this.jTableDatosNotaCredito.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarNotaCredito"));
		
		this.jTableDatosNotaCredito.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarNotaCredito"));
		
		this.jButtonNuevoNotaCredito.addActionListener(new ButtonActionListener(this,"NuevoNotaCredito"));
		
		this.jButtonDuplicarNotaCredito.addActionListener(new ButtonActionListener(this,"DuplicarNotaCredito"));
		
		this.jButtonCopiarNotaCredito.addActionListener(new ButtonActionListener(this,"CopiarNotaCredito"));
		
		this.jButtonVerFormNotaCredito.addActionListener(new ButtonActionListener(this,"VerFormNotaCredito"));
		
		
		this.jButtonNuevoToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"NuevoToolBarNotaCredito"));
			
		this.jButtonDuplicarToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"DuplicarToolBarNotaCredito"));
			
		this.jMenuItemNuevoNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemNuevoNotaCredito"));
			
		this.jMenuItemDuplicarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarNotaCredito"));		
		
		
		this.jButtonNuevoRelacionesNotaCredito.addActionListener (new ButtonActionListener(this,"NuevoRelacionesNotaCredito"));
		
		
		this.jButtonNuevoRelacionesToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarNotaCredito"));
			
		this.jMenuItemNuevoRelacionesNotaCredito.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesNotaCredito"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonModificarNotaCredito.addActionListener(new ButtonActionListener(this,"ModificarNotaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonModificarToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCredito"));
			
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemModificarNotaCredito.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarNotaCredito.addActionListener (new ButtonActionListener(this,"ActualizarNotaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonActualizarToolBarNotaCredito.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCredito"));
				
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemActualizarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarNotaCredito.addActionListener (new ButtonActionListener(this,"EliminarNotaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonEliminarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCredito"));
						
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemEliminarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarNotaCredito.addActionListener (new ButtonActionListener(this,"CancelarNotaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonCancelarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCredito"));
			
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemCancelarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCredito"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarNotaCredito"));		
		
		
		this.jButtonCerrarNotaCredito.addActionListener (new ButtonActionListener(this,"CerrarNotaCredito"));
		
		
		this.jButtonCerrarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"CerrarToolBarNotaCredito"));
			
		this.jMenuItemCerrarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCerrarNotaCredito"));
			
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jMenuItemDetalleCerrarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosNotaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCredito"));
		}
		
		this.jButtonCopiarToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"CopiarToolBarNotaCredito"));
			
		this.jButtonVerFormToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"VerFormToolBarNotaCredito"));
		
		this.jMenuItemGuardarCambiosNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosNotaCredito"));
			
		this.jMenuItemCopiarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCopiarNotaCredito"));		
		
		this.jMenuItemVerFormNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemVerFormNotaCredito"));		
		
		
		this.jButtonGuardarCambiosTablaNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCredito"));
		
		
		this.jButtonGuardarCambiosTablaToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarNotaCredito"));
			
		this.jMenuItemGuardarCambiosTablaNotaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCredito"));		
		
		
		
		this.jButtonRecargarInformacionNotaCredito.addActionListener (new ButtonActionListener(this,"RecargarInformacionNotaCredito"));
					
		this.jButtonRecargarInformacionToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarNotaCredito"));
		
		this.jMenuItemRecargarInformacionNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionNotaCredito"));		
		
		
		
		this.jButtonAnterioresNotaCredito.addActionListener (new ButtonActionListener(this,"AnterioresNotaCredito"));
		
		
		this.jButtonAnterioresToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"AnterioresToolBarNotaCredito"));
		
		this.jMenuItemAnterioresNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresNotaCredito"));		
		
		
		this.jButtonSiguientesNotaCredito.addActionListener (new ButtonActionListener(this,"SiguientesNotaCredito"));
		
		
		this.jButtonSiguientesToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"SiguientesToolBarNotaCredito"));
			
		this.jMenuItemSiguientesNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesNotaCredito"));
			
		this.jMenuItemAbrirOrderByNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByNotaCredito"));
			
		this.jMenuItemMostrarOcultarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarNotaCredito"));
			
		this.jMenuItemDetalleAbrirOrderByNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByNotaCredito"));
			
		this.jMenuItemDetalleMostarOcultarNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarNotaCredito"));		
		
		
		this.jButtonNuevoGuardarCambiosNotaCredito.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosNotaCredito"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarNotaCredito"));
			
		this.jMenuItemNuevoGuardarCambiosNotaCredito.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosNotaCredito"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosNotaCredito.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosNotaCredito"));

		this.jCheckBoxSeleccionadosNotaCredito.addItemListener(new CheckBoxItemListener(this,"SeleccionadosNotaCredito"));
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCredito"));
		}
		
		
		this.jComboBoxTiposRelacionesNotaCredito.addActionListener (new ButtonActionListener(this,"TiposRelacionesNotaCredito"));
			
		this.jComboBoxTiposAccionesNotaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesNotaCredito"));
					
		this.jComboBoxTiposSeleccionarNotaCredito.addActionListener (new ButtonActionListener(this,"TiposSeleccionarNotaCredito"));
			
		this.jTextFieldValorCampoGeneralNotaCredito.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralNotaCredito"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonidNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncodigoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumeroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_emisionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumero_diasNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_vencimientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncotizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoBusqueda"));
		//jButtonid_empleadoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCredito.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoBusqueda"));
		//jButtonid_clienteNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCredito.addActionListener(new ButtonActionListener(this,"id_clienteNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoBusqueda"));
		//jButtonid_facturaNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCredito.addActionListener(new ButtonActionListener(this,"id_facturaNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondireccionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontelefonoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonrucNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoBusqueda"));
		//jButtonid_vendedorNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCredito.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCredito"));
		//jButtonid_vendedorNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescripcionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_porcentajeNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsumanNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_sin_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_descuentoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfleteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsub_totalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfinanciamientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoniceNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotro_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonretencionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfechaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtones_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteNotaCreditoBusqueda"));
		//jButtonid_centro_costoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCredito.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCredito"));
		//jButtonid_centro_costoNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoBusqueda"));
		//jButtonid_tipo_cambioNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCredito.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_autorizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoNotaCredito.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoNotaCredito"));

			this.jButtonBusquedaPorNumeroPreImpresoNotaCredito.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroPreImpresoNotaCredito"));

			this.jButtonFK_IdClienteNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCredito"));

			this.jButtonBuscarFK_IdClienteid_clienteNotaCredito.addActionListener(new ButtonActionListener(this,"id_clienteNotaCredito"));

			this.jButtonFK_IdFacturaNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFacturaNotaCredito"));

			this.jButtonBuscarFK_IdFacturaid_facturaNotaCredito.addActionListener(new ButtonActionListener(this,"id_facturaNotaCredito"));

			this.jButtonFK_IdTransportistaNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaNotaCredito"));

			this.jButtonFK_IdVendedorNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCredito"));

			this.jButtonBuscarFK_IdVendedorid_vendedorNotaCredito.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCredito"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoNotaCredito!=null) {
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCredito"));
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCredito"));
				this.jInternalFrameReporteDinamicoNotaCredito.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCredito"));
			}
			
			//this.jButtonCerrarReporteDinamicoNotaCredito.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCredito"));				
			//this.jButtonGenerarReporteDinamicoNotaCredito.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCredito"));
			//this.jButtonGenerarExcelReporteDinamicoNotaCredito.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCredito"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionNotaCredito!=null) {
				this.jInternalFrameImportacionNotaCredito.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCredito"));
				this.jInternalFrameImportacionNotaCredito.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCredito"));
				this.jInternalFrameImportacionNotaCredito.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCredito"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByNotaCredito.addActionListener (new ButtonActionListener(this,"AbrirOrderByNotaCredito"));
			
			this.jButtonAbrirOrderByToolBarNotaCredito.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarNotaCredito"));			
			
			if(this.jInternalFrameOrderByNotaCredito!=null) {
				this.jInternalFrameOrderByNotaCredito.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCredito"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormNotaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCredito.jTabbedPaneRelacionesNotaCredito.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCredito"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameNotaCredito();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormNotaCredito.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormNotaCredito = (JInternalFrameBase)event.getSource();
	            	
	            NotaCreditoBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCredito.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarNotaCreditoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosNotaCredito.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosNotaCreditoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosNotaCredito.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosNotaCredito.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoNotaCredito";
		inputMap = this.jButtonNuevoNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesNotaCredito";
		inputMap = this.jButtonNuevoRelacionesNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarNotaCredito";
		inputMap = this.jButtonModificarNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarNotaCredito";
		inputMap = this.jButtonActualizarNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarNotaCredito";
		inputMap = this.jButtonEliminarNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarNotaCredito";
		inputMap = this.jButtonCancelarNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarNotaCredito";
		inputMap = this.jButtonCerrarNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosNotaCredito";
		inputMap = this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormNotaCredito.jButtonGuardarCambiosNotaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosNotaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosNotaCredito.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosNotaCreditoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesNotaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesNotaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarNotaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarNotaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralNotaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralNotaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonidNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empresaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_sucursalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_ejercicioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_periodoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_anioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_mesNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_usuarioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncodigoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumeroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numeroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_emisionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonnumero_diasNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"numero_diasNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_vencimientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_monedaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoncotizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionNotaCreditoBusqueda"));
		//jButtonid_empleadoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCredito.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_formatoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_precioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoBusqueda"));
		//jButtonid_clienteNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCredito.addActionListener(new ButtonActionListener(this,"id_clienteNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoBusqueda"));
		//jButtonid_facturaNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCredito.addActionListener(new ButtonActionListener(this,"id_facturaNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondireccionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"direccionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontelefonoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"telefonoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonrucNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"rucNotaCreditoBusqueda"));
		//jButtonid_vendedorNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCredito.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCredito"));
		//jButtonid_vendedorNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_responsableNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_responsableNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_estado_nota_creditoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_creditoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescripcionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_porcentajeNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsumanNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sumanNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtondescuento_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_sin_ivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotal_descuentoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"total_descuentoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfleteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtontotalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonsub_totalNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotroNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otroNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonivaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfinanciamientoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtoniceNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonotro_valorNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"otro_valorNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonretencionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"retencionNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfechaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtones_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_clienteNotaCreditoBusqueda"));
		//jButtonid_centro_costoNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCredito.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCredito"));
		//jButtonid_centro_costoNotaCreditoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoNotaCreditoBusqueda"));
		//jButtonid_tipo_cambioNotaCredito.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioNotaCreditoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCredito.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCredito"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transporteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transporteNotaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonid_transportistaNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_transportistaNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_clienteNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_clienteNotaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCredito.jButtonfecha_autorizacionNotaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_autorizacionNotaCreditoBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoNotaCredito.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoNotaCredito"));

		this.jButtonBusquedaPorNumeroPreImpresoNotaCredito.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroPreImpresoNotaCredito"));

		this.jButtonFK_IdClienteNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCredito"));

		this.jButtonBuscarFK_IdClienteid_clienteNotaCredito.addActionListener(new ButtonActionListener(this,"id_clienteNotaCredito"));

		this.jButtonFK_IdFacturaNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFacturaNotaCredito"));

		this.jButtonBuscarFK_IdFacturaid_facturaNotaCredito.addActionListener(new ButtonActionListener(this,"id_facturaNotaCredito"));

		this.jButtonFK_IdTransportistaNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTransportistaNotaCredito"));

		this.jButtonFK_IdVendedorNotaCredito.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCredito"));

		this.jButtonBuscarFK_IdVendedorid_vendedorNotaCredito.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCredito"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionNotaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionNotaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarNotaCreditoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarNotaCredito.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosNotaCredito(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
					notacreditoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCredito notacreditoAux:notacreditos) {
					notacreditoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosNotaCreditoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCredito(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
						notacreditoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCredito notacreditoAux:notacreditos) {
						notacreditoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
					
						if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE)) {
							existe=true;
							notacreditoAux.setes_cliente(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCredito notacreditoAux:notacreditos) {
						
						if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE)) {
							existe=true;
							notacreditoAux.setes_cliente(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCredito(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCredito.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCredito.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosNotaCreditoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCredito(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosNotaCredito.getSelectedRows();
			
			NotaCredito notacreditoLocal=new NotaCredito();
			
			//this.seleccionarTodosNotaCredito(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditoLocal =(NotaCredito) this.notacreditoLogic.getNotaCreditos().toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					notacreditoLocal =(NotaCredito) this.notacreditos.toArray()[this.jTableDatosNotaCredito.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				notacreditoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
						notacreditoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCredito notacreditoAux:notacreditos) {
						notacreditoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaNotaCredito(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCredito.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCredito.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCredito,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualNotaCreditoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarNotaCreditoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralNotaCreditoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingNotaCredito(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralNotaCredito.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCredito notacreditoAux:this.notacreditoLogic.getNotaCreditos()) {
				
						if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							notacreditoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							notacreditoAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							notacreditoAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							notacreditoAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							notacreditoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							notacreditoAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							notacreditoAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							notacreditoAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_RUC)) {
							existe=true;
							notacreditoAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							notacreditoAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							notacreditoAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditoAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							notacreditoAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							notacreditoAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditoAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							notacreditoAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditoAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditoAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditoAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_OTRO)) {
							existe=true;
							notacreditoAux.setotro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditoAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditoAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditoAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_OTROVALOR)) {
							existe=true;
							notacreditoAux.setotro_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							notacreditoAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							notacreditoAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							notacreditoAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCredito notacreditoAux:notacreditos) {
					
						if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							notacreditoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
							existe=true;
							notacreditoAux.setnumero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							notacreditoAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS)) {
							existe=true;
							notacreditoAux.setnumero_dias(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							notacreditoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							notacreditoAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							notacreditoAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							notacreditoAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_RUC)) {
							existe=true;
							notacreditoAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							notacreditoAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							notacreditoAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditoAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_SUMAN)) {
							existe=true;
							notacreditoAux.setsuman(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							notacreditoAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditoAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO)) {
							existe=true;
							notacreditoAux.settotal_descuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditoAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditoAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditoAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_OTRO)) {
							existe=true;
							notacreditoAux.setotro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditoAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditoAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditoAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_OTROVALOR)) {
							existe=true;
							notacreditoAux.setotro_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_RETENCION)) {
							existe=true;
							notacreditoAux.setretencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE)) {
							existe=true;
							notacreditoAux.setfecha_cliente(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
							existe=true;
							notacreditoAux.setfecha_autorizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCredito(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesNotaCreditoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingNotaCredito(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioNotaCredito=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesNotaCredito.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteNotaCredito) {				
					conSplash=true;//false;										
					
					//this.startProcessNotaCredito(conSplash);
				
					this.generarReporteNotaCreditosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoNotaCreditosSeleccionados();
				//this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditosSeleccionados(false);
				//this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditosSeleccionados(true);
				//this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCredito();
				
				this.exportarNotaCreditosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionNotaCreditos();
				//this.importarNotaCreditos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCredito();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelNotaCreditosSeleccionados();
				//this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessNotaCredito();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoNotaCredito)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyNotaCredito(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
				}	
			} 			
			else if(NotaCreditoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteNotaCredito) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessNotaCredito(conSplash);
					
						//this.actualizarParametrosGeneralNotaCredito();
						
						this.generarReporteProcesoAccionNotaCreditosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(NotaCreditoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Nota CreditoS SELECCIONADOS?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessNotaCredito();
				
						this.actualizarParametrosGeneralNotaCredito();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.notacreditoReturnGeneral=notacreditoLogic.procesarAccionNotaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.notacreditoLogic.getNotaCreditos(),this.notacreditoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarNotaCreditoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralNotaCredito();
					
					NotaCreditoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarNotaCreditoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCredito.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCredito.jComboBoxTiposAccionesFormularioNotaCredito.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessNotaCredito(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesNotaCreditoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessNotaCredito();
			
			if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
			NotaCredito notacredito=new NotaCredito();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingNotaCredito(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesNotaCredito.getSelectedItem();
			
			
			
			
			notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
			//this.sTipoAccion;
			
			if(notacreditosSeleccionados.size()==1) {
				for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
					notacredito=notacreditoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Deta Nota Credito")) {
					jButtonDetaNotaCreditoActionPerformed(null,rowIndex,true,false,notacredito);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessNotaCredito();
			
      		//this.finishProcessNotaCredito(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarNotaCreditoReturnGeneral() throws Exception {
		if(this.notacreditoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.notacreditoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.notacreditoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.notacreditoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.notacreditoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.notacreditoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingNotaCredito(false);
		}
		
		if(this.notacreditoReturnGeneral.getConRetornoLista() || this.notacreditoReturnGeneral.getConRetornoObjeto()) {
			if(this.notacreditoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditoLogic.setNotaCreditos(this.notacreditoReturnGeneral.getNotaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.notacreditoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditoLogic.setNotaCredito(this.notacreditoReturnGeneral.getNotaCredito());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingNotaCredito(false);
		}
	}
	
	public void actualizarParametrosGeneralNotaCredito() throws Exception {
		
		
	}
	
	public ArrayList<NotaCredito> getNotaCreditosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioNotaCredito) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(NotaCredito notacreditoAux:notacreditoLogic.getNotaCreditos()) {
					if(notacreditoAux.getIsSelected()) {
						notacreditosSeleccionados.add(notacreditoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCredito notacreditoAux:this.notacreditos) {
					if(notacreditoAux.getIsSelected()) {
						notacreditosSeleccionados.add(notacreditoAux);				
					}
				}
			}
			
			if(notacreditosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						notacreditosSeleccionados.addAll(this.notacreditoLogic.getNotaCreditos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						notacreditosSeleccionados.addAll(this.notacreditos);				
					}
				}
			}
		} else {
			notacreditosSeleccionados.add(this.notacredito);
		}
		
		return notacreditosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteNotaCreditosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalNotaCreditosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoNotaCreditosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditosSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesNotaCreditosSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados);
		
	}	
	
	public void generarReporteNormalNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionNotaCreditosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		
		this.abrirInicializarFrameReporteDinamicoNotaCredito();
		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoNotaCredito();
		
		
		//this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados ,notacreditoImplementable,notacreditoImplementableHome);
	}
	
	public void mostrarImportacionNotaCreditos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionNotaCredito();
		
		this.abrirFrameImportacionNotaCredito();		
		
			
		//this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados ,notacreditoImplementable,notacreditoImplementableHome);
	}
	
	public void importarNotaCreditos() throws Exception {		
	
	}
	
	public void exportarNotaCreditosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelNotaCreditosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoNotaCreditosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlNotaCreditosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarNotaCredito(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarNotaCredito(notacreditoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//notacreditoAux.setsDetalleGeneralEntityReporte(notacreditoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarNotaCredito(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_NUMERODIAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_DIRECCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_TELEFONO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_SUMAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_OTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_OTROVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_RETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_ESCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarNotaCredito(NotaCredito notacredito,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=notacredito.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getnumero();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getnumero_dias().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getdireccion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettelefono();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getresponsable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getestadonotacredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getdescuento_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getsuman().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettotal_sin_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettotal_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getotro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfinanciamiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getotro_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getretencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getes_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettransporte_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.gettransportista_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfecha_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacredito.getfecha_autorizacion().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("NotaCreditos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelNotaCredito(row);				
				iRow++;
			}				
			
			for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelNotaCredito(notacreditoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlNotaCreditosSeleccionados() throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();		
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacredito.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("notacreditos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("notacredito");
			//elementRoot.appendChild(element);
		
			for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
				element = document.createElement("notacredito");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlNotaCredito(notacreditoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelNotaCredito(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DIRECCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TELEFONO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUMAN);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALSINIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTALDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FINANCIAMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_OTROVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_RETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelNotaCredito(NotaCredito notacredito,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getnumero());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getnumero_dias());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getdireccion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettelefono());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getresponsable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getestadonotacredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getdescuento_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getsuman());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettotal_sin_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettotal_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getotro());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfinanciamiento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getotro_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getretencion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getes_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettransporte_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.gettransportista_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfecha_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacredito.getfecha_autorizacion());				
	}
	
	public void setFilaDatosExportarXmlNotaCredito(NotaCredito notacredito,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(NotaCreditoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(notacredito.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(NotaCreditoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(notacredito.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(notacredito.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(notacredito.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(notacredito.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(notacredito.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(notacredito.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(notacredito.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementusuario_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(notacredito.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementcodigo = document.createElement(NotaCreditoConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(notacredito.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnumero = document.createElement(NotaCreditoConstantesFunciones.NUMEROPREIMPRESO);
		elementnumero.appendChild(document.createTextNode(notacredito.getnumero().trim()));
		element.appendChild(elementnumero);

		Element elementfecha_emision = document.createElement(NotaCreditoConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(notacredito.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementnumero_dias = document.createElement(NotaCreditoConstantesFunciones.NUMERODIAS);
		elementnumero_dias.appendChild(document.createTextNode(notacredito.getnumero_dias().toString().trim()));
		element.appendChild(elementnumero_dias);

		Element elementfecha_vencimiento = document.createElement(NotaCreditoConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(notacredito.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementmoneda_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(notacredito.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementcotizacion = document.createElement(NotaCreditoConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(notacredito.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementempleado_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(notacredito.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementformato_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(notacredito.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(notacredito.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementcliente_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(notacredito.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementfactura_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(notacredito.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementdireccion = document.createElement(NotaCreditoConstantesFunciones.DIRECCION);
		elementdireccion.appendChild(document.createTextNode(notacredito.getdireccion().trim()));
		element.appendChild(elementdireccion);

		Element elementtelefono = document.createElement(NotaCreditoConstantesFunciones.TELEFONO);
		elementtelefono.appendChild(document.createTextNode(notacredito.gettelefono().trim()));
		element.appendChild(elementtelefono);

		Element elementruc = document.createElement(NotaCreditoConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(notacredito.getruc().trim()));
		element.appendChild(elementruc);

		Element elementvendedor_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(notacredito.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementresponsable_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDRESPONSABLE);
		elementresponsable_descripcion.appendChild(document.createTextNode(notacredito.getresponsable_descripcion()));
		element.appendChild(elementresponsable_descripcion);

		Element elementestadonotacredito_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDESTADONOTACREDITO);
		elementestadonotacredito_descripcion.appendChild(document.createTextNode(notacredito.getestadonotacredito_descripcion()));
		element.appendChild(elementestadonotacredito_descripcion);

		Element elementdescripcion = document.createElement(NotaCreditoConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(notacredito.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementdescuento_porcentaje = document.createElement(NotaCreditoConstantesFunciones.DESCUENTOPORCENTAJE);
		elementdescuento_porcentaje.appendChild(document.createTextNode(notacredito.getdescuento_porcentaje().toString().trim()));
		element.appendChild(elementdescuento_porcentaje);

		Element elementtotal_iva = document.createElement(NotaCreditoConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(notacredito.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementsuman = document.createElement(NotaCreditoConstantesFunciones.SUMAN);
		elementsuman.appendChild(document.createTextNode(notacredito.getsuman().toString().trim()));
		element.appendChild(elementsuman);

		Element elementdescuento_valor = document.createElement(NotaCreditoConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(notacredito.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementtotal_sin_iva = document.createElement(NotaCreditoConstantesFunciones.TOTALSINIVA);
		elementtotal_sin_iva.appendChild(document.createTextNode(notacredito.gettotal_sin_iva().toString().trim()));
		element.appendChild(elementtotal_sin_iva);

		Element elementtotal_descuento = document.createElement(NotaCreditoConstantesFunciones.TOTALDESCUENTO);
		elementtotal_descuento.appendChild(document.createTextNode(notacredito.gettotal_descuento().toString().trim()));
		element.appendChild(elementtotal_descuento);

		Element elementflete = document.createElement(NotaCreditoConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(notacredito.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementtotal = document.createElement(NotaCreditoConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(notacredito.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementsub_total = document.createElement(NotaCreditoConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(notacredito.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementotro = document.createElement(NotaCreditoConstantesFunciones.OTRO);
		elementotro.appendChild(document.createTextNode(notacredito.getotro().toString().trim()));
		element.appendChild(elementotro);

		Element elementiva = document.createElement(NotaCreditoConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(notacredito.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementfinanciamiento = document.createElement(NotaCreditoConstantesFunciones.FINANCIAMIENTO);
		elementfinanciamiento.appendChild(document.createTextNode(notacredito.getfinanciamiento().toString().trim()));
		element.appendChild(elementfinanciamiento);

		Element elementice = document.createElement(NotaCreditoConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(notacredito.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementotro_valor = document.createElement(NotaCreditoConstantesFunciones.OTROVALOR);
		elementotro_valor.appendChild(document.createTextNode(notacredito.getotro_valor().toString().trim()));
		element.appendChild(elementotro_valor);

		Element elementretencion = document.createElement(NotaCreditoConstantesFunciones.RETENCION);
		elementretencion.appendChild(document.createTextNode(notacredito.getretencion().toString().trim()));
		element.appendChild(elementretencion);

		Element elementfecha = document.createElement(NotaCreditoConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(notacredito.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementes_cliente = document.createElement(NotaCreditoConstantesFunciones.ESCLIENTE);
		elementes_cliente.appendChild(document.createTextNode(notacredito.getes_cliente().toString().trim()));
		element.appendChild(elementes_cliente);

		Element elementcentrocosto_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(notacredito.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementtipocambio_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(notacredito.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementtransporte_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDTRANSPORTE);
		elementtransporte_descripcion.appendChild(document.createTextNode(notacredito.gettransporte_descripcion()));
		element.appendChild(elementtransporte_descripcion);

		Element elementtransportista_descripcion = document.createElement(NotaCreditoConstantesFunciones.IDTRANSPORTISTA);
		elementtransportista_descripcion.appendChild(document.createTextNode(notacredito.gettransportista_descripcion()));
		element.appendChild(elementtransportista_descripcion);

		Element elementfecha_cliente = document.createElement(NotaCreditoConstantesFunciones.FECHACLIENTE);
		elementfecha_cliente.appendChild(document.createTextNode(notacredito.getfecha_cliente().toString().trim()));
		element.appendChild(elementfecha_cliente);

		Element elementfecha_autorizacion = document.createElement(NotaCreditoConstantesFunciones.FECHAAUTORIZACION);
		elementfecha_autorizacion.appendChild(document.createTextNode(notacredito.getfecha_autorizacion().toString().trim()));
		element.appendChild(elementfecha_autorizacion);
	}
	
	public void generarReporteGroupGenericoNotaCreditosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<NotaCredito> notacreditosSeleccionados=new ArrayList<NotaCredito>();
		
		notacreditosSeleccionados=this.getNotaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoNotaCredito(notacreditosSeleccionados);
		
		this.generarReporteNotaCreditos("Todos",notacreditosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoNotaCredito(ArrayList<NotaCredito> notacreditosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(NotaCredito notacreditoAux:notacreditosSeleccionados) {
				notacreditoAux.setsDetalleGeneralEntityReporte(notacreditoAux.toString());
			
				if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMEROPREIMPRESO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getnumero());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditoAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_NUMERODIAS)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getnumero_dias().toString());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditoAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DIRECCION)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getdireccion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_TELEFONO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.gettelefono());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_RUC)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDRESPONSABLE)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getresponsable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDESTADONOTACREDITO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getestadonotacredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditoAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_ESCLIENTE)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(notacreditoAux.getes_cliente()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTE)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.gettransporte_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_IDTRANSPORTISTA)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(notacreditoAux.gettransportista_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHACLIENTE)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditoAux.getfecha_cliente()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoConstantesFunciones.LABEL_FECHAAUTORIZACION)) {
					existe=true;
					notacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditoAux.getfecha_autorizacion()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesNotaCredito(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoNotaCredito=true;
				this.isVisibilidadCeldaNuevoRelacionesNotaCredito=true;
				this.isVisibilidadCeldaGuardarCambiosNotaCredito=true;
			}
			
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=true;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=true;
			this.isVisibilidadCeldaEliminarNotaCredito=true;
			this.isVisibilidadCeldaCancelarNotaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=true;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoNotaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=true;
			this.isVisibilidadCeldaModificarNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
			this.isVisibilidadCeldaModificarNotaCredito=true;
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
			this.isVisibilidadCeldaCancelarNotaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCredito=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(NotaCreditoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoNotaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=true;
		} else {
			this.actualizarEstadoPanelsNotaCredito(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarNotaCredito=false;
			//this.isVisibilidadCeldaVerFormNotaCredito=false;
			this.isVisibilidadCeldaDuplicarNotaCredito=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!notacreditoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
		} else {
			this.isVisibilidadCeldaNuevoNotaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(notacreditoSessionBean.getEsGuardarRelacionado()) {
			if(!notacreditoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;												
			}
			
			this.jButtonCerrarNotaCredito.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCredito=false;
		}
		
		if(!this.permiteMantenimiento(this.notacredito)) {
			this.isVisibilidadCeldaActualizarNotaCredito=false;
			this.isVisibilidadCeldaEliminarNotaCredito=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCredito() {
		this.isVisibilidadCeldaNuevoNotaCredito=false;
		this.isVisibilidadCeldaGuardarCambiosNotaCredito=false;
	}
	
	public void actualizarEstadoPanelsNotaCredito(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionNotaCredito!=null) {
				this.jScrollPanelDatosEdicionNotaCredito.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCredito!=null) {
				this.jScrollPanelDatosNotaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCredito!=null) {
				this.jPanelPaginacionNotaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasNotaCredito!=null) {
					this.jTabbedPaneBusquedasNotaCredito.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.notacreditoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCredito!=null) {
				this.jTabbedPaneBusquedasNotaCredito.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesNotaCredito!=null) {
				this.jPanelParametrosReportesNotaCredito.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaPorCodigo=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadBusquedaPorCodigo=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadBusquedaPorCodigo=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadBusquedaPorCodigo=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadBusquedaPorCodigo=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaMesNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadBusquedaPorCodigo=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadBusquedaPorCodigo=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoPrecioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoPrecioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadBusquedaPorCodigo=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadBusquedaPorCodigo=isParaFacturaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaFacturaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadBusquedaPorCodigo=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaVendedorNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaResponsable(Boolean isParaResponsable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaResponsableNegation=!isParaResponsable;

			this.isVisibilidadBusquedaPorCodigo=isParaResponsableNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaResponsableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaResponsableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoNotaCredito(Boolean isParaEstadoNotaCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoNotaCreditoNegation=!isParaEstadoNotaCredito;

			this.isVisibilidadBusquedaPorCodigo=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoNotaCreditoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadBusquedaPorCodigo=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoCambioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTipoCambioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransporte(Boolean isParaTransporte){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransporteNegation=!isParaTransporte;

			this.isVisibilidadBusquedaPorCodigo=isParaTransporteNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTransporteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaTransporteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransportista(Boolean isParaTransportista){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransportistaNegation=!isParaTransportista;

			this.isVisibilidadBusquedaPorCodigo=isParaTransportistaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorCodigoNotaCredito);}

			this.isVisibilidadBusquedaPorNumeroPreImpreso=isParaTransportistaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroPreImpreso) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelBusquedaPorNumeroPreImpresoNotaCredito);}

			this.isVisibilidadFK_IdCliente=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdClienteNotaCredito);}

			this.isVisibilidadFK_IdFactura=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdFacturaNotaCredito);}

			this.isVisibilidadFK_IdTransportista=isParaTransportista;
			if(!this.isVisibilidadFK_IdTransportista) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdTransportistaNotaCredito);}

			this.isVisibilidadFK_IdVendedor=isParaTransportistaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCredito.remove(jPanelFK_IdVendedorNotaCredito);}
		}
		
	}
	
	

	public String registrarSesionNotaCreditoParaDetaNotaCreditos() throws Exception {
		Boolean isPaginaPopupDetaNotaCredito=false;

		try {

			if(this.notacreditoSessionBean==null) {
				this.notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean==null) {
				this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean=new DetaNotaCreditoSessionBean();
			}

			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetaNotaCreditoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetaNotaCredito=this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetaNotaCredito(true);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetaNotaCredito(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);
			this.jInternalFrameDetalleFormNotaCredito.detanotacreditoSessionBean.setNoMantenimiento(true);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionNotaCreditoParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//empleadoSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//clienteSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//facturaSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoParaBusquedaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			vendedorSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			vendedorSessionBean.setisPermiteRecargarInformacion(false);
			vendedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupVendedor=vendedorSessionBean.getisPaginaPopup();
			vendedorSessionBean.setisPaginaPopup(false);
			vendedorSessionBean.setEstaModoBusqueda(true);
			vendedorSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_vendedor(TO_REPLACE);");
			vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//vendedorSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//vendedorSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//centrocostoSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(notacreditoSessionBean==null) {
				notacreditoSessionBean=new NotaCreditoSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(notacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditoFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(NotaCreditoConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionNotaCredito(true);
			//tipocambioSessionBean.setlidNotaCreditoActual(this.idNotaCreditoActual);

			notacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCredito(true);
			notacreditoSessionBean.setlIdNotaCreditoActualForeignKey(this.idNotaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//NotaCreditoSessionBean notacreditoSessionBean=new NotaCreditoSessionBean();
		
		if(this.notacreditoSessionBean==null) {
			this.notacreditoSessionBean=new NotaCreditoSessionBean();
		}
		
		this.notacreditoSessionBean.setsUltimaBusquedaNotaCredito(this.getsAccionBusqueda());
		this.notacreditoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.notacreditoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			notacreditoSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroPreImpreso")) {
			notacreditoSessionBean.setnumero(this.getnumeroBusquedaPorNumeroPreImpreso());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			notacreditoSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			notacreditoSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			notacreditoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			notacreditoSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			notacreditoSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			notacreditoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
			notacreditoSessionBean.setid_transportista(this.getid_transportistaFK_IdTransportista());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			notacreditoSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			notacreditoSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//NotaCreditoSessionBean notacreditoSessionBean=new NotaCreditoSessionBean();
		
		if(this.notacreditoSessionBean==null) {
			this.notacreditoSessionBean=new NotaCreditoSessionBean();
		}
		
		if(this.notacreditoSessionBean.getsUltimaBusquedaNotaCredito()!=null&&!this.notacreditoSessionBean.getsUltimaBusquedaNotaCredito().equals("")) {
			this.setsAccionBusqueda(notacreditoSessionBean.getsUltimaBusquedaNotaCredito());
			this.setiNumeroPaginacion(notacreditoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(notacreditoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(notacreditoSessionBean.getcodigo());
				notacreditoSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroPreImpreso")) {
				this.setnumeroBusquedaPorNumeroPreImpreso(notacreditoSessionBean.getnumero());
				notacreditoSessionBean.setnumero("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(notacreditoSessionBean.getid_cliente());
				notacreditoSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(notacreditoSessionBean.getid_ejercicio());
				notacreditoSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(notacreditoSessionBean.getid_empresa());
				notacreditoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(notacreditoSessionBean.getid_factura());
				notacreditoSessionBean.setid_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(notacreditoSessionBean.getid_periodo());
				notacreditoSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(notacreditoSessionBean.getid_sucursal());
				notacreditoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransportista")) {
				this.setid_transportistaFK_IdTransportista(notacreditoSessionBean.getid_transportista());
				notacreditoSessionBean.setid_transportista(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(notacreditoSessionBean.getid_usuario());
				notacreditoSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(notacreditoSessionBean.getid_vendedor());
				notacreditoSessionBean.setid_vendedor(null);
			}
		}
		
		this.notacreditoSessionBean.setsUltimaBusquedaNotaCredito("");
		this.notacreditoSessionBean.setiNumeroPaginacion(NotaCreditoConstantesFunciones.INUMEROPAGINACION);
		this.notacreditoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaNotaCredito(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioNotaCredito() {
		this.updateBorderResaltarBusquedasFormularioNotaCredito();
		this.updateVisibilidadBusquedasFormularioNotaCredito();
		this.updateHabilitarBusquedasFormularioNotaCredito();
	}
	
	public void updateBorderResaltarBusquedasFormularioNotaCredito() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasNotaCredito.getComponents().length>0) {
	

		if(this.notacreditoConstantesFunciones.resaltarBusquedaPorCodigoNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorCodigoNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarBusquedaPorCodigoNotaCredito);
			}
		}

		if(this.notacreditoConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoNotaCredito);
			}
		}

		if(this.notacreditoConstantesFunciones.resaltarFK_IdClienteNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdClienteNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdClienteNotaCredito);
			}
		}

		if(this.notacreditoConstantesFunciones.resaltarFK_IdFacturaNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdFacturaNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdFacturaNotaCredito);
			}
		}

		if(this.notacreditoConstantesFunciones.resaltarFK_IdTransportistaNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdTransportistaNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdTransportistaNotaCredito);
			}
		}

		if(this.notacreditoConstantesFunciones.resaltarFK_IdVendedorNotaCredito!=null) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdVendedorNotaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdVendedorNotaCredito);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioNotaCredito() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasNotaCredito.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorCodigoNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarBusquedaPorCodigoNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarBusquedaPorCodigoNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarBusquedaPorNumeroPreImpresoNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarBusquedaPorNumeroPreImpresoNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdClienteNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarFK_IdClienteNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarFK_IdClienteNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdFacturaNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarFK_IdFacturaNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarFK_IdFacturaNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdTransportistaNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarFK_IdTransportistaNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarFK_IdTransportistaNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdVendedorNotaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditoConstantesFunciones.mostrarFK_IdVendedorNotaCredito);
			if(!this.notacreditoConstantesFunciones.mostrarFK_IdVendedorNotaCredito && index>-1) {
				this.jTabbedPaneBusquedasNotaCredito.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioNotaCredito() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasNotaCredito.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorCodigoNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarBusquedaPorCodigoNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarBusquedaPorCodigoNotaCredito);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarBusquedaPorNumeroPreImpresoNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarBusquedaPorNumeroPreImpresoNotaCredito);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdClienteNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarFK_IdClienteNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarFK_IdClienteNotaCredito);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdFacturaNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarFK_IdFacturaNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarFK_IdFacturaNotaCredito);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdTransportistaNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarFK_IdTransportistaNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarFK_IdTransportistaNotaCredito);
			}

			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdVendedorNotaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditoConstantesFunciones.activarFK_IdVendedorNotaCredito);
				this.jTabbedPaneBusquedasNotaCredito.setEnabledAt(index,this.notacreditoConstantesFunciones.activarFK_IdVendedorNotaCredito);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaNotaCredito(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorCodigoNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarBusquedaPorCodigoNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarBusquedaPorCodigoNotaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNumeroPreImpreso")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelBusquedaPorNumeroPreImpresoNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarBusquedaPorNumeroPreImpresoNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarBusquedaPorNumeroPreImpresoNotaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdClienteNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarFK_IdClienteNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdClienteNotaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdFacturaNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarFK_IdFacturaNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdFacturaNotaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransportista")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdTransportistaNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarFK_IdTransportistaNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdTransportistaNotaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasNotaCredito.indexOfComponent(this.jPanelFK_IdVendedorNotaCredito);

			this.jTabbedPaneBusquedasNotaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCredito.getComponent(index);

			this.notacreditoConstantesFunciones.setResaltarFK_IdVendedorNotaCredito(resaltar);

			jPanel.setBorder(this.notacreditoConstantesFunciones.resaltarFK_IdVendedorNotaCredito);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarNotaCredito.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioNotaCredito() throws Exception {

		if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioNotaCredito();
		this.updateVisibilidadResaltarControlesFormularioNotaCredito();
		this.updateHabilitarResaltarControlesFormularioNotaCredito();
		
	}
	
	public void updateBorderResaltarControlesFormularioNotaCredito() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.notacreditoConstantesFunciones.resaltaridNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltaridNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_empresaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_empresaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_sucursalNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_sucursalNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_ejercicioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_ejercicioNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_periodoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_periodoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_anioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_anioNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_mesNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_mesNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_usuarioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_usuarioNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarcodigoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarcodigoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarnumeroNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarnumeroNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfecha_emisionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfecha_emisionNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarnumero_diasNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarnumero_diasNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfecha_vencimientoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfecha_vencimientoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_monedaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_monedaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarcotizacionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarcotizacionNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_empleadoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_empleadoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_formatoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_formatoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_tipo_precioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_tipo_precioNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_clienteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_clienteNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_facturaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_facturaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltardireccionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltardireccionNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltartelefonoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltartelefonoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarrucNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarrucNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_vendedorNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_vendedorNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_responsableNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_responsableNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_estado_nota_creditoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_estado_nota_creditoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltardescripcionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltardescripcionNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltardescuento_porcentajeNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltardescuento_porcentajeNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltartotal_ivaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltartotal_ivaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarsumanNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarsumanNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltardescuento_valorNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltardescuento_valorNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltartotal_sin_ivaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltartotal_sin_ivaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltartotal_descuentoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltartotal_descuentoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfleteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfleteNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltartotalNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltartotalNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarsub_totalNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarsub_totalNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarotroNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarotroNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarivaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarivaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfinanciamientoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfinanciamientoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltariceNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltariceNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarotro_valorNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarotro_valorNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarretencionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jTextFieldretencionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarretencionNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfechaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jDateChooserfechaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfechaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltares_clienteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jCheckBoxes_clienteNotaCredito.setBorderPainted(true);this.jInternalFrameDetalleFormNotaCredito.jCheckBoxes_clienteNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltares_clienteNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_centro_costoNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_centro_costoNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_tipo_cambioNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_tipo_cambioNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_transporteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_transporteNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarid_transportistaNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarid_transportistaNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfecha_clienteNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_clienteNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfecha_clienteNotaCredito);}
		if(this.notacreditoConstantesFunciones.resaltarfecha_autorizacionNotaCredito!=null && this.jInternalFrameDetalleFormNotaCredito!=null) {this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_autorizacionNotaCredito.setBorder(this.notacreditoConstantesFunciones.resaltarfecha_autorizacionNotaCredito);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioNotaCredito() throws Exception {		
		if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
	
		//this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostraridNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelidNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostraridNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_empresaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_empresaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_empresaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_sucursalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_sucursalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_sucursalNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_ejercicioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_ejercicioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_ejercicioNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_periodoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_periodoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_periodoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_anioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_anioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_anioNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_mesNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_mesNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_mesNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_usuarioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_usuarioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_usuarioNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarcodigoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelcodigoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarcodigoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarnumeroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelnumeroNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarnumeroNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_emisionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfecha_emisionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_emisionNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarnumero_diasNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelnumero_diasNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarnumero_diasNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_vencimientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfecha_vencimientoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_vencimientoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_monedaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_monedaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_monedaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarcotizacionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelcotizacionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarcotizacionNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_empleadoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_empleadoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_empleadoNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_empleadoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_formatoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_formatoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_formatoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_tipo_precioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_tipo_precioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_tipo_precioNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_clienteNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_clienteNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_facturaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_facturaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_facturaNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_facturaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardireccionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneldireccionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardireccionNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartelefonoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneltelefonoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartelefonoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarrucNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelrucNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarrucNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_vendedorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_vendedorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_vendedorNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_vendedorNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_responsableNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_responsableNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_responsableNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_estado_nota_creditoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_estado_nota_creditoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_estado_nota_creditoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescripcionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneldescripcionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescripcionNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescuento_porcentajeNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneldescuento_porcentajeNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescuento_porcentajeNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneltotal_ivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_ivaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarsumanNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelsumanNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarsumanNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescuento_valorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneldescuento_valorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrardescuento_valorNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_sin_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneltotal_sin_ivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_sin_ivaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_descuentoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneltotal_descuentoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotal_descuentoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfleteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfleteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfleteNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneltotalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrartotalNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarsub_totalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelsub_totalNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarsub_totalNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarotroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelotroNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarotroNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelivaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarivaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfinanciamientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfinanciamientoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfinanciamientoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrariceNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneliceNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrariceNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarotro_valorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelotro_valorNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarotro_valorNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jTextFieldretencionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarretencionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelretencionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarretencionNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jDateChooserfechaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfechaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfechaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfechaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jCheckBoxes_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrares_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPaneles_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrares_clienteNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_centro_costoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_centro_costoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_centro_costoNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_centro_costoNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_tipo_cambioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_tipo_cambioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_tipo_cambioNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_tipo_cambioNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_transporteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_transporteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_transporteNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_transportistaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelid_transportistaNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarid_transportistaNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfecha_clienteNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_clienteNotaCredito);
		//this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_autorizacionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_autorizacionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jPanelfecha_autorizacionNotaCredito.setVisible(this.notacreditoConstantesFunciones.mostrarfecha_autorizacionNotaCredito);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioNotaCredito() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCredito!=null) {
	
		this.jInternalFrameDetalleFormNotaCredito.jLabelidNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activaridNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empresaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_empresaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_sucursalNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_sucursalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_ejercicioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_ejercicioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_periodoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_periodoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_anioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_anioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_mesNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_mesNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_usuarioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_usuarioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldcodigoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarcodigoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumeroNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarnumeroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_emisionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfecha_emisionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldnumero_diasNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarnumero_diasNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_vencimientoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfecha_vencimientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_monedaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_monedaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldcotizacionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarcotizacionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_empleadoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_empleadoNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_empleadoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_empleadoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_formatoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_formatoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_precioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_tipo_precioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_clienteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_clienteNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_clienteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_facturaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_facturaNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_facturaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_facturaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextAreadireccionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activardireccionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtelefonoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activartelefonoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldrucNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarrucNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_vendedorNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_vendedorNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_vendedorNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_vendedorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_responsableNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_responsableNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_estado_nota_creditoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_estado_nota_creditoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextAreadescripcionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activardescripcionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_porcentajeNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activardescuento_porcentajeNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_ivaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activartotal_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldsumanNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarsumanNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFielddescuento_valorNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activardescuento_valorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_sin_ivaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activartotal_sin_ivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotal_descuentoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activartotal_descuentoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldfleteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfleteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldtotalNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activartotalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldsub_totalNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarsub_totalNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldotroNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarotroNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldivaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarivaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldfinanciamientoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfinanciamientoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldiceNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activariceNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldotro_valorNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarotro_valorNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jTextFieldretencionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarretencionNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfechaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfechaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jCheckBoxes_clienteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activares_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_centro_costoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_centro_costoNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_centro_costoNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_centro_costoNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_tipo_cambioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_tipo_cambioNotaCredito);
			this.jInternalFrameDetalleFormNotaCredito.jButtonid_tipo_cambioNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_tipo_cambioNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transporteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_transporteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jComboBoxid_transportistaNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarid_transportistaNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_clienteNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfecha_clienteNotaCredito);
		this.jInternalFrameDetalleFormNotaCredito.jDateChooserfecha_autorizacionNotaCredito.setEnabled(this.notacreditoConstantesFunciones.activarfecha_autorizacionNotaCredito);
		}
	}
	
		
}