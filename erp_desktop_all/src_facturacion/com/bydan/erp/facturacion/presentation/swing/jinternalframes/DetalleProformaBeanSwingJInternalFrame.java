/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.facturacion.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.facturacion.util.DetalleProformaConstantesFunciones;
import com.bydan.erp.facturacion.util.DetalleProformaParameterReturnGeneral;
//import com.bydan.erp.facturacion.util.DetalleProformaParameterGeneral;
//import com.bydan.erp.facturacion.presentation.report.source.DetalleProformaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.facturacion.resources.reportes.AuxiliarReportes;


import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.facturacion.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.facturacion.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleProformaBeanSwingJInternalFrame extends DetalleProformaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleProformaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleProforma> detalleproformaValidator = new ClassValidator<DetalleProforma>(DetalleProforma.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleProforma detalleproforma;	
	public DetalleProforma detalleproformaAux;
	public DetalleProforma detalleproformaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleProforma detalleproformaTotales;
	public Long idDetalleProformaActual;
	public Long iIdNuevoDetalleProforma=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboProforma="";

	public List<Proforma> proformasForeignKey;

	public List<Proforma> getproformasForeignKey() {
		return proformasForeignKey;
	}

	public void setproformasForeignKey(List<Proforma> proformasForeignKey) {
		this.proformasForeignKey = proformasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Proforma proformaForeignKey;

	public Proforma getproformaForeignKey() {
		return proformaForeignKey;
	}

	public void setproformaForeignKey(Proforma proformaForeignKey) {
		this.proformaForeignKey = proformaForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboEmpaque="";

	public List<Empaque> empaquesForeignKey;

	public List<Empaque> getempaquesForeignKey() {
		return empaquesForeignKey;
	}

	public void setempaquesForeignKey(List<Empaque> empaquesForeignKey) {
		this.empaquesForeignKey = empaquesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empaque empaqueForeignKey;

	public Empaque getempaqueForeignKey() {
		return empaqueForeignKey;
	}

	public void setempaqueForeignKey(Empaque empaqueForeignKey) {
		this.empaqueForeignKey = empaqueForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboEstadoDetalleProforma="";

	public List<EstadoDetalleProforma> estadodetalleproformasForeignKey;

	public List<EstadoDetalleProforma> getestadodetalleproformasForeignKey() {
		return estadodetalleproformasForeignKey;
	}

	public void setestadodetalleproformasForeignKey(List<EstadoDetalleProforma> estadodetalleproformasForeignKey) {
		this.estadodetalleproformasForeignKey = estadodetalleproformasForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoDetalleProforma estadodetalleproformaForeignKey;

	public EstadoDetalleProforma getestadodetalleproformaForeignKey() {
		return estadodetalleproformaForeignKey;
	}

	public void setestadodetalleproformaForeignKey(EstadoDetalleProforma estadodetalleproformaForeignKey) {
		this.estadodetalleproformaForeignKey = estadodetalleproformaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleProforma;
	public Boolean isPermisoNuevoDetalleProforma;
	public Boolean isPermisoActualizarDetalleProforma;
	public Boolean isPermisoActualizarOriginalDetalleProforma;
	public Boolean isPermisoEliminarDetalleProforma;
	public Boolean isPermisoGuardarCambiosDetalleProforma;
	public Boolean isPermisoConsultaDetalleProforma;
	public Boolean isPermisoBusquedaDetalleProforma;
	public Boolean isPermisoReporteDetalleProforma;
	public Boolean isPermisoPaginacionMedioDetalleProforma;
	public Boolean isPermisoPaginacionAltoDetalleProforma;
	public Boolean isPermisoPaginacionTodoDetalleProforma;
	public Boolean isPermisoCopiarDetalleProforma;
	public Boolean isPermisoVerFormDetalleProforma;
	public Boolean isPermisoDuplicarDetalleProforma;
	public Boolean isPermisoOrdenDetalleProforma;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleProformaParameterReturnGeneral detalleproformaReturnGeneral;
	public DetalleProformaParameterReturnGeneral detalleproformaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleProforma=false;
	public Boolean esParaAccionDesdeFormularioDetalleProforma=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleProformaSessionBeanAdditional detalleproformaSessionBeanAdditional=null;
	
	public DetalleProformaSessionBeanAdditional getDetalleProformaSessionBeanAdditional() {
		return this.detalleproformaSessionBeanAdditional;
	}
	
	public void setDetalleProformaSessionBeanAdditional(DetalleProformaSessionBeanAdditional detalleproformaSessionBeanAdditional) {
		try {
			this.detalleproformaSessionBeanAdditional=detalleproformaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleProformaBeanSwingJInternalFrameAdditional detalleproformaBeanSwingJInternalFrameAdditional=null;
	//public class DetalleProformaBeanSwingJInternalFrame
	
	public DetalleProformaBeanSwingJInternalFrameAdditional getDetalleProformaBeanSwingJInternalFrameAdditional() {
		return this.detalleproformaBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleProformaBeanSwingJInternalFrameAdditional(DetalleProformaBeanSwingJInternalFrameAdditional detalleproformaBeanSwingJInternalFrameAdditional) {
		try {
			this.detalleproformaBeanSwingJInternalFrameAdditional=detalleproformaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleProformaLogic detalleproformaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleProforma detalleproformaBean;
	public DetalleProformaConstantesFunciones detalleproformaConstantesFunciones;
	//public DetalleProformaParameterReturnGeneral detalleproformaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public ProformaLogic proformaLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public EmpaqueLogic empaqueLogic;
	public CentroCostoLogic centrocostoLogic;
	public EstadoDetalleProformaLogic estadodetalleproformaLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleProforma> detalleproformas;	
	//public List<DetalleProforma> detalleproformasEliminados;
	//public List<DetalleProforma> detalleproformasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleProforma=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleProforma=true;
	public Boolean isVisibilidadCeldaCopiarDetalleProforma=true;
	public Boolean isVisibilidadCeldaVerFormDetalleProforma=true;
	public Boolean isVisibilidadCeldaOrdenDetalleProforma=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
	public Boolean isVisibilidadCeldaModificarDetalleProforma=false;
	public Boolean isVisibilidadCeldaActualizarDetalleProforma=false;
	public Boolean isVisibilidadCeldaEliminarDetalleProforma=false;
	public Boolean isVisibilidadCeldaCancelarDetalleProforma=false;
	public Boolean isVisibilidadCeldaGuardarDetalleProforma=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleProforma=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpaque=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoDetalleProforma=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdProforma=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleProforma() {
		return this.iIdNuevoDetalleProforma;
	}

	public void setiIdNuevoDetalleProforma(Long iIdNuevoDetalleProforma) {
		this.iIdNuevoDetalleProforma = iIdNuevoDetalleProforma;
	}
	
	public Long getidDetalleProformaActual() {
		return this.idDetalleProformaActual;
	}

	public void setidDetalleProformaActual(Long idDetalleProformaActual) {
		this.idDetalleProformaActual = idDetalleProformaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleProforma getdetalleproforma() {
		return this.detalleproforma;
	}

	public void setdetalleproforma(DetalleProforma detalleproforma) {
		this.detalleproforma = detalleproforma;
	}
	
	public DetalleProforma getdetalleproformaAux() {
		return this.detalleproformaAux;
	}

	public void setdetalleproformaAux(DetalleProforma detalleproformaAux) {
		this.detalleproformaAux = detalleproformaAux;
	}				
	
	public DetalleProforma getdetalleproformaAnterior() {
		return this.detalleproformaAnterior;
	}

	public void setdetalleproformaAnterior(DetalleProforma detalleproformaAnterior) {
		this.detalleproformaAnterior = detalleproformaAnterior;
	}	
	
	public DetalleProforma getdetalleproformaTotales() {
		return this.detalleproformaTotales;
	}

	public void setdetalleproformaTotales(DetalleProforma detalleproformaTotales) {
		this.detalleproformaTotales = detalleproformaTotales;
	}	
	
	public DetalleProforma getdetalleproformaBean() {
		return this.detalleproformaBean;
	}

	public void setdetalleproformaBean(DetalleProforma detalleproformaBean) {
		this.detalleproformaBean = detalleproformaBean;
	}	
	
	public DetalleProformaParameterReturnGeneral getdetalleproformaReturnGeneral() {
		return this.detalleproformaReturnGeneral;
	}

	public void setdetalleproformaReturnGeneral(DetalleProformaParameterReturnGeneral detalleproformaReturnGeneral) {
		this.detalleproformaReturnGeneral = detalleproformaReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empaqueFK_IdEmpaque=null;

	public Long getid_empaqueFK_IdEmpaque() {
		return this.id_empaqueFK_IdEmpaque;
	}

	public void setid_empaqueFK_IdEmpaque(Long id_empaqueFK_IdEmpaque) {
		this.id_empaqueFK_IdEmpaque = id_empaqueFK_IdEmpaque;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_detalle_proformaFK_IdEstadoDetalleProforma=-1L;

	public Long getid_estado_detalle_proformaFK_IdEstadoDetalleProforma() {
		return this.id_estado_detalle_proformaFK_IdEstadoDetalleProforma;
	}

	public void setid_estado_detalle_proformaFK_IdEstadoDetalleProforma(Long id_estado_detalle_proformaFK_IdEstadoDetalleProforma) {
		this.id_estado_detalle_proformaFK_IdEstadoDetalleProforma = id_estado_detalle_proformaFK_IdEstadoDetalleProforma;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_proformaFK_IdProforma=-1L;

	public Long getid_proformaFK_IdProforma() {
		return this.id_proformaFK_IdProforma;
	}

	public void setid_proformaFK_IdProforma(Long id_proformaFK_IdProforma) {
		this.id_proformaFK_IdProforma = id_proformaFK_IdProforma;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleProformaLogic getDetalleProformaLogic()	{		
		return detalleproformaLogic;
	}

	public void setDetalleProformaLogic(DetalleProformaLogic detalleproformaLogic) {
		this.detalleproformaLogic = detalleproformaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleProforma() {
		return isEsNuevoDetalleProforma;
	}

	public void setIsEsNuevoDetalleProforma(Boolean isEsNuevoDetalleProforma) {
		this.isEsNuevoDetalleProforma = isEsNuevoDetalleProforma;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleProforma() {
		return esParaAccionDesdeFormularioDetalleProforma;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleProforma(Boolean esParaAccionDesdeFormularioDetalleProforma) {
		this.esParaAccionDesdeFormularioDetalleProforma = esParaAccionDesdeFormularioDetalleProforma;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detalleproformaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detalleproformaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detalleproformaSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detalleproformaSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detalleproformaSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detalleproformaSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProformasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.proformasForeignKey=new ArrayList<Proforma>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProformaLogic proformaLogic=new ProformaLogic();

			//proformaLogic.getProformaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProforma()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//proformaLogic.getProformaDataAccess().setIsForForeingKeyData(true);

					proformaLogic.getTodosProformasWithConnection(sFinalQuery,new Pagination());

					this.proformasForeignKey=proformaLogic.getProformas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProforma(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					proformaLogic.getEntityWithConnection(detalleproformaSessionBean.getlidProformaActual());
					this.proformasForeignKey.add(proformaLogic.getProforma());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detalleproformaSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detalleproformaSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detalleproformaSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpaquesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empaquesForeignKey=new ArrayList<Empaque>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Empaque empaqueNulo = new Empaque();

			EmpaqueLogic empaqueLogic=new EmpaqueLogic();

			//empaqueLogic.getEmpaqueDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpaque()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empaqueLogic.getEmpaqueDataAccess().setIsForForeingKeyData(true);

					empaqueLogic.getTodosEmpaquesWithConnection(sFinalQuery,new Pagination());

					this.empaquesForeignKey=empaqueLogic.getEmpaques();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.empaquesForeignKey.add(0, empaqueNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpaque(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empaqueLogic.getEntityWithConnection(detalleproformaSessionBean.getlidEmpaqueActual());
					this.empaquesForeignKey.add(empaqueLogic.getEmpaque());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detalleproformaSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoDetalleProformasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadodetalleproformasForeignKey=new ArrayList<EstadoDetalleProforma>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoDetalleProformaLogic estadodetalleproformaLogic=new EstadoDetalleProformaLogic();

			//estadodetalleproformaLogic.getEstadoDetalleProformaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleProforma()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadodetalleproformaLogic.getEstadoDetalleProformaDataAccess().setIsForForeingKeyData(true);

					estadodetalleproformaLogic.getTodosEstadoDetalleProformasWithConnection(sFinalQuery,new Pagination());

					this.estadodetalleproformasForeignKey=estadodetalleproformaLogic.getEstadoDetalleProformas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoDetalleProforma(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadodetalleproformaLogic.getEntityWithConnection(detalleproformaSessionBean.getlidEstadoDetalleProformaActual());
					this.estadodetalleproformasForeignKey.add(estadodetalleproformaLogic.getEstadoDetalleProforma());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleProforma.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleProformaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleProformaGenerico!=null && jComboBoxid_empresaDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleProforma.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleProformaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleProformaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleProformaGenerico!=null && jComboBoxid_sucursalDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleProforma.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleProformaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleProformaGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleProformaGenerico!=null && jComboBoxid_ejercicioDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleProforma.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleProformaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleProformaGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleProformaGenerico!=null && jComboBoxid_periodoDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleProforma.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleProformaGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleProformaGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleProformaGenerico!=null && jComboBoxid_anioDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleProforma.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleProformaGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleProformaGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleProformaGenerico!=null && jComboBoxid_mesDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProformaForeignKey(Long idProformaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Proforma  proformaTemp=null;

			for(Proforma proformaAux:proformasForeignKey) {
				if(proformaAux.getId()!=null && proformaAux.getId().equals(idProformaSeleccionado)) {
					proformaTemp=proformaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(proformaTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setProforma(proformaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setSelectedItem(proformaTemp);
					}
				} else {
					//jComboBoxid_proformaDetalleProforma.setSelectedItem(proformaTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProforma") || sFormularioTipoBusqueda.equals("Todos")){
					if(proformaTemp!=null && jComboBoxid_proformaFK_IdProformaDetalleProforma!=null) {
						jComboBoxid_proformaFK_IdProformaDetalleProforma.setSelectedItem(proformaTemp);
					} else {
						if(jComboBoxid_proformaFK_IdProformaDetalleProforma!=null) {
							//jComboBoxid_proformaFK_IdProformaDetalleProforma.setSelectedItem(proformaTemp);
							if(jComboBoxid_proformaFK_IdProformaDetalleProforma.getItemCount()>0) {
								jComboBoxid_proformaFK_IdProformaDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProformaForeignKeyDescripcion(Long idProformaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Proforma  proformaTemp=null;

			for(Proforma proformaAux:proformasForeignKey) {
				if(proformaAux.getId()!=null && proformaAux.getId().equals(idProformaSeleccionado)) {
					proformaTemp=proformaAux;
					break;
				}
			}


			sDescripcion=ProformaConstantesFunciones.getProformaDescripcion(proformaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProformaForeignKeyGenerico(Long idProformaSeleccionado,JComboBox jComboBoxid_proformaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Proforma  proformaTemp=null;

			for(Proforma proformaAux:proformasForeignKey) {
				if(proformaAux.getId()!=null && proformaAux.getId().equals(idProformaSeleccionado)) {
					proformaTemp=proformaAux;
					break;
				}
			}

			if(proformaTemp!=null) {
				jComboBoxid_proformaDetalleProformaGenerico.setSelectedItem(proformaTemp);
			} else {
				if(jComboBoxid_proformaDetalleProformaGenerico!=null && jComboBoxid_proformaDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_proformaDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleProforma.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleProforma!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleProforma.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleProforma!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleProforma.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleProforma.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleProformaGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleProformaGenerico!=null && jComboBoxid_bodegaDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleProforma.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleProforma!=null) {
						jComboBoxid_productoFK_IdProductoDetalleProforma.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleProforma!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleProforma.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleProforma.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleProformaGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleProformaGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleProformaGenerico!=null && jComboBoxid_productoDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleProforma.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleProforma!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleProforma.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleProforma!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleProforma.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleProforma.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleProformaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleProformaGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleProformaGenerico!=null && jComboBoxid_unidadDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpaqueForeignKey(Long idEmpaqueSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empaque  empaqueTemp=null;

			for(Empaque empaqueAux:empaquesForeignKey) {
				if(empaqueAux.getId()!=null && empaqueAux.getId().equals(idEmpaqueSeleccionado)) {
					empaqueTemp=empaqueAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empaqueTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setEmpaque(empaqueTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setSelectedItem(empaqueTemp);
					}
				} else {
					//jComboBoxid_empaqueDetalleProforma.setSelectedItem(empaqueTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpaque") || sFormularioTipoBusqueda.equals("Todos")){
					if(empaqueTemp!=null && jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma!=null) {
						jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.setSelectedItem(empaqueTemp);
					} else {
						if(jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma!=null) {
							//jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.setSelectedItem(empaqueTemp);
							if(jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.getItemCount()>0) {
								jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpaqueForeignKeyDescripcion(Long idEmpaqueSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empaque  empaqueTemp=null;

			for(Empaque empaqueAux:empaquesForeignKey) {
				if(empaqueAux.getId()!=null && empaqueAux.getId().equals(idEmpaqueSeleccionado)) {
					empaqueTemp=empaqueAux;
					break;
				}
			}


			sDescripcion=EmpaqueConstantesFunciones.getEmpaqueDescripcion(empaqueTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpaqueForeignKeyGenerico(Long idEmpaqueSeleccionado,JComboBox jComboBoxid_empaqueDetalleProformaGenerico)throws Exception
	{
		try
		{
			Empaque  empaqueTemp=null;

			for(Empaque empaqueAux:empaquesForeignKey) {
				if(empaqueAux.getId()!=null && empaqueAux.getId().equals(idEmpaqueSeleccionado)) {
					empaqueTemp=empaqueAux;
					break;
				}
			}

			if(empaqueTemp!=null) {
				jComboBoxid_empaqueDetalleProformaGenerico.setSelectedItem(empaqueTemp);
			} else {
				if(jComboBoxid_empaqueDetalleProformaGenerico!=null && jComboBoxid_empaqueDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_empaqueDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleProforma.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleProformaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleProformaGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleProformaGenerico!=null && jComboBoxid_centro_costoDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoDetalleProformaForeignKey(Long idEstadoDetalleProformaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoDetalleProforma  estadodetalleproformaTemp=null;

			for(EstadoDetalleProforma estadodetalleproformaAux:estadodetalleproformasForeignKey) {
				if(estadodetalleproformaAux.getId()!=null && estadodetalleproformaAux.getId().equals(idEstadoDetalleProformaSeleccionado)) {
					estadodetalleproformaTemp=estadodetalleproformaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadodetalleproformaTemp!=null) {

					if(this.detalleproforma!=null) {
						this.detalleproforma.setEstadoDetalleProforma(estadodetalleproformaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedItem(estadodetalleproformaTemp);
					}
				} else {
					//jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedItem(estadodetalleproformaTemp);
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleProforma") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadodetalleproformaTemp!=null && jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma!=null) {
						jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.setSelectedItem(estadodetalleproformaTemp);
					} else {
						if(jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma!=null) {
							//jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.setSelectedItem(estadodetalleproformaTemp);
							if(jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.getItemCount()>0) {
								jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoDetalleProformaForeignKeyDescripcion(Long idEstadoDetalleProformaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoDetalleProforma  estadodetalleproformaTemp=null;

			for(EstadoDetalleProforma estadodetalleproformaAux:estadodetalleproformasForeignKey) {
				if(estadodetalleproformaAux.getId()!=null && estadodetalleproformaAux.getId().equals(idEstadoDetalleProformaSeleccionado)) {
					estadodetalleproformaTemp=estadodetalleproformaAux;
					break;
				}
			}


			sDescripcion=EstadoDetalleProformaConstantesFunciones.getEstadoDetalleProformaDescripcion(estadodetalleproformaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoDetalleProformaForeignKeyGenerico(Long idEstadoDetalleProformaSeleccionado,JComboBox jComboBoxid_estado_detalle_proformaDetalleProformaGenerico)throws Exception
	{
		try
		{
			EstadoDetalleProforma  estadodetalleproformaTemp=null;

			for(EstadoDetalleProforma estadodetalleproformaAux:estadodetalleproformasForeignKey) {
				if(estadodetalleproformaAux.getId()!=null && estadodetalleproformaAux.getId().equals(idEstadoDetalleProformaSeleccionado)) {
					estadodetalleproformaTemp=estadodetalleproformaAux;
					break;
				}
			}

			if(estadodetalleproformaTemp!=null) {
				jComboBoxid_estado_detalle_proformaDetalleProformaGenerico.setSelectedItem(estadodetalleproformaTemp);
			} else {
				if(jComboBoxid_estado_detalle_proformaDetalleProformaGenerico!=null && jComboBoxid_estado_detalle_proformaDetalleProformaGenerico.getItemCount()>0) {
					jComboBoxid_estado_detalle_proformaDetalleProformaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_empresaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleProformaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleProformaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detalleproforma.setid_empresa(empresaAux.getId());
				detalleproforma.setempresa_descripcion(DetalleProformaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detalleproforma.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_sucursalDetalleProformaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleProformaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleProformaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detalleproforma.setid_sucursal(sucursalAux.getId());
				detalleproforma.setsucursal_descripcion(DetalleProformaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detalleproforma.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_ejercicioDetalleProformaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleProformaGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleProformaGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detalleproforma.setid_ejercicio(ejercicioAux.getId());
				detalleproforma.setejercicio_descripcion(DetalleProformaConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detalleproforma.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_periodoDetalleProformaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleProformaGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleProformaGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detalleproforma.setid_periodo(periodoAux.getId());
				detalleproforma.setperiodo_descripcion(DetalleProformaConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detalleproforma.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_anioDetalleProformaGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleProformaGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleProformaGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detalleproforma.setid_anio(anioAux.getId());
				detalleproforma.setanio_descripcion(DetalleProformaConstantesFunciones.getAnioDescripcion(anioAux));
				detalleproforma.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_mesDetalleProformaGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleProformaGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleProformaGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detalleproforma.setid_mes(mesAux.getId());
				detalleproforma.setmes_descripcion(DetalleProformaConstantesFunciones.getMesDescripcion(mesAux));
				detalleproforma.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProformaForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_proformaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Proforma  proformaAux=new Proforma();

			if(jComboBoxid_proformaDetalleProformaGenerico==null) {
				proformaAux=(Proforma)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.getSelectedItem();
			} else {
				proformaAux=(Proforma)jComboBoxid_proformaDetalleProformaGenerico.getSelectedItem();
			}

			if(proformaAux!=null && proformaAux.getId()!=null) {
				detalleproforma.setid_proforma(proformaAux.getId());
				detalleproforma.setproforma_descripcion(DetalleProformaConstantesFunciones.getProformaDescripcion(proformaAux));
				detalleproforma.setProforma(proformaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_bodegaDetalleProformaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleProformaGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleProformaGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detalleproforma.setid_bodega(bodegaAux.getId());
				detalleproforma.setbodega_descripcion(DetalleProformaConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detalleproforma.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_productoDetalleProformaGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleProformaGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleProformaGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detalleproforma.setid_producto(productoAux.getId());
				detalleproforma.setproducto_descripcion(DetalleProformaConstantesFunciones.getProductoDescripcion(productoAux));
				detalleproforma.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_unidadDetalleProformaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleProformaGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleProformaGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detalleproforma.setid_unidad(unidadAux.getId());
				detalleproforma.setunidad_descripcion(DetalleProformaConstantesFunciones.getUnidadDescripcion(unidadAux));
				detalleproforma.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpaqueForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_empaqueDetalleProformaGenerico)throws Exception
	{
		try
		{
			Empaque  empaqueAux=new Empaque();

			if(jComboBoxid_empaqueDetalleProformaGenerico==null) {
				empaqueAux=(Empaque)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.getSelectedItem();
			} else {
				empaqueAux=(Empaque)jComboBoxid_empaqueDetalleProformaGenerico.getSelectedItem();
			}

			if(empaqueAux!=null) {
				detalleproforma.setid_empaque(empaqueAux.getId());
				detalleproforma.setempaque_descripcion(DetalleProformaConstantesFunciones.getEmpaqueDescripcion(empaqueAux));
				detalleproforma.setEmpaque(empaqueAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_centro_costoDetalleProformaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleProformaGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleProformaGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detalleproforma.setid_centro_costo(centrocostoAux.getId());
				detalleproforma.setcentrocosto_descripcion(DetalleProformaConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detalleproforma.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoDetalleProformaForeignKey(DetalleProforma detalleproforma,JComboBox jComboBoxid_estado_detalle_proformaDetalleProformaGenerico)throws Exception
	{
		try
		{
			EstadoDetalleProforma  estadodetalleproformaAux=new EstadoDetalleProforma();

			if(jComboBoxid_estado_detalle_proformaDetalleProformaGenerico==null) {
				estadodetalleproformaAux=(EstadoDetalleProforma)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.getSelectedItem();
			} else {
				estadodetalleproformaAux=(EstadoDetalleProforma)jComboBoxid_estado_detalle_proformaDetalleProformaGenerico.getSelectedItem();
			}

			if(estadodetalleproformaAux!=null && estadodetalleproformaAux.getId()!=null) {
				detalleproforma.setid_estado_detalle_proforma(estadodetalleproformaAux.getId());
				detalleproforma.setestadodetalleproforma_descripcion(DetalleProformaConstantesFunciones.getEstadoDetalleProformaDescripcion(estadodetalleproformaAux));
				detalleproforma.setEstadoDetalleProforma(estadodetalleproformaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProformasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProforma=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.removeAllItems();

							for(Proforma proforma:this.proformasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.addItem(proforma);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProforma") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_proformaFK_IdProformaDetalleProforma.removeAllItems();

							for(Proforma proforma:this.proformasForeignKey) {
								this.jComboBoxid_proformaFK_IdProformaDetalleProforma.addItem(proforma);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.addItem(bodega);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleProforma.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleProforma.addItem(producto);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.addItem(unidad);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpaquesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpaque=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.removeAllItems();

							for(Empaque empaque:this.empaquesForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.addItem(empaque);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpaque") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.removeAllItems();

							for(Empaque empaque:this.empaquesForeignKey) {
								this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.addItem(empaque);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.addItem(centrocosto);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoDetalleProformasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoDetalleProforma=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.removeAllItems();

							for(EstadoDetalleProforma estadodetalleproforma:this.estadodetalleproformasForeignKey) {
								this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.addItem(estadodetalleproforma);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleProforma!=null) { 
					}

					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleProforma") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.removeAllItems();

							for(EstadoDetalleProforma estadodetalleproforma:this.estadodetalleproformasForeignKey) {
								this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.addItem(estadodetalleproforma);
							}
						}

						if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProformaForeignKey(Proforma proforma,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setSelectedItem(proforma);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_proformaFK_IdProformaDetalleProforma.setSelectedItem(proforma);
						} else {
							this.jComboBoxid_proformaFK_IdProformaDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleProforma.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpaqueForeignKey(Empaque empaque,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setSelectedItem(empaque);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.setSelectedItem(empaque);
						} else {
							this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoDetalleProformaForeignKey(EstadoDetalleProforma estadodetalleproforma,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedItem(estadodetalleproforma);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.setSelectedItem(estadodetalleproforma);
						} else {
							this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleProforma() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleProformaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleProforma(this.detalleproformaLogic.getDetalleProformas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleProformaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleProforma(this.detalleproformas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Proforma.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(Empaque.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(EstadoDetalleProforma.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detalleproformaLogic.setDetalleProformas(this.detalleproformas);
			detalleproformaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleProformaParameterReturnGeneral getDetalleProformaParameterGeneral() {
		return this.detalleproformaParameterGeneral;
	}
	
	public void setDetalleProformaParameterGeneral(DetalleProformaParameterReturnGeneral detalleproformaParameterGeneral) {
		this.detalleproformaParameterGeneral = detalleproformaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleProforma() {
		return isPermisoTodoDetalleProforma;
	}

	public void setIsPermisoTodoDetalleProforma(Boolean isPermisoTodoDetalleProforma) {
		this.isPermisoTodoDetalleProforma = isPermisoTodoDetalleProforma;
	}

	public Boolean getIsPermisoNuevoDetalleProforma() {
		return isPermisoNuevoDetalleProforma;
	}

	public void setIsPermisoNuevoDetalleProforma(Boolean isPermisoNuevoDetalleProforma) {
		this.isPermisoNuevoDetalleProforma = isPermisoNuevoDetalleProforma;
	}

	public Boolean getIsPermisoActualizarDetalleProforma() {
		return isPermisoActualizarDetalleProforma;
	}

	public void setIsPermisoActualizarDetalleProforma(Boolean isPermisoActualizarDetalleProforma) {
		this.isPermisoActualizarDetalleProforma = isPermisoActualizarDetalleProforma;
	}

	public Boolean getIsPermisoEliminarDetalleProforma() {
		return isPermisoEliminarDetalleProforma;
	}

	public void setIsPermisoEliminarDetalleProforma(Boolean isPermisoEliminarDetalleProforma) {
		this.isPermisoEliminarDetalleProforma = isPermisoEliminarDetalleProforma;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleProforma() {
		return isPermisoGuardarCambiosDetalleProforma;
	}

	public void setIsPermisoGuardarCambiosDetalleProforma(Boolean isPermisoGuardarCambiosDetalleProforma) {
		this.isPermisoGuardarCambiosDetalleProforma = isPermisoGuardarCambiosDetalleProforma;
	}
	
	public Boolean getIsPermisoConsultaDetalleProforma() {
		return isPermisoConsultaDetalleProforma;
	}

	public void setIsPermisoConsultaDetalleProforma(Boolean isPermisoConsultaDetalleProforma) {
		this.isPermisoConsultaDetalleProforma = isPermisoConsultaDetalleProforma;
	}

	public Boolean getIsPermisoBusquedaDetalleProforma() {
		return isPermisoBusquedaDetalleProforma;
	}

	public void setIsPermisoBusquedaDetalleProforma(Boolean isPermisoBusquedaDetalleProforma) {
		this.isPermisoBusquedaDetalleProforma = isPermisoBusquedaDetalleProforma;
	}

	public Boolean getIsPermisoReporteDetalleProforma() {
		return isPermisoReporteDetalleProforma;
	}

	public void setIsPermisoReporteDetalleProforma(Boolean isPermisoReporteDetalleProforma) {
		this.isPermisoReporteDetalleProforma = isPermisoReporteDetalleProforma;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleProforma() {
		return isPermisoPaginacionMedioDetalleProforma;
	}

	public void setIsPermisoPaginacionMedioDetalleProforma(Boolean isPermisoPaginacionMedioDetalleProforma) {
		this.isPermisoPaginacionMedioDetalleProforma = isPermisoPaginacionMedioDetalleProforma;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleProforma() {
		return isPermisoPaginacionTodoDetalleProforma;
	}

	public void setIsPermisoPaginacionTodoDetalleProforma(Boolean isPermisoPaginacionTodoDetalleProforma) {
		this.isPermisoPaginacionTodoDetalleProforma = isPermisoPaginacionTodoDetalleProforma;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleProforma() {
		return isPermisoPaginacionAltoDetalleProforma;
	}

	public void setIsPermisoPaginacionAltoDetalleProforma(Boolean isPermisoPaginacionAltoDetalleProforma) {
		this.isPermisoPaginacionAltoDetalleProforma = isPermisoPaginacionAltoDetalleProforma;
	}
	
	public Boolean getIsPermisoCopiarDetalleProforma() {
		return isPermisoCopiarDetalleProforma;
	}

	public void setIsPermisoCopiarDetalleProforma(Boolean isPermisoCopiarDetalleProforma) {
		this.isPermisoCopiarDetalleProforma = isPermisoCopiarDetalleProforma;
	}
	
	public Boolean getIsPermisoVerFormDetalleProforma() {
		return isPermisoVerFormDetalleProforma;
	}

	public void setIsPermisoVerFormDetalleProforma(Boolean isPermisoVerFormDetalleProforma) {
		this.isPermisoVerFormDetalleProforma = isPermisoVerFormDetalleProforma;
	}
	
	public Boolean getIsPermisoDuplicarDetalleProforma() {
		return isPermisoDuplicarDetalleProforma;
	}

	public void setIsPermisoDuplicarDetalleProforma(Boolean isPermisoDuplicarDetalleProforma) {
		this.isPermisoDuplicarDetalleProforma = isPermisoDuplicarDetalleProforma;
	}
	
	public Boolean getIsPermisoOrdenDetalleProforma() {
		return isPermisoOrdenDetalleProforma;
	}

	public void setIsPermisoOrdenDetalleProforma(Boolean isPermisoOrdenDetalleProforma) {
		this.isPermisoOrdenDetalleProforma = isPermisoOrdenDetalleProforma;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleProforma() {
		return isVisibilidadCeldaNuevoDetalleProforma;
	}

	public void setIsVisibilidadCeldaNuevoDetalleProforma(Boolean isVisibilidadCeldaNuevoDetalleProforma) {
		this.isVisibilidadCeldaNuevoDetalleProforma = isVisibilidadCeldaNuevoDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleProforma() {
		return isVisibilidadCeldaDuplicarDetalleProforma;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleProforma(Boolean isVisibilidadCeldaDuplicarDetalleProforma) {
		this.isVisibilidadCeldaDuplicarDetalleProforma = isVisibilidadCeldaDuplicarDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleProforma() {
		return isVisibilidadCeldaCopiarDetalleProforma;
	}

	public void setIsVisibilidadCeldaCopiarDetalleProforma(Boolean isVisibilidadCeldaCopiarDetalleProforma) {
		this.isVisibilidadCeldaCopiarDetalleProforma = isVisibilidadCeldaCopiarDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleProforma() {
		return isVisibilidadCeldaVerFormDetalleProforma;
	}

	public void setIsVisibilidadCeldaVerFormDetalleProforma(Boolean isVisibilidadCeldaVerFormDetalleProforma) {
		this.isVisibilidadCeldaVerFormDetalleProforma = isVisibilidadCeldaVerFormDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleProforma() {
		return isVisibilidadCeldaOrdenDetalleProforma;
	}

	public void setIsVisibilidadCeldaOrdenDetalleProforma(Boolean isVisibilidadCeldaOrdenDetalleProforma) {
		this.isVisibilidadCeldaOrdenDetalleProforma = isVisibilidadCeldaOrdenDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleProforma() {
		return isVisibilidadCeldaNuevoRelacionesDetalleProforma;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleProforma(Boolean isVisibilidadCeldaNuevoRelacionesDetalleProforma) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleProforma = isVisibilidadCeldaNuevoRelacionesDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleProforma() {
		return isVisibilidadCeldaModificarDetalleProforma;
	}

	public void setIsVisibilidadCeldaModificarDetalleProforma(Boolean isVisibilidadCeldaModificarDetalleProforma) {
		this.isVisibilidadCeldaModificarDetalleProforma = isVisibilidadCeldaModificarDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleProforma() {
		return isVisibilidadCeldaActualizarDetalleProforma;
	}

	public void setIsVisibilidadCeldaActualizarDetalleProforma(Boolean isVisibilidadCeldaActualizarDetalleProforma) {
		this.isVisibilidadCeldaActualizarDetalleProforma = isVisibilidadCeldaActualizarDetalleProforma;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleProforma() {
		return isVisibilidadCeldaEliminarDetalleProforma;
	}

	public void setIsVisibilidadCeldaEliminarDetalleProforma(Boolean isVisibilidadCeldaEliminarDetalleProforma) {
		this.isVisibilidadCeldaEliminarDetalleProforma = isVisibilidadCeldaEliminarDetalleProforma;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleProforma() {
		return isVisibilidadCeldaCancelarDetalleProforma;
	}

	public void setIsVisibilidadCeldaCancelarDetalleProforma(Boolean isVisibilidadCeldaCancelarDetalleProforma) {
		this.isVisibilidadCeldaCancelarDetalleProforma = isVisibilidadCeldaCancelarDetalleProforma;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleProforma() {
		return isVisibilidadCeldaGuardarDetalleProforma;
	}

	public void setIsVisibilidadCeldaGuardarDetalleProforma(Boolean isVisibilidadCeldaGuardarDetalleProforma) {
		this.isVisibilidadCeldaGuardarDetalleProforma = isVisibilidadCeldaGuardarDetalleProforma;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleProforma() {
		return isVisibilidadCeldaGuardarCambiosDetalleProforma;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleProforma(Boolean isVisibilidadCeldaGuardarCambiosDetalleProforma) {
		this.isVisibilidadCeldaGuardarCambiosDetalleProforma = isVisibilidadCeldaGuardarCambiosDetalleProforma;
	}
		
	public DetalleProformaSessionBean getdetalleproformaSessionBean() {
		return this.detalleproformaSessionBean;
	}
	
	public void setdetalleproformaSessionBean(DetalleProformaSessionBean detalleproformaSessionBean) {
		this.detalleproformaSessionBean=detalleproformaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpaque() {
		return this.isVisibilidadFK_IdEmpaque;
	}

	public void setisVisibilidadFK_IdEmpaque(Boolean isVisibilidadFK_IdEmpaque) {
		this.isVisibilidadFK_IdEmpaque=isVisibilidadFK_IdEmpaque;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoDetalleProforma() {
		return this.isVisibilidadFK_IdEstadoDetalleProforma;
	}

	public void setisVisibilidadFK_IdEstadoDetalleProforma(Boolean isVisibilidadFK_IdEstadoDetalleProforma) {
		this.isVisibilidadFK_IdEstadoDetalleProforma=isVisibilidadFK_IdEstadoDetalleProforma;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdProforma() {
		return this.isVisibilidadFK_IdProforma;
	}

	public void setisVisibilidadFK_IdProforma(Boolean isVisibilidadFK_IdProforma) {
		this.isVisibilidadFK_IdProforma=isVisibilidadFK_IdProforma;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(DetalleProforma detalleproforma)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(detalleproforma,null);
				this.setActualParaGuardarSucursalForeignKey(detalleproforma,null);
				this.setActualParaGuardarEjercicioForeignKey(detalleproforma,null);
				this.setActualParaGuardarPeriodoForeignKey(detalleproforma,null);
				this.setActualParaGuardarAnioForeignKey(detalleproforma,null);
				this.setActualParaGuardarMesForeignKey(detalleproforma,null);
				this.setActualParaGuardarProformaForeignKey(detalleproforma,null);
				this.setActualParaGuardarBodegaForeignKey(detalleproforma,null);
				this.setActualParaGuardarProductoForeignKey(detalleproforma,null);
				this.setActualParaGuardarUnidadForeignKey(detalleproforma,null);
				this.setActualParaGuardarEmpaqueForeignKey(detalleproforma,null);
				this.setActualParaGuardarCentroCostoForeignKey(detalleproforma,null);
				this.setActualParaGuardarEstadoDetalleProformaForeignKey(detalleproforma,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetalleProforma detalleproforma,DetalleProforma detalleproformaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleProforma(detalleproforma);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detalleproformaAux.setId(detalleproforma.getId());
		detalleproformaAux.setVersionRow(detalleproforma.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleProforma();
		
			int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detalleproformaValidator.getInvalidValues(this.detalleproforma);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detalleproformaLogic.setDatosCliente(datosCliente);
			detalleproformaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detalleproformaAux=new  DetalleProforma();
				
				detalleproformaAux.setIsNew(true);
				detalleproformaAux.setIsChanged(true);
				
				detalleproformaAux.setDetalleProformaOriginal(this.detalleproforma);
				
				detalleproformaAux.setId(this.detalleproforma.getId());	
				detalleproformaAux.setVersionRow(this.detalleproforma.getVersionRow());	
				detalleproformaAux.setid_empresa(this.detalleproforma.getid_empresa());	
				detalleproformaAux.setid_sucursal(this.detalleproforma.getid_sucursal());	
				detalleproformaAux.setid_ejercicio(this.detalleproforma.getid_ejercicio());	
				detalleproformaAux.setid_periodo(this.detalleproforma.getid_periodo());	
				detalleproformaAux.setid_anio(this.detalleproforma.getid_anio());	
				detalleproformaAux.setid_mes(this.detalleproforma.getid_mes());	
				detalleproformaAux.setid_proforma(this.detalleproforma.getid_proforma());	
				detalleproformaAux.setid_bodega(this.detalleproforma.getid_bodega());	
				detalleproformaAux.setid_producto(this.detalleproforma.getid_producto());	
				detalleproformaAux.setid_unidad(this.detalleproforma.getid_unidad());	
				
				if(this.detalleproforma.getid_empaque()!=null && this.detalleproforma.getid_empaque()>0L) {
					detalleproformaAux.setid_empaque(this.detalleproforma.getid_empaque());
				} else {
					detalleproformaAux.setid_empaque(null);
				}	
				
				if(this.detalleproforma.getid_centro_costo()!=null && this.detalleproforma.getid_centro_costo()>0L) {
					detalleproformaAux.setid_centro_costo(this.detalleproforma.getid_centro_costo());
				} else {
					detalleproformaAux.setid_centro_costo(null);
				}	
				detalleproformaAux.setid_estado_detalle_proforma(this.detalleproforma.getid_estado_detalle_proforma());	
				detalleproformaAux.setdescripcion(this.detalleproforma.getdescripcion());	
				detalleproformaAux.setcantidad_envases(this.detalleproforma.getcantidad_envases());	
				detalleproformaAux.setcantidad(this.detalleproforma.getcantidad());	
				detalleproformaAux.setprecio(this.detalleproforma.getprecio());	
				detalleproformaAux.setiva(this.detalleproforma.getiva());	
				detalleproformaAux.setdescuento_porcentaje(this.detalleproforma.getdescuento_porcentaje());	
				detalleproformaAux.setdescuento_valor(this.detalleproforma.getdescuento_valor());	
				detalleproformaAux.setlote(this.detalleproforma.getlote());	
				detalleproformaAux.settotal(this.detalleproforma.gettotal());	
				detalleproformaAux.setice(this.detalleproforma.getice());	
				detalleproformaAux.setcosto(this.detalleproforma.getcosto());	
				detalleproformaAux.setutilidad(this.detalleproforma.getutilidad());	
				detalleproformaAux.setarea(this.detalleproforma.getarea());	
				detalleproformaAux.setmedida(this.detalleproforma.getmedida());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproformaAux,detalleproformas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.saveDetalleProformas();//WithConnection
						//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleProforma();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproformaLogic.saveDetalleProformaRelaciones(detalleproformaAux);//WithConnection
								//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleproformaAux,detalleproformas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detalleproformaAux=new  DetalleProforma();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detalleproformaSessionBean.getEsGuardarRelacionado() 
					|| (this.detalleproformaSessionBean.getEsGuardarRelacionado() && this.detalleproforma.getId()>=0)) {
						
					detalleproformaAux.setIsNew(false);
				}
				
				detalleproformaAux.setIsDeleted(false);
			
				detalleproformaAux.setId(this.detalleproforma.getId());	
				detalleproformaAux.setVersionRow(this.detalleproforma.getVersionRow());	
				detalleproformaAux.setid_empresa(this.detalleproforma.getid_empresa());	
				detalleproformaAux.setid_sucursal(this.detalleproforma.getid_sucursal());	
				detalleproformaAux.setid_ejercicio(this.detalleproforma.getid_ejercicio());	
				detalleproformaAux.setid_periodo(this.detalleproforma.getid_periodo());	
				detalleproformaAux.setid_anio(this.detalleproforma.getid_anio());	
				detalleproformaAux.setid_mes(this.detalleproforma.getid_mes());	
				detalleproformaAux.setid_proforma(this.detalleproforma.getid_proforma());	
				detalleproformaAux.setid_bodega(this.detalleproforma.getid_bodega());	
				detalleproformaAux.setid_producto(this.detalleproforma.getid_producto());	
				detalleproformaAux.setid_unidad(this.detalleproforma.getid_unidad());	
				
				if(this.detalleproforma.getid_empaque()!=null && this.detalleproforma.getid_empaque()>0L) {
					detalleproformaAux.setid_empaque(this.detalleproforma.getid_empaque());
				} else {
					detalleproformaAux.setid_empaque(null);
				}	
				
				if(this.detalleproforma.getid_centro_costo()!=null && this.detalleproforma.getid_centro_costo()>0L) {
					detalleproformaAux.setid_centro_costo(this.detalleproforma.getid_centro_costo());
				} else {
					detalleproformaAux.setid_centro_costo(null);
				}	
				detalleproformaAux.setid_estado_detalle_proforma(this.detalleproforma.getid_estado_detalle_proforma());	
				detalleproformaAux.setdescripcion(this.detalleproforma.getdescripcion());	
				detalleproformaAux.setcantidad_envases(this.detalleproforma.getcantidad_envases());	
				detalleproformaAux.setcantidad(this.detalleproforma.getcantidad());	
				detalleproformaAux.setprecio(this.detalleproforma.getprecio());	
				detalleproformaAux.setiva(this.detalleproforma.getiva());	
				detalleproformaAux.setdescuento_porcentaje(this.detalleproforma.getdescuento_porcentaje());	
				detalleproformaAux.setdescuento_valor(this.detalleproforma.getdescuento_valor());	
				detalleproformaAux.setlote(this.detalleproforma.getlote());	
				detalleproformaAux.settotal(this.detalleproforma.gettotal());	
				detalleproformaAux.setice(this.detalleproforma.getice());	
				detalleproformaAux.setcosto(this.detalleproforma.getcosto());	
				detalleproformaAux.setutilidad(this.detalleproforma.getutilidad());	
				detalleproformaAux.setarea(this.detalleproforma.getarea());	
				detalleproformaAux.setmedida(this.detalleproforma.getmedida());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproformaAux,detalleproformas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.saveDetalleProformas();//WithConnection
						//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleProforma();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproformaLogic.saveDetalleProformaRelaciones(detalleproformaAux);//WithConnection
								//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleproformaAux,detalleproformas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleproforma,detalleproformaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detalleproformaAux=new  DetalleProforma();
				
				detalleproformaAux.setIsNew(false);
				detalleproformaAux.setIsChanged(false);
				
				detalleproformaAux.setIsDeleted(true);
				
				detalleproformaAux.setId(this.detalleproforma.getId());	
				detalleproformaAux.setVersionRow(this.detalleproforma.getVersionRow());	
				detalleproformaAux.setid_empresa(this.detalleproforma.getid_empresa());	
				detalleproformaAux.setid_sucursal(this.detalleproforma.getid_sucursal());	
				detalleproformaAux.setid_ejercicio(this.detalleproforma.getid_ejercicio());	
				detalleproformaAux.setid_periodo(this.detalleproforma.getid_periodo());	
				detalleproformaAux.setid_anio(this.detalleproforma.getid_anio());	
				detalleproformaAux.setid_mes(this.detalleproforma.getid_mes());	
				detalleproformaAux.setid_proforma(this.detalleproforma.getid_proforma());	
				detalleproformaAux.setid_bodega(this.detalleproforma.getid_bodega());	
				detalleproformaAux.setid_producto(this.detalleproforma.getid_producto());	
				detalleproformaAux.setid_unidad(this.detalleproforma.getid_unidad());	
				
				if(this.detalleproforma.getid_empaque()!=null && this.detalleproforma.getid_empaque()>0L) {
					detalleproformaAux.setid_empaque(this.detalleproforma.getid_empaque());
				} else {
					detalleproformaAux.setid_empaque(null);
				}	
				
				if(this.detalleproforma.getid_centro_costo()!=null && this.detalleproforma.getid_centro_costo()>0L) {
					detalleproformaAux.setid_centro_costo(this.detalleproforma.getid_centro_costo());
				} else {
					detalleproformaAux.setid_centro_costo(null);
				}	
				detalleproformaAux.setid_estado_detalle_proforma(this.detalleproforma.getid_estado_detalle_proforma());	
				detalleproformaAux.setdescripcion(this.detalleproforma.getdescripcion());	
				detalleproformaAux.setcantidad_envases(this.detalleproforma.getcantidad_envases());	
				detalleproformaAux.setcantidad(this.detalleproforma.getcantidad());	
				detalleproformaAux.setprecio(this.detalleproforma.getprecio());	
				detalleproformaAux.setiva(this.detalleproforma.getiva());	
				detalleproformaAux.setdescuento_porcentaje(this.detalleproforma.getdescuento_porcentaje());	
				detalleproformaAux.setdescuento_valor(this.detalleproforma.getdescuento_valor());	
				detalleproformaAux.setlote(this.detalleproforma.getlote());	
				detalleproformaAux.settotal(this.detalleproforma.gettotal());	
				detalleproformaAux.setice(this.detalleproforma.getice());	
				detalleproformaAux.setcosto(this.detalleproforma.getcosto());	
				detalleproformaAux.setutilidad(this.detalleproforma.getutilidad());	
				detalleproformaAux.setarea(this.detalleproforma.getarea());	
				detalleproformaAux.setmedida(this.detalleproforma.getmedida());	
				
				if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detalleproformaAux.getId()>=0) {	
						this.detalleproformasEliminados.add(detalleproformaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproformaAux,detalleproformas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.saveDetalleProformas();//WithConnection
						//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleproformaLogic.saveDetalleProformaRelaciones(detalleproformaAux);//WithConnection
								//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detalleproformaAux,detalleproformaLogic.getDetalleProformas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detalleproformaAux,detalleproformas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getDetalleProformas().addAll(this.detalleproformasEliminados);
					
					detalleproformaLogic.saveDetalleProformas();//WithConnection
					//detalleproformaLogic.getSetVersionRowDetalleProformas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleProforma();
				
				this.detalleproformasEliminados= new ArrayList<DetalleProforma>();		
			}
			
			if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Proforma GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detalleproforma=detalleproformaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleProforma();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleProforma detalleproformaLocal) throws Exception {
		
		if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleProforma detalleproformaLocal) throws Exception {	
		if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detalleproformaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detalleproformaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detalleproformaLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detalleproformaLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detalleproformaLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detalleproformaLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProformaDetalleFormJInternalFrame.class)) {
				ProformaBeanSwingJInternalFrame proformaBeanSwingJInternalFrameLocal=(ProformaBeanSwingJInternalFrame) ((ProformaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				proformaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProforma(proformaBeanSwingJInternalFrameLocal.getproforma(),true);
				proformaBeanSwingJInternalFrameLocal.actualizarLista(proformaBeanSwingJInternalFrameLocal.proforma,this.proformasForeignKey);

				proformaBeanSwingJInternalFrameLocal.actualizarRelaciones(proformaBeanSwingJInternalFrameLocal.proforma);

				detalleproformaLocal.setProforma(proformaBeanSwingJInternalFrameLocal.proforma);

				this.addItemDefectoCombosForeignKeyProforma();
				this.cargarCombosFrameProformasForeignKey("Formulario");
				this.setActualProformaForeignKey(proformaBeanSwingJInternalFrameLocal.proforma.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detalleproformaLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detalleproformaLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detalleproformaLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpaqueDetalleFormJInternalFrame.class)) {
				EmpaqueBeanSwingJInternalFrame empaqueBeanSwingJInternalFrameLocal=(EmpaqueBeanSwingJInternalFrame) ((EmpaqueDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empaqueBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpaque(empaqueBeanSwingJInternalFrameLocal.getempaque(),true);
				empaqueBeanSwingJInternalFrameLocal.actualizarLista(empaqueBeanSwingJInternalFrameLocal.empaque,this.empaquesForeignKey);

				empaqueBeanSwingJInternalFrameLocal.actualizarRelaciones(empaqueBeanSwingJInternalFrameLocal.empaque);

				detalleproformaLocal.setEmpaque(empaqueBeanSwingJInternalFrameLocal.empaque);

				this.addItemDefectoCombosForeignKeyEmpaque();
				this.cargarCombosFrameEmpaquesForeignKey("Formulario");
				this.setActualEmpaqueForeignKey(empaqueBeanSwingJInternalFrameLocal.empaque.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detalleproformaLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoDetalleProformaDetalleFormJInternalFrame.class)) {
				EstadoDetalleProformaBeanSwingJInternalFrame estadodetalleproformaBeanSwingJInternalFrameLocal=(EstadoDetalleProformaBeanSwingJInternalFrame) ((EstadoDetalleProformaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadodetalleproformaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoDetalleProforma(estadodetalleproformaBeanSwingJInternalFrameLocal.getestadodetalleproforma(),true);
				estadodetalleproformaBeanSwingJInternalFrameLocal.actualizarLista(estadodetalleproformaBeanSwingJInternalFrameLocal.estadodetalleproforma,this.estadodetalleproformasForeignKey);

				estadodetalleproformaBeanSwingJInternalFrameLocal.actualizarRelaciones(estadodetalleproformaBeanSwingJInternalFrameLocal.estadodetalleproforma);

				detalleproformaLocal.setEstadoDetalleProforma(estadodetalleproformaBeanSwingJInternalFrameLocal.estadodetalleproforma);

				this.addItemDefectoCombosForeignKeyEstadoDetalleProforma();
				this.cargarCombosFrameEstadoDetalleProformasForeignKey("Formulario");
				this.setActualEstadoDetalleProformaForeignKey(estadodetalleproformaBeanSwingJInternalFrameLocal.estadodetalleproforma.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleProformaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detalleproformaValidator.getInvalidValues(this.detalleproforma);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleProforma detalleproforma,List<DetalleProforma> detalleproformas) throws Exception {
		try	{		
			DetalleProformaConstantesFunciones.actualizarLista(detalleproforma,detalleproformas,this.detalleproformaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleProforma detalleproforma,List<DetalleProforma> detalleproformas) throws Exception {
		try	{			
			DetalleProformaConstantesFunciones.actualizarSelectedLista(detalleproforma,detalleproformas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleProforma> detalleproformasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detalleproformasLocal=this.detalleproformaLogic.getDetalleProformas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detalleproformasLocal=this.detalleproformas;
			}
			//ARCHITECTURE
		
			for(DetalleProforma detalleproformaLocal:detalleproformasLocal) {
				if(this.permiteMantenimiento(detalleproformaLocal) && detalleproformaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleProformaConstantesFunciones.getDetalleProformaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_empresaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_sucursalDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_ejercicioDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_periodoDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_anioDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_mesDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_proformaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_bodegaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_productoDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_unidadDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDEMPAQUE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_empaqueDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_centro_costoDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IDESTADODETALLEPROFORMA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_estado_detalle_proformaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescripcionDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.CANTIDADENVASES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidad_envasesDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidadDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.PRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelprecioDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelivaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.DESCUENTOPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_porcentajeDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_valorDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.LOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelloteDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeltotalDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeliceDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.COSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelcostoDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.UTILIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelutilidadDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.AREA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelareaDetalleProforma,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleProformaConstantesFunciones.MEDIDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelmedidaDetalleProforma,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_empresaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_sucursalDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_ejercicioDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_periodoDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_anioDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_mesDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_proformaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_bodegaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_productoDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_unidadDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_empaqueDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_centro_costoDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelid_estado_detalle_proformaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescripcionDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidad_envasesDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidadDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelprecioDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelivaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_porcentajeDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_valorDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelloteDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabeltotalDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabeliceDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelcostoDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelutilidadDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelareaDetalleProforma,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleProforma.jLabelmedidaDetalleProforma,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleProforma--;	
		
		
		this.detalleproformaAux=new DetalleProforma();
		
		this.detalleproformaAux.setId(this.iIdNuevoDetalleProforma);
		this.detalleproformaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleproformaLogic.getDetalleProformas().add(this.detalleproformaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detalleproformas.add(this.detalleproformaAux);
		}
		//ARCHITECTURE
		
		this.detalleproforma=this.detalleproformaAux;
		
		if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleProforma(this.detalleproforma);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleProforma(this.detalleproforma);
		}
				
		//this.setDefaultControlesDetalleProforma();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleProforma();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleProforma();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProforma();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleProforma(this.detalleproformaBean,this.detalleproforma,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleProformaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
			classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detalleproformaReturnGeneral=detalleproformaLogic.procesarEventosDetalleProformasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleproformaLogic.getDetalleProformas(),this.detalleproforma,this.detalleproformaParameterGeneral,this.isEsNuevoDetalleProforma,classes);//this.detalleproformaLogic.getDetalleProforma()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleProforma(this.detalleproformaReturnGeneral,this.detalleproformaBean,false);
		
		if(this.detalleproformaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma());
		}
		
		if(this.detalleproformaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma(),classes);//this.detalleproformaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleProforma();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleProforma();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleProformaBeanSwingJInternalFrameAdditional.RecargarFormDetalleProforma(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleProforma(false);
						
			if(detalleproformaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProforma();
			}
			
			this.actualizarVisualTableDatosDetalleProforma();
			
			this.jTableDatosDetalleProforma.setRowSelectionInterval(this.getIndiceNuevoDetalleProforma(), this.getIndiceNuevoDetalleProforma());
			
			this.seleccionarFilaTablaDetalleProformaActual();
						
			this.actualizarEstadoCeldasBotonesDetalleProforma("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleProforma(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activardescripcionDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarcantidad_envasesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarcantidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarprecioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarivaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activardescuento_porcentajeDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activardescuento_valorDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarloteDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activartotalDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldiceDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activariceDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcostoDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarcostoDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldutilidadDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarutilidadDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreaareaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarareaDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreamedidaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarmedidaDetalleProforma);	
		//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_empresaDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_sucursalDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_ejercicioDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_periodoDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_anioDetalleProforma);//
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_mesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_proformaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_bodegaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_productoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_unidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_empaqueDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_centro_costoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setEnabled(isHabilitar && this.detalleproformaConstantesFunciones.activarid_estado_detalle_proformaDetalleProforma);
	};
	
	public void setDefaultControlesDetalleProforma() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleProforma(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detalleproformaSessionBean.setConGuardarRelaciones(true);			
			this.detalleproformaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.setVisible(true);
			
					
		} else {
			//this.detalleproformaSessionBean.setConGuardarRelaciones(false);			
			this.detalleproformaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleProforma() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
				if(detalleproformaAux.getId().equals(this.iIdNuevoDetalleProforma)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProforma detalleproformaAux:this.detalleproformas) {
				if(detalleproformaAux.getId().equals(this.iIdNuevoDetalleProforma)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleProforma(DetalleProforma detalleproforma,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
				if(detalleproformaAux.getId().equals(detalleproforma.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProforma detalleproformaAux:this.detalleproformas) {
				if(detalleproformaAux.getId().equals(detalleproforma.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleProforma(DetalleProforma detalleproformaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
				if(detalleproformaAux.getDetalleProformaOriginal().getId().equals(detalleproformaOriginal.getId())) {
					existe=true;
					detalleproformaOriginal.setId(detalleproformaAux.getId());
					detalleproformaOriginal.setVersionRow(detalleproformaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProforma detalleproformaAux:this.detalleproformas) {
				if(detalleproformaAux.getDetalleProformaOriginal().getId().equals(detalleproformaOriginal.getId())) {
					existe=true;
					detalleproformaOriginal.setId(detalleproformaAux.getId());
					detalleproformaOriginal.setVersionRow(detalleproformaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleProforma(Boolean esParaCancelar) throws Exception {
		detalleproformasAux=new ArrayList<DetalleProforma>();
		detalleproformaAux=new DetalleProforma();
		
		if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
					if(detalleproformaAux.getId()<0) {
						detalleproformasAux.add(detalleproformaAux);
					}		
				}
				this.iIdNuevoDetalleProforma=0L;
				this.detalleproformaLogic.getDetalleProformas().removeAll(detalleproformasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProforma detalleproformaAux:this.detalleproformas) {
					if(detalleproformaAux.getId()<0) {
						detalleproformasAux.add(detalleproformaAux);
					}		
				}
				this.iIdNuevoDetalleProforma=0L;
				this.detalleproformas.removeAll(detalleproformasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleProforma 
					&& this.detalleproformaLogic.getDetalleProformas().size()>0
					) {
					detalleproformaAux=this.detalleproformaLogic.getDetalleProformas().get(this.detalleproformaLogic.getDetalleProformas().size() - 1);
				
					if(detalleproformaAux.getId()<0) {
						this.detalleproformaLogic.getDetalleProformas().remove(detalleproformaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleProforma && this.detalleproformas.size()>0) {
					detalleproformaAux=this.detalleproformas.get(this.detalleproformas.size() - 1);
				
					if(detalleproformaAux.getId()<0) {
						this.detalleproformas.remove(detalleproformaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleProforma(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detalleproforma.getId()<0) {
				this.detalleproformaLogic.getDetalleProformas().remove(this.detalleproforma);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detalleproforma.getId()<0) {
				this.detalleproformas.remove(this.detalleproforma);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleProforma(List<DetalleProforma> detalleproformasAux) throws Exception {
		DetalleProformaConstantesFunciones.setEstadosInicialesDetalleProforma(detalleproformasAux);
	}
	
	public void setEstadosInicialesDetalleProforma(DetalleProforma detalleproformaAux) throws Exception {
		DetalleProformaConstantesFunciones.setEstadosInicialesDetalleProforma(detalleproformaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleProformaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleProformaActual()) {
				if(!this.isEsNuevoDetalleProforma) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleProforma=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleProformaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Proforma ?", "MANTENIMIENTO DE Detalle Proforma", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleProforma detalleproforma) throws Exception {
		DetalleProformaConstantesFunciones.seleccionarAsignar(this.detalleproforma,detalleproforma);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleProforma=this.isPermisoActualizarOriginalDetalleProforma;
			
			
			this.seleccionarAsignar(detalleproforma);
			
			

			idProductoActual=detalleproforma.getid_producto();
			this.seleccionarProductoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleProformaConstantesFunciones.quitarEspaciosDetalleProforma(this.detalleproforma,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleProforma("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detalleproformaSessionBean.setsFuncionBusquedaRapida(this.detalleproformaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleProforma) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleProforma(esParaCancelar);				
				this.cancelarNuevoDetalleProforma(esParaCancelar);								
			}
			
			this.detalleproforma=new DetalleProforma();
			
			this.inicializarDetalleProforma();
			
			this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleProforma() throws Exception {
		try {
			DetalleProformaConstantesFunciones.inicializarDetalleProforma(this.detalleproforma);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detalleproformaLogic.getDetalleProformas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleProformas(String sAccionBusqueda,List<DetalleProforma> detalleproformasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleProforma"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleProformaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleProformaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleProforma"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Proformas");		
		parameters.put("busquedapor", DetalleProformaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleProforma=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleProformaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleProformaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleProforma=new JRBeanArrayDataSource(DetalleProformaJInternalFrame.TraerDetalleProformaBeans(detalleproformasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleProforma);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleProformaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleProformaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleProformaBean.TraerDetalleProformaBeans(detalleproformasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetalleProformaActionPerformed(null);
					//this.generarExcelReporteDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleProformas(sAccionBusqueda,sTipoArchivoReporte,detalleproformasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleProformas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProforma> detalleproformasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProformas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleProforma("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleProforma detalleproforma : detalleproformasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleProformaConstantesFunciones.generarExcelReporteDataDetalleProforma("NORMAL",row,workbook,detalleproforma,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleProforma(String sTipo,Row row,Workbook workbook) {
		
		DetalleProformaConstantesFunciones.generarExcelReporteHeaderDetalleProforma(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleProformas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProforma> detalleproformasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProformas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleProforma detalleproforma : detalleproformasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleProformaConstantesFunciones.getDetalleProformaDescripcion(detalleproforma));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getproforma_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getempaque_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getestadodetalleproforma_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getcantidad_envases());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_PRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_PRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getprecio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getdescuento_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_LOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_LOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getlote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_COSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_COSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getcosto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_UTILIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_UTILIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getutilidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_AREA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_AREA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getarea());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleProformaConstantesFunciones.LABEL_MEDIDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_MEDIDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleproforma.getmedida());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleProformas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleProforma> detalleproformasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleProforma> detalleproformasRespaldo=null;
		
		classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detalleproformaLogic.setDatosCliente(this.datosCliente);
		this.detalleproformaLogic.setDatosDeep(this.datosDeep);
		this.detalleproformaLogic.setIsConDeep(true);
		
		detalleproformasRespaldo=this.detalleproformaLogic.getDetalleProformas();
		
		this.detalleproformaLogic.setDetalleProformas(detalleproformasParaReportes);	
		this.detalleproformaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detalleproformasParaReportes=this.detalleproformaLogic.getDetalleProformas();
		this.detalleproformaLogic.setDetalleProformas(detalleproformasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleProformas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleProforma("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleProforma detalleproforma : detalleproformasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleProforma("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleProformaConstantesFunciones.generarExcelReporteDataDetalleProforma("NORMAL",row,workbook,detalleproforma,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleProformaConstantesFunciones.getDetalleProformaDescripcion(detalleproforma));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProforma.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetalleProforma() throws Exception {		
		this.startProcessDetalleProforma(true);
	}
	
	public void startProcessDetalleProforma(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleProforma ,this.jPanelParametrosReportesDetalleProforma, this.jScrollPanelDatosDetalleProforma,this.jPanelPaginacionDetalleProforma, this.jScrollPanelDatosEdicionDetalleProforma, this.jPanelAccionesDetalleProforma,this.jPanelAccionesFormularioDetalleProforma,this.jmenuBarDetalleProforma,this.jmenuBarDetalleDetalleProforma,this.jTtoolBarDetalleProforma,this.jTtoolBarDetalleDetalleProforma);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleProforma=this.jTabbedPaneBusquedasDetalleProforma; 
		
		final JPanel jPanelParametrosReportesDetalleProforma=this.jPanelParametrosReportesDetalleProforma;
		//final JScrollPane jScrollPanelDatosDetalleProforma=this.jScrollPanelDatosDetalleProforma;
		final JTable jTableDatosDetalleProforma=this.jTableDatosDetalleProforma;		
		final JPanel jPanelPaginacionDetalleProforma=this.jPanelPaginacionDetalleProforma;
		//final JScrollPane jScrollPanelDatosEdicionDetalleProforma=this.jScrollPanelDatosEdicionDetalleProforma;
		final JPanel jPanelAccionesDetalleProforma=this.jPanelAccionesDetalleProforma;
		
		JPanel jPanelCamposAuxiliarDetalleProforma=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleProforma=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			jPanelCamposAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jPanelCamposDetalleProforma;
			jPanelAccionesFormularioAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jPanelAccionesFormularioDetalleProforma;
		}
		
		final JPanel jPanelCamposDetalleProforma=jPanelCamposAuxiliarDetalleProforma;
		final JPanel jPanelAccionesFormularioDetalleProforma=jPanelAccionesFormularioAuxiliarDetalleProforma;
		
		
		final JMenuBar jmenuBarDetalleProforma=this.jmenuBarDetalleProforma;
		final JToolBar jTtoolBarDetalleProforma=this.jTtoolBarDetalleProforma;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetalleProforma=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleProforma=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			jmenuBarDetalleAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jmenuBarDetalleDetalleProforma;
			jTtoolBarDetalleAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jTtoolBarDetalleDetalleProforma;
		}
		
		final JMenuBar jmenuBarDetalleDetalleProforma=jmenuBarDetalleAuxiliarDetalleProforma;
		final JToolBar jTtoolBarDetalleDetalleProforma=jTtoolBarDetalleAuxiliarDetalleProforma;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleProforma;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleProforma;
			processRunnable.jTableDatos=jTableDatosDetalleProforma;
			processRunnable.jPanelCampos=jPanelCamposDetalleProforma;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleProforma;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleProforma;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleProforma;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleProforma;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleProforma;
			processRunnable.jTtoolBar=jTtoolBarDetalleProforma;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleProforma;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleProforma ,jPanelParametrosReportesDetalleProforma,jTableDatosDetalleProforma, /*jScrollPanelDatosDetalleProforma,*/jPanelCamposDetalleProforma,jPanelPaginacionDetalleProforma, /*jScrollPanelDatosEdicionDetalleProforma,*/ jPanelAccionesDetalleProforma,jPanelAccionesFormularioDetalleProforma,jmenuBarDetalleProforma,jmenuBarDetalleDetalleProforma,jTtoolBarDetalleProforma,jTtoolBarDetalleDetalleProforma);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleProforma ,jPanelParametrosReportesDetalleProforma, jScrollPanelDatosDetalleProforma,jPanelPaginacionDetalleProforma, jScrollPanelDatosEdicionDetalleProforma, jPanelAccionesDetalleProforma,jPanelAccionesFormularioDetalleProforma,jmenuBarDetalleProforma,jmenuBarDetalleDetalleProforma,jTtoolBarDetalleProforma,jTtoolBarDetalleDetalleProforma);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleProforma() {// throws Exception 
		this.finishProcessDetalleProforma(true);
	}
	
	public void finishProcessDetalleProforma(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleProforma ,this.jPanelParametrosReportesDetalleProforma, this.jScrollPanelDatosDetalleProforma,this.jPanelPaginacionDetalleProforma, this.jScrollPanelDatosEdicionDetalleProforma, this.jPanelAccionesDetalleProforma,this.jPanelAccionesFormularioDetalleProforma,this.jmenuBarDetalleProforma,this.jmenuBarDetalleDetalleProforma,this.jTtoolBarDetalleProforma,this.jTtoolBarDetalleDetalleProforma);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleProforma=this.jTabbedPaneBusquedasDetalleProforma; 
		
		final JPanel jPanelParametrosReportesDetalleProforma=this.jPanelParametrosReportesDetalleProforma;
		//final JScrollPane jScrollPanelDatosDetalleProforma=this.jScrollPanelDatosDetalleProforma;
		final JTable jTableDatosDetalleProforma=this.jTableDatosDetalleProforma;		
		final JPanel jPanelPaginacionDetalleProforma=this.jPanelPaginacionDetalleProforma;
		//final JScrollPane jScrollPanelDatosEdicionDetalleProforma=this.jScrollPanelDatosEdicionDetalleProforma;
		final JPanel jPanelAccionesDetalleProforma=this.jPanelAccionesDetalleProforma;
		
		JPanel jPanelCamposAuxiliarDetalleProforma=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleProforma=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			jPanelCamposAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jPanelCamposDetalleProforma;
			jPanelAccionesFormularioAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jPanelAccionesFormularioDetalleProforma;
		}
		
		final JPanel jPanelCamposDetalleProforma=jPanelCamposAuxiliarDetalleProforma;
		final JPanel jPanelAccionesFormularioDetalleProforma=jPanelAccionesFormularioAuxiliarDetalleProforma;
		
		
		final JMenuBar jmenuBarDetalleProforma=this.jmenuBarDetalleProforma;		
		final JToolBar jTtoolBarDetalleProforma=this.jTtoolBarDetalleProforma;
				
		JMenuBar jmenuBarDetalleAuxiliarDetalleProforma=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleProforma=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			jmenuBarDetalleAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jmenuBarDetalleDetalleProforma;
			jTtoolBarDetalleAuxiliarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jTtoolBarDetalleDetalleProforma;		
		}
		
		final JMenuBar jmenuBarDetalleDetalleProforma=jmenuBarDetalleAuxiliarDetalleProforma;
		final JToolBar jTtoolBarDetalleDetalleProforma=jTtoolBarDetalleAuxiliarDetalleProforma;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleProforma;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleProforma;
			processRunnable.jTableDatos=jTableDatosDetalleProforma;
			processRunnable.jPanelCampos=jPanelCamposDetalleProforma;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleProforma;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleProforma;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleProforma;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleProforma;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleProforma;
			processRunnable.jTtoolBar=jTtoolBarDetalleProforma;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleProforma;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleProforma ,jPanelParametrosReportesDetalleProforma, jTableDatosDetalleProforma,/*jScrollPanelDatosDetalleProforma,*/jPanelCamposDetalleProforma,jPanelPaginacionDetalleProforma, /*jScrollPanelDatosEdicionDetalleProforma,*/ jPanelAccionesDetalleProforma,jPanelAccionesFormularioDetalleProforma,jmenuBarDetalleProforma,jmenuBarDetalleDetalleProforma,jTtoolBarDetalleProforma,jTtoolBarDetalleDetalleProforma));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleProforma(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleProforma(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleProforma(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleProforma(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleProforma,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleProforma,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleProforma(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleProforma,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleProforma,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detalleproformaConstantesFunciones.getsFinalQueryDetalleProforma();
		String  finalQueryPaginacionTodos=this.detalleproformaConstantesFunciones.getsFinalQueryDetalleProforma();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleProformaConstantesFunciones.getArrayColumnasGlobalesNoDetalleProforma(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleProformaConstantesFunciones.getArrayColumnasGlobalesDetalleProforma(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleProformaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detalleproformasEliminados= new ArrayList<DetalleProforma>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleProforma();
		
				///*DetalleProformaSessionBean*/this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			
			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleProformaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleProformaConstantesFunciones.getClassesForeignKeysOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detalleproforma."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detalleproformasAux= new ArrayList<DetalleProforma>();
			
				
			detalleproformaLogic.setDatosCliente(this.datosCliente);
			detalleproformaLogic.setDatosDeep(this.datosDeep);
			detalleproformaLogic.setIsConDeep(true);
			
			
			detalleproformaLogic.getDetalleProformaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detalleproformaLogic.getTodosDetalleProformas(finalQueryGlobal,pagination);
					
					//detalleproformaLogic.getTodosDetalleProformasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detalleproformaLogic.getDetalleProformas()==null|| detalleproformaLogic.getDetalleProformas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleproformasAux= new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux= new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleproformaLogic.getTodosDetalleProformas(finalQueryGlobal+"",this.pagination);												
							
							//detalleproformaLogic.getTodosDetalleProformasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleProformas("Todos",detalleproformaLogic.getDetalleProformas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());					
							detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleProforma=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleProforma=this.idActual;
				
				} else if(this.idDetalleProformaActual!=null && this.idDetalleProformaActual!=0L) {
					idDetalleProforma=idDetalleProformaActual;
				}
				
					
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndicePorId(idDetalleProforma);
				
				this.detalleproformas=new ArrayList<DetalleProforma>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detalleproformaLogic.getEntity(idDetalleProforma);
					
					//detalleproformaLogic.getEntityWithConnection(idDetalleProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
					detalleproformaLogic.getDetalleProformas().add(detalleproformaLogic.getDetalleProforma());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproformas=new ArrayList<DetalleProforma>();
					this.detalleproformas.add(detalleproforma);
				}
				
				if(detalleproformaLogic.getDetalleProforma()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdBodega",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdBodega",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdCentroCosto",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdCentroCosto",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdEjercicio",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdEjercicio",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpaque")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpaque(id_empaqueFK_IdEmpaque);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdEmpaque(finalQueryGlobal,pagination,id_empaqueFK_IdEmpaque);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpaque(id_empaqueFK_IdEmpaque);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpaque(id_empaqueFK_IdEmpaque);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdEmpaque(finalQueryGlobal,pagination,id_empaqueFK_IdEmpaque);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpaque(id_empaqueFK_IdEmpaque);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpaque(id_empaqueFK_IdEmpaque);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdEmpaque",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdEmpaque",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdEmpresa",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdEmpresa",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoDetalleProforma")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleProforma(id_estado_detalle_proformaFK_IdEstadoDetalleProforma);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdEstadoDetalleProforma(finalQueryGlobal,pagination,id_estado_detalle_proformaFK_IdEstadoDetalleProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleProforma(id_estado_detalle_proformaFK_IdEstadoDetalleProforma);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleProforma(id_estado_detalle_proformaFK_IdEstadoDetalleProforma);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdEstadoDetalleProforma(finalQueryGlobal,pagination,id_estado_detalle_proformaFK_IdEstadoDetalleProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleProforma(id_estado_detalle_proformaFK_IdEstadoDetalleProforma);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleProforma(id_estado_detalle_proformaFK_IdEstadoDetalleProforma);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdEstadoDetalleProforma",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdEstadoDetalleProforma",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdPeriodo",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdPeriodo",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdProducto",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdProducto",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProforma")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProforma(id_proformaFK_IdProforma);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdProforma(finalQueryGlobal,pagination,id_proformaFK_IdProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProforma(id_proformaFK_IdProforma);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProforma(id_proformaFK_IdProforma);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdProforma(finalQueryGlobal,pagination,id_proformaFK_IdProforma);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProforma(id_proformaFK_IdProforma);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdProforma(id_proformaFK_IdProforma);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdProforma",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdProforma",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdSucursal",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdSucursal",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleproformaLogic.getDetalleProformasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleproformaLogic.getDetalleProformas()==null||detalleproformaLogic.getDetalleProformas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleproformas==null|| detalleproformas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformasAux=new ArrayList<DetalleProforma>();
						detalleproformasAux.addAll(detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformasAux=new ArrayList<DetalleProforma>();
							detalleproformasAux.addAll(detalleproformas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleproformaLogic.getDetalleProformasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleProformaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleProformas("FK_IdUnidad",detalleproformaLogic.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleProformas("FK_IdUnidad",detalleproformas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaLogic.setDetalleProformas(new ArrayList<DetalleProforma>());
						detalleproformaLogic.getDetalleProformas().addAll(detalleproformasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformas=new ArrayList<DetalleProforma>();
							detalleproformas.addAll(detalleproformasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleProforma();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleProforma();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleproformaLogic.getDetalleProformas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleproformas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleproformaLogic.getDetalleProformas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleproformas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleProforma detalleproforma) {
		Boolean permite=true;
		
		if(this.detalleproforma.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleProformaConstantesFunciones.getOrderByListaDetalleProforma();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleProformaConstantesFunciones.getOrderByListaDetalleProforma();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProforma detalleproforma:detalleproformaLogic.getDetalleProformas()) {
				if(detalleproforma.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproformaTotales=detalleproforma;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProforma detalleproforma:this.detalleproformas) {
				if(detalleproforma.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproformaTotales=detalleproforma;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detalleproformaAux=new DetalleProforma();
			this.detalleproformaAux.setsType(Constantes2.S_TOTALES);
			this.detalleproformaAux.setIsNew(false);
			this.detalleproformaAux.setIsChanged(false);
			this.detalleproformaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleProformaConstantesFunciones.TotalizarValoresFilaDetalleProforma(this.detalleproformaLogic.getDetalleProformas(),this.detalleproformaAux);
				
				this.detalleproformaLogic.getDetalleProformas().add(this.detalleproformaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleProformaConstantesFunciones.TotalizarValoresFilaDetalleProforma(this.detalleproformas,this.detalleproformaAux);
				
				this.detalleproformas.add(this.detalleproformaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detalleproformaTotales=new DetalleProforma();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleproformaLogic.getDetalleProformas().remove(detalleproformaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleproformas.remove(detalleproformaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detalleproformaTotales=new DetalleProforma();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleProforma detalleproforma:detalleproformaLogic.getDetalleProformas()) {
				if(detalleproforma.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproformaTotales=detalleproforma;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleProformaConstantesFunciones.TotalizarValoresFilaDetalleProforma(this.detalleproformaLogic.getDetalleProformas(),detalleproformaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleProforma detalleproforma:this.detalleproformas) {
				if(detalleproforma.getsType().equals(Constantes2.S_TOTALES)) {
					detalleproformaTotales=detalleproforma;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleProformaConstantesFunciones.TotalizarValoresFilaDetalleProforma(this.detalleproformas,detalleproformaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetalleProformasFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdEmpaque()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpaque";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdEstadoDetalleProforma()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoDetalleProforma";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdProforma()throws Exception {
		try {
			sAccionBusqueda="FK_IdProforma";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleProformasFK_IdUnidad()throws Exception {
		try {
			sAccionBusqueda="FK_IdUnidad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetalleProformasFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdEmpaque(String sFinalQuery,Long id_empaque)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdEmpaque(sFinalQuery,this.pagination,id_empaque);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdEstadoDetalleProforma(String sFinalQuery,Long id_estado_detalle_proforma)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdEstadoDetalleProforma(sFinalQuery,this.pagination,id_estado_detalle_proforma);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdProforma(String sFinalQuery,Long id_proforma)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdProforma(sFinalQuery,this.pagination,id_proforma);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleProformasFK_IdUnidad(String sFinalQuery,Long id_unidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLogic.getDetalleProformasFK_IdUnidad(sFinalQuery,this.pagination,id_unidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleProforma() {
		this.isPermisoTodoDetalleProforma=false;
		this.isPermisoNuevoDetalleProforma=false;
		this.isPermisoActualizarDetalleProforma=false;
		this.isPermisoActualizarOriginalDetalleProforma=false;
		this.isPermisoEliminarDetalleProforma=false;
		this.isPermisoGuardarCambiosDetalleProforma=false;
		this.isPermisoConsultaDetalleProforma=false;
		this.isPermisoBusquedaDetalleProforma=false;
		this.isPermisoReporteDetalleProforma=false;		
		this.isPermisoOrdenDetalleProforma=false;		
		this.isPermisoPaginacionMedioDetalleProforma=false;		
		this.isPermisoPaginacionAltoDetalleProforma=false;
		this.isPermisoPaginacionTodoDetalleProforma=false;
		this.isPermisoCopiarDetalleProforma=false;		
		this.isPermisoVerFormDetalleProforma=false;		
		this.isPermisoDuplicarDetalleProforma=false;		
		this.isPermisoOrdenDetalleProforma=false;		
	}
	
	public void setPermisosUsuarioDetalleProforma(Boolean isPermiso) {
		this.isPermisoTodoDetalleProforma=isPermiso;
		this.isPermisoNuevoDetalleProforma=isPermiso;
		this.isPermisoActualizarDetalleProforma=isPermiso;
		this.isPermisoActualizarOriginalDetalleProforma=isPermiso;
		this.isPermisoEliminarDetalleProforma=isPermiso;
		this.isPermisoGuardarCambiosDetalleProforma=isPermiso;
		this.isPermisoConsultaDetalleProforma=isPermiso;
		this.isPermisoBusquedaDetalleProforma=isPermiso;
		this.isPermisoReporteDetalleProforma=isPermiso;
		this.isPermisoOrdenDetalleProforma=isPermiso;		
		this.isPermisoPaginacionMedioDetalleProforma=isPermiso;		
		this.isPermisoPaginacionAltoDetalleProforma=isPermiso;		
		this.isPermisoPaginacionTodoDetalleProforma=isPermiso;		
		this.isPermisoCopiarDetalleProforma=isPermiso;		
		this.isPermisoVerFormDetalleProforma=isPermiso;		
		this.isPermisoDuplicarDetalleProforma=isPermiso;
		this.isPermisoOrdenDetalleProforma=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleProforma(Boolean isPermiso) {
		//this.isPermisoTodoDetalleProforma=isPermiso;
		this.isPermisoNuevoDetalleProforma=isPermiso;
		this.isPermisoActualizarDetalleProforma=isPermiso;
		this.isPermisoActualizarOriginalDetalleProforma=isPermiso;
		this.isPermisoEliminarDetalleProforma=isPermiso;
		this.isPermisoGuardarCambiosDetalleProforma=isPermiso;
		//this.isPermisoConsultaDetalleProforma=isPermiso;
		//this.isPermisoBusquedaDetalleProforma=isPermiso;
		//this.isPermisoReporteDetalleProforma=isPermiso;
		//this.isPermisoOrdenDetalleProforma=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleProforma=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleProforma=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleProforma=isPermiso;		
		//this.isPermisoCopiarDetalleProforma=isPermiso;		
		//this.isPermisoDuplicarDetalleProforma=isPermiso;
		//this.isPermisoOrdenDetalleProforma=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleProformaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleProformaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleProforma(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleProformaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleProformaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleProformaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleProformaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleProforma() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleProformaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleProformaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleProforma=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleProforma=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleProforma=this.isPermisoActualizarDetalleProforma;
			this.isPermisoEliminarDetalleProforma=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleProforma=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleProforma=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleProforma=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleProforma=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleProforma=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleProforma=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleProforma=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleProforma=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleProforma=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleProforma=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleProforma=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleProforma=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleProforma=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleProforma.setToolTipText(this.jTableDatosDetalleProforma.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleProforma(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleProforma(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleProformaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleProformaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleProforma() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleProformaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.proformasForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.empaquesForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.estadodetalleproformasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleProformaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleProformaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleProformaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProformaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpaqueListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoDetalleProformaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProformaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.proformasForeignKey==null||this.proformasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProformaConstantesFunciones.getArrayColumnasGlobalesProforma(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProformaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProformaConstantesFunciones.SFINALQUERY;

				this.cargarCombosProformasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpaqueListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empaquesForeignKey==null||this.empaquesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpaqueConstantesFunciones.getArrayColumnasGlobalesEmpaque(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpaqueConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpaqueConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpaquesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleProformaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadodetalleproformasForeignKey==null||this.estadodetalleproformasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoDetalleProformaConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleProforma(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleProformaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoDetalleProformaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoDetalleProformasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleProformaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleProformaParameterReturnGeneral detalleproformaReturnGeneral=new DetalleProformaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_empresaDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_empresaDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_sucursalDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_sucursalDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_ejercicioDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_ejercicioDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_periodoDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_periodoDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_anioDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_anioDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_mesDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_mesDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalProforma="";

				if(((this.proformasForeignKey==null||this.proformasForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_proformaDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_proformaDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProforma()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProformaConstantesFunciones.getArrayColumnasGlobalesProforma(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProforma=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProformaConstantesFunciones.TABLENAME);

						finalQueryGlobalProforma=Funciones.GetFinalQueryAppend(finalQueryGlobalProforma, "");
						finalQueryGlobalProforma+=ProformaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProformasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProforma=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidProformaActual();
					}
				} else {
					finalQueryGlobalProforma="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_bodegaDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_bodegaDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_productoDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_productoDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_unidadDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_unidadDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalEmpaque="";

				if(((this.empaquesForeignKey==null||this.empaquesForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_empaqueDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_empaqueDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpaque()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpaqueConstantesFunciones.getArrayColumnasGlobalesEmpaque(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpaque=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpaqueConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpaque=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpaque, "");
						finalQueryGlobalEmpaque+=EmpaqueConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpaquesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpaque=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidEmpaqueActual();
					}
				} else {
					finalQueryGlobalEmpaque="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_centro_costoDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_centro_costoDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalEstadoDetalleProforma="";

				if(((this.estadodetalleproformasForeignKey==null||this.estadodetalleproformasForeignKey.size()<=0) && this.detalleproformaConstantesFunciones.cargarid_estado_detalle_proformaDetalleProforma)
					 || (this.esRecargarFks && this.detalleproformaConstantesFunciones.cargarid_estado_detalle_proformaDetalleProforma)) {

					if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleProforma()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoDetalleProformaConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleProforma(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoDetalleProforma=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleProformaConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoDetalleProforma=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoDetalleProforma, "");
						finalQueryGlobalEstadoDetalleProforma+=EstadoDetalleProformaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoDetalleProformasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoDetalleProforma=" WHERE " + ConstantesSql.ID + "="+detalleproformaSessionBean.getlidEstadoDetalleProformaActual();
					}
				} else {
					finalQueryGlobalEstadoDetalleProforma="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detalleproformaReturnGeneral=detalleproformaLogic.cargarCombosLoteForeignKeyDetalleProforma(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalProforma,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalEmpaque,finalQueryGlobalCentroCosto,finalQueryGlobalEstadoDetalleProforma);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detalleproformaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detalleproformaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detalleproformaReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detalleproformaReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detalleproformaReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detalleproformaReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalProforma.equals("NONE")) {
				this.proformasForeignKey=detalleproformaReturnGeneral.getproformasForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detalleproformaReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detalleproformaReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detalleproformaReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalEmpaque.equals("NONE")) {
				this.empaquesForeignKey=detalleproformaReturnGeneral.getempaquesForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detalleproformaReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalEstadoDetalleProforma.equals("NONE")) {
				this.estadodetalleproformasForeignKey=detalleproformaReturnGeneral.getestadodetalleproformasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleProforma()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyProforma();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyEmpaque();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyEstadoDetalleProforma();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.detalleproformaSessionBean==null) {
				this.detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProforma()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProforma()) {
				Proforma proforma=new Proforma();
				ProformaConstantesFunciones.setProformaDescripcion(proforma,Constantes.SMENSAJE_ESCOJA_OPCION);
				proforma.setId(null);

				if(!ProformaConstantesFunciones.ExisteEnLista(this.proformasForeignKey,proforma,true)) {

					this.proformasForeignKey.add(0,proforma);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpaque()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEmpaque()) {
				Empaque empaque=new Empaque();
				EmpaqueConstantesFunciones.setEmpaqueDescripcion(empaque,Constantes.SMENSAJE_ESCOJA_OPCION);
				empaque.setId(null);

				if(!EmpaqueConstantesFunciones.ExisteEnLista(this.empaquesForeignKey,empaque,true)) {

					this.empaquesForeignKey.add(0,empaque);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoDetalleProforma()throws Exception {
		try {

			if(!this.detalleproformaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleProforma()) {
				EstadoDetalleProforma estadodetalleproforma=new EstadoDetalleProforma();
				EstadoDetalleProformaConstantesFunciones.setEstadoDetalleProformaDescripcion(estadodetalleproforma,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadodetalleproforma.setId(null);

				if(!EstadoDetalleProformaConstantesFunciones.ExisteEnLista(this.estadodetalleproformasForeignKey,estadodetalleproforma,true)) {

					this.estadodetalleproformasForeignKey.add(0,estadodetalleproforma);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleProforma()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleProforma(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detalleproforma.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleProforma"));
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleProforma"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleProforma"));
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleProforma"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleProforma"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleProforma"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleProforma"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleProforma"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleProforma"));
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleProforma"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleProforma"));
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleProforma"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleProforma.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleProforma"));

						this.jComboBoxid_productoFK_IdProductoDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleProforma"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleProforma.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleProforma"));

						this.jComboBoxid_productoFK_IdProductoDetalleProforma.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleProforma"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleProforma()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProforma();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleProforma(DetalleProforma detalleproforma)throws Exception {	
		try {
			
			this.setActualProformaForeignKey(detalleproforma.getid_proforma(),false,"Formulario");
			this.setActualBodegaForeignKey(detalleproforma.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detalleproforma.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detalleproforma.getid_unidad(),false,"Formulario");
			this.setActualEmpaqueForeignKey(detalleproforma.getid_empaque(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detalleproforma.getid_centro_costo(),false,"Formulario");
			this.setActualEstadoDetalleProformaForeignKey(detalleproforma.getid_estado_detalle_proforma(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleProforma(DetalleProforma detalleproforma,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detalleproforma.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleProforma")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detalleproforma.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleProforma()throws Exception {	
		try {
			
			this.setActualProformaForeignKey(this.detalleproformaConstantesFunciones.getid_proforma(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detalleproformaConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detalleproformaConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detalleproformaConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualEmpaqueForeignKey(this.detalleproformaConstantesFunciones.getid_empaque(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detalleproformaConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualEstadoDetalleProformaForeignKey(this.detalleproformaConstantesFunciones.getid_estado_detalle_proforma(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleProforma()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleProforma()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleProforma()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleProforma()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleProforma()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameProformasForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameEmpaquesForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameEstadoDetalleProformasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleProforma(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProformasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpaquesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoDetalleProformasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleProforma()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	















	public void recargarFormDetalleProformaBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleProformaid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleProformaProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleProformaid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}








	
	



	public void recargarFormDetalleProformaid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detalleproforma,jComboBoxGenericoProducto);
			}

			if(this.detalleproforma.getid_bodega()!=null && this.detalleproforma.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detalleproforma.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detalleproforma.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleProformaid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detalleproforma,jComboBoxGenericoUnidad);
			}

			if(this.detalleproforma.getid_producto()!=null && this.detalleproforma.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detalleproforma.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detalleproforma.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleProformaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleProformaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleProformaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detalleproformaSessionBean=new DetalleProformaSessionBean(); 
		this.detalleproformaConstantesFunciones=new DetalleProformaConstantesFunciones(); 
		this.detalleproformaBean=new DetalleProforma();//(this.detalleproformaConstantesFunciones); 		
		this.detalleproformaReturnGeneral=new DetalleProformaParameterReturnGeneral(); 
		
		this.detalleproformaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detalleproformaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleProformaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleProformaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleProformaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleProforma(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detalleproformaConstantesFunciones=new DetalleProformaConstantesFunciones(); 
			this.detalleproformaBean=new DetalleProforma();//this.detalleproformaConstantesFunciones); 			
			this.detalleproformaReturnGeneral=new DetalleProformaParameterReturnGeneral(); 
		
			DetalleProformaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Proforma Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detalleproforma=new DetalleProforma();
			this.detalleproformas = new ArrayList<DetalleProforma>();
			this.detalleproformasAux = new ArrayList<DetalleProforma>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic=new DetalleProformaLogic();
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			//this.detalleproformaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detalleproformaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleProforma);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleProforma);	
					}
					
					if(this.jInternalFrameImportacionDetalleProforma!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleProforma);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetalleProforma!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleProforma);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleProforma);
				this.jInternalFrameDetalleFormDetalleProforma.setVisible(false);
				this.jInternalFrameDetalleFormDetalleProforma.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleProforma);
					this.jInternalFrameReporteDinamicoDetalleProforma.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleProforma.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleProforma!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleProforma);
					this.jInternalFrameImportacionDetalleProforma.setVisible(false);
					this.jInternalFrameImportacionDetalleProforma.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetalleProforma!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleProforma);
					this.jInternalFrameOrderByDetalleProforma.setVisible(false);
					this.jInternalFrameOrderByDetalleProforma.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleProformaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleProformaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detalleproformaReturnGeneral=new DetalleProformaParameterReturnGeneral();
			
			this.detalleproformaParameterGeneral=new DetalleProformaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detalleproformaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleProformaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleProformaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleproformaSessionBean.getEsGuardarRelacionado(),this.detalleproformaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleProformaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleproformaSessionBean.getEsGuardarRelacionado(),this.detalleproformaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaDuplicarDetalleProforma=true;
			this.isVisibilidadCeldaCopiarDetalleProforma=true;
			this.isVisibilidadCeldaVerFormDetalleProforma=true;
			this.isVisibilidadCeldaOrdenDetalleProforma=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=false;
			this.isVisibilidadCeldaGuardarDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpaque=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoDetalleProforma=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdProforma=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleProforma();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleProforma(false);
			
			this.setPermisosUsuarioDetalleProforma();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproformaSessionBean.getEsGuardarRelacionado() 
				|| (this.detalleproformaSessionBean.getEsGuardarRelacionado() && this.detalleproformaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleProformaClasesRelacionadas();
			}
			
			if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleProformaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleProforma();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleProforma();
			}
			
			if(!this.isPermisoBusquedaDetalleProforma) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleProforma,this.isPermisoPaginacionMedioDetalleProforma,this.isPermisoPaginacionTodoDetalleProforma);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleProformaConstantesFunciones.getTiposSeleccionarDetalleProforma());
				
				this.tiposColumnasSelect=DetalleProformaConstantesFunciones.getTiposSeleccionarDetalleProforma(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleProforma();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleProforma(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleProforma(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProforma() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.proformaLogic=new ProformaLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.empaqueLogic=new EmpaqueLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.estadodetalleproformaLogic=new EstadoDetalleProformaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detalleproformaImplementable= (DetalleProformaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleProformaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detalleproformaImplementableHome= (DetalleProformaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleProformaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detalleproformas= new ArrayList<DetalleProforma>();
			this.detalleproformasEliminados= new ArrayList<DetalleProforma>();
						
			this.isEsNuevoDetalleProforma=false;
			this.esParaAccionDesdeFormularioDetalleProforma=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.proformasForeignKey=new ArrayList<Proforma>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.empaquesForeignKey=new ArrayList<Empaque>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.estadodetalleproformasForeignKey=new ArrayList<EstadoDetalleProforma>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleProforma(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleProforma();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleProformaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleProformaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleProforma("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleProforma(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleProforma();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleProforma();
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleProforma.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleProforma(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleProforma: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleProforma() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleProforma")) {
				iIndex=this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleProforma();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleProforma(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleProforma(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleProforma(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleProformaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleProforma();
		
		this.cargarCombosFrameForeignKeyDetalleProforma();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleProforma();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleProforma();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProforma(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProformaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProforma();
				this.cargarCombosFrameProformasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaProforma(this.proformasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpaque(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpaqueListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpaque();
				this.cargarCombosFrameEmpaquesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaEmpaque(this.empaquesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleProforma(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoDetalleProformaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoDetalleProforma();
				this.cargarCombosFrameEstadoDetalleProformasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaEstadoDetalleProforma(this.estadodetalleproformasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleProformaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			
			if(jTableDatosDetalleProforma.getRowCount()>=1) {
				jTableDatosDetalleProforma.removeRowSelectionInterval(0, jTableDatosDetalleProforma.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleProforma=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleProforma(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleProforma(true);			
			//this.detalleproforma=new DetalleProforma();
			//this.detalleproforma.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProforma(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProforma() ;
			
			if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProforma(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detalleproforma);	
			this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);				
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleProforma: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleProformaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleProforma.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleProforma.getSelectedRows().length;			
			}
			
			detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleProforma--;			
				//DetalleProforma detalleproformaAux= new DetalleProforma();			
				//detalleproformaAux.setId(this.iIdNuevoDetalleProforma);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleProforma detalleproformaOrigen=new DetalleProforma();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleProforma detalleproformaOrigen : detalleproformasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detalleproformaOrigen =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleproformaOrigen =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleProforma();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detalleproforma.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleProforma(detalleproformaOrigen,this.detalleproforma,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleproformaLogic.getDetalleProformas().add(this.detalleproformaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleproformas.add(this.detalleproformaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleProforma(false);
				
				this.jTableDatosDetalleProforma.setRowSelectionInterval(this.getIndiceNuevoDetalleProforma(), this.getIndiceNuevoDetalleProforma());
				
				int iLastRow =  this.jTableDatosDetalleProforma.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleProforma.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleProforma.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProforma(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();									
		
			DetalleProforma detalleproformaOrigen=new DetalleProforma();
			DetalleProforma detalleproformaDestino=new DetalleProforma();
				
			detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleProforma.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detalleproformasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleProforma.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaOrigen =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleproformaOrigen =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleproformaDestino =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleproformaDestino =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detalleproformaOrigen =detalleproformasSeleccionados.get(0);
				detalleproformaDestino =detalleproformasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleProforma(detalleproformaOrigen,detalleproformaDestino,true,false);
				
				detalleproformaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleproformaDestino,detalleproformaLogic.getDetalleProformas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleproformaDestino,detalleproformas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleProforma(false);
				
				//this.jTableDatosDetalleProforma.setRowSelectionInterval(this.getIndiceNuevoDetalleProforma(), this.getIndiceNuevoDetalleProforma());
				
				int iLastRow =  this.jTableDatosDetalleProforma.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleProforma.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleProforma.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProforma(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleProforma.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleProforma.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetalleProforma.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetalleProforma.setVisible(!isVisible);
			this.jPanelPaginacionDetalleProforma.setVisible(!isVisible);
			this.jPanelAccionesDetalleProforma.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleProforma();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetalleProforma();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetalleProforma();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetalleProforma();
			
			this.abrirFrameOrderByDetalleProforma();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetalleProforma();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleProforma(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleProforma);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleProforma.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleProforma.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleProforma.setSize(this.jInternalFrameDetalleFormDetalleProforma.iWidthFormulario,this.jInternalFrameDetalleFormDetalleProforma.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleProforma.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleProforma.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleProforma.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleProforma.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleProforma.jContentPaneDetalleDetalleProforma.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleProforma.jContentPaneDetalleDetalleProforma.getWidth(),DetalleProformaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleProforma.jContentPaneDetalleDetalleProforma.getWidth(),DetalleProformaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleProforma.jContentPaneDetalleDetalleProforma.getWidth(),DetalleProformaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleProforma.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleProforma.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetalleProforma() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleProforma==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleProforma=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleProforma,false,this);
				} else {
					this.jInternalFrameOrderByDetalleProforma=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleProforma,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleProforma);
				this.jInternalFrameOrderByDetalleProforma.setVisible(false);
				this.jInternalFrameOrderByDetalleProforma.setSelected(false);
				
				this.jInternalFrameOrderByDetalleProforma.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleProforma"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleProforma();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetalleProforma() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleProforma==null) {
				
				this.jInternalFrameImportacionDetalleProforma=new ImportacionJInternalFrame(DetalleProformaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleProforma);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleProforma);
				this.jInternalFrameImportacionDetalleProforma.setVisible(false);
				this.jInternalFrameImportacionDetalleProforma.setSelected(false);


				this.jInternalFrameImportacionDetalleProforma.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleProforma"));
				this.jInternalFrameImportacionDetalleProforma.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleProforma"));
				this.jInternalFrameImportacionDetalleProforma.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleProforma"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetalleProforma() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleProforma==null) {
				this.jInternalFrameReporteDinamicoDetalleProforma=new ReporteDinamicoJInternalFrame(DetalleProformaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleProforma);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleProforma);
				this.jInternalFrameReporteDinamicoDetalleProforma.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleProforma.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProforma"));
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProforma"));
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProforma"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProforma();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleDetalleProforma() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleProforma);
			
	       	this.jInternalFrameDetalleFormDetalleProforma.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleProforma.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleProforma.dispose();
			//this.jInternalFrameDetalleFormDetalleProforma=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetalleProforma() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleProforma.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleProforma.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetalleProforma() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleProforma.setVisible(true);
	        this.jInternalFrameImportacionDetalleProforma.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDetalleProforma() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleProforma.setVisible(true);
	        this.jInternalFrameOrderByDetalleProforma.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetalleProforma() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleProforma.setVisible(false);
	        this.jInternalFrameOrderByDetalleProforma.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetalleProforma() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleProforma.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleProforma.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetalleProforma() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleProforma.setVisible(false);
	        this.jInternalFrameImportacionDetalleProforma.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleProforma.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleProforma(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleProforma(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleProforma(true);
			//this.isEsNuevoDetalleProforma=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleProforma("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProforma(false) ;
			
			if(detalleproformaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProforma(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProforma(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleProformaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleProforma(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleProforma(true);
			//this.isEsNuevoDetalleProforma=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detalleproforma.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleProforma("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleProforma(false) ;
			
			if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleProforma(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProforma(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detalleproformaConstantesFunciones.cargarid_productoDetalleProforma) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleProforma(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProforma(List<Proforma> proformasForeignKey)throws Exception{
		TableColumn tableColumnProforma=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDPROFORMA));
		TableCellEditor tableCellEditorProforma =tableColumnProforma.getCellEditor();

		ProformaTableCell proformaTableCellFk=(ProformaTableCell)tableCellEditorProforma;

		if(proformaTableCellFk!=null) {
			proformaTableCellFk.setproformasForeignKey(proformasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//proformaTableCellFk.setRowActual(intSelectedRow);
			//proformaTableCellFk.setproformasForeignKeyActual(proformasForeignKey);
		//}


		if(proformaTableCellFk!=null) {
			proformaTableCellFk.RecargarProformasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpaque(List<Empaque> empaquesForeignKey)throws Exception{
		TableColumn tableColumnEmpaque=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE));
		TableCellEditor tableCellEditorEmpaque =tableColumnEmpaque.getCellEditor();

		EmpaqueTableCell empaqueTableCellFk=(EmpaqueTableCell)tableCellEditorEmpaque;

		if(empaqueTableCellFk!=null) {
			empaqueTableCellFk.setempaquesForeignKey(empaquesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empaqueTableCellFk.setRowActual(intSelectedRow);
			//empaqueTableCellFk.setempaquesForeignKeyActual(empaquesForeignKey);
		//}


		if(empaqueTableCellFk!=null) {
			empaqueTableCellFk.RecargarEmpaquesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoDetalleProforma(List<EstadoDetalleProforma> estadodetalleproformasForeignKey)throws Exception{
		TableColumn tableColumnEstadoDetalleProforma=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA));
		TableCellEditor tableCellEditorEstadoDetalleProforma =tableColumnEstadoDetalleProforma.getCellEditor();

		EstadoDetalleProformaTableCell estadodetalleproformaTableCellFk=(EstadoDetalleProformaTableCell)tableCellEditorEstadoDetalleProforma;

		if(estadodetalleproformaTableCellFk!=null) {
			estadodetalleproformaTableCellFk.setestadodetalleproformasForeignKey(estadodetalleproformasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadodetalleproformaTableCellFk.setRowActual(intSelectedRow);
			//estadodetalleproformaTableCellFk.setestadodetalleproformasForeignKeyActual(estadodetalleproformasForeignKey);
		//}


		if(estadodetalleproformaTableCellFk!=null) {
			estadodetalleproformaTableCellFk.RecargarEstadoDetalleProformasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleProforma(false);
			
			//if(!this.isEsNuevoDetalleProforma) {								
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				
			}
			
			if(this.permiteMantenimiento(this.detalleproforma)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleProforma=true;
					this.inicializarActualizarBindingTablaDetalleProforma(false);
					this.isEsNuevoDetalleProforma=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleProforma=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleProforma=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleProforma(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProforma(false);
				
				this.habilitarDeshabilitarControlesDetalleProforma(false);
			
												
				
				if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleProforma();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleProformaActionPerformed(evt,detalleproformaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleProforma(this.detalleproforma,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detalleproformaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detalleproforma.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				this.detalleproforma.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				this.detalleproforma.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detalleproforma)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleProformaModel) this.jTableDatosDetalleProforma.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleProforma=true;
				this.inicializarActualizarBindingTablaDetalleProforma(false);
				this.isEsNuevoDetalleProforma=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleProforma(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProforma(false);
				
				this.habilitarDeshabilitarControlesDetalleProforma(false);
				
				
				
				if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleProforma();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleProformaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleProforma.getRowCount()>=1) {
				jTableDatosDetalleProforma.removeRowSelectionInterval(0, jTableDatosDetalleProforma.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleProforma(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleProforma(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleProforma(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleProforma(false) ;
			
			this.isEsNuevoDetalleProforma=false;
			
			if(DetalleProformaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleProforma();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleProforma(false);
				
				//SI ES MANUAL
				if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleProforma();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleProforma--;			
			//DetalleProforma detalleproformaAux= new DetalleProforma();			
			//detalleproformaAux.setId(this.iIdNuevoDetalleProforma);
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleProforma();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
			
			this.detalleproforma.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detalleproformaLogic.getDetalleProformas().add(this.detalleproformaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detalleproformas.add(this.detalleproformaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleProforma(false);
			
			this.jTableDatosDetalleProforma.setRowSelectionInterval(this.getIndiceNuevoDetalleProforma(), this.getIndiceNuevoDetalleProforma());
			
			int iLastRow =  this.jTableDatosDetalleProforma.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleProforma.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleProforma.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleProforma(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProforma(false);
			
			//SI ES MANUAL
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProforma();
			}
			
			//this.abrirFrameTreeDetalleProforma();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle ProformaS ?", "MANTENIMIENTO DE Detalle Proforma", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleProforma.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleProforma();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detalleproformaReturnGeneral=detalleproformaLogic.procesarImportacionDetalleProformasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detalleproformaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleProformaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleProforma.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleProforma.setFileImportacion(this.jInternalFrameImportacionDetalleProforma.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleProforma.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleProforma.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleProforma.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleProforma.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		

		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleProformaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleProformaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleProformaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPROFORMA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Proforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Proforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Proforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Proforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empaque_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empaque_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empaque_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empaque_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoDetalleProforma_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoDetalleProforma_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoDetalleProforma_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoDetalleProforma_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadEnvases_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadEnvases_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadEnvases_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadEnvases_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_PRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_LOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_te_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_te_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_te_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_te_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_COSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_UTILIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ilidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ilidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ilidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ilidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_AREA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ea_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ea_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ea_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ea_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleProformaConstantesFunciones.LABEL_MEDIDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_dida_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_dida_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_dida_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_dida_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleProforma.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleProformaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPROFORMA:
					sNombreCampoCategoria="id_proforma";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE:
					sNombreCampoCategoria="id_empaque";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA:
					sNombreCampoCategoria="id_estado_detalle_proforma";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES:
					sNombreCampoCategoria="cantidad_envases";
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoria="precio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoria="descuento_porcentaje";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case DetalleProformaConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoria="lote";
					break;

				case DetalleProformaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case DetalleProformaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleProformaConstantesFunciones.LABEL_COSTO:
					sNombreCampoCategoria="costo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_UTILIDAD:
					sNombreCampoCategoria="utilidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_AREA:
					sNombreCampoCategoria="area";
					break;

				case DetalleProformaConstantesFunciones.LABEL_MEDIDA:
					sNombreCampoCategoria="medida";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleProformaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPROFORMA:
					sNombreCampoCategoriaValor="id_proforma";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE:
					sNombreCampoCategoriaValor="id_empaque";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA:
					sNombreCampoCategoriaValor="id_estado_detalle_proforma";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES:
					sNombreCampoCategoriaValor="cantidad_envases";
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoriaValor="precio";
					break;

				case DetalleProformaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					sNombreCampoCategoriaValor="descuento_porcentaje";
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case DetalleProformaConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoriaValor="lote";
					break;

				case DetalleProformaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case DetalleProformaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleProformaConstantesFunciones.LABEL_COSTO:
					sNombreCampoCategoriaValor="costo";
					break;

				case DetalleProformaConstantesFunciones.LABEL_UTILIDAD:
					sNombreCampoCategoriaValor="utilidad";
					break;

				case DetalleProformaConstantesFunciones.LABEL_AREA:
					sNombreCampoCategoriaValor="area";
					break;

				case DetalleProformaConstantesFunciones.LABEL_MEDIDA:
					sNombreCampoCategoriaValor="medida";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleProformaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Proforma",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_proforma");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empaque",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empaque");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_detalle_proforma");
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad Envases",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_envases");
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleProformaConstantesFunciones.LABEL_PRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"precio");
					break;

				case DetalleProformaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Porcentaje",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_porcentaje");
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case DetalleProformaConstantesFunciones.LABEL_LOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote");
					break;

				case DetalleProformaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case DetalleProformaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleProformaConstantesFunciones.LABEL_COSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo");
					break;

				case DetalleProformaConstantesFunciones.LABEL_UTILIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Utilidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"utilidad");
					break;

				case DetalleProformaConstantesFunciones.LABEL_AREA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Area",sNombreCampoCategoria,sNombreCampoCategoriaValor,"area");
					break;

				case DetalleProformaConstantesFunciones.LABEL_MEDIDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Meda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"medida");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleProformas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleProformaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPROFORMA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getproforma_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getempaque_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getestadodetalleproforma_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getcantidad_envases());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_PRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_PRECIO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getprecio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getdescuento_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_LOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_LOTE);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getlote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_COSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_COSTO);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getcosto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_UTILIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_UTILIDAD);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getutilidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_AREA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_AREA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getarea());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleProformaConstantesFunciones.LABEL_MEDIDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_MEDIDA);
					iRow++;

					for(DetalleProforma detalleproforma:detalleproformasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleproforma.getmedida());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleProforma(row);				
			//	iRow++;
			//}				
			
			//for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleProforma(detalleproformaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProforma(false);
			
			//SI ES MANUAL
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleProforma();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProforma(false);
			
			//SI ES MANUAL
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleProforma();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleProformaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleProforma(false);
			
			//SI ES MANUAL
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleProforma();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleProforma() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleProforma.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleProforma.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleProforma.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleProforma.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleProforma.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleProforma.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleProforma.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleProforma(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleProforma(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleProforma(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleProforma(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleProforma(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleProforma(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProforma(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleProforma(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleProforma() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleProforma();
		
		this.inicializarActualizarBindingBotonesManualDetalleProforma(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleProforma();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProforma() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProforma(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProforma(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleProforma.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleProforma.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleProforma.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionNuevoDetalleProforma.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionSinCerrarDetalleProforma.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionSinMensajeDetalleProforma.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleProforma.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleProforma.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetalleProforma.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
				this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionNuevoDetalleProforma.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionSinCerrarDetalleProforma.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleProforma.jCheckBoxPostAccionSinMensajeDetalleProforma.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetalleProforma.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleProforma.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleProforma.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleProforma.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleProforma.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleProforma.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleProforma.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleProforma.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleProforma.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleProforma(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleProforma(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleProforma() throws Exception {
		try	{
			if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleProforma();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleProforma() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleProforma() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleProforma.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleProforma.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleProforma.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleProforma.addItem(reporte);
			}
			
			
			if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleProforma.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleProforma.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleProforma.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleProforma.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleProforma.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleProforma.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleProforma.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProforma();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleProforma() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
				this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
				this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleProformaConstantesFunciones.getTiposSeleccionarDetalleProforma(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleProformaConstantesFunciones.getTiposSeleccionarDetalleProforma(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleProformaConstantesFunciones.getTiposSeleccionarDetalleProforma(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleProforma.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleProforma.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetalleProforma()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.getSelectedItem()!=null){this.id_empaqueFK_IdEmpaque=((Empaque)this.jComboBoxid_empaqueFK_IdEmpaqueDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.getSelectedItem()!=null){this.id_estado_detalle_proformaFK_IdEstadoDetalleProforma=((EstadoDetalleProforma)this.jComboBoxid_estado_detalle_proformaFK_IdEstadoDetalleProformaDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleProforma.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_proformaFK_IdProformaDetalleProforma.getSelectedItem()!=null){this.id_proformaFK_IdProforma=((Proforma)this.jComboBoxid_proformaFK_IdProformaDetalleProforma.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleProforma.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleProforma(Boolean esInicializar) throws Exception {				
		if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleProforma();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleProforma() throws Exception {
		this.inicializarActualizarBindingTablaDetalleProforma(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetalleProforma() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleProformaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProformaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDetalleProforma(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detalleproformaLogic.getDetalleProformas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detalleproformas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleProforma.setModel(new DetalleProformaModel(this.detalleproformaLogic.getDetalleProformas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleProforma.setModel(new DetalleProformaModel(this.detalleproformas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDetalleProforma!=null && this.jInternalFrameOrderByDetalleProforma.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleProforma();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleProformaConstantesFunciones.SCLASSWEBTITULO,detalleproformaConstantesFunciones.resaltarSeleccionarDetalleProforma,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleProformaConstantesFunciones.SCLASSWEBTITULO,detalleproformaConstantesFunciones.resaltarSeleccionarDetalleProforma,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_ID));

		if(this.detalleproformaConstantesFunciones.mostraridDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltaridDetalleProforma,this.detalleproformaConstantesFunciones.activaridDetalleProforma,iSizeTabla,this,true,"idDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltaridDetalleProforma,this.detalleproformaConstantesFunciones.activaridDetalleProforma,this,true,"idDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detalleproformaConstantesFunciones.mostrarid_empresaDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_empresaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_empresaDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_empresaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_empresaDetalleProforma,false,"id_empresaDetalleProforma","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detalleproformaConstantesFunciones.mostrarid_sucursalDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detalleproformaConstantesFunciones.resaltarid_sucursalDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_sucursalDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detalleproformaConstantesFunciones.resaltarid_sucursalDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_sucursalDetalleProforma,false,"id_sucursalDetalleProforma","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detalleproformaConstantesFunciones.mostrarid_ejercicioDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_ejercicioDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_ejercicioDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_ejercicioDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_ejercicioDetalleProforma,false,"id_ejercicioDetalleProforma","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDPERIODO));

		if(this.detalleproformaConstantesFunciones.mostrarid_periodoDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_periodoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_periodoDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_periodoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_periodoDetalleProforma,false,"id_periodoDetalleProforma","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDANIO));

		if(this.detalleproformaConstantesFunciones.mostrarid_anioDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_anioDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_anioDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_anioDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_anioDetalleProforma,true,"id_anioDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDMES));

		if(this.detalleproformaConstantesFunciones.mostrarid_mesDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detalleproformaConstantesFunciones.resaltarid_mesDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_mesDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detalleproformaConstantesFunciones.resaltarid_mesDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_mesDetalleProforma,true,"id_mesDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDPROFORMA));

		if(this.detalleproformaConstantesFunciones.mostrarid_proformaDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDPROFORMA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProformaTableCell(this.proformasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_proformaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_proformaDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new ProformaTableCell(this.proformasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_proformaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_proformaDetalleProforma,true,"id_proformaDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDBODEGA));

		if(this.detalleproformaConstantesFunciones.mostrarid_bodegaDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_bodegaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_bodegaDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_bodegaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_bodegaDetalleProforma,true,"id_bodegaDetalleProforma","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detalleproformaConstantesFunciones.mostrarid_productoDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_productoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_productoDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_productoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_productoDetalleProforma,true,"id_productoDetalleProforma","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detalleproformaConstantesFunciones.mostrarid_unidadDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detalleproformaConstantesFunciones.resaltarid_unidadDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_unidadDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detalleproformaConstantesFunciones.resaltarid_unidadDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_unidadDetalleProforma,true,"id_unidadDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE));

		if(this.detalleproformaConstantesFunciones.mostrarid_empaqueDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpaqueTableCell(this.empaquesForeignKey,this.detalleproformaConstantesFunciones.resaltarid_empaqueDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_empaqueDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new EmpaqueTableCell(this.empaquesForeignKey,this.detalleproformaConstantesFunciones.resaltarid_empaqueDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_empaqueDetalleProforma,true,"id_empaqueDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.detalleproformaConstantesFunciones.mostrarid_centro_costoDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_centro_costoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_centro_costoDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.detalleproformaConstantesFunciones.resaltarid_centro_costoDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_centro_costoDetalleProforma,true,"id_centro_costoDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA));

		if(this.detalleproformaConstantesFunciones.mostrarid_estado_detalle_proformaDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoDetalleProformaTableCell(this.estadodetalleproformasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_estado_detalle_proformaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_estado_detalle_proformaDetalleProforma,iSizeTabla));
			tableColumn.setCellEditor(new EstadoDetalleProformaTableCell(this.estadodetalleproformasForeignKey,this.detalleproformaConstantesFunciones.resaltarid_estado_detalle_proformaDetalleProforma,this,this.detalleproformaConstantesFunciones.activarid_estado_detalle_proformaDetalleProforma,true,"id_estado_detalle_proformaDetalleProforma","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detalleproformaConstantesFunciones.mostrardescripcionDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleproformaConstantesFunciones.resaltardescripcionDetalleProforma,this.detalleproformaConstantesFunciones.activardescripcionDetalleProforma,iSizeTabla,this,true,"descripcionDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltardescripcionDetalleProforma,this.detalleproformaConstantesFunciones.activardescripcionDetalleProforma,this,true,"descripcionDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES));

		if(this.detalleproformaConstantesFunciones.mostrarcantidad_envasesDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltarcantidad_envasesDetalleProforma,this.detalleproformaConstantesFunciones.activarcantidad_envasesDetalleProforma,iSizeTabla,this,true,"cantidad_envasesDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltarcantidad_envasesDetalleProforma,this.detalleproformaConstantesFunciones.activarcantidad_envasesDetalleProforma,this,true,"cantidad_envasesDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_CANTIDAD));

		if(this.detalleproformaConstantesFunciones.mostrarcantidadDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltarcantidadDetalleProforma,this.detalleproformaConstantesFunciones.activarcantidadDetalleProforma,iSizeTabla,this,true,"cantidadDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltarcantidadDetalleProforma,this.detalleproformaConstantesFunciones.activarcantidadDetalleProforma,this,true,"cantidadDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_PRECIO));

		if(this.detalleproformaConstantesFunciones.mostrarprecioDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_PRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltarprecioDetalleProforma,this.detalleproformaConstantesFunciones.activarprecioDetalleProforma,iSizeTabla,this,true,"precioDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltarprecioDetalleProforma,this.detalleproformaConstantesFunciones.activarprecioDetalleProforma,this,true,"precioDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_IVA));

		if(this.detalleproformaConstantesFunciones.mostrarivaDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltarivaDetalleProforma,this.detalleproformaConstantesFunciones.activarivaDetalleProforma,iSizeTabla,this,true,"ivaDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltarivaDetalleProforma,this.detalleproformaConstantesFunciones.activarivaDetalleProforma,this,true,"ivaDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE));

		if(this.detalleproformaConstantesFunciones.mostrardescuento_porcentajeDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltardescuento_porcentajeDetalleProforma,this.detalleproformaConstantesFunciones.activardescuento_porcentajeDetalleProforma,iSizeTabla,this,true,"descuento_porcentajeDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltardescuento_porcentajeDetalleProforma,this.detalleproformaConstantesFunciones.activardescuento_porcentajeDetalleProforma,this,true,"descuento_porcentajeDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.detalleproformaConstantesFunciones.mostrardescuento_valorDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltardescuento_valorDetalleProforma,this.detalleproformaConstantesFunciones.activardescuento_valorDetalleProforma,iSizeTabla,this,true,"descuento_valorDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltardescuento_valorDetalleProforma,this.detalleproformaConstantesFunciones.activardescuento_valorDetalleProforma,this,true,"descuento_valorDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_LOTE));

		if(this.detalleproformaConstantesFunciones.mostrarloteDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_LOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleproformaConstantesFunciones.resaltarloteDetalleProforma,this.detalleproformaConstantesFunciones.activarloteDetalleProforma,iSizeTabla,this,true,"loteDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltarloteDetalleProforma,this.detalleproformaConstantesFunciones.activarloteDetalleProforma,this,true,"loteDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-35));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-35));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-35));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-35));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-35);
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,DetalleProformaConstantesFunciones.LABEL_TOTAL));

		if(this.detalleproformaConstantesFunciones.mostrartotalDetalleProforma && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleProformaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleproformaConstantesFunciones.resaltartotalDetalleProforma,this.detalleproformaConstantesFunciones.activartotalDetalleProforma,iSizeTabla,this,true,"totalDetalleProforma","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleproformaConstantesFunciones.resaltartotalDetalleProforma,this.detalleproformaConstantesFunciones.activartotalDetalleProforma,this,true,"totalDetalleProforma","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleProformaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleProforma.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleProforma.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detalleproformaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleProforma.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleProforma.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleProforma.moveColumn(this.jTableDatosDetalleProforma.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleProforma.moveColumn(this.jTableDatosDetalleProforma.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleProforma.moveColumn(this.jTableDatosDetalleProforma.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleProforma.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleProforma.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleProforma,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleProforma.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleProforma.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleProforma.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleProforma.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleProforma.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detalleproformaLogic.getDetalleProformas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detalleproformas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleProforma.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleProforma.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleProforma();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleProforma=false;
					
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleProforma==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleProforma.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detalleproforma.getsType().equals("DUPLICADO")
				   || this.detalleproforma.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleProforma=true;
				
				} else {
					this.isEsNuevoDetalleProforma=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					if(this.detalleproforma.getId()>=0 && !this.detalleproforma.getIsNew()) {						
						this.isEsNuevoDetalleProforma=false;
						
					} else {
						this.isEsNuevoDetalleProforma=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleProforma(esRelaciones);						
				
				this.seleccionarDetalleProforma(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detalleproforma.getId()<0) {
					this.isEsNuevoDetalleProforma=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleProforma(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleProforma(evt,rowIndex);
				}	
				
				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleProforma: " + this.dDif); 
					}
				}								
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleProforma(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detalleproforma)) {
					if(this.detalleproforma.getId()>0) {
						this.detalleproforma.setIsDeleted(true);
						
						this.detalleproformasEliminados.add(this.detalleproforma);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleproformaLogic.getDetalleProformas().remove(this.detalleproforma);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleproformas.remove(this.detalleproforma);				
					}
					
					
					((DetalleProformaModel) this.jTableDatosDetalleProforma.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleProforma(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleProforma(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleProforma) {
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleProforma.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleProforma.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleProforma(this.detalleproforma);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.detalleproformaConstantesFunciones.cargarid_empresaDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_empresaDetalleProforma) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detalleproforma.getid_empresa());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detalleproforma.getEmpresa()!=null) {
							this.empresasForeignKey.add(detalleproforma.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detalleproforma.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detalleproformaConstantesFunciones.cargarid_sucursalDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_sucursalDetalleProforma) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detalleproforma.getid_sucursal());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detalleproforma.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detalleproforma.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detalleproforma.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detalleproformaConstantesFunciones.cargarid_ejercicioDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_ejercicioDetalleProforma) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detalleproforma.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detalleproforma.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detalleproforma.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detalleproforma.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detalleproformaConstantesFunciones.cargarid_periodoDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_periodoDetalleProforma) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detalleproforma.getid_periodo());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detalleproforma.getPeriodo()!=null) {
							this.periodosForeignKey.add(detalleproforma.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detalleproforma.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detalleproformaConstantesFunciones.cargarid_anioDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_anioDetalleProforma) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detalleproforma.getid_anio());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detalleproforma.getAnio()!=null) {
							this.aniosForeignKey.add(detalleproforma.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detalleproforma.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detalleproformaConstantesFunciones.cargarid_mesDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_mesDetalleProforma) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detalleproforma.getid_mes());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detalleproforma.getMes()!=null) {
							this.messForeignKey.add(detalleproforma.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detalleproforma.getid_mes(),false,"Formulario");

					//Proforma
					if(!this.detalleproformaConstantesFunciones.cargarid_proformaDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_proformaDetalleProforma) {
						//this.cargarCombosProformasForeignKeyLista(" where id="+this.detalleproforma.getid_proforma());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.proformasForeignKey=new ArrayList<Proforma>();

						if(detalleproforma.getProforma()!=null) {
							this.proformasForeignKey.add(detalleproforma.getProforma());
						}

						this.addItemDefectoCombosForeignKeyProforma();
						this.cargarCombosFrameProformasForeignKey("Todos");
					}
					this.setActualProformaForeignKey(this.detalleproforma.getid_proforma(),false,"Formulario");

					//Bodega
					if(!this.detalleproformaConstantesFunciones.cargarid_bodegaDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_bodegaDetalleProforma) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detalleproforma.getid_bodega());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detalleproforma.getBodega()!=null) {
							this.bodegasForeignKey.add(detalleproforma.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detalleproforma.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detalleproformaConstantesFunciones.cargarid_productoDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_productoDetalleProforma) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detalleproforma.getid_producto());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detalleproforma.getProducto()!=null) {
							this.productosForeignKey.add(detalleproforma.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detalleproforma.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detalleproformaConstantesFunciones.cargarid_unidadDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_unidadDetalleProforma) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detalleproforma.getid_unidad());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detalleproforma.getUnidad()!=null) {
							this.unidadsForeignKey.add(detalleproforma.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detalleproforma.getid_unidad(),false,"Formulario");

					//Empaque
					if(!this.detalleproformaConstantesFunciones.cargarid_empaqueDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_empaqueDetalleProforma) {
						//this.cargarCombosEmpaquesForeignKeyLista(" where id="+this.detalleproforma.getid_empaque());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.empaquesForeignKey=new ArrayList<Empaque>();

						if(detalleproforma.getEmpaque()!=null) {
							this.empaquesForeignKey.add(detalleproforma.getEmpaque());
						}

						this.addItemDefectoCombosForeignKeyEmpaque();
						this.cargarCombosFrameEmpaquesForeignKey("Todos");
					}
					this.setActualEmpaqueForeignKey(this.detalleproforma.getid_empaque(),false,"Formulario");

					//CentroCosto
					if(!this.detalleproformaConstantesFunciones.cargarid_centro_costoDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_centro_costoDetalleProforma) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detalleproforma.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detalleproforma.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detalleproforma.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detalleproforma.getid_centro_costo(),false,"Formulario");

					//EstadoDetalleProforma
					if(!this.detalleproformaConstantesFunciones.cargarid_estado_detalle_proformaDetalleProforma || this.detalleproformaConstantesFunciones.event_dependid_estado_detalle_proformaDetalleProforma) {
						//this.cargarCombosEstadoDetalleProformasForeignKeyLista(" where id="+this.detalleproforma.getid_estado_detalle_proforma());
									//this.inicializarActualizarBindingDetalleProforma(false,false);
						this.estadodetalleproformasForeignKey=new ArrayList<EstadoDetalleProforma>();

						if(detalleproforma.getEstadoDetalleProforma()!=null) {
							this.estadodetalleproformasForeignKey.add(detalleproforma.getEstadoDetalleProforma());
						}

						this.addItemDefectoCombosForeignKeyEstadoDetalleProforma();
						this.cargarCombosFrameEstadoDetalleProformasForeignKey("Todos");
					}
					this.setActualEstadoDetalleProformaForeignKey(this.detalleproforma.getid_estado_detalle_proforma(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleProforma("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleProforma(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleProforma() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleProforma(DetalleProforma detalleproforma) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleProforma(detalleproforma,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleProforma(DetalleProforma detalleproforma,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleProforma(detalleproforma);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleProforma(detalleproforma,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleProforma(detalleproforma);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleProforma(DetalleProforma detalleproforma) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setText(detalleproforma.getId().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setText(detalleproforma.getdescripcion());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setText(detalleproforma.getcantidad_envases().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setText(detalleproforma.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setText(detalleproforma.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setText(detalleproforma.getiva().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setText(detalleproforma.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setText(detalleproforma.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setText(detalleproforma.getlote());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setText(detalleproforma.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleProforma detalleproformaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detalleproformaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleProforma detalleproformaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detalleproformaLocal=this.detalleproforma;
			} else {
				detalleproformaLocal=this.detalleproformaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detalleproformaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleProforma(detalleproformaLocal,true);
					
					if(detalleproformaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detalleproformaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detalleproformaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleProforma(DetalleProforma detalleproforma,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleProforma(detalleproforma,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(detalleproforma);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleProforma(DetalleProforma detalleproforma,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleProforma(detalleproforma,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleProforma(DetalleProforma detalleproforma,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.getText()==null || this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.getText()=="" || this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setText("0");
			}

			if(conColumnasBase) {detalleproforma.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelIdDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setdescripcion(this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescripcionDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setcantidad_envases(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidad_envasesDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelcantidadDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setprecio(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_PRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelprecioDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setiva(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelivaDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setdescuento_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_porcentajeDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeldescuento_valorDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.setlote(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_LOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabelloteDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleproforma.settotal(Double.parseDouble(this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleProformaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleProforma.jLabeltotalDetalleProforma,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleProforma(DetalleProforma detalleproformaBean,DetalleProforma detalleproforma,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleProforma(DetalleProforma detalleproformaOrigen,DetalleProforma detalleproforma,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalleproformaOrigen.getId()!=null && !detalleproformaOrigen.getId().equals(0L))) {detalleproforma.setId(detalleproformaOrigen.getId());}}
			if(conDefault || (!conDefault && detalleproformaOrigen.getdescripcion()!=null && !detalleproformaOrigen.getdescripcion().equals(""))) {detalleproforma.setdescripcion(detalleproformaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getcantidad_envases()!=null && !detalleproformaOrigen.getcantidad_envases().equals(0.0))) {detalleproforma.setcantidad_envases(detalleproformaOrigen.getcantidad_envases());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getcantidad()!=null && !detalleproformaOrigen.getcantidad().equals(0))) {detalleproforma.setcantidad(detalleproformaOrigen.getcantidad());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getprecio()!=null && !detalleproformaOrigen.getprecio().equals(0.0))) {detalleproforma.setprecio(detalleproformaOrigen.getprecio());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getiva()!=null && !detalleproformaOrigen.getiva().equals(0.0))) {detalleproforma.setiva(detalleproformaOrigen.getiva());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getdescuento_porcentaje()!=null && !detalleproformaOrigen.getdescuento_porcentaje().equals(0.0))) {detalleproforma.setdescuento_porcentaje(detalleproformaOrigen.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getdescuento_valor()!=null && !detalleproformaOrigen.getdescuento_valor().equals(0.0))) {detalleproforma.setdescuento_valor(detalleproformaOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getlote()!=null && !detalleproformaOrigen.getlote().equals(""))) {detalleproforma.setlote(detalleproformaOrigen.getlote());}
			if(conDefault || (!conDefault && detalleproformaOrigen.gettotal()!=null && !detalleproformaOrigen.gettotal().equals(0.0))) {detalleproforma.settotal(detalleproformaOrigen.gettotal());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getice()!=null && !detalleproformaOrigen.getice().equals(0.0))) {detalleproforma.setice(detalleproformaOrigen.getice());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getcosto()!=null && !detalleproformaOrigen.getcosto().equals(0.0))) {detalleproforma.setcosto(detalleproformaOrigen.getcosto());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getutilidad()!=null && !detalleproformaOrigen.getutilidad().equals(0.0))) {detalleproforma.setutilidad(detalleproformaOrigen.getutilidad());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getarea()!=null && !detalleproformaOrigen.getarea().equals(""))) {detalleproforma.setarea(detalleproformaOrigen.getarea());}
			if(conDefault || (!conDefault && detalleproformaOrigen.getmedida()!=null && !detalleproformaOrigen.getmedida().equals(""))) {detalleproforma.setmedida(detalleproformaOrigen.getmedida());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleProforma(DetalleProforma detalleproforma) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setText(detalleproforma.getId().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setText(detalleproforma.getdescripcion());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setText(detalleproforma.getcantidad_envases().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setText(detalleproforma.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setText(detalleproforma.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setText(detalleproforma.getiva().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setText(detalleproforma.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setText(detalleproforma.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setText(detalleproforma.getlote());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setText(detalleproforma.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleProforma(DetalleProformaBean detalleproformaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setText(detalleproformaBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setText(detalleproformaBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setText(detalleproformaBean.getcantidad_envases().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setText(detalleproformaBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setText(detalleproformaBean.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setText(detalleproformaBean.getiva().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setText(detalleproformaBean.getdescuento_porcentaje().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setText(detalleproformaBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setText(detalleproformaBean.getlote());
			this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setText(detalleproformaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleProforma(DetalleProformaParameterReturnGeneral detalleproformaReturnGeneral,DetalleProformaBean detalleproformaBean,Boolean conDefault) throws Exception { 
		try {
			DetalleProforma detalleproformaLocal=new DetalleProforma();
			
			detalleproformaLocal=detalleproformaReturnGeneral.getDetalleProforma();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalleproformaLocal.getId()!=null && !detalleproformaLocal.getId().equals(0L))) {detalleproformaBean.setId(detalleproformaLocal.getId());}}
			if(conDefault || (!conDefault && detalleproformaLocal.getdescripcion()!=null && !detalleproformaLocal.getdescripcion().equals(""))) {detalleproformaBean.setdescripcion(detalleproformaLocal.getdescripcion());}
			if(conDefault || (!conDefault && detalleproformaLocal.getcantidad_envases()!=null && !detalleproformaLocal.getcantidad_envases().equals(0.0))) {detalleproformaBean.setcantidad_envases(detalleproformaLocal.getcantidad_envases());}
			if(conDefault || (!conDefault && detalleproformaLocal.getcantidad()!=null && !detalleproformaLocal.getcantidad().equals(0))) {detalleproformaBean.setcantidad(detalleproformaLocal.getcantidad());}
			if(conDefault || (!conDefault && detalleproformaLocal.getprecio()!=null && !detalleproformaLocal.getprecio().equals(0.0))) {detalleproformaBean.setprecio(detalleproformaLocal.getprecio());}
			if(conDefault || (!conDefault && detalleproformaLocal.getiva()!=null && !detalleproformaLocal.getiva().equals(0.0))) {detalleproformaBean.setiva(detalleproformaLocal.getiva());}
			if(conDefault || (!conDefault && detalleproformaLocal.getdescuento_porcentaje()!=null && !detalleproformaLocal.getdescuento_porcentaje().equals(0.0))) {detalleproformaBean.setdescuento_porcentaje(detalleproformaLocal.getdescuento_porcentaje());}
			if(conDefault || (!conDefault && detalleproformaLocal.getdescuento_valor()!=null && !detalleproformaLocal.getdescuento_valor().equals(0.0))) {detalleproformaBean.setdescuento_valor(detalleproformaLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && detalleproformaLocal.getlote()!=null && !detalleproformaLocal.getlote().equals(""))) {detalleproformaBean.setlote(detalleproformaLocal.getlote());}
			if(conDefault || (!conDefault && detalleproformaLocal.gettotal()!=null && !detalleproformaLocal.gettotal().equals(0.0))) {detalleproformaBean.settotal(detalleproformaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleProformaGenerico(Long idDetalleProformaSeleccionado,JComboBox jComboBoxDetalleProforma,List<DetalleProforma> detalleproformasLocal)throws Exception {
		try {
			DetalleProforma  detalleproformaTemp=null;

			for(DetalleProforma detalleproformaAux:detalleproformasLocal) {
				if(detalleproformaAux.getId()!=null && detalleproformaAux.getId().equals(idDetalleProformaSeleccionado)) {
					detalleproformaTemp=detalleproformaAux;
					break;
				}
			}

			jComboBoxDetalleProforma.setSelectedItem(detalleproformaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleProformaGenerico(JComboBox jComboBoxDetalleProforma,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleProforma.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleProforma.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleProforma.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleProforma.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleProforma.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleProforma.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleProforma.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleProforma.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleProforma.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleProforma.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleproforma=(DetalleProforma) detalleproformaLogic.getDetalleProformas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleproforma =(DetalleProforma) detalleproformas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getmes_descripcion();
			}
		}

		if(sTipo.equals("Proforma")) {
			//sDescripcion=this.getActualProformaForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getproforma_descripcion();
			} else {
				//sDescripcion=this.getActualProformaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getproforma_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detalleproforma.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detalleproforma.getunidad_descripcion();
			}
		}

		if(sTipo.equals("Empaque")) {
			//sDescripcion=this.getActualEmpaqueForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getempaque_descripcion();
			} else {
				//sDescripcion=this.getActualEmpaqueForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getempaque_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("EstadoDetalleProforma")) {
			//sDescripcion=this.getActualEstadoDetalleProformaForeignKeyDescripcion((Long)value);
			if(!detalleproforma.getIsNew() && !detalleproforma.getIsChanged() && !detalleproforma.getIsDeleted()) {
				sDescripcion=detalleproforma.getestadodetalleproforma_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoDetalleProformaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleproforma.getestadodetalleproforma_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleProforma detalleproformaRow=new DetalleProforma();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleproformaRow=(DetalleProforma) detalleproformaLogic.getDetalleProformas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleproformaRow=(DetalleProforma) detalleproformas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleProforma(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma));			
			this.jButtonDuplicarDetalleProforma.setVisible((this.isVisibilidadCeldaDuplicarDetalleProforma && this.isPermisoDuplicarDetalleProforma));			
			this.jButtonCopiarDetalleProforma.setVisible((this.isVisibilidadCeldaCopiarDetalleProforma && this.isPermisoCopiarDetalleProforma));
			this.jButtonVerFormDetalleProforma.setVisible((this.isVisibilidadCeldaVerFormDetalleProforma && this.isPermisoVerFormDetalleProforma));
			
			this.jButtonAbrirOrderByDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));			
			
			this.jButtonNuevoRelacionesDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProforma && this.isPermisoNuevoDetalleProforma));			
			this.jButtonNuevoGuardarCambiosDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarDetalleProforma.setVisible((this.isVisibilidadCeldaModificarDetalleProforma && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.setVisible((this.isVisibilidadCeldaActualizarDetalleProforma && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.setVisible((this.isVisibilidadCeldaEliminarDetalleProforma && this.isPermisoEliminarDetalleProforma));
			this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.setVisible(this.isVisibilidadCeldaCancelarDetalleProforma);							
			this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma));						
			this.jButtonDuplicarToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaDuplicarDetalleProforma && this.isPermisoDuplicarDetalleProforma));						
			this.jButtonCopiarToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaCopiarDetalleProforma && this.isPermisoCopiarDetalleProforma));			
			this.jButtonVerFormToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaVerFormDetalleProforma && this.isPermisoVerFormDetalleProforma));			
			this.jButtonAbrirOrderByToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));
			this.jButtonNuevoRelacionesToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProforma && this.isPermisoNuevoDetalleProforma));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));			
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaModificarDetalleProforma && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaActualizarDetalleProforma  && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaEliminarDetalleProforma && this.isPermisoEliminarDetalleProforma));
			this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarToolBarDetalleProforma.setVisible(this.isVisibilidadCeldaCancelarDetalleProforma);				
			this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma));			
			this.jMenuItemDuplicarDetalleProforma.setVisible((this.isVisibilidadCeldaDuplicarDetalleProforma && this.isPermisoDuplicarDetalleProforma));			
			this.jMenuItemCopiarDetalleProforma.setVisible((this.isVisibilidadCeldaCopiarDetalleProforma && this.isPermisoCopiarDetalleProforma));			
			this.jMenuItemVerFormDetalleProforma.setVisible((this.isVisibilidadCeldaVerFormDetalleProforma && this.isPermisoVerFormDetalleProforma));			
			this.jMenuItemAbrirOrderByDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));			
			//this.jMenuItemMostrarOcultarDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));
			this.jMenuItemDetalleAbrirOrderByDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));			
			//this.jMenuItemDetalleMostrarOcultarDetalleProforma.setVisible((this.isVisibilidadCeldaOrdenDetalleProforma && this.isPermisoOrdenDetalleProforma));			
			this.jMenuItemNuevoRelacionesDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleProforma && this.isPermisoNuevoDetalleProforma));			
			this.jMenuItemNuevoGuardarCambiosDetalleProforma.setVisible((this.isVisibilidadCeldaNuevoDetalleProforma && this.isPermisoNuevoDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));									
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemModificarDetalleProforma.setVisible((this.isVisibilidadCeldaModificarDetalleProforma && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemActualizarDetalleProforma.setVisible((this.isVisibilidadCeldaActualizarDetalleProforma && this.isPermisoActualizarDetalleProforma));	
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemEliminarDetalleProforma.setVisible((this.isVisibilidadCeldaEliminarDetalleProforma && this.isPermisoEliminarDetalleProforma));
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemCancelarDetalleProforma.setVisible(this.isVisibilidadCeldaCancelarDetalleProforma);				
			}
			
			this.jMenuItemGuardarCambiosDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));						
			this.jMenuItemGuardarCambiosTablaDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleProforma=this.jButtonNuevoDetalleProforma.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleProforma=this.jButtonDuplicarDetalleProforma.isVisible();
			this.isVisibilidadCeldaCopiarDetalleProforma=this.jButtonCopiarDetalleProforma.isVisible();
			this.isVisibilidadCeldaVerFormDetalleProforma=this.jButtonVerFormDetalleProforma.isVisible();
			
			this.isVisibilidadCeldaOrdenDetalleProforma=this.jButtonAbrirOrderByDetalleProforma.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=this.jButtonNuevoRelacionesDetalleProforma.isVisible();
			this.isVisibilidadCeldaModificarDetalleProforma=this.jButtonModificarDetalleProforma.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.isVisibilidadCeldaActualizarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.isVisible();
			this.isVisibilidadCeldaGuardarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=this.jButtonGuardarCambiosTablaDetalleProforma.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetalleProforma=this.jButtonNuevoToolBarDetalleProforma.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=this.jButtonNuevoRelacionesToolBarDetalleProforma.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.isVisibilidadCeldaModificarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarToolBarDetalleProforma.isVisible();
			this.isVisibilidadCeldaActualizarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarToolBarDetalleProforma.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarToolBarDetalleProforma.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarToolBarDetalleProforma.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleProforma=this.jButtonGuardarCambiosToolBarDetalleProforma.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=this.jButtonGuardarCambiosTablaToolBarDetalleProforma.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetalleProforma=this.jMenuItemNuevoDetalleProforma.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=this.jMenuItemNuevoRelacionesDetalleProforma.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.isVisibilidadCeldaModificarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jMenuItemModificarDetalleProforma.isVisible();
			this.isVisibilidadCeldaActualizarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jMenuItemActualizarDetalleProforma.isVisible();
			this.isVisibilidadCeldaEliminarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jMenuItemEliminarDetalleProforma.isVisible();
			this.isVisibilidadCeldaCancelarDetalleProforma=this.jInternalFrameDetalleFormDetalleProforma.jMenuItemCancelarDetalleProforma.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleProforma=this.jMenuItemGuardarCambiosDetalleProforma.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=this.jMenuItemGuardarCambiosTablaDetalleProforma.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleProforma(Boolean esInicializar) {
		if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
				//if(this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleProforma();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleProforma(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleProforma() {
		this.jButtonNuevoDetalleProforma.setVisible(this.isPermisoNuevoDetalleProforma);			
		this.jButtonDuplicarDetalleProforma.setVisible(this.isPermisoDuplicarDetalleProforma);			
		this.jButtonCopiarDetalleProforma.setVisible(this.isPermisoCopiarDetalleProforma);			
		this.jButtonVerFormDetalleProforma.setVisible(this.isPermisoVerFormDetalleProforma);			
		
		this.jButtonAbrirOrderByDetalleProforma.setVisible(this.isPermisoOrdenDetalleProforma);					
		
		this.jButtonNuevoRelacionesDetalleProforma.setVisible(this.isPermisoNuevoDetalleProforma);			
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarDetalleProforma.setVisible(this.isPermisoActualizarDetalleProforma);	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.setVisible(this.isPermisoActualizarDetalleProforma);	
			this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.setVisible(this.isPermisoEliminarDetalleProforma);
			this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.setVisible(this.isVisibilidadCeldaCancelarDetalleProforma);						
			this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.setVisible(this.isPermisoGuardarCambiosDetalleProforma);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleProforma.setVisible(this.isPermisoActualizarDetalleProforma);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleProforma() {
		this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarDetalleProforma.setVisible(this.isPermisoActualizarDetalleProforma);	
		this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.setVisible(this.isPermisoActualizarDetalleProforma);	
		this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.setVisible(this.isPermisoEliminarDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.setVisible(this.isVisibilidadCeldaCancelarDetalleProforma);							
		this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.setVisible((this.isVisibilidadCeldaGuardarDetalleProforma && this.isPermisoGuardarCambiosDetalleProforma));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleProforma() {
		if(DetalleProformaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleProforma();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleProforma() {
	}
	
	public void jTableDatosDetalleProformaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleProforma(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detalleproforma.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleProforma.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detalleproforma.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleProforma.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detalleproforma.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleProforma.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detalleproforma.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleProforma.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detalleproforma.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleProforma.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detalleproforma.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleProforma.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detalleproforma.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_proformaDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproforma=true;

			idTienePermisoproforma=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(ProformaConstantesFunciones.CLASSNAME);

			if(idTienePermisoproforma) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.proformaBeanSwingJInternalFrame=new ProformaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.proformaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.proformaBeanSwingJInternalFrame.getProformaLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_proforma()!=null) {
					this.proformaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.proformaBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_proforma());
					this.proformaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.proformaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.proformaBeanSwingJInternalFrame.inicializarActualizarBindingTablaProforma();
				}

				JInternalFrameBase jinternalFrame =this.proformaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderproforma=(TitledBorder)this.proformaBeanSwingJInternalFrame.jScrollPanelDatosProforma.getBorder();

				titledBorderproforma.setTitle(titledBorderDetalleProforma.getTitle() + " -> Proforma");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_proformaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_proforma = "+this.detalleproforma.getid_proforma().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleProforma.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detalleproforma.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleProformaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleProforma=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleProforma.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleProforma.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleProforma.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detalleproforma.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleProforma.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detalleproforma.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empaqueDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempaque=true;

			idTienePermisoempaque=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(EmpaqueConstantesFunciones.CLASSNAME);

			if(idTienePermisoempaque) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.empaqueBeanSwingJInternalFrame=new EmpaqueBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empaqueBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empaqueBeanSwingJInternalFrame.getEmpaqueLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_empaque()!=null) {
					this.empaqueBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empaqueBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_empaque());
					this.empaqueBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empaqueBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empaqueBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpaque();
				}

				JInternalFrameBase jinternalFrame =this.empaqueBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderempaque=(TitledBorder)this.empaqueBeanSwingJInternalFrame.jScrollPanelDatosEmpaque.getBorder();

				titledBorderempaque.setTitle(titledBorderDetalleProforma.getTitle() + " -> Empaque");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empaqueDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_empaque()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empaque = "+this.detalleproforma.getid_empaque().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleProforma.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detalleproforma.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_detalle_proformaDetalleProformaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadodetalleproforma=true;

			idTienePermisoestadodetalleproforma=this.tienePermisosUsuarioEnPaginaWebDetalleProforma(EstadoDetalleProformaConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadodetalleproforma) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleProforma.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleProforma.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);

				this.estadodetalleproformaBeanSwingJInternalFrame=new EstadoDetalleProformaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadodetalleproformaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadodetalleproformaBeanSwingJInternalFrame.getEstadoDetalleProformaLogic().setConnexion(this.detalleproformaLogic.getConnexion());

				if(this.detalleproforma.getid_estado_detalle_proforma()!=null) {
					this.estadodetalleproformaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadodetalleproformaBeanSwingJInternalFrame.setIdActual(this.detalleproforma.getid_estado_detalle_proforma());
					this.estadodetalleproformaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadodetalleproformaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadodetalleproformaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoDetalleProforma();
				}

				JInternalFrameBase jinternalFrame =this.estadodetalleproformaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleProforma=(TitledBorder)this.jScrollPanelDatosDetalleProforma.getBorder();
				TitledBorder titledBorderestadodetalleproforma=(TitledBorder)this.estadodetalleproformaBeanSwingJInternalFrame.jScrollPanelDatosEstadoDetalleProforma.getBorder();

				titledBorderestadodetalleproforma.setTitle(titledBorderDetalleProforma.getTitle() + " -> Estado Detalle Proforma");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_detalle_proformaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getid_estado_detalle_proforma()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_detalle_proforma = "+this.detalleproforma.getid_estado_detalle_proforma().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detalleproforma.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_envasesDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getcantidad_envases()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_envases = "+this.detalleproforma.getcantidad_envases().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detalleproforma.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprecioDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getprecio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where precio = "+this.detalleproforma.getprecio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detalleproforma.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_porcentajeDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getdescuento_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_porcentaje = "+this.detalleproforma.getdescuento_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.detalleproforma.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonloteDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getlote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote like '%"+this.detalleproforma.getlote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.detalleproforma.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detalleproforma.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncostoDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getcosto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo = "+this.detalleproforma.getcosto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonutilidadDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getutilidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where utilidad = "+this.detalleproforma.getutilidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonareaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getarea()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where area like '%"+this.detalleproforma.getarea()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmedidaDetalleProformaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.getdetalleproforma(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleproforma==null) {
						this.detalleproforma = new DetalleProforma();
					}

					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);
				}

				if(this.detalleproforma.getmedida()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where medida like '%"+this.detalleproforma.getmedida()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleProforma(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdAnio();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdBodega();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdCentroCosto();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdEjercicio();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpaqueDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdEmpaque();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdEmpresa();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoDetalleProformaDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdEstadoDetalleProforma();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdMes();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdPeriodo();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdProducto();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProformaDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdProforma();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdSucursal();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUnidadDetalleProformaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleProforma(false,false);

			this.getDetalleProformasFK_IdUnidad();

			this.inicializarActualizarBindingDetalleProforma(false);

			//if(DetalleProformaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleProforma(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleproformaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetalleProforma() {
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
			this.jInternalFrameDetalleFormDetalleProforma.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleProforma.dispose();
			this.jInternalFrameDetalleFormDetalleProforma=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
			this.jInternalFrameReporteDinamicoDetalleProforma.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleProforma.dispose();
			this.jInternalFrameReporteDinamicoDetalleProforma=null;
		}
		
		if(this.jInternalFrameImportacionDetalleProforma!=null) {
			this.jInternalFrameImportacionDetalleProforma.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleProforma.dispose();
			this.jInternalFrameImportacionDetalleProforma=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleProforma();
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleProforma")) {
				jButtonDuplicarDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleProforma")) {
				jButtonCopiarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleProforma")) {
				jButtonVerFormDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleProforma")) {
				jButtonDuplicarDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleProforma")) {
				jButtonDuplicarDetalleProformaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleProforma")) {
				jButtonModificarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleProforma")) {
				jButtonModificarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleProforma")) {
				jButtonModificarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleProforma")) {
				jButtonActualizarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleProforma")) {
				jButtonActualizarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleProforma")) {
				jButtonActualizarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleProforma")) {
				jButtonEliminarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleProforma")) {
				jButtonEliminarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleProforma")) {
				jButtonEliminarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleProforma")) {
				jButtonCancelarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleProforma")) {
				jButtonCancelarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleProforma")) {
				jButtonCancelarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleProforma")) {
				jButtonCerrarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleProforma")) {
				jButtonCerrarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleProforma")) {
				jButtonCerrarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleProforma")) {
				jButtonMostrarOcultarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleProforma")) {
				jButtonCancelarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleProforma")) {
				jButtonCopiarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleProforma")) {
				jButtonVerFormDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleProforma")) {
				jButtonCopiarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleProforma")) {
				jButtonVerFormDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleProforma")) {
				jButtonRecargarInformacionDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleProforma")) {
				jButtonRecargarInformacionDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleProforma")) {
				jButtonRecargarInformacionDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleProforma")) {
				jButtonAnterioresDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleProforma")) {
				jButtonAnterioresDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleProforma")) {
				jButtonAnterioresDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleProforma")) {
				jButtonSiguientesDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleProforma")) {
				jButtonSiguientesDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleProforma")) {
				jButtonSiguientesDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleProforma") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleProforma")) {
				jButtonAbrirOrderByDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleProforma") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleProforma")) {
				jButtonMostrarOcultarDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleProforma")) {
				jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleProforma")) {
				jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleProforma")) {
				jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleProforma")) {
				jButtonCerrarReporteDinamicoDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleProforma")) {
				jButtonGenerarReporteDinamicoDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleProforma")) {
				
				jButtonGenerarExcelReporteDinamicoDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetalleProforma")) {
				jButtonCerrarImportacionDetalleProformaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleProforma")) {
				
				jButtonGenerarImportacionDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetalleProforma")) {
				
				jButtonAbrirImportacionDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetalleProforma")) {
				jComboBoxTiposAccionesDetalleProformaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleProforma")) {
				jComboBoxTiposRelacionesDetalleProformaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleProforma")) {
				jComboBoxTiposAccionesDetalleProformaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleProforma")) {
				
				jComboBoxTiposSeleccionarDetalleProformaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetalleProforma")) {
				jTextFieldValorCampoGeneralDetalleProformaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDetalleProforma")) {
				jButtonAbrirOrderByDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleProforma")) {
				jButtonAbrirOrderByDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleProforma")) {
				jButtonCerrarOrderByDetalleProformaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleProformaBusqueda")) {
				this.jButtonidDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleProformaUpdate")) {
				this.jButtonid_empresaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleProformaBusqueda")) {
				this.jButtonid_empresaDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleProformaUpdate")) {
				this.jButtonid_sucursalDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleProformaBusqueda")) {
				this.jButtonid_sucursalDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProformaUpdate")) {
				this.jButtonid_ejercicioDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProformaBusqueda")) {
				this.jButtonid_ejercicioDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleProformaUpdate")) {
				this.jButtonid_periodoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleProformaBusqueda")) {
				this.jButtonid_periodoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleProformaUpdate")) {
				this.jButtonid_anioDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleProformaBusqueda")) {
				this.jButtonid_anioDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleProformaUpdate")) {
				this.jButtonid_mesDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleProformaBusqueda")) {
				this.jButtonid_mesDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_proformaDetalleProformaUpdate")) {
				this.jButtonid_proformaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_proformaDetalleProformaBusqueda")) {
				this.jButtonid_proformaDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleProformaUpdate")) {
				this.jButtonid_bodegaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleProformaBusqueda")) {
				this.jButtonid_bodegaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleProforma")) {
				this.jButtonid_productoDetalleProformaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleProformaUpdate")) {
				this.jButtonid_productoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleProformaBusqueda")) {
				this.jButtonid_productoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleProformaUpdate")) {
				this.jButtonid_unidadDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleProformaBusqueda")) {
				this.jButtonid_unidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empaqueDetalleProformaUpdate")) {
				this.jButtonid_empaqueDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empaqueDetalleProformaBusqueda")) {
				this.jButtonid_empaqueDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleProformaUpdate")) {
				this.jButtonid_centro_costoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleProformaBusqueda")) {
				this.jButtonid_centro_costoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_proformaDetalleProformaUpdate")) {
				this.jButtonid_estado_detalle_proformaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_proformaDetalleProformaBusqueda")) {
				this.jButtonid_estado_detalle_proformaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleProformaBusqueda")) {
				this.jButtondescripcionDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_envasesDetalleProformaBusqueda")) {
				this.jButtoncantidad_envasesDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleProformaBusqueda")) {
				this.jButtoncantidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleProformaBusqueda")) {
				this.jButtonprecioDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleProformaBusqueda")) {
				this.jButtonivaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeDetalleProformaBusqueda")) {
				this.jButtondescuento_porcentajeDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleProformaBusqueda")) {
				this.jButtondescuento_valorDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleProformaBusqueda")) {
				this.jButtonloteDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleProformaBusqueda")) {
				this.jButtontotalDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleProformaBusqueda")) {
				this.jButtoniceDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costoDetalleProformaBusqueda")) {
				this.jButtoncostoDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidadDetalleProformaBusqueda")) {
				this.jButtonutilidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("areaDetalleProformaBusqueda")) {
				this.jButtonareaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("medidaDetalleProformaBusqueda")) {
				this.jButtonmedidaDetalleProformaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_productoDetalleProforma")) {
				this.jButtonid_productoDetalleProformaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaDetalleProforma")) {
				this.jButtonFK_IdBodegaDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoDetalleProforma")) {
				this.jButtonFK_IdCentroCostoDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpaqueDetalleProforma")) {
				this.jButtonFK_IdEmpaqueDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoDetalleProformaDetalleProforma")) {
				this.jButtonFK_IdEstadoDetalleProformaDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoDetalleProforma")) {
				this.jButtonFK_IdProductoDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProformaDetalleProforma")) {
				this.jButtonFK_IdProformaDetalleProformaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdUnidadDetalleProforma")) {
				this.jButtonFK_IdUnidadDetalleProformaActionPerformed(evt);
			}
			
			;
			
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleProforma();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleProforma detalleproformaLocal=null;
			
			if(!this.getEsControlTabla()) {
				detalleproformaLocal=this.detalleproforma;
			} else {
				detalleproformaLocal=this.detalleproformaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
							
				
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
								
						
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
								
				
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
							
				
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
								
				
				


				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleProforma")) {
					jCheckBoxSeleccionarTodosDetalleProformaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleProforma")) {
					jCheckBoxSeleccionadosDetalleProformaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleProforma")) {
					
				}
				
				


				
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
												
				
				


				
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleProforma")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
				//recargarFormDetalleProformaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleProforma")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
				//recargarFormDetalleProformaProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleProformaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleProforma")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
				//recargarFormDetalleProformaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleProforma")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
				//recargarFormDetalleProformaProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
			}
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleproforma);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleproforma);
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleProforma")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
				//recargarFormDetalleProformaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleProforma,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleProforma")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma;
				}

				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleProforma(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleProforma")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
				//recargarFormDetalleProformaProducto(jComboBoxid_productoFK_IdProductoDetalleProforma,"FK_IdProducto");
			}
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleProforma.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleProforma.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleProformaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleproformaAnterior =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleProforma")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleProformaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleProforma.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detalleproforma =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detalleproforma =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detalleproforma);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleProforma")) {
				
				}
				
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleProforma")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleProforma.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleProforma")) {
			
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleProforma();
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleProforma")) {
				jButtonDuplicarDetalleProformaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleProforma")) {
				jButtonCopiarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleProforma")) {
				jButtonVerFormDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleProforma")) {
				jButtonNuevoDetalleProformaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleProforma")) {
				jButtonModificarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleProforma")) {
				jButtonActualizarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleProforma")) {
				jButtonEliminarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleProforma")) {
				jButtonCancelarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleProforma")) {
				jButtonCerrarDetalleProformaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleProforma")) {
				jButtonGuardarCambiosDetalleProformaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleProforma")) {
				jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleProforma")) {
				jButtonAbrirOrderByDetalleProformaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleProforma")) {
				jButtonRecargarInformacionDetalleProformaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleProforma")) {
				jButtonAnterioresDetalleProformaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleProforma")) {
				jButtonSiguientesDetalleProformaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleProformaBusqueda")) {
				this.jButtonidDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleProformaUpdate")) {
				this.jButtonid_empresaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleProformaBusqueda")) {
				this.jButtonid_empresaDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleProformaUpdate")) {
				this.jButtonid_sucursalDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleProformaBusqueda")) {
				this.jButtonid_sucursalDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProformaUpdate")) {
				this.jButtonid_ejercicioDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleProformaBusqueda")) {
				this.jButtonid_ejercicioDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleProformaUpdate")) {
				this.jButtonid_periodoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleProformaBusqueda")) {
				this.jButtonid_periodoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleProformaUpdate")) {
				this.jButtonid_anioDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleProformaBusqueda")) {
				this.jButtonid_anioDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleProformaUpdate")) {
				this.jButtonid_mesDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleProformaBusqueda")) {
				this.jButtonid_mesDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_proformaDetalleProformaUpdate")) {
				this.jButtonid_proformaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_proformaDetalleProformaBusqueda")) {
				this.jButtonid_proformaDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleProformaUpdate")) {
				this.jButtonid_bodegaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleProformaBusqueda")) {
				this.jButtonid_bodegaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleProforma")) {
				this.jButtonid_productoDetalleProformaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleProformaUpdate")) {
				this.jButtonid_productoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleProformaBusqueda")) {
				this.jButtonid_productoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleProformaUpdate")) {
				this.jButtonid_unidadDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleProformaBusqueda")) {
				this.jButtonid_unidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empaqueDetalleProformaUpdate")) {
				this.jButtonid_empaqueDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empaqueDetalleProformaBusqueda")) {
				this.jButtonid_empaqueDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleProformaUpdate")) {
				this.jButtonid_centro_costoDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleProformaBusqueda")) {
				this.jButtonid_centro_costoDetalleProformaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_proformaDetalleProformaUpdate")) {
				this.jButtonid_estado_detalle_proformaDetalleProformaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_proformaDetalleProformaBusqueda")) {
				this.jButtonid_estado_detalle_proformaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleProformaBusqueda")) {
				this.jButtondescripcionDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_envasesDetalleProformaBusqueda")) {
				this.jButtoncantidad_envasesDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleProformaBusqueda")) {
				this.jButtoncantidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleProformaBusqueda")) {
				this.jButtonprecioDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleProformaBusqueda")) {
				this.jButtonivaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_porcentajeDetalleProformaBusqueda")) {
				this.jButtondescuento_porcentajeDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleProformaBusqueda")) {
				this.jButtondescuento_valorDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleProformaBusqueda")) {
				this.jButtonloteDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleProformaBusqueda")) {
				this.jButtontotalDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleProformaBusqueda")) {
				this.jButtoniceDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costoDetalleProformaBusqueda")) {
				this.jButtoncostoDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("utilidadDetalleProformaBusqueda")) {
				this.jButtonutilidadDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("areaDetalleProformaBusqueda")) {
				this.jButtonareaDetalleProformaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("medidaDetalleProformaBusqueda")) {
				this.jButtonmedidaDetalleProformaBusquedaActionPerformed(evt);
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleProforma();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleProforma")) {
				closingInternalFrameDetalleProforma();
				
			} else if(sTipo.equals("jButtonCancelarDetalleProforma")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleProforma = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleProformaBeanSwingJInternalFrame jInternalFrameParent=(DetalleProformaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleProforma.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleProformaActionPerformed(null);
			}
			
			DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleproforma,new Object(),this.detalleproformaParameterGeneral,this.detalleproformaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleProforma(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleProforma(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleProforma(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detalleproforma)) {
			if(!esControlTabla) {
				if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);			
				}
				
				if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleProforma(this.detalleproforma,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleproformaReturnGeneral=detalleproformaLogic.procesarEventosDetalleProformasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproformaLogic.getDetalleProformas(),this.detalleproforma,this.detalleproformaParameterGeneral,this.isEsNuevoDetalleProforma,classes);//this.detalleproformaLogic.getDetalleProforma()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleProforma(this.detalleproformaReturnGeneral,this.detalleproformaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleProforma(classes,this.detalleproformaReturnGeneral,this.detalleproformaBean,false);
					}
						
					if(this.detalleproformaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma());	
					}
						
					if(this.detalleproformaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma(),classes);//this.detalleproformaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleProforma(this.detalleproforma,classes);//this.detalleproformaBean);									
				}
			
				if(DetalleProformaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleProforma(this.detalleproforma,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleProforma(this.detalleproforma);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detalleproformaAnterior!=null) {
						this.detalleproforma=this.detalleproformaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleproformaReturnGeneral=detalleproformaLogic.procesarEventosDetalleProformasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproformaLogic.getDetalleProformas(),this.detalleproforma,this.detalleproformaParameterGeneral,this.isEsNuevoDetalleProforma,classes);//this.detalleproformaLogic.getDetalleProforma()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleproformaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleproformaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detalleproformaReturnGeneral.getDetalleProforma(),detalleproformaLogic.getDetalleProformas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detalleproformaReturnGeneral.getDetalleProforma(),this.detalleproformas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleProforma.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleProforma.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleProforma();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleProforma() throws Exception {
		
		DetalleProformaModel detalleproformaModel=(DetalleProformaModel)this.jTableDatosDetalleProforma.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleproformaModel.detalleproformas=this.detalleproformaLogic.getDetalleProformas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detalleproformaModel.detalleproformas=this.detalleproformas;
		}
		
		
		((DetalleProformaModel) this.jTableDatosDetalleProforma.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleProforma() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetalleproformaAnterior(),this.detalleproformaLogic.getDetalleProformas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetalleproformaAnterior(),this.detalleproformas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleProforma();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleProforma(DetalleProforma detalleproforma,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproforma,new Object(),generalEntityParameterGeneral,this.detalleproformaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detalleproformaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleProformaConstantesFunciones.getClassesRelationshipsOfDetalleProforma(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleProformaConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleProforma(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleProforma(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleProformaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleproforma,new Object(),generalEntityParameterGeneral,this.detalleproformaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleProforma(DetalleProformaBean detalleproformaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleProforma(ArrayList<Classe> classes,DetalleProformaReturnGeneral detalleproformaReturnGeneral,DetalleProformaBean detalleproformaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleProforma(DetalleProforma detalleproforma,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detalleproforma)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleProforma = new DetalleProformaDetalleFormJInternalFrame(jDesktopPane,this.detalleproformaSessionBean.getConGuardarRelaciones(),this.detalleproformaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.setVisible(false);
		this.jInternalFrameDetalleFormDetalleProforma.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleProforma.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleProforma.detalleproformaLogic=this.detalleproformaLogic;
		
		this.cargarCombosFrameForeignKeyDetalleProforma("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleProforma();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleProforma();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleProforma("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleProforma();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleProforma.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleProforma"));
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarDetalleProforma.addActionListener(new ButtonActionListener(this,"ModificarDetalleProforma"));

		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleProforma"));
					
		this.jInternalFrameDetalleFormDetalleProforma.jMenuItemModificarDetalleProforma.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleProforma"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.addActionListener (new ButtonActionListener(this,"ActualizarDetalleProforma"));
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleProforma"));
						
		this.jInternalFrameDetalleFormDetalleProforma.jMenuItemActualizarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleProforma"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.addActionListener (new ButtonActionListener(this,"EliminarDetalleProforma"));
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleProforma"));
								
		this.jInternalFrameDetalleFormDetalleProforma.jMenuItemEliminarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleProforma"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.addActionListener (new ButtonActionListener(this,"CancelarDetalleProforma"));
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleProforma"));
					
		this.jInternalFrameDetalleFormDetalleProforma.jMenuItemCancelarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleProforma"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jMenuItemDetalleCerrarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleProforma"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProforma"));
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProforma"));
		
		
		
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleProforma"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonidDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaBusqueda"));
		//jButtonid_productoDetalleProforma.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleProformaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProforma.addActionListener(new ButtonActionListener(this,"id_productoDetalleProforma"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescripcionDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidad_envasesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_envasesDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonprecioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonivaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_porcentajeDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_valorDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonloteDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtontotalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoniceDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncostoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"costoDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonutilidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"utilidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonareaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"areaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonmedidaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"medidaDetalleProformaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleProforma"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleProforma"));
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleProforma"));
		}
		
		this.jTableDatosDetalleProforma.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleProforma"));
		
		this.jTableDatosDetalleProforma.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleProforma"));
		
		this.jButtonNuevoDetalleProforma.addActionListener(new ButtonActionListener(this,"NuevoDetalleProforma"));
		
		this.jButtonDuplicarDetalleProforma.addActionListener(new ButtonActionListener(this,"DuplicarDetalleProforma"));
		
		this.jButtonCopiarDetalleProforma.addActionListener(new ButtonActionListener(this,"CopiarDetalleProforma"));
		
		this.jButtonVerFormDetalleProforma.addActionListener(new ButtonActionListener(this,"VerFormDetalleProforma"));
		
		
		this.jButtonNuevoToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleProforma"));
			
		this.jButtonDuplicarToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleProforma"));
			
		this.jMenuItemNuevoDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleProforma"));
			
		this.jMenuItemDuplicarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleProforma"));		
		
		
		this.jButtonNuevoRelacionesDetalleProforma.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleProforma"));
		
		
		this.jButtonNuevoRelacionesToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleProforma"));
			
		this.jMenuItemNuevoRelacionesDetalleProforma.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleProforma"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarDetalleProforma.addActionListener(new ButtonActionListener(this,"ModificarDetalleProforma"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonModificarToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleProforma"));
			
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemModificarDetalleProforma.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleProforma"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarDetalleProforma.addActionListener (new ButtonActionListener(this,"ActualizarDetalleProforma"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonActualizarToolBarDetalleProforma.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleProforma"));
				
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemActualizarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleProforma"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarDetalleProforma.addActionListener (new ButtonActionListener(this,"EliminarDetalleProforma"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonEliminarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleProforma"));
						
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemEliminarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleProforma"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarDetalleProforma.addActionListener (new ButtonActionListener(this,"CancelarDetalleProforma"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonCancelarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleProforma"));
			
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemCancelarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleProforma"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleProforma"));		
		
		
		this.jButtonCerrarDetalleProforma.addActionListener (new ButtonActionListener(this,"CerrarDetalleProforma"));
		
		
		this.jButtonCerrarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleProforma"));
			
		this.jMenuItemCerrarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleProforma"));
			
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jMenuItemDetalleCerrarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleProforma"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleProforma"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleProforma"));
		}
		
		this.jButtonCopiarToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleProforma"));
			
		this.jButtonVerFormToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleProforma"));
		
		this.jMenuItemGuardarCambiosDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleProforma"));
			
		this.jMenuItemCopiarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleProforma"));		
		
		this.jMenuItemVerFormDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleProforma"));		
		
		
		this.jButtonGuardarCambiosTablaDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleProforma"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleProforma"));
			
		this.jMenuItemGuardarCambiosTablaDetalleProforma.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleProforma"));		
		
		
		
		this.jButtonRecargarInformacionDetalleProforma.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleProforma"));
					
		this.jButtonRecargarInformacionToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleProforma"));
		
		this.jMenuItemRecargarInformacionDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleProforma"));		
		
		
		
		this.jButtonAnterioresDetalleProforma.addActionListener (new ButtonActionListener(this,"AnterioresDetalleProforma"));
		
		
		this.jButtonAnterioresToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleProforma"));
		
		this.jMenuItemAnterioresDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleProforma"));		
		
		
		this.jButtonSiguientesDetalleProforma.addActionListener (new ButtonActionListener(this,"SiguientesDetalleProforma"));
		
		
		this.jButtonSiguientesToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleProforma"));
			
		this.jMenuItemSiguientesDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleProforma"));
			
		this.jMenuItemAbrirOrderByDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleProforma"));
			
		this.jMenuItemMostrarOcultarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleProforma"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleProforma"));
			
		this.jMenuItemDetalleMostarOcultarDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleProforma"));		
		
		
		this.jButtonNuevoGuardarCambiosDetalleProforma.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleProforma"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleProforma"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleProforma.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleProforma"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleProforma.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleProforma"));

		this.jCheckBoxSeleccionadosDetalleProforma.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleProforma"));
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleProforma"));
		}
		
		
		this.jComboBoxTiposRelacionesDetalleProforma.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleProforma"));
			
		this.jComboBoxTiposAccionesDetalleProforma.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleProforma"));
					
		this.jComboBoxTiposSeleccionarDetalleProforma.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleProforma"));
			
		this.jTextFieldValorCampoGeneralDetalleProforma.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleProforma"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonidDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaBusqueda"));
		//jButtonid_productoDetalleProforma.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleProformaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProforma.addActionListener(new ButtonActionListener(this,"id_productoDetalleProforma"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescripcionDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidad_envasesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_envasesDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonprecioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonivaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_porcentajeDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_valorDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonloteDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtontotalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoniceDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncostoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"costoDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonutilidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"utilidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonareaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"areaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonmedidaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"medidaDetalleProformaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleProforma"));

			this.jButtonFK_IdCentroCostoDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleProforma"));

			this.jButtonFK_IdEmpaqueDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdEmpaqueDetalleProforma"));

			this.jButtonFK_IdEstadoDetalleProformaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleProformaDetalleProforma"));

			this.jButtonFK_IdProductoDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleProforma"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleProforma.addActionListener(new ButtonActionListener(this,"id_productoDetalleProforma"));

			this.jButtonFK_IdProformaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdProformaDetalleProforma"));

			this.jButtonFK_IdUnidadDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleProforma"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetalleProforma!=null) {
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProforma"));
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProforma"));
				this.jInternalFrameReporteDinamicoDetalleProforma.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProforma"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleProforma.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleProforma"));				
			//this.jButtonGenerarReporteDinamicoDetalleProforma.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleProforma"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleProforma.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleProforma"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleProforma!=null) {
				this.jInternalFrameImportacionDetalleProforma.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleProforma"));
				this.jInternalFrameImportacionDetalleProforma.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleProforma"));
				this.jInternalFrameImportacionDetalleProforma.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleProforma"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleProforma.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleProforma"));
			
			this.jButtonAbrirOrderByToolBarDetalleProforma.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleProforma"));			
			
			if(this.jInternalFrameOrderByDetalleProforma!=null) {
				this.jInternalFrameOrderByDetalleProforma.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleProforma"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleProforma.jTabbedPaneRelacionesDetalleProforma.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleProforma"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleProforma();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleProforma.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleProforma = (JInternalFrameBase)event.getSource();
	            	
	            DetalleProformaBeanSwingJInternalFrame jInternalFrameParent=(DetalleProformaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleProforma.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleProformaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleProforma.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleProformaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleProforma.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleProforma.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleProforma";
		inputMap = this.jButtonNuevoDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleProformaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleProformaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleProforma";
		inputMap = this.jButtonNuevoRelacionesDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleProformaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleProforma";
		inputMap = this.jButtonModificarDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleProforma";
		inputMap = this.jButtonActualizarDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleProforma";
		inputMap = this.jButtonEliminarDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleProforma";
		inputMap = this.jButtonCancelarDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleProforma";
		inputMap = this.jButtonCerrarDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleProforma";
		inputMap = this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleProforma.jButtonGuardarCambiosDetalleProforma.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleProformaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleProforma.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleProformaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleProforma.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleProformaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleProforma.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleProformaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleProforma.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleProformaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonidDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empresaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_sucursalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_ejercicioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_periodoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_anioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_mesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_proformaDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_bodegaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleProformaBusqueda"));
		//jButtonid_productoDetalleProforma.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleProformaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProforma.addActionListener(new ButtonActionListener(this,"id_productoDetalleProforma"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_unidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_empaqueDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_empaqueDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_centro_costoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleProformaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonid_estado_detalle_proformaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_proformaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescripcionDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidad_envasesDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_envasesDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncantidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonprecioDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonivaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_porcentajeDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_porcentajeDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtondescuento_valorDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonloteDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtontotalDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoniceDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtoncostoDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"costoDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonutilidadDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"utilidadDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonareaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"areaDetalleProformaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleProforma.jButtonmedidaDetalleProformaBusqueda.addActionListener(new ButtonActionListener(this,"medidaDetalleProformaBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleProforma"));

		this.jButtonFK_IdCentroCostoDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleProforma"));

		this.jButtonFK_IdEmpaqueDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdEmpaqueDetalleProforma"));

		this.jButtonFK_IdEstadoDetalleProformaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleProformaDetalleProforma"));

		this.jButtonFK_IdProductoDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleProforma"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleProforma.addActionListener(new ButtonActionListener(this,"id_productoDetalleProforma"));

		this.jButtonFK_IdProformaDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdProformaDetalleProforma"));

		this.jButtonFK_IdUnidadDetalleProforma.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleProforma"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleProforma.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleProformaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetalleProformaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleProforma.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetalleProforma(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
					detalleproformaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProforma detalleproformaAux:detalleproformas) {
					detalleproformaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleProformaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
						detalleproformaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProforma detalleproformaAux:detalleproformas) {
						detalleproformaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProforma detalleproformaAux:detalleproformas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleProforma(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleProforma.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleProforma.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleProformaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleProforma.getSelectedRows();
			
			DetalleProforma detalleproformaLocal=new DetalleProforma();
			
			//this.seleccionarTodosDetalleProforma(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproformaLocal =(DetalleProforma) this.detalleproformaLogic.getDetalleProformas().toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detalleproformaLocal =(DetalleProforma) this.detalleproformas.toArray()[this.jTableDatosDetalleProforma.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detalleproformaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
						detalleproformaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleProforma detalleproformaAux:detalleproformas) {
						detalleproformaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleProforma(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleProforma.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleProforma.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleProforma,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleProformaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleProformaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleProformaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleProforma.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleProforma detalleproformaAux:this.detalleproformaLogic.getDetalleProformas()) {
				
						if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalleproformaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES)) {
							existe=true;
							detalleproformaAux.setcantidad_envases(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detalleproformaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detalleproformaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detalleproformaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							detalleproformaAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detalleproformaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detalleproformaAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detalleproformaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detalleproformaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_COSTO)) {
							existe=true;
							detalleproformaAux.setcosto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_UTILIDAD)) {
							existe=true;
							detalleproformaAux.setutilidad(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_AREA)) {
							existe=true;
							detalleproformaAux.setarea(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_MEDIDA)) {
							existe=true;
							detalleproformaAux.setmedida(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProforma detalleproformaAux:detalleproformas) {
					
						if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalleproformaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES)) {
							existe=true;
							detalleproformaAux.setcantidad_envases(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detalleproformaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detalleproformaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detalleproformaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE)) {
							existe=true;
							detalleproformaAux.setdescuento_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detalleproformaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detalleproformaAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detalleproformaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detalleproformaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_COSTO)) {
							existe=true;
							detalleproformaAux.setcosto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_UTILIDAD)) {
							existe=true;
							detalleproformaAux.setutilidad(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_AREA)) {
							existe=true;
							detalleproformaAux.setarea(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_MEDIDA)) {
							existe=true;
							detalleproformaAux.setmedida(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleProforma(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleProformaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleProforma=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleProforma.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleProforma) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleProforma(conSplash);
				
					this.generarReporteDetalleProformasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleProformasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleProformasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleProformasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleProforma();
				
				this.exportarDetalleProformasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleProformas();
				//this.importarDetalleProformas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleProforma();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleProformasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Proforma", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleProforma();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleProforma)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleProforma(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleProformaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleProforma) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleProforma(conSplash);
					
						//this.actualizarParametrosGeneralDetalleProforma();
						
						this.generarReporteProcesoAccionDetalleProformasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleProformaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle ProformaS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Proforma", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleProforma();
				
						this.actualizarParametrosGeneralDetalleProforma();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detalleproformaReturnGeneral=detalleproformaLogic.procesarAccionDetalleProformasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detalleproformaLogic.getDetalleProformas(),this.detalleproformaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleProformaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleProforma();
					
					DetalleProformaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleProformaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleProforma.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleProforma.jComboBoxTiposAccionesFormularioDetalleProforma.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleProforma(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleProformaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleProforma();
			
			if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
			DetalleProforma detalleproforma=new DetalleProforma();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleProforma(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleProforma.getSelectedItem();
			
			
			
			
			detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detalleproformasSeleccionados.size()==1) {
				for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
					detalleproforma=detalleproformaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleProforma();
			
      		//this.finishProcessDetalleProforma(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleProformaReturnGeneral() throws Exception {
		if(this.detalleproformaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detalleproformaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detalleproformaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detalleproformaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detalleproformaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detalleproformaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleProforma(false);
		}
		
		if(this.detalleproformaReturnGeneral.getConRetornoLista() || this.detalleproformaReturnGeneral.getConRetornoObjeto()) {
			if(this.detalleproformaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleproformaLogic.setDetalleProformas(this.detalleproformaReturnGeneral.getDetalleProformas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detalleproformaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleproformaLogic.setDetalleProforma(this.detalleproformaReturnGeneral.getDetalleProforma());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleProforma(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleProforma() throws Exception {
		
		
	}
	
	public ArrayList<DetalleProforma> getDetalleProformasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleProforma) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleProforma detalleproformaAux:detalleproformaLogic.getDetalleProformas()) {
					if(detalleproformaAux.getIsSelected()) {
						detalleproformasSeleccionados.add(detalleproformaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleProforma detalleproformaAux:this.detalleproformas) {
					if(detalleproformaAux.getIsSelected()) {
						detalleproformasSeleccionados.add(detalleproformaAux);				
					}
				}
			}
			
			if(detalleproformasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detalleproformasSeleccionados.addAll(this.detalleproformaLogic.getDetalleProformas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detalleproformasSeleccionados.addAll(this.detalleproformas);				
					}
				}
			}
		} else {
			detalleproformasSeleccionados.add(this.detalleproforma);
		}
		
		return detalleproformasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleProformasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleProformasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleProformasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleProformasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleProformasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Proforma",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleProformasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetalleProforma();
		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetalleProforma();
		
		
		//this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados ,detalleproformaImplementable,detalleproformaImplementableHome);
	}
	
	public void mostrarImportacionDetalleProformas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetalleProforma();
		
		this.abrirFrameImportacionDetalleProforma();		
		
			
		//this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados ,detalleproformaImplementable,detalleproformaImplementableHome);
	}
	
	public void importarDetalleProformas() throws Exception {		
	
	}
	
	public void exportarDetalleProformasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleProformasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleProformasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleProformasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Proforma",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleProforma(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleProforma(detalleproformaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detalleproformaAux.setsDetalleGeneralEntityReporte(detalleproformaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleProforma(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_PRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_LOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_COSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_UTILIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_AREA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleProformaConstantesFunciones.LABEL_MEDIDA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleProforma(DetalleProforma detalleproforma,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detalleproforma.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getproforma_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getempaque_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getestadodetalleproforma_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getcantidad_envases().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getprecio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getdescuento_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getlote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getcosto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getutilidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getarea();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleproforma.getmedida();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleProformas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleProforma(row);				
				iRow++;
			}				
			
			for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleProforma(detalleproformaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleProformasSeleccionados() throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();		
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleproforma.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detalleproformas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detalleproforma");
			//elementRoot.appendChild(element);
		
			for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
				element = document.createElement("detalleproforma");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleProforma(detalleproformaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Proforma",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleProforma(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDADENVASES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_PRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_LOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_COSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_UTILIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_AREA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleProformaConstantesFunciones.LABEL_MEDIDA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleProforma(DetalleProforma detalleproforma,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getproforma_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getempaque_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getestadodetalleproforma_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getcantidad_envases());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getprecio());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getdescuento_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getlote());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getcosto());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getutilidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getarea());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleproforma.getmedida());				
	}
	
	public void setFilaDatosExportarXmlDetalleProforma(DetalleProforma detalleproforma,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleProformaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detalleproforma.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleProformaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detalleproforma.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detalleproforma.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detalleproforma.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detalleproforma.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detalleproforma.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detalleproforma.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detalleproforma.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementproforma_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDPROFORMA);
		elementproforma_descripcion.appendChild(document.createTextNode(detalleproforma.getproforma_descripcion()));
		element.appendChild(elementproforma_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detalleproforma.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detalleproforma.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detalleproforma.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementempaque_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDEMPAQUE);
		elementempaque_descripcion.appendChild(document.createTextNode(detalleproforma.getempaque_descripcion()));
		element.appendChild(elementempaque_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detalleproforma.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementestadodetalleproforma_descripcion = document.createElement(DetalleProformaConstantesFunciones.IDESTADODETALLEPROFORMA);
		elementestadodetalleproforma_descripcion.appendChild(document.createTextNode(detalleproforma.getestadodetalleproforma_descripcion()));
		element.appendChild(elementestadodetalleproforma_descripcion);

		Element elementdescripcion = document.createElement(DetalleProformaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detalleproforma.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcantidad_envases = document.createElement(DetalleProformaConstantesFunciones.CANTIDADENVASES);
		elementcantidad_envases.appendChild(document.createTextNode(detalleproforma.getcantidad_envases().toString().trim()));
		element.appendChild(elementcantidad_envases);

		Element elementcantidad = document.createElement(DetalleProformaConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detalleproforma.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementprecio = document.createElement(DetalleProformaConstantesFunciones.PRECIO);
		elementprecio.appendChild(document.createTextNode(detalleproforma.getprecio().toString().trim()));
		element.appendChild(elementprecio);

		Element elementiva = document.createElement(DetalleProformaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detalleproforma.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementdescuento_porcentaje = document.createElement(DetalleProformaConstantesFunciones.DESCUENTOPORCENTAJE);
		elementdescuento_porcentaje.appendChild(document.createTextNode(detalleproforma.getdescuento_porcentaje().toString().trim()));
		element.appendChild(elementdescuento_porcentaje);

		Element elementdescuento_valor = document.createElement(DetalleProformaConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(detalleproforma.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementlote = document.createElement(DetalleProformaConstantesFunciones.LOTE);
		elementlote.appendChild(document.createTextNode(detalleproforma.getlote().trim()));
		element.appendChild(elementlote);

		Element elementtotal = document.createElement(DetalleProformaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(detalleproforma.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementice = document.createElement(DetalleProformaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detalleproforma.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementcosto = document.createElement(DetalleProformaConstantesFunciones.COSTO);
		elementcosto.appendChild(document.createTextNode(detalleproforma.getcosto().toString().trim()));
		element.appendChild(elementcosto);

		Element elementutilidad = document.createElement(DetalleProformaConstantesFunciones.UTILIDAD);
		elementutilidad.appendChild(document.createTextNode(detalleproforma.getutilidad().toString().trim()));
		element.appendChild(elementutilidad);

		Element elementarea = document.createElement(DetalleProformaConstantesFunciones.AREA);
		elementarea.appendChild(document.createTextNode(detalleproforma.getarea().trim()));
		element.appendChild(elementarea);

		Element elementmedida = document.createElement(DetalleProformaConstantesFunciones.MEDIDA);
		elementmedida.appendChild(document.createTextNode(detalleproforma.getmedida().trim()));
		element.appendChild(elementmedida);
	}
	
	public void generarReporteGroupGenericoDetalleProformasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleProforma> detalleproformasSeleccionados=new ArrayList<DetalleProforma>();
		
		detalleproformasSeleccionados=this.getDetalleProformasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleProforma(detalleproformasSeleccionados);
		
		this.generarReporteDetalleProformas("Todos",detalleproformasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleProforma(ArrayList<DetalleProforma> detalleproformasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleProforma detalleproformaAux:detalleproformasSeleccionados) {
				detalleproformaAux.setsDetalleGeneralEntityReporte(detalleproformaAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDPROFORMA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getproforma_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDEMPAQUE)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getempaque_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_IDESTADODETALLEPROFORMA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getestadodetalleproforma_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_LOTE)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getlote());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_AREA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getarea());
				}
				 else if(sTipoSeleccionar.equals(DetalleProformaConstantesFunciones.LABEL_MEDIDA)) {
					existe=true;
					detalleproformaAux.setsDescripcionGeneralEntityReporte1(detalleproformaAux.getmedida());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleProformaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleProforma(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleProforma=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleProforma=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=true;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=true;
			this.isVisibilidadCeldaEliminarDetalleProforma=true;
			this.isVisibilidadCeldaCancelarDetalleProforma=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=true;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleProforma=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=true;
			this.isVisibilidadCeldaModificarDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
			this.isVisibilidadCeldaModificarDetalleProforma=true;
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
			this.isVisibilidadCeldaCancelarDetalleProforma=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleProforma=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleProformaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleProforma=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=true;
		} else {
			this.actualizarEstadoPanelsDetalleProforma(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleProforma=false;
			//this.isVisibilidadCeldaVerFormDetalleProforma=false;
			this.isVisibilidadCeldaDuplicarDetalleProforma=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detalleproformaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleProforma=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleProforma=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detalleproformaSessionBean.getEsGuardarRelacionado()) {
			if(!detalleproformaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;												
			}
			
			this.jButtonCerrarDetalleProforma.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleProforma=false;
		}
		
		if(!this.permiteMantenimiento(this.detalleproforma)) {
			this.isVisibilidadCeldaActualizarDetalleProforma=false;
			this.isVisibilidadCeldaEliminarDetalleProforma=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleProforma() {
	}
	
	public void actualizarEstadoPanelsDetalleProforma(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleProforma!=null) {
				this.jScrollPanelDatosEdicionDetalleProforma.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleProforma!=null) {
				this.jScrollPanelDatosDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleProforma!=null) {
				this.jPanelPaginacionDetalleProforma.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
					this.jTabbedPaneBusquedasDetalleProforma.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detalleproformaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleProforma!=null) {
				this.jTabbedPaneBusquedasDetalleProforma.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetalleProforma!=null) {
				this.jPanelParametrosReportesDetalleProforma.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaProforma(Boolean isParaProforma){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProformaNegation=!isParaProforma;

			this.isVisibilidadFK_IdBodega=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaProforma;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaProformaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpaque(Boolean isParaEmpaque){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpaqueNegation=!isParaEmpaque;

			this.isVisibilidadFK_IdBodega=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaEmpaque;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaEmpaqueNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoDetalleProforma(Boolean isParaEstadoDetalleProforma){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoDetalleProformaNegation=!isParaEstadoDetalleProforma;

			this.isVisibilidadFK_IdBodega=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdBodegaDetalleProforma);}

			this.isVisibilidadFK_IdCentroCosto=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdCentroCostoDetalleProforma);}

			this.isVisibilidadFK_IdEmpaque=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdEmpaque) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEmpaqueDetalleProforma);}

			this.isVisibilidadFK_IdEstadoDetalleProforma=isParaEstadoDetalleProforma;
			if(!this.isVisibilidadFK_IdEstadoDetalleProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdEstadoDetalleProformaDetalleProforma);}

			this.isVisibilidadFK_IdProducto=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProductoDetalleProforma);}

			this.isVisibilidadFK_IdProforma=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdProforma) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdProformaDetalleProforma);}

			this.isVisibilidadFK_IdUnidad=isParaEstadoDetalleProformaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleProforma.remove(jPanelFK_IdUnidadDetalleProforma);}
		}
		
	}
	
	
	
	

	public String registrarSesionDetalleProformaParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detalleproformaSessionBean==null) {
				detalleproformaSessionBean=new DetalleProformaSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detalleproformaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detalleproformaFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleProformaConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleProforma(true);
			//productoSessionBean.setlidDetalleProformaActual(this.idDetalleProformaActual);

			detalleproformaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleProforma(true);
			detalleproformaSessionBean.setlIdDetalleProformaActualForeignKey(this.idDetalleProformaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleProformaSessionBean detalleproformaSessionBean=new DetalleProformaSessionBean();
		
		if(this.detalleproformaSessionBean==null) {
			this.detalleproformaSessionBean=new DetalleProformaSessionBean();
		}
		
		this.detalleproformaSessionBean.setsUltimaBusquedaDetalleProforma(this.getsAccionBusqueda());
		this.detalleproformaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detalleproformaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detalleproformaSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detalleproformaSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detalleproformaSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpaque")) {
			detalleproformaSessionBean.setid_empaque(this.getid_empaqueFK_IdEmpaque());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detalleproformaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleProforma")) {
			detalleproformaSessionBean.setid_estado_detalle_proforma(this.getid_estado_detalle_proformaFK_IdEstadoDetalleProforma());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detalleproformaSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detalleproformaSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProforma")) {
			detalleproformaSessionBean.setid_proforma(this.getid_proformaFK_IdProforma());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detalleproformaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detalleproformaSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleProformaSessionBean detalleproformaSessionBean=new DetalleProformaSessionBean();
		
		if(this.detalleproformaSessionBean==null) {
			this.detalleproformaSessionBean=new DetalleProformaSessionBean();
		}
		
		if(this.detalleproformaSessionBean.getsUltimaBusquedaDetalleProforma()!=null&&!this.detalleproformaSessionBean.getsUltimaBusquedaDetalleProforma().equals("")) {
			this.setsAccionBusqueda(detalleproformaSessionBean.getsUltimaBusquedaDetalleProforma());
			this.setiNumeroPaginacion(detalleproformaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detalleproformaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detalleproformaSessionBean.getid_bodega());
				detalleproformaSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detalleproformaSessionBean.getid_centro_costo());
				detalleproformaSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detalleproformaSessionBean.getid_ejercicio());
				detalleproformaSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpaque")) {
				this.setid_empaqueFK_IdEmpaque(detalleproformaSessionBean.getid_empaque());
				detalleproformaSessionBean.setid_empaque(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detalleproformaSessionBean.getid_empresa());
				detalleproformaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleProforma")) {
				this.setid_estado_detalle_proformaFK_IdEstadoDetalleProforma(detalleproformaSessionBean.getid_estado_detalle_proforma());
				detalleproformaSessionBean.setid_estado_detalle_proforma(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detalleproformaSessionBean.getid_periodo());
				detalleproformaSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detalleproformaSessionBean.getid_producto());
				detalleproformaSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProforma")) {
				this.setid_proformaFK_IdProforma(detalleproformaSessionBean.getid_proforma());
				detalleproformaSessionBean.setid_proforma(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detalleproformaSessionBean.getid_sucursal());
				detalleproformaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detalleproformaSessionBean.getid_unidad());
				detalleproformaSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detalleproformaSessionBean.setsUltimaBusquedaDetalleProforma("");
		this.detalleproformaSessionBean.setiNumeroPaginacion(DetalleProformaConstantesFunciones.INUMEROPAGINACION);
		this.detalleproformaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleProforma(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleProforma() {
		this.updateBorderResaltarBusquedasFormularioDetalleProforma();
		this.updateVisibilidadBusquedasFormularioDetalleProforma();
		this.updateHabilitarBusquedasFormularioDetalleProforma();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleProforma() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleProforma.getComponents().length>0) {
	

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdBodegaDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdBodegaDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdBodegaDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdCentroCostoDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdCentroCostoDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdEmpaqueDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEmpaqueDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdEmpaqueDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdEstadoDetalleProformaDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEstadoDetalleProformaDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdEstadoDetalleProformaDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdProductoDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProductoDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdProductoDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdProformaDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProformaDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdProformaDetalleProforma);
			}
		}

		if(this.detalleproformaConstantesFunciones.resaltarFK_IdUnidadDetalleProforma!=null) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdUnidadDetalleProforma);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdUnidadDetalleProforma);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleProforma() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleProforma.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdBodegaDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdBodegaDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdBodegaDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdCentroCostoDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdCentroCostoDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEmpaqueDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdEmpaqueDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdEmpaqueDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEstadoDetalleProformaDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdEstadoDetalleProformaDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdEstadoDetalleProformaDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProductoDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdProductoDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdProductoDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProformaDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdProformaDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdProformaDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdUnidadDetalleProforma);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleproformaConstantesFunciones.mostrarFK_IdUnidadDetalleProforma);
			if(!this.detalleproformaConstantesFunciones.mostrarFK_IdUnidadDetalleProforma && index>-1) {
				this.jTabbedPaneBusquedasDetalleProforma.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetalleProforma() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleProforma.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdBodegaDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdBodegaDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdBodegaDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdCentroCostoDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdCentroCostoDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEmpaqueDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdEmpaqueDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdEmpaqueDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEstadoDetalleProformaDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdEstadoDetalleProformaDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdEstadoDetalleProformaDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProductoDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdProductoDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdProductoDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProformaDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdProformaDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdProformaDetalleProforma);
			}

			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdUnidadDetalleProforma);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleproformaConstantesFunciones.activarFK_IdUnidadDetalleProforma);
				this.jTabbedPaneBusquedasDetalleProforma.setEnabledAt(index,this.detalleproformaConstantesFunciones.activarFK_IdUnidadDetalleProforma);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetalleProforma(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdBodegaDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdBodegaDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdBodegaDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdCentroCostoDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdCentroCostoDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpaque")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEmpaqueDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdEmpaqueDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdEmpaqueDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoDetalleProforma")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdEstadoDetalleProformaDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdEstadoDetalleProformaDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdEstadoDetalleProformaDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProductoDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdProductoDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdProductoDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProforma")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdProformaDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdProformaDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdProformaDetalleProforma);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleProforma.indexOfComponent(this.jPanelFK_IdUnidadDetalleProforma);

			this.jTabbedPaneBusquedasDetalleProforma.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleProforma.getComponent(index);

			this.detalleproformaConstantesFunciones.setResaltarFK_IdUnidadDetalleProforma(resaltar);

			jPanel.setBorder(this.detalleproformaConstantesFunciones.resaltarFK_IdUnidadDetalleProforma);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetalleProforma.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleProforma() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleProforma();
		this.updateVisibilidadResaltarControlesFormularioDetalleProforma();
		this.updateHabilitarResaltarControlesFormularioDetalleProforma();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleProforma() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detalleproformaConstantesFunciones.resaltaridDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltaridDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_empresaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_empresaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_sucursalDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_sucursalDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_ejercicioDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_ejercicioDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_periodoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_periodoDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_anioDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_anioDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_mesDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_mesDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_proformaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_proformaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_bodegaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_bodegaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_productoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_productoDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_unidadDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_unidadDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_empaqueDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_empaqueDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_centro_costoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_centro_costoDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarid_estado_detalle_proformaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarid_estado_detalle_proformaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltardescripcionDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltardescripcionDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarcantidad_envasesDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarcantidad_envasesDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarcantidadDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarcantidadDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarprecioDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarprecioDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarivaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarivaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltardescuento_porcentajeDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltardescuento_porcentajeDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltardescuento_valorDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltardescuento_valorDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarloteDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarloteDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltartotalDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltartotalDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltariceDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldiceDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltariceDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarcostoDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcostoDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarcostoDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarutilidadDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextFieldutilidadDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarutilidadDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarareaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextAreaareaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarareaDetalleProforma);}
		if(this.detalleproformaConstantesFunciones.resaltarmedidaDetalleProforma!=null && this.jInternalFrameDetalleFormDetalleProforma!=null) {this.jInternalFrameDetalleFormDetalleProforma.jTextAreamedidaDetalleProforma.setBorder(this.detalleproformaConstantesFunciones.resaltarmedidaDetalleProforma);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleProforma() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
	
		//this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostraridDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelidDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostraridDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_empresaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_empresaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_empresaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_sucursalDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_sucursalDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_sucursalDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_ejercicioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_ejercicioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_ejercicioDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_periodoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_periodoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_periodoDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_anioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_anioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_anioDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_mesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_mesDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_mesDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_proformaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_proformaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_proformaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_bodegaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_bodegaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_bodegaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_productoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_productoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_productoDetalleProforma);
			this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_productoDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_unidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_unidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_unidadDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_empaqueDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_empaqueDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_empaqueDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_centro_costoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_centro_costoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_centro_costoDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_estado_detalle_proformaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelid_estado_detalle_proformaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarid_estado_detalle_proformaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescripcionDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPaneldescripcionDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescripcionDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcantidad_envasesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelcantidad_envasesDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcantidad_envasesDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcantidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelcantidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcantidadDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarprecioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelprecioDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarprecioDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarivaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelivaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarivaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescuento_porcentajeDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPaneldescuento_porcentajeDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescuento_porcentajeDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescuento_valorDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPaneldescuento_valorDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrardescuento_valorDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarloteDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelloteDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarloteDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrartotalDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPaneltotalDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrartotalDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldiceDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrariceDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPaneliceDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrariceDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcostoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcostoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelcostoDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarcostoDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextFieldutilidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarutilidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelutilidadDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarutilidadDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextAreaareaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarareaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelareaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarareaDetalleProforma);
		//this.jInternalFrameDetalleFormDetalleProforma.jTextAreamedidaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarmedidaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jPanelmedidaDetalleProforma.setVisible(this.detalleproformaConstantesFunciones.mostrarmedidaDetalleProforma);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleProforma() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleProforma==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleProforma!=null) {
	
		this.jInternalFrameDetalleFormDetalleProforma.jLabelidDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activaridDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empresaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_empresaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_sucursalDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_sucursalDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_ejercicioDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_ejercicioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_periodoDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_periodoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_anioDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_anioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_mesDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_mesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_proformaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_proformaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_bodegaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_bodegaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_productoDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_productoDetalleProforma);
			this.jInternalFrameDetalleFormDetalleProforma.jButtonid_productoDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_productoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_unidadDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_unidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_empaqueDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_empaqueDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_centro_costoDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_centro_costoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jComboBoxid_estado_detalle_proformaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarid_estado_detalle_proformaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreadescripcionDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activardescripcionDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidad_envasesDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarcantidad_envasesDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcantidadDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarcantidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldprecioDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarprecioDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldivaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarivaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_porcentajeDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activardescuento_porcentajeDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFielddescuento_valorDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activardescuento_valorDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldloteDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarloteDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldtotalDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activartotalDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldiceDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activariceDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldcostoDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarcostoDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextFieldutilidadDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarutilidadDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreaareaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarareaDetalleProforma);
		this.jInternalFrameDetalleFormDetalleProforma.jTextAreamedidaDetalleProforma.setEnabled(this.detalleproformaConstantesFunciones.activarmedidaDetalleProforma);
		}
	}
	
		
}